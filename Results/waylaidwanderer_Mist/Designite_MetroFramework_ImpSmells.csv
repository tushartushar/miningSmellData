Implementation smell,Namespace,Class,File,Method,Description
Long Method,MetroFramework.Drawing.Html,CssTable,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssTable.cs,Analyze,The method has 317 lines of code.
Long Method,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,GetActualColor,The method has 105 lines of code.
Long Method,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The method has 137 lines of code.
Complex Method,MetroFramework.Components,MetroStyleManager,C:\repos\waylaidwanderer_Mist\MetroFramework\Components\MetroStyleManager.cs,UpdateControl,Cyclomatic complexity of the method is 9
Complex Method,MetroFramework.Controls,MetroScrollBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroScrollBar.cs,ProcessDialogKey,Cyclomatic complexity of the method is 9
Complex Method,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,Cyclomatic complexity of the method is 10
Complex Method,MetroFramework.Drawing.Html,CssBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssBox.cs,MeasureBounds,Cyclomatic complexity of the method is 9
Complex Method,MetroFramework.Drawing.Html,CssBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssBox.cs,Paint,Cyclomatic complexity of the method is 10
Complex Method,MetroFramework.Drawing.Html,CssBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssBox.cs,PaintBorder,Cyclomatic complexity of the method is 8
Complex Method,MetroFramework.Drawing.Html,CssBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssBox.cs,PaintBackground,Cyclomatic complexity of the method is 8
Complex Method,MetroFramework.Drawing.Html,CssTable,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssTable.cs,Analyze,Cyclomatic complexity of the method is 37
Complex Method,MetroFramework.Drawing.Html,InitialContainer,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\InitialContainer.cs,FeedStyleSheet,Cyclomatic complexity of the method is 11
Complex Method,MetroFramework.Drawing.Html,InitialContainer,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\InitialContainer.cs,CascadeStyles,Cyclomatic complexity of the method is 10
Long Parameter List,MetroFramework.Animation,AnimationBase,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\AnimationBase.cs,Start,The method has 5 parameters. Parameters: control' transitionType' duration' actionHandler' evaluatorHandler
Long Parameter List,MetroFramework.Animation,DelayedCall<T1;T2;T3>,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\DelayedCall.cs,Create,The method has 5 parameters. Parameters: cb' data1' data2' data3' milliseconds
Long Parameter List,MetroFramework.Animation,DelayedCall<T1;T2;T3>,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\DelayedCall.cs,CreateAsync,The method has 5 parameters. Parameters: cb' data1' data2' data3' milliseconds
Long Parameter List,MetroFramework.Animation,DelayedCall<T1;T2;T3>,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\DelayedCall.cs,Start,The method has 5 parameters. Parameters: cb' data1' data2' data3' milliseconds
Long Parameter List,MetroFramework.Animation,DelayedCall<T1;T2;T3>,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\DelayedCall.cs,StartAsync,The method has 5 parameters. Parameters: cb' data1' data2' data3' milliseconds
Long Parameter List,MetroFramework.Controls,MetroScrollBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroScrollBar.cs,SetBoundsCore,The method has 5 parameters. Parameters: x' y' width' height' specified
Long Parameter List,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetBorderPath,The method has 5 parameters. Parameters: border' b' r' isLineStart' isLineEnd
Long Parameter List,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetRoundRect,The method has 5 parameters. Parameters: rect' nwRadius' neRadius' seRadius' swRadius
Long Parameter List,MetroFramework.Drawing.Html,CssLayoutEngine,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssLayoutEngine.cs,FlowBox,The method has 10 parameters. Parameters: g' blockbox' box' maxright' linespacing' startx' line' curx' cury' maxbottom
Long Parameter List,MetroFramework.Drawing.Html,CssLineBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssLineBox.cs,UpdateRectangle,The method has 5 parameters. Parameters: box' x' y' r' b
Long Parameter List,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,ParseLength,The method has 5 parameters. Parameters: length' hundredPercent' box' emFactor' returnPoints
Long Parameter List,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,MeasureText,The method has 5 parameters. Parameters: g' clientRectangle' font' text' flags
Long Parameter List,MetroFramework.Forms,MetroAeroDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,SetBoundsCore,The method has 5 parameters. Parameters: x' y' width' height' specified
Long Parameter List,MetroFramework.Forms,MetroRealisticDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,DrawOutsetShadow,The method has 6 parameters. Parameters: hShadow' vShadow' blur' spread' color' shadowCanvasArea
Long Parameter List,MetroFramework.Forms,MetroRealisticDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,DrawRoundedRectangle,The method has 5 parameters. Parameters: g' bounds' cornerRadius' drawPen' fillColor
Long Parameter List,MetroFramework.Localization,MetroLocalize,C:\repos\waylaidwanderer_Mist\MetroFramework\Localization\MetroLocalize.cs,getValue,The method has 5 parameters. Parameters: key' var1' var2' var3' var4
Long Parameter List,MetroFramework.Localization,MetroLocalize,C:\repos\waylaidwanderer_Mist\MetroFramework\Localization\MetroLocalize.cs,getValue,The method has 6 parameters. Parameters: key' var1' var2' var3' var4' var5
Long Parameter List,MetroFramework,MetroMessageBox,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBox.cs,Show,The method has 5 parameters. Parameters: owner' message' title' buttons' icon
Long Parameter List,MetroFramework,MetroMessageBox,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBox.cs,Show,The method has 6 parameters. Parameters: owner' message' title' buttons' icon' defaultbutton
Long Parameter List,MetroFramework.Native,DwmApi,C:\repos\waylaidwanderer_Mist\MetroFramework\Native\DwmApi.cs,DwmDefWindowProc,The method has 5 parameters. Parameters: hwnd' msg' wParam' lParam' result
Long Parameter List,MetroFramework.Native,WinApi,C:\repos\waylaidwanderer_Mist\MetroFramework\Native\WinApi.cs,UpdateLayeredWindow,The method has 9 parameters. Parameters: hwnd' hdcDst' pptDst' psize' hdcSrc' pprSrc' crKey' pblend' dwFlags
Long Parameter List,MetroFramework.Native,WinApi,C:\repos\waylaidwanderer_Mist\MetroFramework\Native\WinApi.cs,MoveWindow,The method has 6 parameters. Parameters: hwnd' X' Y' nWidth' nHeight' bRepaint
Long Identifier,MetroFramework.Drawing.Html,CssBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssBox.cs,,The length of the parameter _actualBackgroundGradientAngle is 30.
Long Identifier,MetroFramework.Drawing.Html,CssBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssBox.cs,,The length of the parameter _actualBorderSpacingHorizontal is 30.
Long Identifier,MetroFramework.Native,DwmApi,C:\repos\waylaidwanderer_Mist\MetroFramework\Native\DwmApi.cs,,The length of the parameter DWM_COMPOSED_EVENT_NAME_FORMAT is 30.
Long Identifier,MetroFramework.Native,DwmApi,C:\repos\waylaidwanderer_Mist\MetroFramework\Native\DwmApi.cs,,The length of the parameter DWM_COMPOSED_EVENT_NAME_MAX_LENGTH is 34.
Long Statement,MetroFramework.Animation,DelayedCall,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\DelayedCall.cs,PrepareDCObject,The length of the statement  "                    throw new InvalidOperationException("Cannot delay calls synchronously on a non-UI thread. Use the *Async methods instead."); " is 124.
Long Statement,MetroFramework.Components,MetroToolTip,C:\repos\waylaidwanderer_Mist\MetroFramework\Components\MetroToolTip.cs,MetroToolTip_Draw,The length of the statement  "            TextRenderer.DrawText(e.Graphics' e.ToolTipText' f' e.Bounds' foreColor' TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter); " is 140.
Long Statement,MetroFramework.Controls,MetroButton,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroButton.cs,OnPaintForeground,The length of the statement  "            TextRenderer.DrawText(e.Graphics' Text' MetroFonts.Button(metroButtonSize' metroButtonWeight)' ClientRectangle' foreColor' MetroPaint.GetTextFormatFlags(TextAlign)); " is 165.
Long Statement,MetroFramework.Controls,MetroCheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroCheckBox.cs,OnPaintForeground,The length of the statement  "            TextRenderer.DrawText(e.Graphics' Text' MetroFonts.CheckBox(metroCheckBoxSize' metroCheckBoxWeight)' textRect' foreColor' MetroPaint.GetTextFormatFlags(TextAlign)); " is 164.
Long Statement,MetroFramework.Controls,MetroCheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroCheckBox.cs,GetPreferredSize,The length of the statement  "                preferredSize = TextRenderer.MeasureText(g' Text' MetroFonts.CheckBox(metroCheckBoxSize' metroCheckBoxWeight)' proposedSize' MetroPaint.GetTextFormatFlags(TextAlign)); " is 167.
Long Statement,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,OnPaintForeground,The length of the statement  "                e.Graphics.FillPolygon(b' new Point[] { new Point(Width - 20' (Height / 2) - 2)' new Point(Width - 9' (Height / 2) - 2)' new Point(Width - 15' (Height / 2) + 4) }); " is 164.
Long Statement,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,OnPaintForeground,The length of the statement  "            TextRenderer.DrawText(e.Graphics' Text' MetroFonts.ComboBox(metroComboBoxSize' metroComboBoxWeight)' textRect' foreColor' TextFormatFlags.Left | TextFormatFlags.VerticalCenter); " is 177.
Long Statement,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,OnDrawItem,The length of the statement  "                TextRenderer.DrawText(e.Graphics' GetItemText(Items[e.Index])' MetroFonts.ComboBox(metroComboBoxSize' metroComboBoxWeight)' textRect' foreColor' TextFormatFlags.Left | TextFormatFlags.VerticalCenter); " is 200.
Long Statement,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,DrawTextPrompt,The length of the statement  "            TextRenderer.DrawText(g' promptText' MetroFonts.ComboBox(metroComboBoxSize' metroComboBoxWeight)' textRect' SystemColors.GrayText' backColor' TextFormatFlags.Left | TextFormatFlags.VerticalCenter | TextFormatFlags.EndEllipsis); " is 227.
Long Statement,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,GetPreferredSize,The length of the statement  "                preferredSize = TextRenderer.MeasureText(g' measureText' MetroFonts.ComboBox(metroComboBoxSize' metroComboBoxWeight)' proposedSize' TextFormatFlags.Left | TextFormatFlags.LeftAndRightPadding | TextFormatFlags.VerticalCenter); " is 225.
Long Statement,MetroFramework.Controls,MetroLabel,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroLabel.cs,OnPaintForeground,The length of the statement  "                    TextRenderer.DrawText(e.Graphics' Text' MetroFonts.Label(metroLabelSize' metroLabelWeight)' ClientRectangle' foreColor' MetroPaint.GetTextFormatFlags(TextAlign)); " is 162.
Long Statement,MetroFramework.Controls,MetroLabel,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroLabel.cs,OnPaintForeground,The length of the statement  "                TextRenderer.DrawText(e.Graphics' Text' MetroFonts.Label(metroLabelSize' metroLabelWeight)' ClientRectangle' foreColor' MetroPaint.GetTextFormatFlags(TextAlign' wrapToLine)); " is 174.
Long Statement,MetroFramework.Controls,MetroLabel,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroLabel.cs,GetPreferredSize,The length of the statement  "                preferredSize = TextRenderer.MeasureText(g' Text' MetroFonts.Label(metroLabelSize' metroLabelWeight)' proposedSize' MetroPaint.GetTextFormatFlags(TextAlign)); " is 158.
Long Statement,MetroFramework.Controls,MetroLink,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroLink.cs,OnPaintForeground,The length of the statement  "            TextRenderer.DrawText(e.Graphics' Text' MetroFonts.Link(metroLinkSize' metroLinkWeight)' ClientRectangle' foreColor' MetroPaint.GetTextFormatFlags(TextAlign)); " is 159.
Long Statement,MetroFramework.Controls,MetroProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressBar.cs,DrawProgressText,The length of the statement  "            TextRenderer.DrawText(graphics' ProgressPercentText' MetroFonts.ProgressBar(metroLabelSize' metroLabelWeight)' ClientRectangle' foreColor' MetroPaint.GetTextFormatFlags(TextAlign)); " is 181.
Long Statement,MetroFramework.Controls,MetroProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressBar.cs,GetPreferredSize,The length of the statement  "                preferredSize = TextRenderer.MeasureText(g' ProgressPercentText' MetroFonts.ProgressBar(metroLabelSize' metroLabelWeight)' proposedSize' MetroPaint.GetTextFormatFlags(TextAlign)); " is 179.
Long Statement,MetroFramework.Controls,MetroProgressSpinner,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressSpinner.cs,OnPaintForeground,The length of the statement  "                            e.Graphics.DrawArc(gradPen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' startAngle' sweepAngle); " is 121.
Long Statement,MetroFramework.Controls,MetroRadioButton,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroRadioButton.cs,OnPaintForeground,The length of the statement  "            TextRenderer.DrawText(e.Graphics' Text' MetroFonts.CheckBox(metroCheckBoxSize' metroCheckBoxWeight)' textRect' foreColor' MetroPaint.GetTextFormatFlags(TextAlign)); " is 164.
Long Statement,MetroFramework.Controls,MetroRadioButton,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroRadioButton.cs,GetPreferredSize,The length of the statement  "                preferredSize = TextRenderer.MeasureText(g' Text' MetroFonts.CheckBox(metroCheckBoxSize' metroCheckBoxWeight)' proposedSize' MetroPaint.GetTextFormatFlags(TextAlign)); " is 167.
Long Statement,MetroFramework.Controls,MetroScrollBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroScrollBar.cs,DrawScrollBar,The length of the statement  "                var thumbRect = new Rectangle(thumbRectangle.X - 1' thumbRectangle.Y - 1' thumbRectangle.Width + 2' thumbRectangle.Height + 2); " is 127.
Long Statement,MetroFramework.Controls,MetroScrollBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroScrollBar.cs,OnMouseDown,The length of the statement  "                    thumbPosition = metroOrientation == MetroScrollOrientation.Vertical ? mouseLocation.Y - thumbRectangle.Y : mouseLocation.X - thumbRectangle.X; " is 142.
Long Statement,MetroFramework.Controls,MetroScrollBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroScrollBar.cs,OnMouseMove,The length of the statement  "                    int thumbSize = metroOrientation == MetroScrollOrientation.Vertical ? (pos / Height) / thumbHeight : (pos / Width) / thumbWidth; " is 128.
Long Statement,MetroFramework.Controls,MetroScrollBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroScrollBar.cs,GetThumbPosition,The length of the statement  "            int thumbSize = metroOrientation == MetroScrollOrientation.Vertical ? (thumbPosition / Height) / thumbHeight : (thumbPosition / Width) / thumbWidth; " is 148.
Long Statement,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,DrawTabBottomBorder,The length of the statement  "                Rectangle borderRectangle = new Rectangle(DisplayRectangle.X' GetTabRect(index).Bottom + 2 - TabBottomBorderHeight' DisplayRectangle.Width' TabBottomBorderHeight); " is 163.
Long Statement,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,DrawTabSelected,The length of the statement  "                Rectangle borderRectangle = new Rectangle(selectedTabRect.X + ((index == 0) ? 2 : 0)' GetTabRect(index).Bottom + 2 - TabBottomBorderHeight' selectedTabRect.Width + ((index == 0) ? 0 : 2)' TabBottomBorderHeight); " is 211.
Long Statement,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,DrawUpDown,The length of the statement  "                PointF[] pts2 = { new PointF(borderRect.Width - 15' 0)' new PointF(borderRect.Width - 5' 6)' new PointF(borderRect.Width - 15' 12) }; " is 133.
Long Statement,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The length of the statement  "                            imageRectangle = new Rectangle(new Point(0' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height)); " is 132.
Long Statement,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The length of the statement  "                            imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height)); " is 162.
Long Statement,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The length of the statement  "                            imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height)); " is 154.
Long Statement,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The length of the statement  "                            imageRectangle = new Rectangle(new Point(0' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height)); " is 140.
Long Statement,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The length of the statement  "                            imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height)); " is 170.
Long Statement,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The length of the statement  "                            imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height)); " is 162.
Long Statement,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The length of the statement  "                            imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height)); " is 138.
Long Statement,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The length of the statement  "                            imageRectangle = new Rectangle(new Point(Width - TileImage.Width' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height)); " is 130.
Long Statement,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The length of the statement  "                TextRenderer.DrawText(e.Graphics' TileCount.ToString()' MetroFonts.TileCount' new Point(Width - countSize.Width' 0)' foreColor); " is 128.
Long Statement,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The length of the statement  "            TextFormatFlags flags = MetroPaint.GetTextFormatFlags(TextAlign) | TextFormatFlags.LeftAndRightPadding | TextFormatFlags.EndEllipsis; " is 133.
Long Statement,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The length of the statement  "            TextRenderer.DrawText(e.Graphics' Text' MetroFonts.Tile(tileTextFontSize' tileTextFontWeight)' textRectangle' foreColor' flags); " is 128.
Long Statement,MetroFramework.Controls,MetroToggle,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroToggle.cs,OnPaintForeground,The length of the statement  "                Rectangle boxRect = new Rectangle((DisplayStatus ? 30 : 0)' 0' ClientRectangle.Width - (DisplayStatus ? 31 : 1)' ClientRectangle.Height - 1); " is 141.
Long Statement,MetroFramework.Controls,MetroToggle,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroToggle.cs,OnPaintForeground,The length of the statement  "                Rectangle boxRect = new Rectangle(DisplayStatus ? 32 : 2' 2' ClientRectangle.Width - (DisplayStatus ? 34 : 4)' ClientRectangle.Height - 4); " is 139.
Long Statement,MetroFramework.Controls,MetroToggle,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroToggle.cs,OnPaintForeground,The length of the statement  "                TextRenderer.DrawText(e.Graphics' Text' MetroFonts.Link(metroLinkSize' metroLinkWeight)' textRect' foreColor' MetroPaint.GetTextFormatFlags(TextAlign)); " is 152.
Long Statement,MetroFramework.Drawing.Html,CssBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssBox.cs,GetEmHeight,The length of the statement  "            //float res = ActualFont.Size * ActualFont.FontFamily.GetCellAscent(f.Style) / ActualFont.FontFamily.GetEmHeight(f.Style); " is 122.
Long Statement,MetroFramework.Drawing.Html,CssBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssBox.cs,MeasureBounds,The length of the statement  "                    float left = ContainingBlock.Location.X + ContainingBlock.ActualPaddingLeft + ActualMarginLeft + ContainingBlock.ActualBorderLeftWidth; " is 135.
Long Statement,MetroFramework.Drawing.Html,CssBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssBox.cs,Paint,The length of the statement  "                if (InitialContainer != null && HtmlTag != null && HtmlTag.TagName.Equals("a"' StringComparison.CurrentCultureIgnoreCase)) " is 122.
Long Statement,MetroFramework.Drawing.Html,CssBoxWord,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssBoxWord.cs,ToString,The length of the statement  "            return string.Format("{0} ({1} char{2})"' Text.Replace(' '' '-').Replace("\n"' "\\n")' Text.Length' Text.Length != 1 ? "s" : string.Empty); " is 139.
Long Statement,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetBorderPath,The length of the statement  "            GraphicsPath path = new GraphicsPath(pts' new byte[] { (byte)PathPointType.Line' (byte)PathPointType.Line' (byte)PathPointType.Line' (byte)PathPointType.Line }); " is 161.
Long Statement,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,CreateCorner,The length of the statement  "                    inner = RectangleF.FromLTRB(outer.Left + b.ActualBorderLeftWidth' outer.Top + b.ActualBorderTopWidth' outer.Right' outer.Bottom); " is 129.
Long Statement,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,CreateCorner,The length of the statement  "                    inner = RectangleF.FromLTRB(outer.Left' outer.Top + b.ActualBorderTopWidth' outer.Right - b.ActualBorderRightWidth' outer.Bottom); " is 130.
Long Statement,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,CreateCorner,The length of the statement  "                    inner = new RectangleF(outer.Left' outer.Top' outer.Width - b.ActualBorderRightWidth' outer.Height - b.ActualBorderBottomWidth); " is 128.
Long Statement,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,CreateCorner,The length of the statement  "                    inner = RectangleF.FromLTRB( r.Left + b.ActualBorderLeftWidth ' outer.Top ' outer.Right' outer.Bottom - b.ActualBorderBottomWidth); " is 131.
Long Statement,MetroFramework.Drawing.Html,CssLayoutEngine,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssLayoutEngine.cs,CreateLineBoxes,The length of the statement  "            float startx = blockBox.Location.X + blockBox.ActualPaddingLeft - 0 + blockBox.ActualBorderLeftWidth; //TODO: Check for floats " is 126.
Long Statement,MetroFramework.Drawing.Html,CssLayoutEngine,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssLayoutEngine.cs,WhiteSpace,The length of the statement  "            Region[] regs = g.MeasureCharacterRanges(space' b.ActualFont' new RectangleF(0' 0' float.MaxValue' float.MaxValue)' sf); " is 120.
Long Statement,MetroFramework.Drawing.Html,CssLayoutEngine,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssLayoutEngine.cs,ApplyCenterAlignment,The length of the statement  "            float diff = right - lastWord.Right - lastWord.LastMeasureOffset.X - lastWord.OwnerBox.ActualBorderRightWidth - lastWord.OwnerBox.ActualPaddingRight; " is 149.
Long Statement,MetroFramework.Drawing.Html,CssLayoutEngine,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssLayoutEngine.cs,ApplyRightAlignment,The length of the statement  "            float diff = right - lastWord.Right - lastWord.LastMeasureOffset.X - lastWord.OwnerBox.ActualBorderRightWidth - lastWord.OwnerBox.ActualPaddingRight; " is 149.
Long Statement,MetroFramework.Drawing.Html,CssLength,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssLength.cs,ConvertEmToPoints,The length of the statement  "            return new CssLength(string.Format("{0}pt"' Convert.ToSingle(Number * emSize).ToString("0.0"' NumberFormatInfo.InvariantInfo))); " is 128.
Long Statement,MetroFramework.Drawing.Html,CssLength,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssLength.cs,ConvertEmToPixels,The length of the statement  "            return new CssLength(string.Format("{0}px"' Convert.ToSingle(Number * pixelFactor).ToString("0.0"' NumberFormatInfo.InvariantInfo))); " is 133.
Long Statement,MetroFramework.Drawing.Html,HtmlLabel,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\HtmlLabel.cs,CreateFragment,The length of the statement  "            htmlContainer = new InitialContainer("<table border=0 cellspacing=5 cellpadding=0 style=\"" + font + "\"><tr><td>" + text + "</td></tr></table>"); " is 146.
Long Statement,MetroFramework.Drawing.Html,HtmlTag,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\HtmlTag.cs,TranslateAttributes,The length of the statement  "                        if (value == HtmlConstants.left || value == HtmlConstants.center || value == HtmlConstants.right || value == HtmlConstants.justify) " is 131.
Long Statement,MetroFramework.Drawing.Html,HtmlToolTip,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\HtmlToolTip.cs,HtmlToolTip_Popup,The length of the statement  "            string font = string.Format(NumberFormatInfo.InvariantInfo' "font: {0}pt {1}"' e.AssociatedControl.Font.Size' e.AssociatedControl.Font.FontFamily.Name); " is 152.
Long Statement,MetroFramework.Drawing.Html,HtmlToolTip,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\HtmlToolTip.cs,HtmlToolTip_Popup,The length of the statement  "            container = new InitialContainer("<table class=htmltooltipbackground cellspacing=5 cellpadding=0 style=\"" + font + "\"><tr><td style=border:0px>" + text + "</td></tr></table>"); " is 178.
Long Statement,MetroFramework.Drawing.Html,InitialContainer,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\InitialContainer.cs,FeedStyleSheet,The length of the statement  "            for (MatchCollection comments = Parser.Match(Parser.CssComments' stylesheet); comments.Count > 0; comments = Parser.Match(Parser.CssComments' stylesheet)) " is 154.
Long Statement,MetroFramework.Drawing.Html,InitialContainer,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\InitialContainer.cs,FeedStyleSheet,The length of the statement  "            for(MatchCollection atrules = Parser.Match(Parser.CssAtRules' stylesheet); atrules.Count > 0; atrules = Parser.Match(Parser.CssAtRules' stylesheet)) " is 148.
Long Statement,MetroFramework.Drawing.Html,InitialContainer,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\InitialContainer.cs,ParseDocument,The length of the statement  "            string finaltext = DocumentSource.Substring((lastEnd > 0 ? lastEnd + 1 : 0)' DocumentSource.Length - lastEnd - 1 + (lastEnd == 0 ? 1 : 0)) ; " is 140.
Long Statement,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnPaint,The length of the statement  "                    img = MetroImage.ResizeImage((Theme == MetroThemeStyle.Dark) ? _image : backImage' new Rectangle(0' 0' backMaxSize' backMaxSize)); " is 130.
Long Statement,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,HitTestNCA,The length of the statement  "                if (RectangleToScreen(new Rectangle(ClientRectangle.Width - vPadding' ClientRectangle.Height - vPadding' vPadding' vPadding)).Contains(vPoint)) " is 143.
Long Statement,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,HitTestNCA,The length of the statement  "          if (RectangleToScreen(new Rectangle(borderWidth' borderWidth' ClientRectangle.Width - 2 * borderWidth' 50)).Contains(vPoint)) " is 125.
Long Statement,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,UpdateWindowButtonPosition,The length of the statement  "            Dictionary<int' WindowButtons> priorityOrder = new Dictionary<int' WindowButtons>(3) { {0' WindowButtons.Close}' {1' WindowButtons.Maximize}' {2' WindowButtons.Minimize} }; " is 172.
Long Statement,MetroFramework.Forms,MetroFormButton,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnPaint,The length of the statement  "                TextRenderer.DrawText(e.Graphics' Text' buttonFont' ClientRectangle' foreColor' backColor' TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.EndEllipsis); " is 188.
Long Statement,MetroFramework.Forms,MetroFlatDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,SetBitmap,The length of the statement  "                    WinApi.UpdateLayeredWindow(Handle' screenDc' ref topPos' ref size' memDc' ref pointSource' 0' ref blend' WinApi.ULW_ALPHA); " is 123.
Long Statement,MetroFramework.Forms,MetroFlatDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,DrawOutsetShadow,The length of the statement  "                Rectangle rInner = new Rectangle(shadowCanvasArea.X + (-Offset.X - 1)' shadowCanvasArea.Y + (-Offset.Y - 1)' shadowCanvasArea.Width - (-Offset.X * 2 - 1)' shadowCanvasArea.Height - (-Offset.Y * 2 - 1)); " is 202.
Long Statement,MetroFramework.Forms,MetroRealisticDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,SetBitmap,The length of the statement  "                    WinApi.UpdateLayeredWindow(Handle' screenDc' ref topPos' ref size' memDc' ref pointSource' 0' ref blend' WinApi.ULW_ALPHA); " is 123.
Long Statement,MetroFramework.Forms,MetroRealisticDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,DrawBlurBorder,The length of the statement  "                return (Bitmap)DrawOutsetShadow(0' 0' 40' 1' Color.Black' new Rectangle(1' 1' ClientRectangle.Width' ClientRectangle.Height)); " is 126.
Long Statement,MetroFramework.Forms,MetroRealisticDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,DrawRoundedRectangle,The length of the statement  "                    gfxPath.AddArc(bounds.X + bounds.Width - cornerRadius' bounds.Y + bounds.Height - cornerRadius' cornerRadius' cornerRadius' 0' 90); " is 131.
Long Statement,MetroFramework.Localization,MetroLocalize,C:\repos\waylaidwanderer_Mist\MetroFramework\Localization\MetroLocalize.cs,importManifestResource,The length of the statement  "            string localizationFilename = callingAssembly.GetName().Name + ".Localization." + CurrentLanguage()  + "." + ctrlName + ".xml"; " is 127.
Long Statement,MetroFramework,MetroMessageBox,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBox.cs,Show,The length of the statement  "                //    int x = Convert.ToInt32(Math.Ceiling((decimal)(Screen.PrimaryScreen.WorkingArea.Size.Width / 2) - (_owner.Size.Width / 2))); " is 130.
Long Statement,MetroFramework,MetroMessageBox,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBox.cs,Show,The length of the statement  "                //    int y = Convert.ToInt32(Math.Ceiling((decimal)(Screen.PrimaryScreen.WorkingArea.Size.Height / 2) - (_owner.Size.Height / 2))); " is 132.
Long Statement,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,StylizeButton,The length of the statement  "            //    button.FlatAppearance.MouseOverBackColor = MetroPaint.BorderColor.Button.Hover(MetroFramework.MetroThemeStyle.Light); " is 123.
Long Statement,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The length of the statement  "            this.messageLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 148.
Long Statement,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The length of the statement  "            this.titleLabel.Font = new System.Drawing.Font("Segoe UI Semibold"' 14.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 155.
Long Statement,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The length of the statement  "            this.metroButton1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The length of the statement  "            this.metroButton3.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The length of the statement  "            this.metroButton2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The length of the statement  "            this.Font = new System.Drawing.Font("Segoe UI Light"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 141.
Long Statement,MetroFramework.Native,RECT,C:\repos\waylaidwanderer_Mist\MetroFramework\Native\DwmApi.cs,Set,The length of the statement  "                this.left = InlineAssignHelper(ref this.top' InlineAssignHelper(ref this.right' InlineAssignHelper(ref this.bottom' 0))); " is 121.
Complex Conditional,MetroFramework.Animation,ColorBlendAnimation,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\ColorBlendAnimation.cs,Start,The conditional expression  "controlColor.A.Equals(targetColor.A) &&                          controlColor.R.Equals(targetColor.R) &&                          controlColor.G.Equals(targetColor.G) &&                          controlColor.B.Equals(targetColor.B)"  is complex.
Complex Conditional,MetroFramework.Controls,MetroButton,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroButton.cs,OnPaintForeground,The conditional expression  "Highlight && !isHovered && !isPressed && Enabled"  is complex.
Complex Conditional,MetroFramework.Controls,PromptedTextBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTextBox.cs,WndProc,The conditional expression  "((m.Msg == WM_PAINT) || (m.Msg == OCM_COMMAND)) && (drawPrompt && !GetStyle(ControlStyles.UserPaint))"  is complex.
Complex Conditional,MetroFramework.Drawing.Html,CssBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssBox.cs,MeasureBounds,The conditional expression  "Display == CssConstants.Block ||                   Display == CssConstants.ListItem ||                   Display == CssConstants.Table ||                   Display == CssConstants.InlineTable ||                  Display == CssConstants.TableCell ||                  Display == CssConstants.None"  is complex.
Complex Conditional,MetroFramework.Drawing.Html,HtmlTag,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\HtmlTag.cs,TranslateAttributes,The conditional expression  "value == HtmlConstants.left || value == HtmlConstants.center || value == HtmlConstants.right || value == HtmlConstants.justify"  is complex.
Empty Catch Block,MetroFramework.Components,MetroStyleExtender,C:\repos\waylaidwanderer_Mist\MetroFramework\Components\MetroStyleExtender.cs,UpdateTheme,The method has an empty catch block.
Empty Catch Block,MetroFramework.Components,MetroStyleExtender,C:\repos\waylaidwanderer_Mist\MetroFramework\Components\MetroStyleExtender.cs,UpdateTheme,The method has an empty catch block.
Empty Catch Block,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,WndProc,The method has an empty catch block.
Empty Catch Block,MetroFramework,MetroMessageBox,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBox.cs,Show,The method has an empty catch block.
Magic Number,MetroFramework.Animation,AnimationBase,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\AnimationBase.cs,MakeTransition,The following statement contains a magic number: switch (transitionType)              {                  case TransitionType.Linear:                      // simple linear tweening - no easing                       return (int)(c * t / d + b);                    case TransitionType.EaseInQuad:                      // quadratic (t^2) easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t + b);                    case TransitionType.EaseOutQuad:                      // quadratic (t^2) easing out - decelerating to zero velocity                      return (int)(-c * (t = t / d) * (t - 2) + b);                    case TransitionType.EaseInOutQuad:                      // quadratic easing in/out - acceleration until halfway' then deceleration                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t + b);                      }                      else                      {                          return (int)(-c / 2 * ((--t) * (t - 2) - 1) + b);                      }                    case TransitionType.EaseInCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t + b);                    case TransitionType.EaseOutCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * ((t = t / d - 1) * t * t + 1) + b);                    case TransitionType.EaseInOutCubic:                      // cubic easing in - accelerating from zero velocity                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t * t + b);                      }                      else                      {                          return (int)(c / 2 * ((t -= 2) * t * t + 2) + b);                      }                    case TransitionType.EaseInQuart:                      // quartic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t * t + b);                    case TransitionType.EaseInExpo:                      // exponential (2^t) easing in - accelerating from zero velocity                      if (t == 0)                      {                          return (int)b;                      }                      else                      {                          return (int)(c * Math.Pow(2' (10 * (t / d - 1))) + b);                      }                    case TransitionType.EaseOutExpo:                      // exponential (2^t) easing out - decelerating to zero velocity                      if (t == d)                      {                          return (int)(b + c);                      }                      else                      {                          return (int)(c * (-Math.Pow(2' -10 * t / d) + 1) + b);                      }                    default:                      return 0;              }
Magic Number,MetroFramework.Animation,AnimationBase,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\AnimationBase.cs,MakeTransition,The following statement contains a magic number: switch (transitionType)              {                  case TransitionType.Linear:                      // simple linear tweening - no easing                       return (int)(c * t / d + b);                    case TransitionType.EaseInQuad:                      // quadratic (t^2) easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t + b);                    case TransitionType.EaseOutQuad:                      // quadratic (t^2) easing out - decelerating to zero velocity                      return (int)(-c * (t = t / d) * (t - 2) + b);                    case TransitionType.EaseInOutQuad:                      // quadratic easing in/out - acceleration until halfway' then deceleration                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t + b);                      }                      else                      {                          return (int)(-c / 2 * ((--t) * (t - 2) - 1) + b);                      }                    case TransitionType.EaseInCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t + b);                    case TransitionType.EaseOutCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * ((t = t / d - 1) * t * t + 1) + b);                    case TransitionType.EaseInOutCubic:                      // cubic easing in - accelerating from zero velocity                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t * t + b);                      }                      else                      {                          return (int)(c / 2 * ((t -= 2) * t * t + 2) + b);                      }                    case TransitionType.EaseInQuart:                      // quartic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t * t + b);                    case TransitionType.EaseInExpo:                      // exponential (2^t) easing in - accelerating from zero velocity                      if (t == 0)                      {                          return (int)b;                      }                      else                      {                          return (int)(c * Math.Pow(2' (10 * (t / d - 1))) + b);                      }                    case TransitionType.EaseOutExpo:                      // exponential (2^t) easing out - decelerating to zero velocity                      if (t == d)                      {                          return (int)(b + c);                      }                      else                      {                          return (int)(c * (-Math.Pow(2' -10 * t / d) + 1) + b);                      }                    default:                      return 0;              }
Magic Number,MetroFramework.Animation,AnimationBase,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\AnimationBase.cs,MakeTransition,The following statement contains a magic number: switch (transitionType)              {                  case TransitionType.Linear:                      // simple linear tweening - no easing                       return (int)(c * t / d + b);                    case TransitionType.EaseInQuad:                      // quadratic (t^2) easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t + b);                    case TransitionType.EaseOutQuad:                      // quadratic (t^2) easing out - decelerating to zero velocity                      return (int)(-c * (t = t / d) * (t - 2) + b);                    case TransitionType.EaseInOutQuad:                      // quadratic easing in/out - acceleration until halfway' then deceleration                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t + b);                      }                      else                      {                          return (int)(-c / 2 * ((--t) * (t - 2) - 1) + b);                      }                    case TransitionType.EaseInCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t + b);                    case TransitionType.EaseOutCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * ((t = t / d - 1) * t * t + 1) + b);                    case TransitionType.EaseInOutCubic:                      // cubic easing in - accelerating from zero velocity                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t * t + b);                      }                      else                      {                          return (int)(c / 2 * ((t -= 2) * t * t + 2) + b);                      }                    case TransitionType.EaseInQuart:                      // quartic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t * t + b);                    case TransitionType.EaseInExpo:                      // exponential (2^t) easing in - accelerating from zero velocity                      if (t == 0)                      {                          return (int)b;                      }                      else                      {                          return (int)(c * Math.Pow(2' (10 * (t / d - 1))) + b);                      }                    case TransitionType.EaseOutExpo:                      // exponential (2^t) easing out - decelerating to zero velocity                      if (t == d)                      {                          return (int)(b + c);                      }                      else                      {                          return (int)(c * (-Math.Pow(2' -10 * t / d) + 1) + b);                      }                    default:                      return 0;              }
Magic Number,MetroFramework.Animation,AnimationBase,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\AnimationBase.cs,MakeTransition,The following statement contains a magic number: switch (transitionType)              {                  case TransitionType.Linear:                      // simple linear tweening - no easing                       return (int)(c * t / d + b);                    case TransitionType.EaseInQuad:                      // quadratic (t^2) easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t + b);                    case TransitionType.EaseOutQuad:                      // quadratic (t^2) easing out - decelerating to zero velocity                      return (int)(-c * (t = t / d) * (t - 2) + b);                    case TransitionType.EaseInOutQuad:                      // quadratic easing in/out - acceleration until halfway' then deceleration                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t + b);                      }                      else                      {                          return (int)(-c / 2 * ((--t) * (t - 2) - 1) + b);                      }                    case TransitionType.EaseInCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t + b);                    case TransitionType.EaseOutCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * ((t = t / d - 1) * t * t + 1) + b);                    case TransitionType.EaseInOutCubic:                      // cubic easing in - accelerating from zero velocity                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t * t + b);                      }                      else                      {                          return (int)(c / 2 * ((t -= 2) * t * t + 2) + b);                      }                    case TransitionType.EaseInQuart:                      // quartic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t * t + b);                    case TransitionType.EaseInExpo:                      // exponential (2^t) easing in - accelerating from zero velocity                      if (t == 0)                      {                          return (int)b;                      }                      else                      {                          return (int)(c * Math.Pow(2' (10 * (t / d - 1))) + b);                      }                    case TransitionType.EaseOutExpo:                      // exponential (2^t) easing out - decelerating to zero velocity                      if (t == d)                      {                          return (int)(b + c);                      }                      else                      {                          return (int)(c * (-Math.Pow(2' -10 * t / d) + 1) + b);                      }                    default:                      return 0;              }
Magic Number,MetroFramework.Animation,AnimationBase,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\AnimationBase.cs,MakeTransition,The following statement contains a magic number: switch (transitionType)              {                  case TransitionType.Linear:                      // simple linear tweening - no easing                       return (int)(c * t / d + b);                    case TransitionType.EaseInQuad:                      // quadratic (t^2) easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t + b);                    case TransitionType.EaseOutQuad:                      // quadratic (t^2) easing out - decelerating to zero velocity                      return (int)(-c * (t = t / d) * (t - 2) + b);                    case TransitionType.EaseInOutQuad:                      // quadratic easing in/out - acceleration until halfway' then deceleration                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t + b);                      }                      else                      {                          return (int)(-c / 2 * ((--t) * (t - 2) - 1) + b);                      }                    case TransitionType.EaseInCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t + b);                    case TransitionType.EaseOutCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * ((t = t / d - 1) * t * t + 1) + b);                    case TransitionType.EaseInOutCubic:                      // cubic easing in - accelerating from zero velocity                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t * t + b);                      }                      else                      {                          return (int)(c / 2 * ((t -= 2) * t * t + 2) + b);                      }                    case TransitionType.EaseInQuart:                      // quartic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t * t + b);                    case TransitionType.EaseInExpo:                      // exponential (2^t) easing in - accelerating from zero velocity                      if (t == 0)                      {                          return (int)b;                      }                      else                      {                          return (int)(c * Math.Pow(2' (10 * (t / d - 1))) + b);                      }                    case TransitionType.EaseOutExpo:                      // exponential (2^t) easing out - decelerating to zero velocity                      if (t == d)                      {                          return (int)(b + c);                      }                      else                      {                          return (int)(c * (-Math.Pow(2' -10 * t / d) + 1) + b);                      }                    default:                      return 0;              }
Magic Number,MetroFramework.Animation,AnimationBase,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\AnimationBase.cs,MakeTransition,The following statement contains a magic number: switch (transitionType)              {                  case TransitionType.Linear:                      // simple linear tweening - no easing                       return (int)(c * t / d + b);                    case TransitionType.EaseInQuad:                      // quadratic (t^2) easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t + b);                    case TransitionType.EaseOutQuad:                      // quadratic (t^2) easing out - decelerating to zero velocity                      return (int)(-c * (t = t / d) * (t - 2) + b);                    case TransitionType.EaseInOutQuad:                      // quadratic easing in/out - acceleration until halfway' then deceleration                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t + b);                      }                      else                      {                          return (int)(-c / 2 * ((--t) * (t - 2) - 1) + b);                      }                    case TransitionType.EaseInCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t + b);                    case TransitionType.EaseOutCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * ((t = t / d - 1) * t * t + 1) + b);                    case TransitionType.EaseInOutCubic:                      // cubic easing in - accelerating from zero velocity                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t * t + b);                      }                      else                      {                          return (int)(c / 2 * ((t -= 2) * t * t + 2) + b);                      }                    case TransitionType.EaseInQuart:                      // quartic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t * t + b);                    case TransitionType.EaseInExpo:                      // exponential (2^t) easing in - accelerating from zero velocity                      if (t == 0)                      {                          return (int)b;                      }                      else                      {                          return (int)(c * Math.Pow(2' (10 * (t / d - 1))) + b);                      }                    case TransitionType.EaseOutExpo:                      // exponential (2^t) easing out - decelerating to zero velocity                      if (t == d)                      {                          return (int)(b + c);                      }                      else                      {                          return (int)(c * (-Math.Pow(2' -10 * t / d) + 1) + b);                      }                    default:                      return 0;              }
Magic Number,MetroFramework.Animation,AnimationBase,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\AnimationBase.cs,MakeTransition,The following statement contains a magic number: switch (transitionType)              {                  case TransitionType.Linear:                      // simple linear tweening - no easing                       return (int)(c * t / d + b);                    case TransitionType.EaseInQuad:                      // quadratic (t^2) easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t + b);                    case TransitionType.EaseOutQuad:                      // quadratic (t^2) easing out - decelerating to zero velocity                      return (int)(-c * (t = t / d) * (t - 2) + b);                    case TransitionType.EaseInOutQuad:                      // quadratic easing in/out - acceleration until halfway' then deceleration                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t + b);                      }                      else                      {                          return (int)(-c / 2 * ((--t) * (t - 2) - 1) + b);                      }                    case TransitionType.EaseInCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t + b);                    case TransitionType.EaseOutCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * ((t = t / d - 1) * t * t + 1) + b);                    case TransitionType.EaseInOutCubic:                      // cubic easing in - accelerating from zero velocity                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t * t + b);                      }                      else                      {                          return (int)(c / 2 * ((t -= 2) * t * t + 2) + b);                      }                    case TransitionType.EaseInQuart:                      // quartic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t * t + b);                    case TransitionType.EaseInExpo:                      // exponential (2^t) easing in - accelerating from zero velocity                      if (t == 0)                      {                          return (int)b;                      }                      else                      {                          return (int)(c * Math.Pow(2' (10 * (t / d - 1))) + b);                      }                    case TransitionType.EaseOutExpo:                      // exponential (2^t) easing out - decelerating to zero velocity                      if (t == d)                      {                          return (int)(b + c);                      }                      else                      {                          return (int)(c * (-Math.Pow(2' -10 * t / d) + 1) + b);                      }                    default:                      return 0;              }
Magic Number,MetroFramework.Animation,AnimationBase,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\AnimationBase.cs,MakeTransition,The following statement contains a magic number: switch (transitionType)              {                  case TransitionType.Linear:                      // simple linear tweening - no easing                       return (int)(c * t / d + b);                    case TransitionType.EaseInQuad:                      // quadratic (t^2) easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t + b);                    case TransitionType.EaseOutQuad:                      // quadratic (t^2) easing out - decelerating to zero velocity                      return (int)(-c * (t = t / d) * (t - 2) + b);                    case TransitionType.EaseInOutQuad:                      // quadratic easing in/out - acceleration until halfway' then deceleration                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t + b);                      }                      else                      {                          return (int)(-c / 2 * ((--t) * (t - 2) - 1) + b);                      }                    case TransitionType.EaseInCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t + b);                    case TransitionType.EaseOutCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * ((t = t / d - 1) * t * t + 1) + b);                    case TransitionType.EaseInOutCubic:                      // cubic easing in - accelerating from zero velocity                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t * t + b);                      }                      else                      {                          return (int)(c / 2 * ((t -= 2) * t * t + 2) + b);                      }                    case TransitionType.EaseInQuart:                      // quartic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t * t + b);                    case TransitionType.EaseInExpo:                      // exponential (2^t) easing in - accelerating from zero velocity                      if (t == 0)                      {                          return (int)b;                      }                      else                      {                          return (int)(c * Math.Pow(2' (10 * (t / d - 1))) + b);                      }                    case TransitionType.EaseOutExpo:                      // exponential (2^t) easing out - decelerating to zero velocity                      if (t == d)                      {                          return (int)(b + c);                      }                      else                      {                          return (int)(c * (-Math.Pow(2' -10 * t / d) + 1) + b);                      }                    default:                      return 0;              }
Magic Number,MetroFramework.Animation,AnimationBase,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\AnimationBase.cs,MakeTransition,The following statement contains a magic number: switch (transitionType)              {                  case TransitionType.Linear:                      // simple linear tweening - no easing                       return (int)(c * t / d + b);                    case TransitionType.EaseInQuad:                      // quadratic (t^2) easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t + b);                    case TransitionType.EaseOutQuad:                      // quadratic (t^2) easing out - decelerating to zero velocity                      return (int)(-c * (t = t / d) * (t - 2) + b);                    case TransitionType.EaseInOutQuad:                      // quadratic easing in/out - acceleration until halfway' then deceleration                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t + b);                      }                      else                      {                          return (int)(-c / 2 * ((--t) * (t - 2) - 1) + b);                      }                    case TransitionType.EaseInCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t + b);                    case TransitionType.EaseOutCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * ((t = t / d - 1) * t * t + 1) + b);                    case TransitionType.EaseInOutCubic:                      // cubic easing in - accelerating from zero velocity                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t * t + b);                      }                      else                      {                          return (int)(c / 2 * ((t -= 2) * t * t + 2) + b);                      }                    case TransitionType.EaseInQuart:                      // quartic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t * t + b);                    case TransitionType.EaseInExpo:                      // exponential (2^t) easing in - accelerating from zero velocity                      if (t == 0)                      {                          return (int)b;                      }                      else                      {                          return (int)(c * Math.Pow(2' (10 * (t / d - 1))) + b);                      }                    case TransitionType.EaseOutExpo:                      // exponential (2^t) easing out - decelerating to zero velocity                      if (t == d)                      {                          return (int)(b + c);                      }                      else                      {                          return (int)(c * (-Math.Pow(2' -10 * t / d) + 1) + b);                      }                    default:                      return 0;              }
Magic Number,MetroFramework.Animation,AnimationBase,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\AnimationBase.cs,MakeTransition,The following statement contains a magic number: switch (transitionType)              {                  case TransitionType.Linear:                      // simple linear tweening - no easing                       return (int)(c * t / d + b);                    case TransitionType.EaseInQuad:                      // quadratic (t^2) easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t + b);                    case TransitionType.EaseOutQuad:                      // quadratic (t^2) easing out - decelerating to zero velocity                      return (int)(-c * (t = t / d) * (t - 2) + b);                    case TransitionType.EaseInOutQuad:                      // quadratic easing in/out - acceleration until halfway' then deceleration                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t + b);                      }                      else                      {                          return (int)(-c / 2 * ((--t) * (t - 2) - 1) + b);                      }                    case TransitionType.EaseInCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t + b);                    case TransitionType.EaseOutCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * ((t = t / d - 1) * t * t + 1) + b);                    case TransitionType.EaseInOutCubic:                      // cubic easing in - accelerating from zero velocity                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t * t + b);                      }                      else                      {                          return (int)(c / 2 * ((t -= 2) * t * t + 2) + b);                      }                    case TransitionType.EaseInQuart:                      // quartic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t * t + b);                    case TransitionType.EaseInExpo:                      // exponential (2^t) easing in - accelerating from zero velocity                      if (t == 0)                      {                          return (int)b;                      }                      else                      {                          return (int)(c * Math.Pow(2' (10 * (t / d - 1))) + b);                      }                    case TransitionType.EaseOutExpo:                      // exponential (2^t) easing out - decelerating to zero velocity                      if (t == d)                      {                          return (int)(b + c);                      }                      else                      {                          return (int)(c * (-Math.Pow(2' -10 * t / d) + 1) + b);                      }                    default:                      return 0;              }
Magic Number,MetroFramework.Animation,AnimationBase,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\AnimationBase.cs,MakeTransition,The following statement contains a magic number: switch (transitionType)              {                  case TransitionType.Linear:                      // simple linear tweening - no easing                       return (int)(c * t / d + b);                    case TransitionType.EaseInQuad:                      // quadratic (t^2) easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t + b);                    case TransitionType.EaseOutQuad:                      // quadratic (t^2) easing out - decelerating to zero velocity                      return (int)(-c * (t = t / d) * (t - 2) + b);                    case TransitionType.EaseInOutQuad:                      // quadratic easing in/out - acceleration until halfway' then deceleration                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t + b);                      }                      else                      {                          return (int)(-c / 2 * ((--t) * (t - 2) - 1) + b);                      }                    case TransitionType.EaseInCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t + b);                    case TransitionType.EaseOutCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * ((t = t / d - 1) * t * t + 1) + b);                    case TransitionType.EaseInOutCubic:                      // cubic easing in - accelerating from zero velocity                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t * t + b);                      }                      else                      {                          return (int)(c / 2 * ((t -= 2) * t * t + 2) + b);                      }                    case TransitionType.EaseInQuart:                      // quartic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t * t + b);                    case TransitionType.EaseInExpo:                      // exponential (2^t) easing in - accelerating from zero velocity                      if (t == 0)                      {                          return (int)b;                      }                      else                      {                          return (int)(c * Math.Pow(2' (10 * (t / d - 1))) + b);                      }                    case TransitionType.EaseOutExpo:                      // exponential (2^t) easing out - decelerating to zero velocity                      if (t == d)                      {                          return (int)(b + c);                      }                      else                      {                          return (int)(c * (-Math.Pow(2' -10 * t / d) + 1) + b);                      }                    default:                      return 0;              }
Magic Number,MetroFramework.Animation,AnimationBase,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\AnimationBase.cs,MakeTransition,The following statement contains a magic number: switch (transitionType)              {                  case TransitionType.Linear:                      // simple linear tweening - no easing                       return (int)(c * t / d + b);                    case TransitionType.EaseInQuad:                      // quadratic (t^2) easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t + b);                    case TransitionType.EaseOutQuad:                      // quadratic (t^2) easing out - decelerating to zero velocity                      return (int)(-c * (t = t / d) * (t - 2) + b);                    case TransitionType.EaseInOutQuad:                      // quadratic easing in/out - acceleration until halfway' then deceleration                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t + b);                      }                      else                      {                          return (int)(-c / 2 * ((--t) * (t - 2) - 1) + b);                      }                    case TransitionType.EaseInCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t + b);                    case TransitionType.EaseOutCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * ((t = t / d - 1) * t * t + 1) + b);                    case TransitionType.EaseInOutCubic:                      // cubic easing in - accelerating from zero velocity                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t * t + b);                      }                      else                      {                          return (int)(c / 2 * ((t -= 2) * t * t + 2) + b);                      }                    case TransitionType.EaseInQuart:                      // quartic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t * t + b);                    case TransitionType.EaseInExpo:                      // exponential (2^t) easing in - accelerating from zero velocity                      if (t == 0)                      {                          return (int)b;                      }                      else                      {                          return (int)(c * Math.Pow(2' (10 * (t / d - 1))) + b);                      }                    case TransitionType.EaseOutExpo:                      // exponential (2^t) easing out - decelerating to zero velocity                      if (t == d)                      {                          return (int)(b + c);                      }                      else                      {                          return (int)(c * (-Math.Pow(2' -10 * t / d) + 1) + b);                      }                    default:                      return 0;              }
Magic Number,MetroFramework.Animation,AnimationBase,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\AnimationBase.cs,MakeTransition,The following statement contains a magic number: switch (transitionType)              {                  case TransitionType.Linear:                      // simple linear tweening - no easing                       return (int)(c * t / d + b);                    case TransitionType.EaseInQuad:                      // quadratic (t^2) easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t + b);                    case TransitionType.EaseOutQuad:                      // quadratic (t^2) easing out - decelerating to zero velocity                      return (int)(-c * (t = t / d) * (t - 2) + b);                    case TransitionType.EaseInOutQuad:                      // quadratic easing in/out - acceleration until halfway' then deceleration                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t + b);                      }                      else                      {                          return (int)(-c / 2 * ((--t) * (t - 2) - 1) + b);                      }                    case TransitionType.EaseInCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t + b);                    case TransitionType.EaseOutCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * ((t = t / d - 1) * t * t + 1) + b);                    case TransitionType.EaseInOutCubic:                      // cubic easing in - accelerating from zero velocity                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t * t + b);                      }                      else                      {                          return (int)(c / 2 * ((t -= 2) * t * t + 2) + b);                      }                    case TransitionType.EaseInQuart:                      // quartic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t * t + b);                    case TransitionType.EaseInExpo:                      // exponential (2^t) easing in - accelerating from zero velocity                      if (t == 0)                      {                          return (int)b;                      }                      else                      {                          return (int)(c * Math.Pow(2' (10 * (t / d - 1))) + b);                      }                    case TransitionType.EaseOutExpo:                      // exponential (2^t) easing out - decelerating to zero velocity                      if (t == d)                      {                          return (int)(b + c);                      }                      else                      {                          return (int)(c * (-Math.Pow(2' -10 * t / d) + 1) + b);                      }                    default:                      return 0;              }
Magic Number,MetroFramework.Animation,AnimationBase,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\AnimationBase.cs,MakeTransition,The following statement contains a magic number: switch (transitionType)              {                  case TransitionType.Linear:                      // simple linear tweening - no easing                       return (int)(c * t / d + b);                    case TransitionType.EaseInQuad:                      // quadratic (t^2) easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t + b);                    case TransitionType.EaseOutQuad:                      // quadratic (t^2) easing out - decelerating to zero velocity                      return (int)(-c * (t = t / d) * (t - 2) + b);                    case TransitionType.EaseInOutQuad:                      // quadratic easing in/out - acceleration until halfway' then deceleration                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t + b);                      }                      else                      {                          return (int)(-c / 2 * ((--t) * (t - 2) - 1) + b);                      }                    case TransitionType.EaseInCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t + b);                    case TransitionType.EaseOutCubic:                      // cubic easing in - accelerating from zero velocity                      return (int)(c * ((t = t / d - 1) * t * t + 1) + b);                    case TransitionType.EaseInOutCubic:                      // cubic easing in - accelerating from zero velocity                      if ((t /= d / 2) < 1)                      {                          return (int)(c / 2 * t * t * t + b);                      }                      else                      {                          return (int)(c / 2 * ((t -= 2) * t * t + 2) + b);                      }                    case TransitionType.EaseInQuart:                      // quartic easing in - accelerating from zero velocity                      return (int)(c * (t /= d) * t * t * t + b);                    case TransitionType.EaseInExpo:                      // exponential (2^t) easing in - accelerating from zero velocity                      if (t == 0)                      {                          return (int)b;                      }                      else                      {                          return (int)(c * Math.Pow(2' (10 * (t / d - 1))) + b);                      }                    case TransitionType.EaseOutExpo:                      // exponential (2^t) easing out - decelerating to zero velocity                      if (t == d)                      {                          return (int)(b + c);                      }                      else                      {                          return (int)(c * (-Math.Pow(2' -10 * t / d) + 1) + b);                      }                    default:                      return 0;              }
Magic Number,MetroFramework.Animation,ColorBlendAnimation,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\ColorBlendAnimation.cs,Start,The following statement contains a magic number: base.Start(control' transitionType' 2 * duration'                  delegate                  {                      Color controlColor = GetPropertyValue(property' control);                      Color newColor = DoColorBlend(controlColor' targetColor' 0.1 * (percent / 2));                        PropertyInfo prop = (control.GetType()).GetProperty(property);                      MethodInfo method = prop.GetSetMethod(true);                      method.Invoke(control' new object[] { newColor });                  }'                  delegate                  {                      Color controlColor = GetPropertyValue(property' control);                        if (controlColor.A.Equals(targetColor.A) &&                          controlColor.R.Equals(targetColor.R) &&                          controlColor.G.Equals(targetColor.G) &&                          controlColor.B.Equals(targetColor.B))                          return true;                        return false;                  });
Magic Number,MetroFramework.Animation,ColorBlendAnimation,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\ColorBlendAnimation.cs,Start,The following statement contains a magic number: base.Start(control' transitionType' 2 * duration'                  delegate                  {                      Color controlColor = GetPropertyValue(property' control);                      Color newColor = DoColorBlend(controlColor' targetColor' 0.1 * (percent / 2));                        PropertyInfo prop = (control.GetType()).GetProperty(property);                      MethodInfo method = prop.GetSetMethod(true);                      method.Invoke(control' new object[] { newColor });                  }'                  delegate                  {                      Color controlColor = GetPropertyValue(property' control);                        if (controlColor.A.Equals(targetColor.A) &&                          controlColor.R.Equals(targetColor.R) &&                          controlColor.G.Equals(targetColor.G) &&                          controlColor.B.Equals(targetColor.B))                          return true;                        return false;                  });
Magic Number,MetroFramework.Animation,ColorBlendAnimation,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\ColorBlendAnimation.cs,Start,The following statement contains a magic number: base.Start(control' transitionType' 2 * duration'                  delegate                  {                      Color controlColor = GetPropertyValue(property' control);                      Color newColor = DoColorBlend(controlColor' targetColor' 0.1 * (percent / 2));                        PropertyInfo prop = (control.GetType()).GetProperty(property);                      MethodInfo method = prop.GetSetMethod(true);                      method.Invoke(control' new object[] { newColor });                  }'                  delegate                  {                      Color controlColor = GetPropertyValue(property' control);                        if (controlColor.A.Equals(targetColor.A) &&                          controlColor.R.Equals(targetColor.R) &&                          controlColor.G.Equals(targetColor.G) &&                          controlColor.B.Equals(targetColor.B))                          return true;                        return false;                  });
Magic Number,MetroFramework.Animation,ColorBlendAnimation,C:\repos\waylaidwanderer_Mist\MetroFramework\Animation\ColorBlendAnimation.cs,DoColorBlend,The following statement contains a magic number: percent += 0.2;
Magic Number,MetroFramework.Components,MetroToolTip,C:\repos\waylaidwanderer_Mist\MetroFramework\Components\MetroToolTip.cs,MetroToolTip_Popup,The following statement contains a magic number: e.ToolTipSize = new Size(e.ToolTipSize.Width + 24' e.ToolTipSize.Height + 9);
Magic Number,MetroFramework.Components,MetroToolTip,C:\repos\waylaidwanderer_Mist\MetroFramework\Components\MetroToolTip.cs,MetroToolTip_Popup,The following statement contains a magic number: e.ToolTipSize = new Size(e.ToolTipSize.Width + 24' e.ToolTipSize.Height + 9);
Magic Number,MetroFramework.Controls,MetroButton,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroButton.cs,OnPaintBackground,The following statement contains a magic number: try               {                  Color backColor = BackColor;                    if (isHovered && !isPressed && Enabled)                  {                      backColor = MetroPaint.BackColor.Button.Hover(Theme);                  }                  else if (isHovered && isPressed && Enabled)                  {                      backColor = MetroPaint.BackColor.Button.Press(Theme);                  }                  else if (!Enabled)                  {                      backColor = MetroPaint.BackColor.Button.Disabled(Theme);                  }                  else                  {                      if (!useCustomBackColor)                      {                          backColor = MetroPaint.BackColor.Button.Normal(Theme);                      }                   }                    if (backColor.A == 255 && BackgroundImage == null)                  {                       e.Graphics.Clear(backColor);                       return;                   }                                     base.OnPaintBackground(e);                    OnCustomPaintBackground(new MetroPaintEventArgs(backColor' Color.Empty' e.Graphics));              }              catch              {                   Invalidate();               }
Magic Number,MetroFramework.Controls,MetroButton,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroButton.cs,OnPaintForeground,The following statement contains a magic number: if (Highlight && !isHovered && !isPressed && Enabled)              {                  using (Pen p = MetroPaint.GetStylePen(Style))                  {                      Rectangle borderRect = new Rectangle(0' 0' Width - 1' Height - 1);                      e.Graphics.DrawRectangle(p' borderRect);                      borderRect = new Rectangle(1' 1' Width - 3' Height - 3);                      e.Graphics.DrawRectangle(p' borderRect);                  }              }
Magic Number,MetroFramework.Controls,MetroButton,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroButton.cs,OnPaintForeground,The following statement contains a magic number: if (Highlight && !isHovered && !isPressed && Enabled)              {                  using (Pen p = MetroPaint.GetStylePen(Style))                  {                      Rectangle borderRect = new Rectangle(0' 0' Width - 1' Height - 1);                      e.Graphics.DrawRectangle(p' borderRect);                      borderRect = new Rectangle(1' 1' Width - 3' Height - 3);                      e.Graphics.DrawRectangle(p' borderRect);                  }              }
Magic Number,MetroFramework.Controls,MetroCheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroCheckBox.cs,OnPaintBackground,The following statement contains a magic number: try              {                  Color backColor = BackColor;                    if (!useCustomBackColor)                  {                      backColor = MetroPaint.BackColor.Form(Theme);                      if (Parent is MetroTile)                      {                          backColor = MetroPaint.GetStyleColor(Style);                      }                  }                    if (backColor.A == 255)                  {                      e.Graphics.Clear(backColor);                      return;                  }                    base.OnPaintBackground(e);                    OnCustomPaintBackground(new MetroPaintEventArgs(backColor' Color.Empty' e.Graphics));              }              catch              {                  Invalidate();              }
Magic Number,MetroFramework.Controls,MetroCheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroCheckBox.cs,OnPaintForeground,The following statement contains a magic number: using (Pen p = new Pen(borderColor))              {                  Rectangle boxRect = new Rectangle(0' Height / 2 - 6' 12' 12);                  e.Graphics.DrawRectangle(p' boxRect);              }
Magic Number,MetroFramework.Controls,MetroCheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroCheckBox.cs,OnPaintForeground,The following statement contains a magic number: using (Pen p = new Pen(borderColor))              {                  Rectangle boxRect = new Rectangle(0' Height / 2 - 6' 12' 12);                  e.Graphics.DrawRectangle(p' boxRect);              }
Magic Number,MetroFramework.Controls,MetroCheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroCheckBox.cs,OnPaintForeground,The following statement contains a magic number: using (Pen p = new Pen(borderColor))              {                  Rectangle boxRect = new Rectangle(0' Height / 2 - 6' 12' 12);                  e.Graphics.DrawRectangle(p' boxRect);              }
Magic Number,MetroFramework.Controls,MetroCheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroCheckBox.cs,OnPaintForeground,The following statement contains a magic number: using (Pen p = new Pen(borderColor))              {                  Rectangle boxRect = new Rectangle(0' Height / 2 - 6' 12' 12);                  e.Graphics.DrawRectangle(p' boxRect);              }
Magic Number,MetroFramework.Controls,MetroCheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroCheckBox.cs,OnPaintForeground,The following statement contains a magic number: if (Checked)              {                    Color fillColor = CheckState == CheckState.Indeterminate ? borderColor : MetroPaint.GetStyleColor(Style);                    using (SolidBrush b = new SolidBrush(fillColor))                  {                      Rectangle boxRect = new Rectangle(2' Height / 2 - 4' 9' 9);                      e.Graphics.FillRectangle(b' boxRect);                  }              }
Magic Number,MetroFramework.Controls,MetroCheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroCheckBox.cs,OnPaintForeground,The following statement contains a magic number: if (Checked)              {                    Color fillColor = CheckState == CheckState.Indeterminate ? borderColor : MetroPaint.GetStyleColor(Style);                    using (SolidBrush b = new SolidBrush(fillColor))                  {                      Rectangle boxRect = new Rectangle(2' Height / 2 - 4' 9' 9);                      e.Graphics.FillRectangle(b' boxRect);                  }              }
Magic Number,MetroFramework.Controls,MetroCheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroCheckBox.cs,OnPaintForeground,The following statement contains a magic number: if (Checked)              {                    Color fillColor = CheckState == CheckState.Indeterminate ? borderColor : MetroPaint.GetStyleColor(Style);                    using (SolidBrush b = new SolidBrush(fillColor))                  {                      Rectangle boxRect = new Rectangle(2' Height / 2 - 4' 9' 9);                      e.Graphics.FillRectangle(b' boxRect);                  }              }
Magic Number,MetroFramework.Controls,MetroCheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroCheckBox.cs,OnPaintForeground,The following statement contains a magic number: if (Checked)              {                    Color fillColor = CheckState == CheckState.Indeterminate ? borderColor : MetroPaint.GetStyleColor(Style);                    using (SolidBrush b = new SolidBrush(fillColor))                  {                      Rectangle boxRect = new Rectangle(2' Height / 2 - 4' 9' 9);                      e.Graphics.FillRectangle(b' boxRect);                  }              }
Magic Number,MetroFramework.Controls,MetroCheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroCheckBox.cs,OnPaintForeground,The following statement contains a magic number: if (Checked)              {                    Color fillColor = CheckState == CheckState.Indeterminate ? borderColor : MetroPaint.GetStyleColor(Style);                    using (SolidBrush b = new SolidBrush(fillColor))                  {                      Rectangle boxRect = new Rectangle(2' Height / 2 - 4' 9' 9);                      e.Graphics.FillRectangle(b' boxRect);                  }              }
Magic Number,MetroFramework.Controls,MetroCheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroCheckBox.cs,OnPaintForeground,The following statement contains a magic number: Rectangle textRect = new Rectangle(16' 0' Width - 16' Height);
Magic Number,MetroFramework.Controls,MetroCheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroCheckBox.cs,OnPaintForeground,The following statement contains a magic number: Rectangle textRect = new Rectangle(16' 0' Width - 16' Height);
Magic Number,MetroFramework.Controls,MetroCheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroCheckBox.cs,GetPreferredSize,The following statement contains a magic number: using (var g = CreateGraphics())              {                  proposedSize = new Size(int.MaxValue' int.MaxValue);                  preferredSize = TextRenderer.MeasureText(g' Text' MetroFonts.CheckBox(metroCheckBoxSize' metroCheckBoxWeight)' proposedSize' MetroPaint.GetTextFormatFlags(TextAlign));                  preferredSize.Width += 16;              }
Magic Number,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,OnPaintBackground,The following statement contains a magic number: try              {                  Color backColor = BackColor;                    if (!useCustomBackColor)                  {                      backColor = MetroPaint.BackColor.Form(Theme);                  }                    if (backColor.A == 255 && BackgroundImage == null)                  {                      e.Graphics.Clear(backColor);                      return;                  }                    base.OnPaintBackground(e);                    OnCustomPaintBackground(new MetroPaintEventArgs(backColor' Color.Empty' e.Graphics));              }              catch              {                  Invalidate();              }
Magic Number,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,OnPaintForeground,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(foreColor))              {                  e.Graphics.FillPolygon(b' new Point[] { new Point(Width - 20' (Height / 2) - 2)' new Point(Width - 9' (Height / 2) - 2)' new Point(Width - 15' (Height / 2) + 4) });              }
Magic Number,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,OnPaintForeground,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(foreColor))              {                  e.Graphics.FillPolygon(b' new Point[] { new Point(Width - 20' (Height / 2) - 2)' new Point(Width - 9' (Height / 2) - 2)' new Point(Width - 15' (Height / 2) + 4) });              }
Magic Number,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,OnPaintForeground,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(foreColor))              {                  e.Graphics.FillPolygon(b' new Point[] { new Point(Width - 20' (Height / 2) - 2)' new Point(Width - 9' (Height / 2) - 2)' new Point(Width - 15' (Height / 2) + 4) });              }
Magic Number,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,OnPaintForeground,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(foreColor))              {                  e.Graphics.FillPolygon(b' new Point[] { new Point(Width - 20' (Height / 2) - 2)' new Point(Width - 9' (Height / 2) - 2)' new Point(Width - 15' (Height / 2) + 4) });              }
Magic Number,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,OnPaintForeground,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(foreColor))              {                  e.Graphics.FillPolygon(b' new Point[] { new Point(Width - 20' (Height / 2) - 2)' new Point(Width - 9' (Height / 2) - 2)' new Point(Width - 15' (Height / 2) + 4) });              }
Magic Number,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,OnPaintForeground,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(foreColor))              {                  e.Graphics.FillPolygon(b' new Point[] { new Point(Width - 20' (Height / 2) - 2)' new Point(Width - 9' (Height / 2) - 2)' new Point(Width - 15' (Height / 2) + 4) });              }
Magic Number,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,OnPaintForeground,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(foreColor))              {                  e.Graphics.FillPolygon(b' new Point[] { new Point(Width - 20' (Height / 2) - 2)' new Point(Width - 9' (Height / 2) - 2)' new Point(Width - 15' (Height / 2) + 4) });              }
Magic Number,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,OnPaintForeground,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(foreColor))              {                  e.Graphics.FillPolygon(b' new Point[] { new Point(Width - 20' (Height / 2) - 2)' new Point(Width - 9' (Height / 2) - 2)' new Point(Width - 15' (Height / 2) + 4) });              }
Magic Number,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,OnPaintForeground,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(foreColor))              {                  e.Graphics.FillPolygon(b' new Point[] { new Point(Width - 20' (Height / 2) - 2)' new Point(Width - 9' (Height / 2) - 2)' new Point(Width - 15' (Height / 2) + 4) });              }
Magic Number,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,OnPaintForeground,The following statement contains a magic number: Rectangle textRect = new Rectangle(2' 2' Width - 20' Height - 4);
Magic Number,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,OnPaintForeground,The following statement contains a magic number: Rectangle textRect = new Rectangle(2' 2' Width - 20' Height - 4);
Magic Number,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,OnPaintForeground,The following statement contains a magic number: Rectangle textRect = new Rectangle(2' 2' Width - 20' Height - 4);
Magic Number,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,OnPaintForeground,The following statement contains a magic number: Rectangle textRect = new Rectangle(2' 2' Width - 20' Height - 4);
Magic Number,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,DrawTextPrompt,The following statement contains a magic number: Rectangle textRect = new Rectangle(2' 2' Width - 20' Height - 4);
Magic Number,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,DrawTextPrompt,The following statement contains a magic number: Rectangle textRect = new Rectangle(2' 2' Width - 20' Height - 4);
Magic Number,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,DrawTextPrompt,The following statement contains a magic number: Rectangle textRect = new Rectangle(2' 2' Width - 20' Height - 4);
Magic Number,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,DrawTextPrompt,The following statement contains a magic number: Rectangle textRect = new Rectangle(2' 2' Width - 20' Height - 4);
Magic Number,MetroFramework.Controls,MetroComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroComboBox.cs,GetPreferredSize,The following statement contains a magic number: using (var g = CreateGraphics())              {                  string measureText = Text.Length > 0 ? Text : "MeasureText";                  proposedSize = new Size(int.MaxValue' int.MaxValue);                  preferredSize = TextRenderer.MeasureText(g' measureText' MetroFonts.ComboBox(metroComboBoxSize' metroComboBoxWeight)' proposedSize' TextFormatFlags.Left | TextFormatFlags.LeftAndRightPadding | TextFormatFlags.VerticalCenter);                  preferredSize.Height += 4;              }
Magic Number,MetroFramework.Controls,MetroLabel,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroLabel.cs,OnPaintBackground,The following statement contains a magic number: try              {                  Color backColor = BackColor;                    if (!useCustomBackColor)                  {                      backColor = MetroPaint.BackColor.Form(Theme);                      if (Parent is MetroTile)                      {                          backColor = MetroPaint.GetStyleColor(Style);                      }                  }                    if (backColor.A == 255 && BackgroundImage == null)                  {                      e.Graphics.Clear(backColor);                      return;                  }                    base.OnPaintBackground(e);                    OnCustomPaintBackground(new MetroPaintEventArgs(backColor' Color.Empty' e.Graphics));              }              catch              {                  Invalidate();              }
Magic Number,MetroFramework.Controls,MetroLink,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroLink.cs,OnPaintBackground,The following statement contains a magic number: try              {                  Color backColor = BackColor;                    if (!useCustomBackColor)                  {                      backColor = MetroPaint.BackColor.Form(Theme);                  }                    if (backColor.A == 255 && BackgroundImage == null)                  {                      e.Graphics.Clear(backColor);                      return;                  }                    base.OnPaintBackground(e);                    OnCustomPaintBackground(new MetroPaintEventArgs(backColor' Color.Empty' e.Graphics));              }              catch              {                  Invalidate();              }
Magic Number,MetroFramework.Controls,MetroPanel,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroPanel.cs,OnPaintBackground,The following statement contains a magic number: try              {                  Color backColor = BackColor;                    if (!useCustomBackColor)                  {                      backColor = MetroPaint.BackColor.Form(Theme);                  }                    if (backColor.A == 255 && BackgroundImage == null)                  {                      e.Graphics.Clear(backColor);                      return;                  }                    base.OnPaintBackground(e);                    OnCustomPaintBackground(new MetroPaintEventArgs(backColor' Color.Empty' e.Graphics));              }              catch              {                  Invalidate();              }
Magic Number,MetroFramework.Controls,MetroProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressBar.cs,OnPaintBackground,The following statement contains a magic number: try              {                  Color backColor = BackColor;                    if (!useCustomBackColor)                  {                      if (!Enabled)                      {                          backColor = MetroPaint.BackColor.ProgressBar.Bar.Disabled(Theme);                      }                      else                      {                          backColor = MetroPaint.BackColor.ProgressBar.Bar.Normal(Theme);                      }                  }                                    if (backColor.A == 255)                  {                      e.Graphics.Clear(backColor);                      return;                  }                    base.OnPaintBackground(e);                    OnCustomPaintBackground(new MetroPaintEventArgs(backColor' Color.Empty' e.Graphics));              }              catch              {                  Invalidate();              }
Magic Number,MetroFramework.Controls,MetroProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressBar.cs,StartTimer,The following statement contains a magic number: if (marqueeTimer == null)              {                  marqueeTimer = new Timer {Interval = 10};                  marqueeTimer.Tick += marqueeTimer_Tick;              }
Magic Number,MetroFramework.Controls,MetroProgressSpinner,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressSpinner.cs,MetroProgressSpinner,The following statement contains a magic number: timer.Interval = 20;
Magic Number,MetroFramework.Controls,MetroProgressSpinner,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressSpinner.cs,MetroProgressSpinner,The following statement contains a magic number: Width = 16;
Magic Number,MetroFramework.Controls,MetroProgressSpinner,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressSpinner.cs,MetroProgressSpinner,The following statement contains a magic number: Height = 16;
Magic Number,MetroFramework.Controls,MetroProgressSpinner,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressSpinner.cs,Reset,The following statement contains a magic number: angle = 270;
Magic Number,MetroFramework.Controls,MetroProgressSpinner,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressSpinner.cs,OnPaintBackground,The following statement contains a magic number: try              {                  Color backColor = BackColor;                    if (!useCustomBackColor)                  {                      if (Parent is MetroTile)                      {                          backColor = MetroPaint.GetStyleColor(Style);                      }                      else                      {                          backColor = MetroPaint.BackColor.Form(Theme);                      }                  }                    if (backColor.A == 255)                  {                      e.Graphics.Clear(backColor);                      return;                  }                    base.OnPaintBackground(e);                    OnCustomPaintBackground(new MetroPaintEventArgs(backColor' Color.Empty' e.Graphics));              }              catch              {                  Invalidate();              }
Magic Number,MetroFramework.Controls,MetroProgressSpinner,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressSpinner.cs,OnPaintForeground,The following statement contains a magic number: using (Pen forePen = new Pen(foreColor' (float)Width / 5))              {                  int padding = (int)Math.Ceiling((float)Width / 10);                    e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;                    if (progress != -1)                  {                      float sweepAngle;                      float progFrac = (float)(progress - minimum) / (float)(maximum - minimum);                        if (ensureVisible)                      {                          sweepAngle = 30 + 300f * progFrac;                      }                      else                      {                          sweepAngle = 360f * progFrac;                      }                        if (backwards)                      {                          sweepAngle = -sweepAngle;                      }                        e.Graphics.DrawArc(forePen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' angle' sweepAngle);                  }                  else                  {                      const int maxOffset = 180;                      for (int offset = 0; offset <= maxOffset; offset += 15)                      {                          int alpha = 290 - (offset * 290 / maxOffset);                            if (alpha > 255)                          {                              alpha = 255;                          }                          if (alpha < 0)                          {                              alpha = 0;                          }                            Color col = Color.FromArgb(alpha' forePen.Color);                          using (Pen gradPen = new Pen(col' forePen.Width))                          {                              float startAngle = angle + (offset - (ensureVisible ? 30 : 0)) * (backwards ? 1 : -1);                              float sweepAngle = 15 * (backwards ? 1 : -1);                              e.Graphics.DrawArc(gradPen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' startAngle' sweepAngle);                          }                      }                  }              }
Magic Number,MetroFramework.Controls,MetroProgressSpinner,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressSpinner.cs,OnPaintForeground,The following statement contains a magic number: using (Pen forePen = new Pen(foreColor' (float)Width / 5))              {                  int padding = (int)Math.Ceiling((float)Width / 10);                    e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;                    if (progress != -1)                  {                      float sweepAngle;                      float progFrac = (float)(progress - minimum) / (float)(maximum - minimum);                        if (ensureVisible)                      {                          sweepAngle = 30 + 300f * progFrac;                      }                      else                      {                          sweepAngle = 360f * progFrac;                      }                        if (backwards)                      {                          sweepAngle = -sweepAngle;                      }                        e.Graphics.DrawArc(forePen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' angle' sweepAngle);                  }                  else                  {                      const int maxOffset = 180;                      for (int offset = 0; offset <= maxOffset; offset += 15)                      {                          int alpha = 290 - (offset * 290 / maxOffset);                            if (alpha > 255)                          {                              alpha = 255;                          }                          if (alpha < 0)                          {                              alpha = 0;                          }                            Color col = Color.FromArgb(alpha' forePen.Color);                          using (Pen gradPen = new Pen(col' forePen.Width))                          {                              float startAngle = angle + (offset - (ensureVisible ? 30 : 0)) * (backwards ? 1 : -1);                              float sweepAngle = 15 * (backwards ? 1 : -1);                              e.Graphics.DrawArc(gradPen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' startAngle' sweepAngle);                          }                      }                  }              }
Magic Number,MetroFramework.Controls,MetroProgressSpinner,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressSpinner.cs,OnPaintForeground,The following statement contains a magic number: using (Pen forePen = new Pen(foreColor' (float)Width / 5))              {                  int padding = (int)Math.Ceiling((float)Width / 10);                    e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;                    if (progress != -1)                  {                      float sweepAngle;                      float progFrac = (float)(progress - minimum) / (float)(maximum - minimum);                        if (ensureVisible)                      {                          sweepAngle = 30 + 300f * progFrac;                      }                      else                      {                          sweepAngle = 360f * progFrac;                      }                        if (backwards)                      {                          sweepAngle = -sweepAngle;                      }                        e.Graphics.DrawArc(forePen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' angle' sweepAngle);                  }                  else                  {                      const int maxOffset = 180;                      for (int offset = 0; offset <= maxOffset; offset += 15)                      {                          int alpha = 290 - (offset * 290 / maxOffset);                            if (alpha > 255)                          {                              alpha = 255;                          }                          if (alpha < 0)                          {                              alpha = 0;                          }                            Color col = Color.FromArgb(alpha' forePen.Color);                          using (Pen gradPen = new Pen(col' forePen.Width))                          {                              float startAngle = angle + (offset - (ensureVisible ? 30 : 0)) * (backwards ? 1 : -1);                              float sweepAngle = 15 * (backwards ? 1 : -1);                              e.Graphics.DrawArc(gradPen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' startAngle' sweepAngle);                          }                      }                  }              }
Magic Number,MetroFramework.Controls,MetroProgressSpinner,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressSpinner.cs,OnPaintForeground,The following statement contains a magic number: using (Pen forePen = new Pen(foreColor' (float)Width / 5))              {                  int padding = (int)Math.Ceiling((float)Width / 10);                    e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;                    if (progress != -1)                  {                      float sweepAngle;                      float progFrac = (float)(progress - minimum) / (float)(maximum - minimum);                        if (ensureVisible)                      {                          sweepAngle = 30 + 300f * progFrac;                      }                      else                      {                          sweepAngle = 360f * progFrac;                      }                        if (backwards)                      {                          sweepAngle = -sweepAngle;                      }                        e.Graphics.DrawArc(forePen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' angle' sweepAngle);                  }                  else                  {                      const int maxOffset = 180;                      for (int offset = 0; offset <= maxOffset; offset += 15)                      {                          int alpha = 290 - (offset * 290 / maxOffset);                            if (alpha > 255)                          {                              alpha = 255;                          }                          if (alpha < 0)                          {                              alpha = 0;                          }                            Color col = Color.FromArgb(alpha' forePen.Color);                          using (Pen gradPen = new Pen(col' forePen.Width))                          {                              float startAngle = angle + (offset - (ensureVisible ? 30 : 0)) * (backwards ? 1 : -1);                              float sweepAngle = 15 * (backwards ? 1 : -1);                              e.Graphics.DrawArc(gradPen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' startAngle' sweepAngle);                          }                      }                  }              }
Magic Number,MetroFramework.Controls,MetroProgressSpinner,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressSpinner.cs,OnPaintForeground,The following statement contains a magic number: using (Pen forePen = new Pen(foreColor' (float)Width / 5))              {                  int padding = (int)Math.Ceiling((float)Width / 10);                    e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;                    if (progress != -1)                  {                      float sweepAngle;                      float progFrac = (float)(progress - minimum) / (float)(maximum - minimum);                        if (ensureVisible)                      {                          sweepAngle = 30 + 300f * progFrac;                      }                      else                      {                          sweepAngle = 360f * progFrac;                      }                        if (backwards)                      {                          sweepAngle = -sweepAngle;                      }                        e.Graphics.DrawArc(forePen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' angle' sweepAngle);                  }                  else                  {                      const int maxOffset = 180;                      for (int offset = 0; offset <= maxOffset; offset += 15)                      {                          int alpha = 290 - (offset * 290 / maxOffset);                            if (alpha > 255)                          {                              alpha = 255;                          }                          if (alpha < 0)                          {                              alpha = 0;                          }                            Color col = Color.FromArgb(alpha' forePen.Color);                          using (Pen gradPen = new Pen(col' forePen.Width))                          {                              float startAngle = angle + (offset - (ensureVisible ? 30 : 0)) * (backwards ? 1 : -1);                              float sweepAngle = 15 * (backwards ? 1 : -1);                              e.Graphics.DrawArc(gradPen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' startAngle' sweepAngle);                          }                      }                  }              }
Magic Number,MetroFramework.Controls,MetroProgressSpinner,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressSpinner.cs,OnPaintForeground,The following statement contains a magic number: using (Pen forePen = new Pen(foreColor' (float)Width / 5))              {                  int padding = (int)Math.Ceiling((float)Width / 10);                    e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;                    if (progress != -1)                  {                      float sweepAngle;                      float progFrac = (float)(progress - minimum) / (float)(maximum - minimum);                        if (ensureVisible)                      {                          sweepAngle = 30 + 300f * progFrac;                      }                      else                      {                          sweepAngle = 360f * progFrac;                      }                        if (backwards)                      {                          sweepAngle = -sweepAngle;                      }                        e.Graphics.DrawArc(forePen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' angle' sweepAngle);                  }                  else                  {                      const int maxOffset = 180;                      for (int offset = 0; offset <= maxOffset; offset += 15)                      {                          int alpha = 290 - (offset * 290 / maxOffset);                            if (alpha > 255)                          {                              alpha = 255;                          }                          if (alpha < 0)                          {                              alpha = 0;                          }                            Color col = Color.FromArgb(alpha' forePen.Color);                          using (Pen gradPen = new Pen(col' forePen.Width))                          {                              float startAngle = angle + (offset - (ensureVisible ? 30 : 0)) * (backwards ? 1 : -1);                              float sweepAngle = 15 * (backwards ? 1 : -1);                              e.Graphics.DrawArc(gradPen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' startAngle' sweepAngle);                          }                      }                  }              }
Magic Number,MetroFramework.Controls,MetroProgressSpinner,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressSpinner.cs,OnPaintForeground,The following statement contains a magic number: using (Pen forePen = new Pen(foreColor' (float)Width / 5))              {                  int padding = (int)Math.Ceiling((float)Width / 10);                    e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;                    if (progress != -1)                  {                      float sweepAngle;                      float progFrac = (float)(progress - minimum) / (float)(maximum - minimum);                        if (ensureVisible)                      {                          sweepAngle = 30 + 300f * progFrac;                      }                      else                      {                          sweepAngle = 360f * progFrac;                      }                        if (backwards)                      {                          sweepAngle = -sweepAngle;                      }                        e.Graphics.DrawArc(forePen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' angle' sweepAngle);                  }                  else                  {                      const int maxOffset = 180;                      for (int offset = 0; offset <= maxOffset; offset += 15)                      {                          int alpha = 290 - (offset * 290 / maxOffset);                            if (alpha > 255)                          {                              alpha = 255;                          }                          if (alpha < 0)                          {                              alpha = 0;                          }                            Color col = Color.FromArgb(alpha' forePen.Color);                          using (Pen gradPen = new Pen(col' forePen.Width))                          {                              float startAngle = angle + (offset - (ensureVisible ? 30 : 0)) * (backwards ? 1 : -1);                              float sweepAngle = 15 * (backwards ? 1 : -1);                              e.Graphics.DrawArc(gradPen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' startAngle' sweepAngle);                          }                      }                  }              }
Magic Number,MetroFramework.Controls,MetroProgressSpinner,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressSpinner.cs,OnPaintForeground,The following statement contains a magic number: using (Pen forePen = new Pen(foreColor' (float)Width / 5))              {                  int padding = (int)Math.Ceiling((float)Width / 10);                    e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;                    if (progress != -1)                  {                      float sweepAngle;                      float progFrac = (float)(progress - minimum) / (float)(maximum - minimum);                        if (ensureVisible)                      {                          sweepAngle = 30 + 300f * progFrac;                      }                      else                      {                          sweepAngle = 360f * progFrac;                      }                        if (backwards)                      {                          sweepAngle = -sweepAngle;                      }                        e.Graphics.DrawArc(forePen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' angle' sweepAngle);                  }                  else                  {                      const int maxOffset = 180;                      for (int offset = 0; offset <= maxOffset; offset += 15)                      {                          int alpha = 290 - (offset * 290 / maxOffset);                            if (alpha > 255)                          {                              alpha = 255;                          }                          if (alpha < 0)                          {                              alpha = 0;                          }                            Color col = Color.FromArgb(alpha' forePen.Color);                          using (Pen gradPen = new Pen(col' forePen.Width))                          {                              float startAngle = angle + (offset - (ensureVisible ? 30 : 0)) * (backwards ? 1 : -1);                              float sweepAngle = 15 * (backwards ? 1 : -1);                              e.Graphics.DrawArc(gradPen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' startAngle' sweepAngle);                          }                      }                  }              }
Magic Number,MetroFramework.Controls,MetroProgressSpinner,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressSpinner.cs,OnPaintForeground,The following statement contains a magic number: using (Pen forePen = new Pen(foreColor' (float)Width / 5))              {                  int padding = (int)Math.Ceiling((float)Width / 10);                    e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;                    if (progress != -1)                  {                      float sweepAngle;                      float progFrac = (float)(progress - minimum) / (float)(maximum - minimum);                        if (ensureVisible)                      {                          sweepAngle = 30 + 300f * progFrac;                      }                      else                      {                          sweepAngle = 360f * progFrac;                      }                        if (backwards)                      {                          sweepAngle = -sweepAngle;                      }                        e.Graphics.DrawArc(forePen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' angle' sweepAngle);                  }                  else                  {                      const int maxOffset = 180;                      for (int offset = 0; offset <= maxOffset; offset += 15)                      {                          int alpha = 290 - (offset * 290 / maxOffset);                            if (alpha > 255)                          {                              alpha = 255;                          }                          if (alpha < 0)                          {                              alpha = 0;                          }                            Color col = Color.FromArgb(alpha' forePen.Color);                          using (Pen gradPen = new Pen(col' forePen.Width))                          {                              float startAngle = angle + (offset - (ensureVisible ? 30 : 0)) * (backwards ? 1 : -1);                              float sweepAngle = 15 * (backwards ? 1 : -1);                              e.Graphics.DrawArc(gradPen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' startAngle' sweepAngle);                          }                      }                  }              }
Magic Number,MetroFramework.Controls,MetroProgressSpinner,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressSpinner.cs,OnPaintForeground,The following statement contains a magic number: using (Pen forePen = new Pen(foreColor' (float)Width / 5))              {                  int padding = (int)Math.Ceiling((float)Width / 10);                    e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;                    if (progress != -1)                  {                      float sweepAngle;                      float progFrac = (float)(progress - minimum) / (float)(maximum - minimum);                        if (ensureVisible)                      {                          sweepAngle = 30 + 300f * progFrac;                      }                      else                      {                          sweepAngle = 360f * progFrac;                      }                        if (backwards)                      {                          sweepAngle = -sweepAngle;                      }                        e.Graphics.DrawArc(forePen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' angle' sweepAngle);                  }                  else                  {                      const int maxOffset = 180;                      for (int offset = 0; offset <= maxOffset; offset += 15)                      {                          int alpha = 290 - (offset * 290 / maxOffset);                            if (alpha > 255)                          {                              alpha = 255;                          }                          if (alpha < 0)                          {                              alpha = 0;                          }                            Color col = Color.FromArgb(alpha' forePen.Color);                          using (Pen gradPen = new Pen(col' forePen.Width))                          {                              float startAngle = angle + (offset - (ensureVisible ? 30 : 0)) * (backwards ? 1 : -1);                              float sweepAngle = 15 * (backwards ? 1 : -1);                              e.Graphics.DrawArc(gradPen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' startAngle' sweepAngle);                          }                      }                  }              }
Magic Number,MetroFramework.Controls,MetroProgressSpinner,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressSpinner.cs,OnPaintForeground,The following statement contains a magic number: using (Pen forePen = new Pen(foreColor' (float)Width / 5))              {                  int padding = (int)Math.Ceiling((float)Width / 10);                    e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;                    if (progress != -1)                  {                      float sweepAngle;                      float progFrac = (float)(progress - minimum) / (float)(maximum - minimum);                        if (ensureVisible)                      {                          sweepAngle = 30 + 300f * progFrac;                      }                      else                      {                          sweepAngle = 360f * progFrac;                      }                        if (backwards)                      {                          sweepAngle = -sweepAngle;                      }                        e.Graphics.DrawArc(forePen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' angle' sweepAngle);                  }                  else                  {                      const int maxOffset = 180;                      for (int offset = 0; offset <= maxOffset; offset += 15)                      {                          int alpha = 290 - (offset * 290 / maxOffset);                            if (alpha > 255)                          {                              alpha = 255;                          }                          if (alpha < 0)                          {                              alpha = 0;                          }                            Color col = Color.FromArgb(alpha' forePen.Color);                          using (Pen gradPen = new Pen(col' forePen.Width))                          {                              float startAngle = angle + (offset - (ensureVisible ? 30 : 0)) * (backwards ? 1 : -1);                              float sweepAngle = 15 * (backwards ? 1 : -1);                              e.Graphics.DrawArc(gradPen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' startAngle' sweepAngle);                          }                      }                  }              }
Magic Number,MetroFramework.Controls,MetroProgressSpinner,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressSpinner.cs,OnPaintForeground,The following statement contains a magic number: using (Pen forePen = new Pen(foreColor' (float)Width / 5))              {                  int padding = (int)Math.Ceiling((float)Width / 10);                    e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;                    if (progress != -1)                  {                      float sweepAngle;                      float progFrac = (float)(progress - minimum) / (float)(maximum - minimum);                        if (ensureVisible)                      {                          sweepAngle = 30 + 300f * progFrac;                      }                      else                      {                          sweepAngle = 360f * progFrac;                      }                        if (backwards)                      {                          sweepAngle = -sweepAngle;                      }                        e.Graphics.DrawArc(forePen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' angle' sweepAngle);                  }                  else                  {                      const int maxOffset = 180;                      for (int offset = 0; offset <= maxOffset; offset += 15)                      {                          int alpha = 290 - (offset * 290 / maxOffset);                            if (alpha > 255)                          {                              alpha = 255;                          }                          if (alpha < 0)                          {                              alpha = 0;                          }                            Color col = Color.FromArgb(alpha' forePen.Color);                          using (Pen gradPen = new Pen(col' forePen.Width))                          {                              float startAngle = angle + (offset - (ensureVisible ? 30 : 0)) * (backwards ? 1 : -1);                              float sweepAngle = 15 * (backwards ? 1 : -1);                              e.Graphics.DrawArc(gradPen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' startAngle' sweepAngle);                          }                      }                  }              }
Magic Number,MetroFramework.Controls,MetroProgressSpinner,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressSpinner.cs,OnPaintForeground,The following statement contains a magic number: using (Pen forePen = new Pen(foreColor' (float)Width / 5))              {                  int padding = (int)Math.Ceiling((float)Width / 10);                    e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;                    if (progress != -1)                  {                      float sweepAngle;                      float progFrac = (float)(progress - minimum) / (float)(maximum - minimum);                        if (ensureVisible)                      {                          sweepAngle = 30 + 300f * progFrac;                      }                      else                      {                          sweepAngle = 360f * progFrac;                      }                        if (backwards)                      {                          sweepAngle = -sweepAngle;                      }                        e.Graphics.DrawArc(forePen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' angle' sweepAngle);                  }                  else                  {                      const int maxOffset = 180;                      for (int offset = 0; offset <= maxOffset; offset += 15)                      {                          int alpha = 290 - (offset * 290 / maxOffset);                            if (alpha > 255)                          {                              alpha = 255;                          }                          if (alpha < 0)                          {                              alpha = 0;                          }                            Color col = Color.FromArgb(alpha' forePen.Color);                          using (Pen gradPen = new Pen(col' forePen.Width))                          {                              float startAngle = angle + (offset - (ensureVisible ? 30 : 0)) * (backwards ? 1 : -1);                              float sweepAngle = 15 * (backwards ? 1 : -1);                              e.Graphics.DrawArc(gradPen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' startAngle' sweepAngle);                          }                      }                  }              }
Magic Number,MetroFramework.Controls,MetroProgressSpinner,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressSpinner.cs,OnPaintForeground,The following statement contains a magic number: using (Pen forePen = new Pen(foreColor' (float)Width / 5))              {                  int padding = (int)Math.Ceiling((float)Width / 10);                    e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;                    if (progress != -1)                  {                      float sweepAngle;                      float progFrac = (float)(progress - minimum) / (float)(maximum - minimum);                        if (ensureVisible)                      {                          sweepAngle = 30 + 300f * progFrac;                      }                      else                      {                          sweepAngle = 360f * progFrac;                      }                        if (backwards)                      {                          sweepAngle = -sweepAngle;                      }                        e.Graphics.DrawArc(forePen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' angle' sweepAngle);                  }                  else                  {                      const int maxOffset = 180;                      for (int offset = 0; offset <= maxOffset; offset += 15)                      {                          int alpha = 290 - (offset * 290 / maxOffset);                            if (alpha > 255)                          {                              alpha = 255;                          }                          if (alpha < 0)                          {                              alpha = 0;                          }                            Color col = Color.FromArgb(alpha' forePen.Color);                          using (Pen gradPen = new Pen(col' forePen.Width))                          {                              float startAngle = angle + (offset - (ensureVisible ? 30 : 0)) * (backwards ? 1 : -1);                              float sweepAngle = 15 * (backwards ? 1 : -1);                              e.Graphics.DrawArc(gradPen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' startAngle' sweepAngle);                          }                      }                  }              }
Magic Number,MetroFramework.Controls,MetroProgressSpinner,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroProgressSpinner.cs,OnPaintForeground,The following statement contains a magic number: using (Pen forePen = new Pen(foreColor' (float)Width / 5))              {                  int padding = (int)Math.Ceiling((float)Width / 10);                    e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;                    if (progress != -1)                  {                      float sweepAngle;                      float progFrac = (float)(progress - minimum) / (float)(maximum - minimum);                        if (ensureVisible)                      {                          sweepAngle = 30 + 300f * progFrac;                      }                      else                      {                          sweepAngle = 360f * progFrac;                      }                        if (backwards)                      {                          sweepAngle = -sweepAngle;                      }                        e.Graphics.DrawArc(forePen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' angle' sweepAngle);                  }                  else                  {                      const int maxOffset = 180;                      for (int offset = 0; offset <= maxOffset; offset += 15)                      {                          int alpha = 290 - (offset * 290 / maxOffset);                            if (alpha > 255)                          {                              alpha = 255;                          }                          if (alpha < 0)                          {                              alpha = 0;                          }                            Color col = Color.FromArgb(alpha' forePen.Color);                          using (Pen gradPen = new Pen(col' forePen.Width))                          {                              float startAngle = angle + (offset - (ensureVisible ? 30 : 0)) * (backwards ? 1 : -1);                              float sweepAngle = 15 * (backwards ? 1 : -1);                              e.Graphics.DrawArc(gradPen' padding' padding' Width - 2 * padding - 1' Height - 2 * padding - 1' startAngle' sweepAngle);                          }                      }                  }              }
Magic Number,MetroFramework.Controls,MetroRadioButton,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroRadioButton.cs,OnPaintBackground,The following statement contains a magic number: try              {                  Color backColor = BackColor;                    if (!useCustomBackColor)                  {                      backColor = MetroPaint.BackColor.Form(Theme);                      if (Parent is MetroTile)                      {                          backColor = MetroPaint.GetStyleColor(Style);                      }                  }                    if (backColor.A == 255)                  {                      e.Graphics.Clear(backColor);                      return;                  }                    base.OnPaintBackground(e);                    OnCustomPaintBackground(new MetroPaintEventArgs(backColor' Color.Empty' e.Graphics));              }              catch              {                  Invalidate();              }
Magic Number,MetroFramework.Controls,MetroRadioButton,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroRadioButton.cs,OnPaintForeground,The following statement contains a magic number: using (Pen p = new Pen(borderColor))              {                  Rectangle boxRect = new Rectangle(0' Height / 2 - 6' 12' 12);                  e.Graphics.DrawEllipse(p' boxRect);              }
Magic Number,MetroFramework.Controls,MetroRadioButton,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroRadioButton.cs,OnPaintForeground,The following statement contains a magic number: using (Pen p = new Pen(borderColor))              {                  Rectangle boxRect = new Rectangle(0' Height / 2 - 6' 12' 12);                  e.Graphics.DrawEllipse(p' boxRect);              }
Magic Number,MetroFramework.Controls,MetroRadioButton,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroRadioButton.cs,OnPaintForeground,The following statement contains a magic number: using (Pen p = new Pen(borderColor))              {                  Rectangle boxRect = new Rectangle(0' Height / 2 - 6' 12' 12);                  e.Graphics.DrawEllipse(p' boxRect);              }
Magic Number,MetroFramework.Controls,MetroRadioButton,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroRadioButton.cs,OnPaintForeground,The following statement contains a magic number: using (Pen p = new Pen(borderColor))              {                  Rectangle boxRect = new Rectangle(0' Height / 2 - 6' 12' 12);                  e.Graphics.DrawEllipse(p' boxRect);              }
Magic Number,MetroFramework.Controls,MetroRadioButton,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroRadioButton.cs,OnPaintForeground,The following statement contains a magic number: if (Checked)              {                  Color fillColor = MetroPaint.GetStyleColor(Style);                    using (SolidBrush b = new SolidBrush(fillColor))                  {                      Rectangle boxRect = new Rectangle(3' Height / 2 - 3' 6' 6);                      e.Graphics.FillEllipse(b' boxRect);                  }              }
Magic Number,MetroFramework.Controls,MetroRadioButton,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroRadioButton.cs,OnPaintForeground,The following statement contains a magic number: if (Checked)              {                  Color fillColor = MetroPaint.GetStyleColor(Style);                    using (SolidBrush b = new SolidBrush(fillColor))                  {                      Rectangle boxRect = new Rectangle(3' Height / 2 - 3' 6' 6);                      e.Graphics.FillEllipse(b' boxRect);                  }              }
Magic Number,MetroFramework.Controls,MetroRadioButton,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroRadioButton.cs,OnPaintForeground,The following statement contains a magic number: if (Checked)              {                  Color fillColor = MetroPaint.GetStyleColor(Style);                    using (SolidBrush b = new SolidBrush(fillColor))                  {                      Rectangle boxRect = new Rectangle(3' Height / 2 - 3' 6' 6);                      e.Graphics.FillEllipse(b' boxRect);                  }              }
Magic Number,MetroFramework.Controls,MetroRadioButton,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroRadioButton.cs,OnPaintForeground,The following statement contains a magic number: if (Checked)              {                  Color fillColor = MetroPaint.GetStyleColor(Style);                    using (SolidBrush b = new SolidBrush(fillColor))                  {                      Rectangle boxRect = new Rectangle(3' Height / 2 - 3' 6' 6);                      e.Graphics.FillEllipse(b' boxRect);                  }              }
Magic Number,MetroFramework.Controls,MetroRadioButton,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroRadioButton.cs,OnPaintForeground,The following statement contains a magic number: if (Checked)              {                  Color fillColor = MetroPaint.GetStyleColor(Style);                    using (SolidBrush b = new SolidBrush(fillColor))                  {                      Rectangle boxRect = new Rectangle(3' Height / 2 - 3' 6' 6);                      e.Graphics.FillEllipse(b' boxRect);                  }              }
Magic Number,MetroFramework.Controls,MetroRadioButton,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroRadioButton.cs,OnPaintForeground,The following statement contains a magic number: Rectangle textRect = new Rectangle(16' 0' Width - 16' Height);
Magic Number,MetroFramework.Controls,MetroRadioButton,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroRadioButton.cs,OnPaintForeground,The following statement contains a magic number: Rectangle textRect = new Rectangle(16' 0' Width - 16' Height);
Magic Number,MetroFramework.Controls,MetroRadioButton,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroRadioButton.cs,GetPreferredSize,The following statement contains a magic number: using (var g = CreateGraphics())              {                  proposedSize = new Size(int.MaxValue' int.MaxValue);                  preferredSize = TextRenderer.MeasureText(g' Text' MetroFonts.CheckBox(metroCheckBoxSize' metroCheckBoxWeight)' proposedSize' MetroPaint.GetTextFormatFlags(TextAlign));                  preferredSize.Width += 16;              }
Magic Number,MetroFramework.Controls,MetroScrollBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroScrollBar.cs,MetroScrollBar,The following statement contains a magic number: Width = 10;
Magic Number,MetroFramework.Controls,MetroScrollBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroScrollBar.cs,MetroScrollBar,The following statement contains a magic number: Height = 200;
Magic Number,MetroFramework.Controls,MetroScrollBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroScrollBar.cs,MetroScrollBar,The following statement contains a magic number: progressTimer.Interval = 20;
Magic Number,MetroFramework.Controls,MetroScrollBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroScrollBar.cs,OnPaintBackground,The following statement contains a magic number: try              {                  Color backColor = BackColor;                    if (!useCustomBackColor)                  {                      if (Parent != null)                      {                          if (Parent is IMetroControl)                          {                              backColor = MetroPaint.BackColor.Form(Theme);                          }                          else                          {                              backColor = Parent.BackColor;                          }                      }                      else                      {                          backColor = MetroPaint.BackColor.Form(Theme);                      }                  }                    if (backColor.A == 255)                  {                      e.Graphics.Clear(backColor);                      return;                  }                    base.OnPaintBackground(e);                    OnCustomPaintBackground(new MetroPaintEventArgs(backColor' Color.Empty' e.Graphics));              }              catch              {                  Invalidate();              }
Magic Number,MetroFramework.Controls,MetroScrollBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroScrollBar.cs,DrawScrollBar,The following statement contains a magic number: using (var b = new SolidBrush(backColor))              {                  var thumbRect = new Rectangle(thumbRectangle.X - 1' thumbRectangle.Y - 1' thumbRectangle.Width + 2' thumbRectangle.Height + 2);                  g.FillRectangle(b' thumbRect);              }
Magic Number,MetroFramework.Controls,MetroScrollBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroScrollBar.cs,DrawScrollBar,The following statement contains a magic number: using (var b = new SolidBrush(backColor))              {                  var thumbRect = new Rectangle(thumbRectangle.X - 1' thumbRectangle.Y - 1' thumbRectangle.Width + 2' thumbRectangle.Height + 2);                  g.FillRectangle(b' thumbRect);              }
Magic Number,MetroFramework.Controls,MetroScrollBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroScrollBar.cs,OnMouseWheel,The following statement contains a magic number: int v = e.Delta / 120 * (maximum - minimum) / mouseWheelBarPartitions;
Magic Number,MetroFramework.Controls,MetroScrollBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroScrollBar.cs,SetupScrollBar,The following statement contains a magic number: if (Orientation == MetroScrollOrientation.Vertical)              {                  thumbWidth = Width > 0 ? Width : 10;                  thumbHeight = GetThumbSize();                    clickedBarRectangle = ClientRectangle;                  clickedBarRectangle.Inflate(-1' -1);                    thumbRectangle = new Rectangle(ClientRectangle.X' ClientRectangle.Y' thumbWidth' thumbHeight);                    thumbPosition = thumbRectangle.Height/2;                  thumbBottomLimitBottom = ClientRectangle.Bottom;                  thumbBottomLimitTop = thumbBottomLimitBottom - thumbRectangle.Height;                  thumbTopLimit = ClientRectangle.Y;              }              else              {                  thumbHeight = Height > 0 ? Height : 10;                  thumbWidth = GetThumbSize();                    clickedBarRectangle = ClientRectangle;                  clickedBarRectangle.Inflate(-1' -1);                    thumbRectangle = new Rectangle(ClientRectangle.X' ClientRectangle.Y' thumbWidth' thumbHeight);                    thumbPosition = thumbRectangle.Width/2;                  thumbBottomLimitBottom = ClientRectangle.Right;                  thumbBottomLimitTop = thumbBottomLimitBottom - thumbRectangle.Width;                  thumbTopLimit = ClientRectangle.X;              }
Magic Number,MetroFramework.Controls,MetroScrollBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroScrollBar.cs,SetupScrollBar,The following statement contains a magic number: if (Orientation == MetroScrollOrientation.Vertical)              {                  thumbWidth = Width > 0 ? Width : 10;                  thumbHeight = GetThumbSize();                    clickedBarRectangle = ClientRectangle;                  clickedBarRectangle.Inflate(-1' -1);                    thumbRectangle = new Rectangle(ClientRectangle.X' ClientRectangle.Y' thumbWidth' thumbHeight);                    thumbPosition = thumbRectangle.Height/2;                  thumbBottomLimitBottom = ClientRectangle.Bottom;                  thumbBottomLimitTop = thumbBottomLimitBottom - thumbRectangle.Height;                  thumbTopLimit = ClientRectangle.Y;              }              else              {                  thumbHeight = Height > 0 ? Height : 10;                  thumbWidth = GetThumbSize();                    clickedBarRectangle = ClientRectangle;                  clickedBarRectangle.Inflate(-1' -1);                    thumbRectangle = new Rectangle(ClientRectangle.X' ClientRectangle.Y' thumbWidth' thumbHeight);                    thumbPosition = thumbRectangle.Width/2;                  thumbBottomLimitBottom = ClientRectangle.Right;                  thumbBottomLimitTop = thumbBottomLimitBottom - thumbRectangle.Width;                  thumbTopLimit = ClientRectangle.X;              }
Magic Number,MetroFramework.Controls,MetroScrollBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroScrollBar.cs,SetupScrollBar,The following statement contains a magic number: if (Orientation == MetroScrollOrientation.Vertical)              {                  thumbWidth = Width > 0 ? Width : 10;                  thumbHeight = GetThumbSize();                    clickedBarRectangle = ClientRectangle;                  clickedBarRectangle.Inflate(-1' -1);                    thumbRectangle = new Rectangle(ClientRectangle.X' ClientRectangle.Y' thumbWidth' thumbHeight);                    thumbPosition = thumbRectangle.Height/2;                  thumbBottomLimitBottom = ClientRectangle.Bottom;                  thumbBottomLimitTop = thumbBottomLimitBottom - thumbRectangle.Height;                  thumbTopLimit = ClientRectangle.Y;              }              else              {                  thumbHeight = Height > 0 ? Height : 10;                  thumbWidth = GetThumbSize();                    clickedBarRectangle = ClientRectangle;                  clickedBarRectangle.Inflate(-1' -1);                    thumbRectangle = new Rectangle(ClientRectangle.X' ClientRectangle.Y' thumbWidth' thumbHeight);                    thumbPosition = thumbRectangle.Width/2;                  thumbBottomLimitBottom = ClientRectangle.Right;                  thumbBottomLimitTop = thumbBottomLimitBottom - thumbRectangle.Width;                  thumbTopLimit = ClientRectangle.X;              }
Magic Number,MetroFramework.Controls,MetroScrollBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroScrollBar.cs,SetupScrollBar,The following statement contains a magic number: if (Orientation == MetroScrollOrientation.Vertical)              {                  thumbWidth = Width > 0 ? Width : 10;                  thumbHeight = GetThumbSize();                    clickedBarRectangle = ClientRectangle;                  clickedBarRectangle.Inflate(-1' -1);                    thumbRectangle = new Rectangle(ClientRectangle.X' ClientRectangle.Y' thumbWidth' thumbHeight);                    thumbPosition = thumbRectangle.Height/2;                  thumbBottomLimitBottom = ClientRectangle.Bottom;                  thumbBottomLimitTop = thumbBottomLimitBottom - thumbRectangle.Height;                  thumbTopLimit = ClientRectangle.Y;              }              else              {                  thumbHeight = Height > 0 ? Height : 10;                  thumbWidth = GetThumbSize();                    clickedBarRectangle = ClientRectangle;                  clickedBarRectangle.Inflate(-1' -1);                    thumbRectangle = new Rectangle(ClientRectangle.X' ClientRectangle.Y' thumbWidth' thumbHeight);                    thumbPosition = thumbRectangle.Width/2;                  thumbBottomLimitBottom = ClientRectangle.Right;                  thumbBottomLimitTop = thumbBottomLimitBottom - thumbRectangle.Width;                  thumbTopLimit = ClientRectangle.X;              }
Magic Number,MetroFramework.Controls,MetroScrollBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroScrollBar.cs,EnableTimer,The following statement contains a magic number: if (!progressTimer.Enabled)              {                  progressTimer.Interval = 600;                  progressTimer.Start();              }              else              {                  progressTimer.Interval = 10;              }
Magic Number,MetroFramework.Controls,MetroScrollBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroScrollBar.cs,EnableTimer,The following statement contains a magic number: if (!progressTimer.Enabled)              {                  progressTimer.Interval = 600;                  progressTimer.Start();              }              else              {                  progressTimer.Interval = 10;              }
Magic Number,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,MetroTabControl,The following statement contains a magic number: Padding = new Point(6' 8);
Magic Number,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,MetroTabControl,The following statement contains a magic number: Padding = new Point(6' 8);
Magic Number,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,OnPaintBackground,The following statement contains a magic number: try              {                  Color backColor = BackColor;                    if (!useCustomBackColor)                  {                      backColor = MetroPaint.BackColor.Form(Theme);                  }                    if (backColor.A == 255 && BackgroundImage == null)                  {                      e.Graphics.Clear(backColor);                      return;                  }                    base.OnPaintBackground(e);                    OnCustomPaintBackground(new MetroPaintEventArgs(backColor' Color.Empty' e.Graphics));              }              catch              {                  Invalidate();              }
Magic Number,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,DrawTabBottomBorder,The following statement contains a magic number: using (Brush bgBrush = new SolidBrush(MetroPaint.BorderColor.TabControl.Normal(Theme)))              {                  Rectangle borderRectangle = new Rectangle(DisplayRectangle.X' GetTabRect(index).Bottom + 2 - TabBottomBorderHeight' DisplayRectangle.Width' TabBottomBorderHeight);                  graphics.FillRectangle(bgBrush' borderRectangle);              }
Magic Number,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,DrawTabSelected,The following statement contains a magic number: using (Brush selectionBrush = new SolidBrush(MetroPaint.GetStyleColor(Style)))              {                  Rectangle selectedTabRect = GetTabRect(index);                  Rectangle borderRectangle = new Rectangle(selectedTabRect.X + ((index == 0) ? 2 : 0)' GetTabRect(index).Bottom + 2 - TabBottomBorderHeight' selectedTabRect.Width + ((index == 0) ? 0 : 2)' TabBottomBorderHeight);                  graphics.FillRectangle(selectionBrush' borderRectangle);              }
Magic Number,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,DrawTabSelected,The following statement contains a magic number: using (Brush selectionBrush = new SolidBrush(MetroPaint.GetStyleColor(Style)))              {                  Rectangle selectedTabRect = GetTabRect(index);                  Rectangle borderRectangle = new Rectangle(selectedTabRect.X + ((index == 0) ? 2 : 0)' GetTabRect(index).Bottom + 2 - TabBottomBorderHeight' selectedTabRect.Width + ((index == 0) ? 0 : 2)' TabBottomBorderHeight);                  graphics.FillRectangle(selectionBrush' borderRectangle);              }
Magic Number,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,DrawTabSelected,The following statement contains a magic number: using (Brush selectionBrush = new SolidBrush(MetroPaint.GetStyleColor(Style)))              {                  Rectangle selectedTabRect = GetTabRect(index);                  Rectangle borderRectangle = new Rectangle(selectedTabRect.X + ((index == 0) ? 2 : 0)' GetTabRect(index).Bottom + 2 - TabBottomBorderHeight' selectedTabRect.Width + ((index == 0) ? 0 : 2)' TabBottomBorderHeight);                  graphics.FillRectangle(selectionBrush' borderRectangle);              }
Magic Number,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,DrawTab,The following statement contains a magic number: tabRect.Width += 20;
Magic Number,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,DrawUpDown,The following statement contains a magic number: using (Brush b = new SolidBrush(MetroPaint.BorderColor.TabControl.Normal(Theme)))              {                  GraphicsPath gp = new GraphicsPath(FillMode.Winding);                  PointF[] pts = { new PointF(6' 6)' new PointF(16' 0)' new PointF(16' 12) };                  gp.AddLines(pts);                    graphics.FillPath(b' gp);                    gp.Reset();                    PointF[] pts2 = { new PointF(borderRect.Width - 15' 0)' new PointF(borderRect.Width - 5' 6)' new PointF(borderRect.Width - 15' 12) };                  gp.AddLines(pts2);                    graphics.FillPath(b' gp);                    gp.Dispose();              }
Magic Number,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,DrawUpDown,The following statement contains a magic number: using (Brush b = new SolidBrush(MetroPaint.BorderColor.TabControl.Normal(Theme)))              {                  GraphicsPath gp = new GraphicsPath(FillMode.Winding);                  PointF[] pts = { new PointF(6' 6)' new PointF(16' 0)' new PointF(16' 12) };                  gp.AddLines(pts);                    graphics.FillPath(b' gp);                    gp.Reset();                    PointF[] pts2 = { new PointF(borderRect.Width - 15' 0)' new PointF(borderRect.Width - 5' 6)' new PointF(borderRect.Width - 15' 12) };                  gp.AddLines(pts2);                    graphics.FillPath(b' gp);                    gp.Dispose();              }
Magic Number,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,DrawUpDown,The following statement contains a magic number: using (Brush b = new SolidBrush(MetroPaint.BorderColor.TabControl.Normal(Theme)))              {                  GraphicsPath gp = new GraphicsPath(FillMode.Winding);                  PointF[] pts = { new PointF(6' 6)' new PointF(16' 0)' new PointF(16' 12) };                  gp.AddLines(pts);                    graphics.FillPath(b' gp);                    gp.Reset();                    PointF[] pts2 = { new PointF(borderRect.Width - 15' 0)' new PointF(borderRect.Width - 5' 6)' new PointF(borderRect.Width - 15' 12) };                  gp.AddLines(pts2);                    graphics.FillPath(b' gp);                    gp.Dispose();              }
Magic Number,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,DrawUpDown,The following statement contains a magic number: using (Brush b = new SolidBrush(MetroPaint.BorderColor.TabControl.Normal(Theme)))              {                  GraphicsPath gp = new GraphicsPath(FillMode.Winding);                  PointF[] pts = { new PointF(6' 6)' new PointF(16' 0)' new PointF(16' 12) };                  gp.AddLines(pts);                    graphics.FillPath(b' gp);                    gp.Reset();                    PointF[] pts2 = { new PointF(borderRect.Width - 15' 0)' new PointF(borderRect.Width - 5' 6)' new PointF(borderRect.Width - 15' 12) };                  gp.AddLines(pts2);                    graphics.FillPath(b' gp);                    gp.Dispose();              }
Magic Number,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,DrawUpDown,The following statement contains a magic number: using (Brush b = new SolidBrush(MetroPaint.BorderColor.TabControl.Normal(Theme)))              {                  GraphicsPath gp = new GraphicsPath(FillMode.Winding);                  PointF[] pts = { new PointF(6' 6)' new PointF(16' 0)' new PointF(16' 12) };                  gp.AddLines(pts);                    graphics.FillPath(b' gp);                    gp.Reset();                    PointF[] pts2 = { new PointF(borderRect.Width - 15' 0)' new PointF(borderRect.Width - 5' 6)' new PointF(borderRect.Width - 15' 12) };                  gp.AddLines(pts2);                    graphics.FillPath(b' gp);                    gp.Dispose();              }
Magic Number,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,DrawUpDown,The following statement contains a magic number: using (Brush b = new SolidBrush(MetroPaint.BorderColor.TabControl.Normal(Theme)))              {                  GraphicsPath gp = new GraphicsPath(FillMode.Winding);                  PointF[] pts = { new PointF(6' 6)' new PointF(16' 0)' new PointF(16' 12) };                  gp.AddLines(pts);                    graphics.FillPath(b' gp);                    gp.Reset();                    PointF[] pts2 = { new PointF(borderRect.Width - 15' 0)' new PointF(borderRect.Width - 5' 6)' new PointF(borderRect.Width - 15' 12) };                  gp.AddLines(pts2);                    graphics.FillPath(b' gp);                    gp.Dispose();              }
Magic Number,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,DrawUpDown,The following statement contains a magic number: using (Brush b = new SolidBrush(MetroPaint.BorderColor.TabControl.Normal(Theme)))              {                  GraphicsPath gp = new GraphicsPath(FillMode.Winding);                  PointF[] pts = { new PointF(6' 6)' new PointF(16' 0)' new PointF(16' 12) };                  gp.AddLines(pts);                    graphics.FillPath(b' gp);                    gp.Reset();                    PointF[] pts2 = { new PointF(borderRect.Width - 15' 0)' new PointF(borderRect.Width - 5' 6)' new PointF(borderRect.Width - 15' 12) };                  gp.AddLines(pts2);                    graphics.FillPath(b' gp);                    gp.Dispose();              }
Magic Number,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,DrawUpDown,The following statement contains a magic number: using (Brush b = new SolidBrush(MetroPaint.BorderColor.TabControl.Normal(Theme)))              {                  GraphicsPath gp = new GraphicsPath(FillMode.Winding);                  PointF[] pts = { new PointF(6' 6)' new PointF(16' 0)' new PointF(16' 12) };                  gp.AddLines(pts);                    graphics.FillPath(b' gp);                    gp.Reset();                    PointF[] pts2 = { new PointF(borderRect.Width - 15' 0)' new PointF(borderRect.Width - 5' 6)' new PointF(borderRect.Width - 15' 12) };                  gp.AddLines(pts2);                    graphics.FillPath(b' gp);                    gp.Dispose();              }
Magic Number,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,DrawUpDown,The following statement contains a magic number: using (Brush b = new SolidBrush(MetroPaint.BorderColor.TabControl.Normal(Theme)))              {                  GraphicsPath gp = new GraphicsPath(FillMode.Winding);                  PointF[] pts = { new PointF(6' 6)' new PointF(16' 0)' new PointF(16' 12) };                  gp.AddLines(pts);                    graphics.FillPath(b' gp);                    gp.Reset();                    PointF[] pts2 = { new PointF(borderRect.Width - 15' 0)' new PointF(borderRect.Width - 5' 6)' new PointF(borderRect.Width - 15' 12) };                  gp.AddLines(pts2);                    graphics.FillPath(b' gp);                    gp.Dispose();              }
Magic Number,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,DrawUpDown,The following statement contains a magic number: using (Brush b = new SolidBrush(MetroPaint.BorderColor.TabControl.Normal(Theme)))              {                  GraphicsPath gp = new GraphicsPath(FillMode.Winding);                  PointF[] pts = { new PointF(6' 6)' new PointF(16' 0)' new PointF(16' 12) };                  gp.AddLines(pts);                    graphics.FillPath(b' gp);                    gp.Reset();                    PointF[] pts2 = { new PointF(borderRect.Width - 15' 0)' new PointF(borderRect.Width - 5' 6)' new PointF(borderRect.Width - 15' 12) };                  gp.AddLines(pts2);                    graphics.FillPath(b' gp);                    gp.Dispose();              }
Magic Number,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,FindUpDown,The following statement contains a magic number: if (!DesignMode)              {                  bool bFound = false;                    IntPtr pWnd = WinApi.GetWindow(Handle' WinApi.GW_CHILD);                    while (pWnd != IntPtr.Zero)                  {                      char[] className = new char[33];                        int length = WinApi.GetClassName(pWnd' className' 32);                        string s = new string(className' 0' length);                        if (s == "msctls_updown32")                      {                          bFound = true;                            if (!bUpDown)                          {                              this.scUpDown = new SubClass(pWnd' true);                              this.scUpDown.SubClassedWndProc += new SubClass.SubClassWndProcEventHandler(scUpDown_SubClassedWndProc);                                bUpDown = true;                          }                          break;                      }                        pWnd = WinApi.GetWindow(pWnd' WinApi.GW_HWNDNEXT);                  }                    if ((!bFound) && (bUpDown))                      bUpDown = false;              }
Magic Number,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,FindUpDown,The following statement contains a magic number: if (!DesignMode)              {                  bool bFound = false;                    IntPtr pWnd = WinApi.GetWindow(Handle' WinApi.GW_CHILD);                    while (pWnd != IntPtr.Zero)                  {                      char[] className = new char[33];                        int length = WinApi.GetClassName(pWnd' className' 32);                        string s = new string(className' 0' length);                        if (s == "msctls_updown32")                      {                          bFound = true;                            if (!bUpDown)                          {                              this.scUpDown = new SubClass(pWnd' true);                              this.scUpDown.SubClassedWndProc += new SubClass.SubClassWndProcEventHandler(scUpDown_SubClassedWndProc);                                bUpDown = true;                          }                          break;                      }                        pWnd = WinApi.GetWindow(pWnd' WinApi.GW_HWNDNEXT);                  }                    if ((!bFound) && (bUpDown))                      bUpDown = false;              }
Magic Number,MetroFramework.Controls,MetroTabPage,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabPage.cs,OnPaintBackground,The following statement contains a magic number: try              {                  Color backColor = BackColor;                    if (!useCustomBackColor)                  {                      backColor = MetroPaint.BackColor.Form(Theme);                  }                    if (backColor.A == 255 && BackgroundImage == null)                  {                      e.Graphics.Clear(backColor);                      return;                  }                    base.OnPaintBackground(e);                    OnCustomPaintBackground(new MetroPaintEventArgs(backColor' Color.Empty' e.Graphics));              }              catch              {                  Invalidate();              }
Magic Number,MetroFramework.Controls,MetroTextBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTextBox.cs,OnPaintBackground,The following statement contains a magic number: try              {                  Color backColor = BackColor;                  baseTextBox.BackColor = BackColor;                    if (!useCustomBackColor)                  {                      backColor = MetroPaint.BackColor.Button.Normal(Theme);                      baseTextBox.BackColor = MetroPaint.BackColor.Button.Normal(Theme);                  }                    if (backColor.A == 255)                  {                      e.Graphics.Clear(backColor);                      return;                  }                    base.OnPaintBackground(e);                    OnCustomPaintBackground(new MetroPaintEventArgs(backColor' Color.Empty' e.Graphics));              }              catch              {                  Invalidate();              }
Magic Number,MetroFramework.Controls,MetroTextBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTextBox.cs,CreateBaseTextBox,The following statement contains a magic number: baseTextBox.Location = new Point(3' 3);
Magic Number,MetroFramework.Controls,MetroTextBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTextBox.cs,CreateBaseTextBox,The following statement contains a magic number: baseTextBox.Location = new Point(3' 3);
Magic Number,MetroFramework.Controls,MetroTextBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTextBox.cs,CreateBaseTextBox,The following statement contains a magic number: baseTextBox.Size = new Size(Width - 6' Height - 6);
Magic Number,MetroFramework.Controls,MetroTextBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTextBox.cs,CreateBaseTextBox,The following statement contains a magic number: baseTextBox.Size = new Size(Width - 6' Height - 6);
Magic Number,MetroFramework.Controls,MetroTextBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTextBox.cs,CreateBaseTextBox,The following statement contains a magic number: Size = new Size(baseTextBox.Width + 6' baseTextBox.Height + 6);
Magic Number,MetroFramework.Controls,MetroTextBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTextBox.cs,CreateBaseTextBox,The following statement contains a magic number: Size = new Size(baseTextBox.Width + 6' baseTextBox.Height + 6);
Magic Number,MetroFramework.Controls,MetroTextBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTextBox.cs,UpdateBaseTextBox,The following statement contains a magic number: if (displayIcon)              {                  Point textBoxLocation = new Point(iconSize.Width + 4' 3);                  if (textBoxIconRight)                  {                      textBoxLocation = new Point(3' 3);                  }                    baseTextBox.Location = textBoxLocation;                  baseTextBox.Size = new Size(Width - 7 - iconSize.Width' Height - 6);              }              else              {                  baseTextBox.Location = new Point(3' 3);                  baseTextBox.Size = new Size(Width - 6' Height - 6);              }
Magic Number,MetroFramework.Controls,MetroTextBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTextBox.cs,UpdateBaseTextBox,The following statement contains a magic number: if (displayIcon)              {                  Point textBoxLocation = new Point(iconSize.Width + 4' 3);                  if (textBoxIconRight)                  {                      textBoxLocation = new Point(3' 3);                  }                    baseTextBox.Location = textBoxLocation;                  baseTextBox.Size = new Size(Width - 7 - iconSize.Width' Height - 6);              }              else              {                  baseTextBox.Location = new Point(3' 3);                  baseTextBox.Size = new Size(Width - 6' Height - 6);              }
Magic Number,MetroFramework.Controls,MetroTextBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTextBox.cs,UpdateBaseTextBox,The following statement contains a magic number: if (displayIcon)              {                  Point textBoxLocation = new Point(iconSize.Width + 4' 3);                  if (textBoxIconRight)                  {                      textBoxLocation = new Point(3' 3);                  }                    baseTextBox.Location = textBoxLocation;                  baseTextBox.Size = new Size(Width - 7 - iconSize.Width' Height - 6);              }              else              {                  baseTextBox.Location = new Point(3' 3);                  baseTextBox.Size = new Size(Width - 6' Height - 6);              }
Magic Number,MetroFramework.Controls,MetroTextBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTextBox.cs,UpdateBaseTextBox,The following statement contains a magic number: if (displayIcon)              {                  Point textBoxLocation = new Point(iconSize.Width + 4' 3);                  if (textBoxIconRight)                  {                      textBoxLocation = new Point(3' 3);                  }                    baseTextBox.Location = textBoxLocation;                  baseTextBox.Size = new Size(Width - 7 - iconSize.Width' Height - 6);              }              else              {                  baseTextBox.Location = new Point(3' 3);                  baseTextBox.Size = new Size(Width - 6' Height - 6);              }
Magic Number,MetroFramework.Controls,MetroTextBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTextBox.cs,UpdateBaseTextBox,The following statement contains a magic number: if (displayIcon)              {                  Point textBoxLocation = new Point(iconSize.Width + 4' 3);                  if (textBoxIconRight)                  {                      textBoxLocation = new Point(3' 3);                  }                    baseTextBox.Location = textBoxLocation;                  baseTextBox.Size = new Size(Width - 7 - iconSize.Width' Height - 6);              }              else              {                  baseTextBox.Location = new Point(3' 3);                  baseTextBox.Size = new Size(Width - 6' Height - 6);              }
Magic Number,MetroFramework.Controls,MetroTextBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTextBox.cs,UpdateBaseTextBox,The following statement contains a magic number: if (displayIcon)              {                  Point textBoxLocation = new Point(iconSize.Width + 4' 3);                  if (textBoxIconRight)                  {                      textBoxLocation = new Point(3' 3);                  }                    baseTextBox.Location = textBoxLocation;                  baseTextBox.Size = new Size(Width - 7 - iconSize.Width' Height - 6);              }              else              {                  baseTextBox.Location = new Point(3' 3);                  baseTextBox.Size = new Size(Width - 6' Height - 6);              }
Magic Number,MetroFramework.Controls,MetroTextBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTextBox.cs,UpdateBaseTextBox,The following statement contains a magic number: if (displayIcon)              {                  Point textBoxLocation = new Point(iconSize.Width + 4' 3);                  if (textBoxIconRight)                  {                      textBoxLocation = new Point(3' 3);                  }                    baseTextBox.Location = textBoxLocation;                  baseTextBox.Size = new Size(Width - 7 - iconSize.Width' Height - 6);              }              else              {                  baseTextBox.Location = new Point(3' 3);                  baseTextBox.Size = new Size(Width - 6' Height - 6);              }
Magic Number,MetroFramework.Controls,MetroTextBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTextBox.cs,UpdateBaseTextBox,The following statement contains a magic number: if (displayIcon)              {                  Point textBoxLocation = new Point(iconSize.Width + 4' 3);                  if (textBoxIconRight)                  {                      textBoxLocation = new Point(3' 3);                  }                    baseTextBox.Location = textBoxLocation;                  baseTextBox.Size = new Size(Width - 7 - iconSize.Width' Height - 6);              }              else              {                  baseTextBox.Location = new Point(3' 3);                  baseTextBox.Size = new Size(Width - 6' Height - 6);              }
Magic Number,MetroFramework.Controls,MetroTextBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTextBox.cs,UpdateBaseTextBox,The following statement contains a magic number: if (displayIcon)              {                  Point textBoxLocation = new Point(iconSize.Width + 4' 3);                  if (textBoxIconRight)                  {                      textBoxLocation = new Point(3' 3);                  }                    baseTextBox.Location = textBoxLocation;                  baseTextBox.Size = new Size(Width - 7 - iconSize.Width' Height - 6);              }              else              {                  baseTextBox.Location = new Point(3' 3);                  baseTextBox.Size = new Size(Width - 6' Height - 6);              }
Magic Number,MetroFramework.Controls,MetroTextBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTextBox.cs,UpdateBaseTextBox,The following statement contains a magic number: if (displayIcon)              {                  Point textBoxLocation = new Point(iconSize.Width + 4' 3);                  if (textBoxIconRight)                  {                      textBoxLocation = new Point(3' 3);                  }                    baseTextBox.Location = textBoxLocation;                  baseTextBox.Size = new Size(Width - 7 - iconSize.Width' Height - 6);              }              else              {                  baseTextBox.Location = new Point(3' 3);                  baseTextBox.Size = new Size(Width - 6' Height - 6);              }
Magic Number,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintBackground,The following statement contains a magic number: try              {                  Color backColor = BackColor;                    if (!useCustomBackColor)                  {                      backColor = MetroPaint.GetStyleColor(Style);                  }                    if (backColor.A == 255)                  {                      e.Graphics.Clear(backColor);                      return;                  }                    base.OnPaintBackground(e);                    OnCustomPaintBackground(new MetroPaintEventArgs(backColor' Color.Empty' e.Graphics));              }              catch              {                  Invalidate();              }
Magic Number,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The following statement contains a magic number: if (useTileImage)              {                  if (tileImage != null)                  {                      Rectangle imageRectangle;                      switch (tileImageAlign)                      {                          case ContentAlignment.BottomLeft:                              imageRectangle = new Rectangle(new Point(0' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleLeft:                              imageRectangle = new Rectangle(new Point(0' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopLeft:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            default:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                      }                        e.Graphics.DrawImage(TileImage' imageRectangle);                  }              }
Magic Number,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The following statement contains a magic number: if (useTileImage)              {                  if (tileImage != null)                  {                      Rectangle imageRectangle;                      switch (tileImageAlign)                      {                          case ContentAlignment.BottomLeft:                              imageRectangle = new Rectangle(new Point(0' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleLeft:                              imageRectangle = new Rectangle(new Point(0' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopLeft:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            default:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                      }                        e.Graphics.DrawImage(TileImage' imageRectangle);                  }              }
Magic Number,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The following statement contains a magic number: if (useTileImage)              {                  if (tileImage != null)                  {                      Rectangle imageRectangle;                      switch (tileImageAlign)                      {                          case ContentAlignment.BottomLeft:                              imageRectangle = new Rectangle(new Point(0' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleLeft:                              imageRectangle = new Rectangle(new Point(0' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopLeft:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            default:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                      }                        e.Graphics.DrawImage(TileImage' imageRectangle);                  }              }
Magic Number,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The following statement contains a magic number: if (useTileImage)              {                  if (tileImage != null)                  {                      Rectangle imageRectangle;                      switch (tileImageAlign)                      {                          case ContentAlignment.BottomLeft:                              imageRectangle = new Rectangle(new Point(0' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleLeft:                              imageRectangle = new Rectangle(new Point(0' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopLeft:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            default:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                      }                        e.Graphics.DrawImage(TileImage' imageRectangle);                  }              }
Magic Number,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The following statement contains a magic number: if (useTileImage)              {                  if (tileImage != null)                  {                      Rectangle imageRectangle;                      switch (tileImageAlign)                      {                          case ContentAlignment.BottomLeft:                              imageRectangle = new Rectangle(new Point(0' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleLeft:                              imageRectangle = new Rectangle(new Point(0' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopLeft:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            default:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                      }                        e.Graphics.DrawImage(TileImage' imageRectangle);                  }              }
Magic Number,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The following statement contains a magic number: if (useTileImage)              {                  if (tileImage != null)                  {                      Rectangle imageRectangle;                      switch (tileImageAlign)                      {                          case ContentAlignment.BottomLeft:                              imageRectangle = new Rectangle(new Point(0' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleLeft:                              imageRectangle = new Rectangle(new Point(0' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopLeft:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            default:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                      }                        e.Graphics.DrawImage(TileImage' imageRectangle);                  }              }
Magic Number,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The following statement contains a magic number: if (useTileImage)              {                  if (tileImage != null)                  {                      Rectangle imageRectangle;                      switch (tileImageAlign)                      {                          case ContentAlignment.BottomLeft:                              imageRectangle = new Rectangle(new Point(0' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleLeft:                              imageRectangle = new Rectangle(new Point(0' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopLeft:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            default:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                      }                        e.Graphics.DrawImage(TileImage' imageRectangle);                  }              }
Magic Number,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The following statement contains a magic number: if (useTileImage)              {                  if (tileImage != null)                  {                      Rectangle imageRectangle;                      switch (tileImageAlign)                      {                          case ContentAlignment.BottomLeft:                              imageRectangle = new Rectangle(new Point(0' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleLeft:                              imageRectangle = new Rectangle(new Point(0' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopLeft:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            default:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                      }                        e.Graphics.DrawImage(TileImage' imageRectangle);                  }              }
Magic Number,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The following statement contains a magic number: if (useTileImage)              {                  if (tileImage != null)                  {                      Rectangle imageRectangle;                      switch (tileImageAlign)                      {                          case ContentAlignment.BottomLeft:                              imageRectangle = new Rectangle(new Point(0' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleLeft:                              imageRectangle = new Rectangle(new Point(0' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopLeft:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            default:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                      }                        e.Graphics.DrawImage(TileImage' imageRectangle);                  }              }
Magic Number,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The following statement contains a magic number: if (useTileImage)              {                  if (tileImage != null)                  {                      Rectangle imageRectangle;                      switch (tileImageAlign)                      {                          case ContentAlignment.BottomLeft:                              imageRectangle = new Rectangle(new Point(0' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleLeft:                              imageRectangle = new Rectangle(new Point(0' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopLeft:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            default:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                      }                        e.Graphics.DrawImage(TileImage' imageRectangle);                  }              }
Magic Number,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The following statement contains a magic number: if (useTileImage)              {                  if (tileImage != null)                  {                      Rectangle imageRectangle;                      switch (tileImageAlign)                      {                          case ContentAlignment.BottomLeft:                              imageRectangle = new Rectangle(new Point(0' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleLeft:                              imageRectangle = new Rectangle(new Point(0' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopLeft:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            default:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                      }                        e.Graphics.DrawImage(TileImage' imageRectangle);                  }              }
Magic Number,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The following statement contains a magic number: if (useTileImage)              {                  if (tileImage != null)                  {                      Rectangle imageRectangle;                      switch (tileImageAlign)                      {                          case ContentAlignment.BottomLeft:                              imageRectangle = new Rectangle(new Point(0' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.BottomRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height - TileImage.Height)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleLeft:                              imageRectangle = new Rectangle(new Point(0' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.MiddleRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' Height / 2 - TileImage.Height / 2)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopLeft:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopCenter:                              imageRectangle = new Rectangle(new Point(Width / 2 - TileImage.Width / 2' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            case ContentAlignment.TopRight:                              imageRectangle = new Rectangle(new Point(Width - TileImage.Width' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                            default:                              imageRectangle = new Rectangle(new Point(0' 0)' new System.Drawing.Size(TileImage.Width' TileImage.Height));                              break;                      }                        e.Graphics.DrawImage(TileImage' imageRectangle);                  }              }
Magic Number,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The following statement contains a magic number: if (isPressed)              {                  textRectangle.Inflate(-2' -2);              }
Magic Number,MetroFramework.Controls,MetroTile,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTile.cs,OnPaintForeground,The following statement contains a magic number: if (isPressed)              {                  textRectangle.Inflate(-2' -2);              }
Magic Number,MetroFramework.Controls,MetroToggle,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroToggle.cs,OnPaintBackground,The following statement contains a magic number: try              {                  Color backColor = BackColor;                    if (!useCustomBackColor)                  {                      backColor = MetroPaint.BackColor.Form(Theme);                  }                    if (backColor.A == 255)                  {                      e.Graphics.Clear(backColor);                      return;                  }                    base.OnPaintBackground(e);                    OnCustomPaintBackground(new MetroPaintEventArgs(backColor' Color.Empty' e.Graphics));              }              catch              {                  Invalidate();              }
Magic Number,MetroFramework.Controls,MetroToggle,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroToggle.cs,OnPaintForeground,The following statement contains a magic number: using (Pen p = new Pen(borderColor))              {                  Rectangle boxRect = new Rectangle((DisplayStatus ? 30 : 0)' 0' ClientRectangle.Width - (DisplayStatus ? 31 : 1)' ClientRectangle.Height - 1);                  e.Graphics.DrawRectangle(p' boxRect);              }
Magic Number,MetroFramework.Controls,MetroToggle,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroToggle.cs,OnPaintForeground,The following statement contains a magic number: using (Pen p = new Pen(borderColor))              {                  Rectangle boxRect = new Rectangle((DisplayStatus ? 30 : 0)' 0' ClientRectangle.Width - (DisplayStatus ? 31 : 1)' ClientRectangle.Height - 1);                  e.Graphics.DrawRectangle(p' boxRect);              }
Magic Number,MetroFramework.Controls,MetroToggle,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroToggle.cs,OnPaintForeground,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(fillColor))              {                  Rectangle boxRect = new Rectangle(DisplayStatus ? 32 : 2' 2' ClientRectangle.Width - (DisplayStatus ? 34 : 4)' ClientRectangle.Height - 4);                  e.Graphics.FillRectangle(b' boxRect);              }
Magic Number,MetroFramework.Controls,MetroToggle,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroToggle.cs,OnPaintForeground,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(fillColor))              {                  Rectangle boxRect = new Rectangle(DisplayStatus ? 32 : 2' 2' ClientRectangle.Width - (DisplayStatus ? 34 : 4)' ClientRectangle.Height - 4);                  e.Graphics.FillRectangle(b' boxRect);              }
Magic Number,MetroFramework.Controls,MetroToggle,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroToggle.cs,OnPaintForeground,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(fillColor))              {                  Rectangle boxRect = new Rectangle(DisplayStatus ? 32 : 2' 2' ClientRectangle.Width - (DisplayStatus ? 34 : 4)' ClientRectangle.Height - 4);                  e.Graphics.FillRectangle(b' boxRect);              }
Magic Number,MetroFramework.Controls,MetroToggle,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroToggle.cs,OnPaintForeground,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(fillColor))              {                  Rectangle boxRect = new Rectangle(DisplayStatus ? 32 : 2' 2' ClientRectangle.Width - (DisplayStatus ? 34 : 4)' ClientRectangle.Height - 4);                  e.Graphics.FillRectangle(b' boxRect);              }
Magic Number,MetroFramework.Controls,MetroToggle,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroToggle.cs,OnPaintForeground,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(fillColor))              {                  Rectangle boxRect = new Rectangle(DisplayStatus ? 32 : 2' 2' ClientRectangle.Width - (DisplayStatus ? 34 : 4)' ClientRectangle.Height - 4);                  e.Graphics.FillRectangle(b' boxRect);              }
Magic Number,MetroFramework.Controls,MetroToggle,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroToggle.cs,OnPaintForeground,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(fillColor))              {                  Rectangle boxRect = new Rectangle(DisplayStatus ? 32 : 2' 2' ClientRectangle.Width - (DisplayStatus ? 34 : 4)' ClientRectangle.Height - 4);                  e.Graphics.FillRectangle(b' boxRect);              }
Magic Number,MetroFramework.Controls,MetroToggle,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroToggle.cs,OnPaintForeground,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(backColor))              {                  int left = Checked ? Width - 11 : (DisplayStatus ? 30 : 0);                    Rectangle boxRect = new Rectangle(left' 0' 11' ClientRectangle.Height);                  e.Graphics.FillRectangle(b' boxRect);              }
Magic Number,MetroFramework.Controls,MetroToggle,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroToggle.cs,OnPaintForeground,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(backColor))              {                  int left = Checked ? Width - 11 : (DisplayStatus ? 30 : 0);                    Rectangle boxRect = new Rectangle(left' 0' 11' ClientRectangle.Height);                  e.Graphics.FillRectangle(b' boxRect);              }
Magic Number,MetroFramework.Controls,MetroToggle,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroToggle.cs,OnPaintForeground,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(backColor))              {                  int left = Checked ? Width - 11 : (DisplayStatus ? 30 : 0);                    Rectangle boxRect = new Rectangle(left' 0' 11' ClientRectangle.Height);                  e.Graphics.FillRectangle(b' boxRect);              }
Magic Number,MetroFramework.Controls,MetroToggle,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroToggle.cs,OnPaintForeground,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(MetroPaint.BorderColor.CheckBox.Hover(Theme)))              {                  int left = Checked ? Width - 10 : (DisplayStatus ? 30 : 0);                    Rectangle boxRect = new Rectangle(left' 0' 10' ClientRectangle.Height);                  e.Graphics.FillRectangle(b' boxRect);              }
Magic Number,MetroFramework.Controls,MetroToggle,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroToggle.cs,OnPaintForeground,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(MetroPaint.BorderColor.CheckBox.Hover(Theme)))              {                  int left = Checked ? Width - 10 : (DisplayStatus ? 30 : 0);                    Rectangle boxRect = new Rectangle(left' 0' 10' ClientRectangle.Height);                  e.Graphics.FillRectangle(b' boxRect);              }
Magic Number,MetroFramework.Controls,MetroToggle,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroToggle.cs,OnPaintForeground,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(MetroPaint.BorderColor.CheckBox.Hover(Theme)))              {                  int left = Checked ? Width - 10 : (DisplayStatus ? 30 : 0);                    Rectangle boxRect = new Rectangle(left' 0' 10' ClientRectangle.Height);                  e.Graphics.FillRectangle(b' boxRect);              }
Magic Number,MetroFramework.Controls,MetroToggle,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroToggle.cs,OnPaintForeground,The following statement contains a magic number: if (DisplayStatus)              {                  Rectangle textRect = new Rectangle(0' 0' 30' ClientRectangle.Height);                  TextRenderer.DrawText(e.Graphics' Text' MetroFonts.Link(metroLinkSize' metroLinkWeight)' textRect' foreColor' MetroPaint.GetTextFormatFlags(TextAlign));              }
Magic Number,MetroFramework.Controls,MetroToggle,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroToggle.cs,GetPreferredSize,The following statement contains a magic number: preferredSize.Width = DisplayStatus ? 80 : 50;
Magic Number,MetroFramework.Controls,MetroToggle,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroToggle.cs,GetPreferredSize,The following statement contains a magic number: preferredSize.Width = DisplayStatus ? 80 : 50;
Magic Number,MetroFramework.Controls,MetroTrackBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTrackBar.cs,OnPaintBackground,The following statement contains a magic number: try              {                  Color backColor = BackColor;                    if (!useCustomBackColor)                  {                      backColor = MetroPaint.BackColor.Form(Theme);                  }                    if (backColor.A == 255)                  {                      e.Graphics.Clear(backColor);                      return;                  }                    base.OnPaintBackground(e);                    OnCustomPaintBackground(new MetroPaintEventArgs(backColor' Color.Empty' e.Graphics));              }              catch              {                  Invalidate();              }
Magic Number,MetroFramework.Controls,MetroTrackBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTrackBar.cs,DrawTrackBar,The following statement contains a magic number: int TrackX = (((trackerValue - barMinimum) * (Width - 6)) / (barMaximum - barMinimum));
Magic Number,MetroFramework.Controls,MetroTrackBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTrackBar.cs,DrawTrackBar,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(thumbColor))              {                  Rectangle barRect = new Rectangle(0' Height / 2 - 2' TrackX' 4);                  g.FillRectangle(b' barRect);                    Rectangle thumbRect = new Rectangle(TrackX' Height / 2 - 8' 6' 16);                  g.FillRectangle(b' thumbRect);              }
Magic Number,MetroFramework.Controls,MetroTrackBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTrackBar.cs,DrawTrackBar,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(thumbColor))              {                  Rectangle barRect = new Rectangle(0' Height / 2 - 2' TrackX' 4);                  g.FillRectangle(b' barRect);                    Rectangle thumbRect = new Rectangle(TrackX' Height / 2 - 8' 6' 16);                  g.FillRectangle(b' thumbRect);              }
Magic Number,MetroFramework.Controls,MetroTrackBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTrackBar.cs,DrawTrackBar,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(thumbColor))              {                  Rectangle barRect = new Rectangle(0' Height / 2 - 2' TrackX' 4);                  g.FillRectangle(b' barRect);                    Rectangle thumbRect = new Rectangle(TrackX' Height / 2 - 8' 6' 16);                  g.FillRectangle(b' thumbRect);              }
Magic Number,MetroFramework.Controls,MetroTrackBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTrackBar.cs,DrawTrackBar,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(thumbColor))              {                  Rectangle barRect = new Rectangle(0' Height / 2 - 2' TrackX' 4);                  g.FillRectangle(b' barRect);                    Rectangle thumbRect = new Rectangle(TrackX' Height / 2 - 8' 6' 16);                  g.FillRectangle(b' thumbRect);              }
Magic Number,MetroFramework.Controls,MetroTrackBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTrackBar.cs,DrawTrackBar,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(thumbColor))              {                  Rectangle barRect = new Rectangle(0' Height / 2 - 2' TrackX' 4);                  g.FillRectangle(b' barRect);                    Rectangle thumbRect = new Rectangle(TrackX' Height / 2 - 8' 6' 16);                  g.FillRectangle(b' thumbRect);              }
Magic Number,MetroFramework.Controls,MetroTrackBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTrackBar.cs,DrawTrackBar,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(thumbColor))              {                  Rectangle barRect = new Rectangle(0' Height / 2 - 2' TrackX' 4);                  g.FillRectangle(b' barRect);                    Rectangle thumbRect = new Rectangle(TrackX' Height / 2 - 8' 6' 16);                  g.FillRectangle(b' thumbRect);              }
Magic Number,MetroFramework.Controls,MetroTrackBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTrackBar.cs,DrawTrackBar,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(thumbColor))              {                  Rectangle barRect = new Rectangle(0' Height / 2 - 2' TrackX' 4);                  g.FillRectangle(b' barRect);                    Rectangle thumbRect = new Rectangle(TrackX' Height / 2 - 8' 6' 16);                  g.FillRectangle(b' thumbRect);              }
Magic Number,MetroFramework.Controls,MetroTrackBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTrackBar.cs,DrawTrackBar,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(barColor))              {                  Rectangle barRect = new Rectangle(TrackX + 7' Height / 2 - 2' Width - TrackX + 7' 4);                  g.FillRectangle(b' barRect);              }
Magic Number,MetroFramework.Controls,MetroTrackBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTrackBar.cs,DrawTrackBar,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(barColor))              {                  Rectangle barRect = new Rectangle(TrackX + 7' Height / 2 - 2' Width - TrackX + 7' 4);                  g.FillRectangle(b' barRect);              }
Magic Number,MetroFramework.Controls,MetroTrackBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTrackBar.cs,DrawTrackBar,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(barColor))              {                  Rectangle barRect = new Rectangle(TrackX + 7' Height / 2 - 2' Width - TrackX + 7' 4);                  g.FillRectangle(b' barRect);              }
Magic Number,MetroFramework.Controls,MetroTrackBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTrackBar.cs,DrawTrackBar,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(barColor))              {                  Rectangle barRect = new Rectangle(TrackX + 7' Height / 2 - 2' Width - TrackX + 7' 4);                  g.FillRectangle(b' barRect);              }
Magic Number,MetroFramework.Controls,MetroTrackBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTrackBar.cs,DrawTrackBar,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(barColor))              {                  Rectangle barRect = new Rectangle(TrackX + 7' Height / 2 - 2' Width - TrackX + 7' 4);                  g.FillRectangle(b' barRect);              }
Magic Number,MetroFramework.Controls,MetroTrackBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTrackBar.cs,OnMouseMove,The following statement contains a magic number: if (Capture & e.Button == MouseButtons.Left)              {                  ScrollEventType set = ScrollEventType.ThumbPosition;                  Point pt = e.Location;                  int p = pt.X;                                    float coef = (float)(barMaximum - barMinimum) / (float)(ClientSize.Width - 3);                  trackerValue = (int)(p * coef + barMinimum);                    if (trackerValue <= barMinimum)                  {                      trackerValue = barMinimum;                      set = ScrollEventType.First;                  }                  else if (trackerValue >= barMaximum)                  {                      trackerValue = barMaximum;                      set = ScrollEventType.Last;                  }                    OnScroll(set' trackerValue);                  OnValueChanged();                    Invalidate();              }
Magic Number,MetroFramework.Controls,MetroTrackBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTrackBar.cs,OnMouseWheel,The following statement contains a magic number: int v = e.Delta / 120 * (barMaximum - barMinimum) / mouseWheelBarPartitions;
Magic Number,MetroFramework.Controls,MetroUserControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroUserControl.cs,OnPaintBackground,The following statement contains a magic number: try              {                  Color backColor = BackColor;                    if (!useCustomBackColor)                  {                      backColor = MetroPaint.BackColor.Form(Theme);                  }                    if (backColor.A == 255 && BackgroundImage == null)                  {                      e.Graphics.Clear(backColor);                      return;                  }                    base.OnPaintBackground(e);                    OnCustomPaintBackground(new MetroPaintEventArgs(backColor' Color.Empty' e.Graphics));              }              catch              {                  Invalidate();              }
Magic Number,MetroFramework.Drawing.Html,CssBlock,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssBlock.cs,CssBlock,The following statement contains a magic number: foreach (Match match in matches)              {                  //Split match by colon                  string[] chunks = match.Value.Split(':');                    if (chunks.Length != 2) continue;                    //Extract property name and value                  string propName = chunks[0].Trim();                  string propValue = chunks[1].Trim();                                    //Remove semicolon                  if (propValue.EndsWith(";")) propValue = propValue.Substring(0' propValue.Length - 1).Trim();                    //Add property to list                  Properties.Add(propName' propValue);                    //Register only if property checks with reflection                  if (CssBox._properties.ContainsKey(propName))                      PropertyValues.Add(CssBox._properties[propName]' propValue);              }
Magic Number,MetroFramework.Drawing.Html,CssBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssBox.cs,CreateListItemBox,The following statement contains a magic number: if (Display == CssConstants.ListItem)              {                  if (_listItemBox == null)                  {                      _listItemBox = new CssBox();                      _listItemBox.InheritStyle(this' false);                      _listItemBox.Display = CssConstants.Inline;                      _listItemBox.SetInitialContainer(InitialContainer);                        if (ParentBox != null && ListStyleType == CssConstants.Decimal)                      {                          _listItemBox.Text = GetIndexForList().ToString() + ".";                      }                      else                      {                          _listItemBox.Text = "•";                      }                                            _listItemBox.MeasureBounds(g);                      _listItemBox.Size = new SizeF(_listItemBox.Words[0].Width' _listItemBox.Words[0].Height);                   }                  _listItemBox.Words[0].Left = Location.X - _listItemBox.Size.Width - 5;                  _listItemBox.Words[0].Top = Location.Y + ActualPaddingTop;// +FontAscent;              }
Magic Number,MetroFramework.Drawing.Html,CssBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssBox.cs,MeasureWordsSize,The following statement contains a magic number: if (HtmlTag != null && HtmlTag.TagName.Equals("img"' StringComparison.CurrentCultureIgnoreCase))              {                  #region Measure image                    CssBoxWord word = new CssBoxWord(this' CssValue.GetImage(GetAttribute("src")));                  Words.Clear();                  Words.Add(word);                    #endregion              }              else              {                  #region Measure text words                    bool lastWasSpace = false;                    foreach (CssBoxWord b in Words)                  {                      bool collapse = CssBoxWordSplitter.CollapsesWhiteSpaces(this);                      if (CssBoxWordSplitter.EliminatesLineBreaks(this)) b.ReplaceLineBreaksAndTabs();                        if (b.IsSpaces)                      {                          b.Height = FontLineSpacing;                            if (b.IsTab)                          {                              b.Width = ActualWordSpacing * 4; //TODO: Configure tab size                          }                          else if (b.IsLineBreak)                          {                              b.Width = 0;                          }                          else                          {                              if (!(lastWasSpace && collapse))                              {                                  b.Width = ActualWordSpacing * (collapse ? 1 : b.Text.Length);                              }                          }                            lastWasSpace = true;                      }                      else                      {                          string word = b.Text;                            CharacterRange[] measurable = { new CharacterRange(0' word.Length) };                          StringFormat sf = new StringFormat();                            sf.SetMeasurableCharacterRanges(measurable);                            Region[] regions = g.MeasureCharacterRanges(word' ActualFont'                              new RectangleF(0' 0' float.MaxValue' float.MaxValue)'                              sf);                            SizeF s = regions[0].GetBounds(g).Size;                          PointF p = regions[0].GetBounds(g).Location;                            b.LastMeasureOffset = new PointF(p.X' p.Y);                          b.Width = s.Width;// +p.X;                          b.Height = s.Height;// +p.Y;                            lastWasSpace = false;                      }                  }                  #endregion              }
Magic Number,MetroFramework.Drawing.Html,CssBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssBox.cs,PaintDecoration,The following statement contains a magic number: if (TextDecoration == CssConstants.Underline)              {                  y = rectangle.Bottom - desc;              }              else if (TextDecoration == CssConstants.LineThrough)              {                  y = rectangle.Bottom - desc - asc / 2;              }              else if (TextDecoration == CssConstants.Overline)              {                  y = rectangle.Bottom - desc - asc - 2;              }
Magic Number,MetroFramework.Drawing.Html,CssBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssBox.cs,PaintDecoration,The following statement contains a magic number: if (TextDecoration == CssConstants.Underline)              {                  y = rectangle.Bottom - desc;              }              else if (TextDecoration == CssConstants.LineThrough)              {                  y = rectangle.Bottom - desc - asc / 2;              }              else if (TextDecoration == CssConstants.Overline)              {                  y = rectangle.Bottom - desc - asc - 2;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetBorderPath,The following statement contains a magic number: PointF[] pts = new PointF[4];
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetBorderPath,The following statement contains a magic number: switch (border)              {                  case Border.Top:                      bwidth = b.ActualBorderTopWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top + bwidth)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top + bwidth)' b);                        if (isLineEnd && b.ActualCornerNE == 0f) pts[2].X -= b.ActualBorderRightWidth;                      if (isLineStart && b.ActualCornerNW == 0f) pts[3].X += b.ActualBorderLeftWidth;                        if (b.ActualCornerNW > 0f) corner = CreateCorner(b' r' 1);                                            break;                  case Border.Right:                      bwidth = b.ActualBorderRightWidth;                      pts[0] = RoundP(new PointF(r.Right - bwidth' r.Top + b.ActualCornerNE)' b);                      pts[1] = RoundP(new PointF(r.Right' r.Top + b.ActualCornerNE)' b);                      pts[2] = RoundP(new PointF(r.Right' r.Bottom - b.ActualCornerSE)' b);                      pts[3] = RoundP(new PointF(r.Right - bwidth' r.Bottom - b.ActualCornerSE)' b);                                                                 if (b.ActualCornerNE == 0f) pts[0].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSE == 0f) pts[3].Y -= b.ActualBorderBottomWidth;                       if (b.ActualCornerNE > 0f) corner = CreateCorner(b' r' 2);                      break;                  case Border.Bottom:                      bwidth = b.ActualBorderBottomWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom - bwidth)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom - bwidth)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom)' b);                        if (isLineStart && b.ActualCornerSW == 0f) pts[0].X += b.ActualBorderLeftWidth;                      if (isLineEnd && b.ActualCornerSE == 0f) pts[1].X -= b.ActualBorderRightWidth;                        if (b.ActualCornerSE > 0f) corner = CreateCorner(b' r' 3);                      break;                  case Border.Left:                      bwidth = b.ActualBorderLeftWidth;                      pts[0] = RoundP(new PointF(r.Left' r.Top + b.ActualCornerNW)' b);                      pts[1] = RoundP(new PointF(r.Left + bwidth' r.Top + b.ActualCornerNW)' b);                      pts[2] = RoundP(new PointF(r.Left + bwidth' r.Bottom - b.ActualCornerSW)' b);                      pts[3] = RoundP(new PointF(r.Left' r.Bottom - b.ActualCornerSW)' b);                        if (b.ActualCornerNW == 0f) pts[1].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSW == 0f) pts[2].Y -= b.ActualBorderBottomWidth;                        if (b.ActualCornerSW > 0f) corner = CreateCorner(b' r' 4);                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetBorderPath,The following statement contains a magic number: switch (border)              {                  case Border.Top:                      bwidth = b.ActualBorderTopWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top + bwidth)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top + bwidth)' b);                        if (isLineEnd && b.ActualCornerNE == 0f) pts[2].X -= b.ActualBorderRightWidth;                      if (isLineStart && b.ActualCornerNW == 0f) pts[3].X += b.ActualBorderLeftWidth;                        if (b.ActualCornerNW > 0f) corner = CreateCorner(b' r' 1);                                            break;                  case Border.Right:                      bwidth = b.ActualBorderRightWidth;                      pts[0] = RoundP(new PointF(r.Right - bwidth' r.Top + b.ActualCornerNE)' b);                      pts[1] = RoundP(new PointF(r.Right' r.Top + b.ActualCornerNE)' b);                      pts[2] = RoundP(new PointF(r.Right' r.Bottom - b.ActualCornerSE)' b);                      pts[3] = RoundP(new PointF(r.Right - bwidth' r.Bottom - b.ActualCornerSE)' b);                                                                 if (b.ActualCornerNE == 0f) pts[0].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSE == 0f) pts[3].Y -= b.ActualBorderBottomWidth;                       if (b.ActualCornerNE > 0f) corner = CreateCorner(b' r' 2);                      break;                  case Border.Bottom:                      bwidth = b.ActualBorderBottomWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom - bwidth)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom - bwidth)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom)' b);                        if (isLineStart && b.ActualCornerSW == 0f) pts[0].X += b.ActualBorderLeftWidth;                      if (isLineEnd && b.ActualCornerSE == 0f) pts[1].X -= b.ActualBorderRightWidth;                        if (b.ActualCornerSE > 0f) corner = CreateCorner(b' r' 3);                      break;                  case Border.Left:                      bwidth = b.ActualBorderLeftWidth;                      pts[0] = RoundP(new PointF(r.Left' r.Top + b.ActualCornerNW)' b);                      pts[1] = RoundP(new PointF(r.Left + bwidth' r.Top + b.ActualCornerNW)' b);                      pts[2] = RoundP(new PointF(r.Left + bwidth' r.Bottom - b.ActualCornerSW)' b);                      pts[3] = RoundP(new PointF(r.Left' r.Bottom - b.ActualCornerSW)' b);                        if (b.ActualCornerNW == 0f) pts[1].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSW == 0f) pts[2].Y -= b.ActualBorderBottomWidth;                        if (b.ActualCornerSW > 0f) corner = CreateCorner(b' r' 4);                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetBorderPath,The following statement contains a magic number: switch (border)              {                  case Border.Top:                      bwidth = b.ActualBorderTopWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top + bwidth)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top + bwidth)' b);                        if (isLineEnd && b.ActualCornerNE == 0f) pts[2].X -= b.ActualBorderRightWidth;                      if (isLineStart && b.ActualCornerNW == 0f) pts[3].X += b.ActualBorderLeftWidth;                        if (b.ActualCornerNW > 0f) corner = CreateCorner(b' r' 1);                                            break;                  case Border.Right:                      bwidth = b.ActualBorderRightWidth;                      pts[0] = RoundP(new PointF(r.Right - bwidth' r.Top + b.ActualCornerNE)' b);                      pts[1] = RoundP(new PointF(r.Right' r.Top + b.ActualCornerNE)' b);                      pts[2] = RoundP(new PointF(r.Right' r.Bottom - b.ActualCornerSE)' b);                      pts[3] = RoundP(new PointF(r.Right - bwidth' r.Bottom - b.ActualCornerSE)' b);                                                                 if (b.ActualCornerNE == 0f) pts[0].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSE == 0f) pts[3].Y -= b.ActualBorderBottomWidth;                       if (b.ActualCornerNE > 0f) corner = CreateCorner(b' r' 2);                      break;                  case Border.Bottom:                      bwidth = b.ActualBorderBottomWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom - bwidth)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom - bwidth)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom)' b);                        if (isLineStart && b.ActualCornerSW == 0f) pts[0].X += b.ActualBorderLeftWidth;                      if (isLineEnd && b.ActualCornerSE == 0f) pts[1].X -= b.ActualBorderRightWidth;                        if (b.ActualCornerSE > 0f) corner = CreateCorner(b' r' 3);                      break;                  case Border.Left:                      bwidth = b.ActualBorderLeftWidth;                      pts[0] = RoundP(new PointF(r.Left' r.Top + b.ActualCornerNW)' b);                      pts[1] = RoundP(new PointF(r.Left + bwidth' r.Top + b.ActualCornerNW)' b);                      pts[2] = RoundP(new PointF(r.Left + bwidth' r.Bottom - b.ActualCornerSW)' b);                      pts[3] = RoundP(new PointF(r.Left' r.Bottom - b.ActualCornerSW)' b);                        if (b.ActualCornerNW == 0f) pts[1].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSW == 0f) pts[2].Y -= b.ActualBorderBottomWidth;                        if (b.ActualCornerSW > 0f) corner = CreateCorner(b' r' 4);                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetBorderPath,The following statement contains a magic number: switch (border)              {                  case Border.Top:                      bwidth = b.ActualBorderTopWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top + bwidth)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top + bwidth)' b);                        if (isLineEnd && b.ActualCornerNE == 0f) pts[2].X -= b.ActualBorderRightWidth;                      if (isLineStart && b.ActualCornerNW == 0f) pts[3].X += b.ActualBorderLeftWidth;                        if (b.ActualCornerNW > 0f) corner = CreateCorner(b' r' 1);                                            break;                  case Border.Right:                      bwidth = b.ActualBorderRightWidth;                      pts[0] = RoundP(new PointF(r.Right - bwidth' r.Top + b.ActualCornerNE)' b);                      pts[1] = RoundP(new PointF(r.Right' r.Top + b.ActualCornerNE)' b);                      pts[2] = RoundP(new PointF(r.Right' r.Bottom - b.ActualCornerSE)' b);                      pts[3] = RoundP(new PointF(r.Right - bwidth' r.Bottom - b.ActualCornerSE)' b);                                                                 if (b.ActualCornerNE == 0f) pts[0].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSE == 0f) pts[3].Y -= b.ActualBorderBottomWidth;                       if (b.ActualCornerNE > 0f) corner = CreateCorner(b' r' 2);                      break;                  case Border.Bottom:                      bwidth = b.ActualBorderBottomWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom - bwidth)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom - bwidth)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom)' b);                        if (isLineStart && b.ActualCornerSW == 0f) pts[0].X += b.ActualBorderLeftWidth;                      if (isLineEnd && b.ActualCornerSE == 0f) pts[1].X -= b.ActualBorderRightWidth;                        if (b.ActualCornerSE > 0f) corner = CreateCorner(b' r' 3);                      break;                  case Border.Left:                      bwidth = b.ActualBorderLeftWidth;                      pts[0] = RoundP(new PointF(r.Left' r.Top + b.ActualCornerNW)' b);                      pts[1] = RoundP(new PointF(r.Left + bwidth' r.Top + b.ActualCornerNW)' b);                      pts[2] = RoundP(new PointF(r.Left + bwidth' r.Bottom - b.ActualCornerSW)' b);                      pts[3] = RoundP(new PointF(r.Left' r.Bottom - b.ActualCornerSW)' b);                        if (b.ActualCornerNW == 0f) pts[1].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSW == 0f) pts[2].Y -= b.ActualBorderBottomWidth;                        if (b.ActualCornerSW > 0f) corner = CreateCorner(b' r' 4);                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetBorderPath,The following statement contains a magic number: switch (border)              {                  case Border.Top:                      bwidth = b.ActualBorderTopWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top + bwidth)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top + bwidth)' b);                        if (isLineEnd && b.ActualCornerNE == 0f) pts[2].X -= b.ActualBorderRightWidth;                      if (isLineStart && b.ActualCornerNW == 0f) pts[3].X += b.ActualBorderLeftWidth;                        if (b.ActualCornerNW > 0f) corner = CreateCorner(b' r' 1);                                            break;                  case Border.Right:                      bwidth = b.ActualBorderRightWidth;                      pts[0] = RoundP(new PointF(r.Right - bwidth' r.Top + b.ActualCornerNE)' b);                      pts[1] = RoundP(new PointF(r.Right' r.Top + b.ActualCornerNE)' b);                      pts[2] = RoundP(new PointF(r.Right' r.Bottom - b.ActualCornerSE)' b);                      pts[3] = RoundP(new PointF(r.Right - bwidth' r.Bottom - b.ActualCornerSE)' b);                                                                 if (b.ActualCornerNE == 0f) pts[0].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSE == 0f) pts[3].Y -= b.ActualBorderBottomWidth;                       if (b.ActualCornerNE > 0f) corner = CreateCorner(b' r' 2);                      break;                  case Border.Bottom:                      bwidth = b.ActualBorderBottomWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom - bwidth)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom - bwidth)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom)' b);                        if (isLineStart && b.ActualCornerSW == 0f) pts[0].X += b.ActualBorderLeftWidth;                      if (isLineEnd && b.ActualCornerSE == 0f) pts[1].X -= b.ActualBorderRightWidth;                        if (b.ActualCornerSE > 0f) corner = CreateCorner(b' r' 3);                      break;                  case Border.Left:                      bwidth = b.ActualBorderLeftWidth;                      pts[0] = RoundP(new PointF(r.Left' r.Top + b.ActualCornerNW)' b);                      pts[1] = RoundP(new PointF(r.Left + bwidth' r.Top + b.ActualCornerNW)' b);                      pts[2] = RoundP(new PointF(r.Left + bwidth' r.Bottom - b.ActualCornerSW)' b);                      pts[3] = RoundP(new PointF(r.Left' r.Bottom - b.ActualCornerSW)' b);                        if (b.ActualCornerNW == 0f) pts[1].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSW == 0f) pts[2].Y -= b.ActualBorderBottomWidth;                        if (b.ActualCornerSW > 0f) corner = CreateCorner(b' r' 4);                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetBorderPath,The following statement contains a magic number: switch (border)              {                  case Border.Top:                      bwidth = b.ActualBorderTopWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top + bwidth)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top + bwidth)' b);                        if (isLineEnd && b.ActualCornerNE == 0f) pts[2].X -= b.ActualBorderRightWidth;                      if (isLineStart && b.ActualCornerNW == 0f) pts[3].X += b.ActualBorderLeftWidth;                        if (b.ActualCornerNW > 0f) corner = CreateCorner(b' r' 1);                                            break;                  case Border.Right:                      bwidth = b.ActualBorderRightWidth;                      pts[0] = RoundP(new PointF(r.Right - bwidth' r.Top + b.ActualCornerNE)' b);                      pts[1] = RoundP(new PointF(r.Right' r.Top + b.ActualCornerNE)' b);                      pts[2] = RoundP(new PointF(r.Right' r.Bottom - b.ActualCornerSE)' b);                      pts[3] = RoundP(new PointF(r.Right - bwidth' r.Bottom - b.ActualCornerSE)' b);                                                                 if (b.ActualCornerNE == 0f) pts[0].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSE == 0f) pts[3].Y -= b.ActualBorderBottomWidth;                       if (b.ActualCornerNE > 0f) corner = CreateCorner(b' r' 2);                      break;                  case Border.Bottom:                      bwidth = b.ActualBorderBottomWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom - bwidth)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom - bwidth)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom)' b);                        if (isLineStart && b.ActualCornerSW == 0f) pts[0].X += b.ActualBorderLeftWidth;                      if (isLineEnd && b.ActualCornerSE == 0f) pts[1].X -= b.ActualBorderRightWidth;                        if (b.ActualCornerSE > 0f) corner = CreateCorner(b' r' 3);                      break;                  case Border.Left:                      bwidth = b.ActualBorderLeftWidth;                      pts[0] = RoundP(new PointF(r.Left' r.Top + b.ActualCornerNW)' b);                      pts[1] = RoundP(new PointF(r.Left + bwidth' r.Top + b.ActualCornerNW)' b);                      pts[2] = RoundP(new PointF(r.Left + bwidth' r.Bottom - b.ActualCornerSW)' b);                      pts[3] = RoundP(new PointF(r.Left' r.Bottom - b.ActualCornerSW)' b);                        if (b.ActualCornerNW == 0f) pts[1].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSW == 0f) pts[2].Y -= b.ActualBorderBottomWidth;                        if (b.ActualCornerSW > 0f) corner = CreateCorner(b' r' 4);                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetBorderPath,The following statement contains a magic number: switch (border)              {                  case Border.Top:                      bwidth = b.ActualBorderTopWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top + bwidth)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top + bwidth)' b);                        if (isLineEnd && b.ActualCornerNE == 0f) pts[2].X -= b.ActualBorderRightWidth;                      if (isLineStart && b.ActualCornerNW == 0f) pts[3].X += b.ActualBorderLeftWidth;                        if (b.ActualCornerNW > 0f) corner = CreateCorner(b' r' 1);                                            break;                  case Border.Right:                      bwidth = b.ActualBorderRightWidth;                      pts[0] = RoundP(new PointF(r.Right - bwidth' r.Top + b.ActualCornerNE)' b);                      pts[1] = RoundP(new PointF(r.Right' r.Top + b.ActualCornerNE)' b);                      pts[2] = RoundP(new PointF(r.Right' r.Bottom - b.ActualCornerSE)' b);                      pts[3] = RoundP(new PointF(r.Right - bwidth' r.Bottom - b.ActualCornerSE)' b);                                                                 if (b.ActualCornerNE == 0f) pts[0].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSE == 0f) pts[3].Y -= b.ActualBorderBottomWidth;                       if (b.ActualCornerNE > 0f) corner = CreateCorner(b' r' 2);                      break;                  case Border.Bottom:                      bwidth = b.ActualBorderBottomWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom - bwidth)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom - bwidth)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom)' b);                        if (isLineStart && b.ActualCornerSW == 0f) pts[0].X += b.ActualBorderLeftWidth;                      if (isLineEnd && b.ActualCornerSE == 0f) pts[1].X -= b.ActualBorderRightWidth;                        if (b.ActualCornerSE > 0f) corner = CreateCorner(b' r' 3);                      break;                  case Border.Left:                      bwidth = b.ActualBorderLeftWidth;                      pts[0] = RoundP(new PointF(r.Left' r.Top + b.ActualCornerNW)' b);                      pts[1] = RoundP(new PointF(r.Left + bwidth' r.Top + b.ActualCornerNW)' b);                      pts[2] = RoundP(new PointF(r.Left + bwidth' r.Bottom - b.ActualCornerSW)' b);                      pts[3] = RoundP(new PointF(r.Left' r.Bottom - b.ActualCornerSW)' b);                        if (b.ActualCornerNW == 0f) pts[1].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSW == 0f) pts[2].Y -= b.ActualBorderBottomWidth;                        if (b.ActualCornerSW > 0f) corner = CreateCorner(b' r' 4);                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetBorderPath,The following statement contains a magic number: switch (border)              {                  case Border.Top:                      bwidth = b.ActualBorderTopWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top + bwidth)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top + bwidth)' b);                        if (isLineEnd && b.ActualCornerNE == 0f) pts[2].X -= b.ActualBorderRightWidth;                      if (isLineStart && b.ActualCornerNW == 0f) pts[3].X += b.ActualBorderLeftWidth;                        if (b.ActualCornerNW > 0f) corner = CreateCorner(b' r' 1);                                            break;                  case Border.Right:                      bwidth = b.ActualBorderRightWidth;                      pts[0] = RoundP(new PointF(r.Right - bwidth' r.Top + b.ActualCornerNE)' b);                      pts[1] = RoundP(new PointF(r.Right' r.Top + b.ActualCornerNE)' b);                      pts[2] = RoundP(new PointF(r.Right' r.Bottom - b.ActualCornerSE)' b);                      pts[3] = RoundP(new PointF(r.Right - bwidth' r.Bottom - b.ActualCornerSE)' b);                                                                 if (b.ActualCornerNE == 0f) pts[0].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSE == 0f) pts[3].Y -= b.ActualBorderBottomWidth;                       if (b.ActualCornerNE > 0f) corner = CreateCorner(b' r' 2);                      break;                  case Border.Bottom:                      bwidth = b.ActualBorderBottomWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom - bwidth)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom - bwidth)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom)' b);                        if (isLineStart && b.ActualCornerSW == 0f) pts[0].X += b.ActualBorderLeftWidth;                      if (isLineEnd && b.ActualCornerSE == 0f) pts[1].X -= b.ActualBorderRightWidth;                        if (b.ActualCornerSE > 0f) corner = CreateCorner(b' r' 3);                      break;                  case Border.Left:                      bwidth = b.ActualBorderLeftWidth;                      pts[0] = RoundP(new PointF(r.Left' r.Top + b.ActualCornerNW)' b);                      pts[1] = RoundP(new PointF(r.Left + bwidth' r.Top + b.ActualCornerNW)' b);                      pts[2] = RoundP(new PointF(r.Left + bwidth' r.Bottom - b.ActualCornerSW)' b);                      pts[3] = RoundP(new PointF(r.Left' r.Bottom - b.ActualCornerSW)' b);                        if (b.ActualCornerNW == 0f) pts[1].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSW == 0f) pts[2].Y -= b.ActualBorderBottomWidth;                        if (b.ActualCornerSW > 0f) corner = CreateCorner(b' r' 4);                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetBorderPath,The following statement contains a magic number: switch (border)              {                  case Border.Top:                      bwidth = b.ActualBorderTopWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top + bwidth)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top + bwidth)' b);                        if (isLineEnd && b.ActualCornerNE == 0f) pts[2].X -= b.ActualBorderRightWidth;                      if (isLineStart && b.ActualCornerNW == 0f) pts[3].X += b.ActualBorderLeftWidth;                        if (b.ActualCornerNW > 0f) corner = CreateCorner(b' r' 1);                                            break;                  case Border.Right:                      bwidth = b.ActualBorderRightWidth;                      pts[0] = RoundP(new PointF(r.Right - bwidth' r.Top + b.ActualCornerNE)' b);                      pts[1] = RoundP(new PointF(r.Right' r.Top + b.ActualCornerNE)' b);                      pts[2] = RoundP(new PointF(r.Right' r.Bottom - b.ActualCornerSE)' b);                      pts[3] = RoundP(new PointF(r.Right - bwidth' r.Bottom - b.ActualCornerSE)' b);                                                                 if (b.ActualCornerNE == 0f) pts[0].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSE == 0f) pts[3].Y -= b.ActualBorderBottomWidth;                       if (b.ActualCornerNE > 0f) corner = CreateCorner(b' r' 2);                      break;                  case Border.Bottom:                      bwidth = b.ActualBorderBottomWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom - bwidth)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom - bwidth)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom)' b);                        if (isLineStart && b.ActualCornerSW == 0f) pts[0].X += b.ActualBorderLeftWidth;                      if (isLineEnd && b.ActualCornerSE == 0f) pts[1].X -= b.ActualBorderRightWidth;                        if (b.ActualCornerSE > 0f) corner = CreateCorner(b' r' 3);                      break;                  case Border.Left:                      bwidth = b.ActualBorderLeftWidth;                      pts[0] = RoundP(new PointF(r.Left' r.Top + b.ActualCornerNW)' b);                      pts[1] = RoundP(new PointF(r.Left + bwidth' r.Top + b.ActualCornerNW)' b);                      pts[2] = RoundP(new PointF(r.Left + bwidth' r.Bottom - b.ActualCornerSW)' b);                      pts[3] = RoundP(new PointF(r.Left' r.Bottom - b.ActualCornerSW)' b);                        if (b.ActualCornerNW == 0f) pts[1].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSW == 0f) pts[2].Y -= b.ActualBorderBottomWidth;                        if (b.ActualCornerSW > 0f) corner = CreateCorner(b' r' 4);                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetBorderPath,The following statement contains a magic number: switch (border)              {                  case Border.Top:                      bwidth = b.ActualBorderTopWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top + bwidth)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top + bwidth)' b);                        if (isLineEnd && b.ActualCornerNE == 0f) pts[2].X -= b.ActualBorderRightWidth;                      if (isLineStart && b.ActualCornerNW == 0f) pts[3].X += b.ActualBorderLeftWidth;                        if (b.ActualCornerNW > 0f) corner = CreateCorner(b' r' 1);                                            break;                  case Border.Right:                      bwidth = b.ActualBorderRightWidth;                      pts[0] = RoundP(new PointF(r.Right - bwidth' r.Top + b.ActualCornerNE)' b);                      pts[1] = RoundP(new PointF(r.Right' r.Top + b.ActualCornerNE)' b);                      pts[2] = RoundP(new PointF(r.Right' r.Bottom - b.ActualCornerSE)' b);                      pts[3] = RoundP(new PointF(r.Right - bwidth' r.Bottom - b.ActualCornerSE)' b);                                                                 if (b.ActualCornerNE == 0f) pts[0].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSE == 0f) pts[3].Y -= b.ActualBorderBottomWidth;                       if (b.ActualCornerNE > 0f) corner = CreateCorner(b' r' 2);                      break;                  case Border.Bottom:                      bwidth = b.ActualBorderBottomWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom - bwidth)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom - bwidth)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom)' b);                        if (isLineStart && b.ActualCornerSW == 0f) pts[0].X += b.ActualBorderLeftWidth;                      if (isLineEnd && b.ActualCornerSE == 0f) pts[1].X -= b.ActualBorderRightWidth;                        if (b.ActualCornerSE > 0f) corner = CreateCorner(b' r' 3);                      break;                  case Border.Left:                      bwidth = b.ActualBorderLeftWidth;                      pts[0] = RoundP(new PointF(r.Left' r.Top + b.ActualCornerNW)' b);                      pts[1] = RoundP(new PointF(r.Left + bwidth' r.Top + b.ActualCornerNW)' b);                      pts[2] = RoundP(new PointF(r.Left + bwidth' r.Bottom - b.ActualCornerSW)' b);                      pts[3] = RoundP(new PointF(r.Left' r.Bottom - b.ActualCornerSW)' b);                        if (b.ActualCornerNW == 0f) pts[1].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSW == 0f) pts[2].Y -= b.ActualBorderBottomWidth;                        if (b.ActualCornerSW > 0f) corner = CreateCorner(b' r' 4);                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetBorderPath,The following statement contains a magic number: switch (border)              {                  case Border.Top:                      bwidth = b.ActualBorderTopWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top + bwidth)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top + bwidth)' b);                        if (isLineEnd && b.ActualCornerNE == 0f) pts[2].X -= b.ActualBorderRightWidth;                      if (isLineStart && b.ActualCornerNW == 0f) pts[3].X += b.ActualBorderLeftWidth;                        if (b.ActualCornerNW > 0f) corner = CreateCorner(b' r' 1);                                            break;                  case Border.Right:                      bwidth = b.ActualBorderRightWidth;                      pts[0] = RoundP(new PointF(r.Right - bwidth' r.Top + b.ActualCornerNE)' b);                      pts[1] = RoundP(new PointF(r.Right' r.Top + b.ActualCornerNE)' b);                      pts[2] = RoundP(new PointF(r.Right' r.Bottom - b.ActualCornerSE)' b);                      pts[3] = RoundP(new PointF(r.Right - bwidth' r.Bottom - b.ActualCornerSE)' b);                                                                 if (b.ActualCornerNE == 0f) pts[0].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSE == 0f) pts[3].Y -= b.ActualBorderBottomWidth;                       if (b.ActualCornerNE > 0f) corner = CreateCorner(b' r' 2);                      break;                  case Border.Bottom:                      bwidth = b.ActualBorderBottomWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom - bwidth)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom - bwidth)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom)' b);                        if (isLineStart && b.ActualCornerSW == 0f) pts[0].X += b.ActualBorderLeftWidth;                      if (isLineEnd && b.ActualCornerSE == 0f) pts[1].X -= b.ActualBorderRightWidth;                        if (b.ActualCornerSE > 0f) corner = CreateCorner(b' r' 3);                      break;                  case Border.Left:                      bwidth = b.ActualBorderLeftWidth;                      pts[0] = RoundP(new PointF(r.Left' r.Top + b.ActualCornerNW)' b);                      pts[1] = RoundP(new PointF(r.Left + bwidth' r.Top + b.ActualCornerNW)' b);                      pts[2] = RoundP(new PointF(r.Left + bwidth' r.Bottom - b.ActualCornerSW)' b);                      pts[3] = RoundP(new PointF(r.Left' r.Bottom - b.ActualCornerSW)' b);                        if (b.ActualCornerNW == 0f) pts[1].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSW == 0f) pts[2].Y -= b.ActualBorderBottomWidth;                        if (b.ActualCornerSW > 0f) corner = CreateCorner(b' r' 4);                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetBorderPath,The following statement contains a magic number: switch (border)              {                  case Border.Top:                      bwidth = b.ActualBorderTopWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top + bwidth)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top + bwidth)' b);                        if (isLineEnd && b.ActualCornerNE == 0f) pts[2].X -= b.ActualBorderRightWidth;                      if (isLineStart && b.ActualCornerNW == 0f) pts[3].X += b.ActualBorderLeftWidth;                        if (b.ActualCornerNW > 0f) corner = CreateCorner(b' r' 1);                                            break;                  case Border.Right:                      bwidth = b.ActualBorderRightWidth;                      pts[0] = RoundP(new PointF(r.Right - bwidth' r.Top + b.ActualCornerNE)' b);                      pts[1] = RoundP(new PointF(r.Right' r.Top + b.ActualCornerNE)' b);                      pts[2] = RoundP(new PointF(r.Right' r.Bottom - b.ActualCornerSE)' b);                      pts[3] = RoundP(new PointF(r.Right - bwidth' r.Bottom - b.ActualCornerSE)' b);                                                                 if (b.ActualCornerNE == 0f) pts[0].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSE == 0f) pts[3].Y -= b.ActualBorderBottomWidth;                       if (b.ActualCornerNE > 0f) corner = CreateCorner(b' r' 2);                      break;                  case Border.Bottom:                      bwidth = b.ActualBorderBottomWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom - bwidth)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom - bwidth)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom)' b);                        if (isLineStart && b.ActualCornerSW == 0f) pts[0].X += b.ActualBorderLeftWidth;                      if (isLineEnd && b.ActualCornerSE == 0f) pts[1].X -= b.ActualBorderRightWidth;                        if (b.ActualCornerSE > 0f) corner = CreateCorner(b' r' 3);                      break;                  case Border.Left:                      bwidth = b.ActualBorderLeftWidth;                      pts[0] = RoundP(new PointF(r.Left' r.Top + b.ActualCornerNW)' b);                      pts[1] = RoundP(new PointF(r.Left + bwidth' r.Top + b.ActualCornerNW)' b);                      pts[2] = RoundP(new PointF(r.Left + bwidth' r.Bottom - b.ActualCornerSW)' b);                      pts[3] = RoundP(new PointF(r.Left' r.Bottom - b.ActualCornerSW)' b);                        if (b.ActualCornerNW == 0f) pts[1].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSW == 0f) pts[2].Y -= b.ActualBorderBottomWidth;                        if (b.ActualCornerSW > 0f) corner = CreateCorner(b' r' 4);                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetBorderPath,The following statement contains a magic number: switch (border)              {                  case Border.Top:                      bwidth = b.ActualBorderTopWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top + bwidth)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top + bwidth)' b);                        if (isLineEnd && b.ActualCornerNE == 0f) pts[2].X -= b.ActualBorderRightWidth;                      if (isLineStart && b.ActualCornerNW == 0f) pts[3].X += b.ActualBorderLeftWidth;                        if (b.ActualCornerNW > 0f) corner = CreateCorner(b' r' 1);                                            break;                  case Border.Right:                      bwidth = b.ActualBorderRightWidth;                      pts[0] = RoundP(new PointF(r.Right - bwidth' r.Top + b.ActualCornerNE)' b);                      pts[1] = RoundP(new PointF(r.Right' r.Top + b.ActualCornerNE)' b);                      pts[2] = RoundP(new PointF(r.Right' r.Bottom - b.ActualCornerSE)' b);                      pts[3] = RoundP(new PointF(r.Right - bwidth' r.Bottom - b.ActualCornerSE)' b);                                                                 if (b.ActualCornerNE == 0f) pts[0].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSE == 0f) pts[3].Y -= b.ActualBorderBottomWidth;                       if (b.ActualCornerNE > 0f) corner = CreateCorner(b' r' 2);                      break;                  case Border.Bottom:                      bwidth = b.ActualBorderBottomWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom - bwidth)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom - bwidth)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom)' b);                        if (isLineStart && b.ActualCornerSW == 0f) pts[0].X += b.ActualBorderLeftWidth;                      if (isLineEnd && b.ActualCornerSE == 0f) pts[1].X -= b.ActualBorderRightWidth;                        if (b.ActualCornerSE > 0f) corner = CreateCorner(b' r' 3);                      break;                  case Border.Left:                      bwidth = b.ActualBorderLeftWidth;                      pts[0] = RoundP(new PointF(r.Left' r.Top + b.ActualCornerNW)' b);                      pts[1] = RoundP(new PointF(r.Left + bwidth' r.Top + b.ActualCornerNW)' b);                      pts[2] = RoundP(new PointF(r.Left + bwidth' r.Bottom - b.ActualCornerSW)' b);                      pts[3] = RoundP(new PointF(r.Left' r.Bottom - b.ActualCornerSW)' b);                        if (b.ActualCornerNW == 0f) pts[1].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSW == 0f) pts[2].Y -= b.ActualBorderBottomWidth;                        if (b.ActualCornerSW > 0f) corner = CreateCorner(b' r' 4);                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetBorderPath,The following statement contains a magic number: switch (border)              {                  case Border.Top:                      bwidth = b.ActualBorderTopWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top + bwidth)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top + bwidth)' b);                        if (isLineEnd && b.ActualCornerNE == 0f) pts[2].X -= b.ActualBorderRightWidth;                      if (isLineStart && b.ActualCornerNW == 0f) pts[3].X += b.ActualBorderLeftWidth;                        if (b.ActualCornerNW > 0f) corner = CreateCorner(b' r' 1);                                            break;                  case Border.Right:                      bwidth = b.ActualBorderRightWidth;                      pts[0] = RoundP(new PointF(r.Right - bwidth' r.Top + b.ActualCornerNE)' b);                      pts[1] = RoundP(new PointF(r.Right' r.Top + b.ActualCornerNE)' b);                      pts[2] = RoundP(new PointF(r.Right' r.Bottom - b.ActualCornerSE)' b);                      pts[3] = RoundP(new PointF(r.Right - bwidth' r.Bottom - b.ActualCornerSE)' b);                                                                 if (b.ActualCornerNE == 0f) pts[0].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSE == 0f) pts[3].Y -= b.ActualBorderBottomWidth;                       if (b.ActualCornerNE > 0f) corner = CreateCorner(b' r' 2);                      break;                  case Border.Bottom:                      bwidth = b.ActualBorderBottomWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom - bwidth)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom - bwidth)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom)' b);                        if (isLineStart && b.ActualCornerSW == 0f) pts[0].X += b.ActualBorderLeftWidth;                      if (isLineEnd && b.ActualCornerSE == 0f) pts[1].X -= b.ActualBorderRightWidth;                        if (b.ActualCornerSE > 0f) corner = CreateCorner(b' r' 3);                      break;                  case Border.Left:                      bwidth = b.ActualBorderLeftWidth;                      pts[0] = RoundP(new PointF(r.Left' r.Top + b.ActualCornerNW)' b);                      pts[1] = RoundP(new PointF(r.Left + bwidth' r.Top + b.ActualCornerNW)' b);                      pts[2] = RoundP(new PointF(r.Left + bwidth' r.Bottom - b.ActualCornerSW)' b);                      pts[3] = RoundP(new PointF(r.Left' r.Bottom - b.ActualCornerSW)' b);                        if (b.ActualCornerNW == 0f) pts[1].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSW == 0f) pts[2].Y -= b.ActualBorderBottomWidth;                        if (b.ActualCornerSW > 0f) corner = CreateCorner(b' r' 4);                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetBorderPath,The following statement contains a magic number: switch (border)              {                  case Border.Top:                      bwidth = b.ActualBorderTopWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top + bwidth)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top + bwidth)' b);                        if (isLineEnd && b.ActualCornerNE == 0f) pts[2].X -= b.ActualBorderRightWidth;                      if (isLineStart && b.ActualCornerNW == 0f) pts[3].X += b.ActualBorderLeftWidth;                        if (b.ActualCornerNW > 0f) corner = CreateCorner(b' r' 1);                                            break;                  case Border.Right:                      bwidth = b.ActualBorderRightWidth;                      pts[0] = RoundP(new PointF(r.Right - bwidth' r.Top + b.ActualCornerNE)' b);                      pts[1] = RoundP(new PointF(r.Right' r.Top + b.ActualCornerNE)' b);                      pts[2] = RoundP(new PointF(r.Right' r.Bottom - b.ActualCornerSE)' b);                      pts[3] = RoundP(new PointF(r.Right - bwidth' r.Bottom - b.ActualCornerSE)' b);                                                                 if (b.ActualCornerNE == 0f) pts[0].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSE == 0f) pts[3].Y -= b.ActualBorderBottomWidth;                       if (b.ActualCornerNE > 0f) corner = CreateCorner(b' r' 2);                      break;                  case Border.Bottom:                      bwidth = b.ActualBorderBottomWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom - bwidth)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom - bwidth)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom)' b);                        if (isLineStart && b.ActualCornerSW == 0f) pts[0].X += b.ActualBorderLeftWidth;                      if (isLineEnd && b.ActualCornerSE == 0f) pts[1].X -= b.ActualBorderRightWidth;                        if (b.ActualCornerSE > 0f) corner = CreateCorner(b' r' 3);                      break;                  case Border.Left:                      bwidth = b.ActualBorderLeftWidth;                      pts[0] = RoundP(new PointF(r.Left' r.Top + b.ActualCornerNW)' b);                      pts[1] = RoundP(new PointF(r.Left + bwidth' r.Top + b.ActualCornerNW)' b);                      pts[2] = RoundP(new PointF(r.Left + bwidth' r.Bottom - b.ActualCornerSW)' b);                      pts[3] = RoundP(new PointF(r.Left' r.Bottom - b.ActualCornerSW)' b);                        if (b.ActualCornerNW == 0f) pts[1].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSW == 0f) pts[2].Y -= b.ActualBorderBottomWidth;                        if (b.ActualCornerSW > 0f) corner = CreateCorner(b' r' 4);                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,CreateCorner,The following statement contains a magic number: switch (cornerIndex)              {                  case 1:                      outer = new RectangleF(r.Left' r.Top' b.ActualCornerNW' b.ActualCornerNW);                      inner = RectangleF.FromLTRB(outer.Left + b.ActualBorderLeftWidth' outer.Top + b.ActualBorderTopWidth' outer.Right' outer.Bottom);                      start1 = 180;                      start2 = 270;                      break;                  case 2:                      outer = new RectangleF(r.Right - b.ActualCornerNE' r.Top' b.ActualCornerNE' b.ActualCornerNE);                      inner = RectangleF.FromLTRB(outer.Left' outer.Top + b.ActualBorderTopWidth' outer.Right - b.ActualBorderRightWidth' outer.Bottom);                      outer.X -= outer.Width;                      inner.X -= inner.Width;                      start1 = -90;                      start2 = 0;                      break;                  case 3:                      outer = RectangleF.FromLTRB(r.Right - b.ActualCornerSE' r.Bottom - b.ActualCornerSE' r.Right' r.Bottom);                      inner = new RectangleF(outer.Left' outer.Top' outer.Width - b.ActualBorderRightWidth' outer.Height - b.ActualBorderBottomWidth);                      outer.X -= outer.Width;                      outer.Y -= outer.Height;                      inner.X -= inner.Width;                      inner.Y -= inner.Height;                      start1 = 0;                      start2 = 90;                      break;                  case 4:                      outer = new RectangleF(r.Left' r.Bottom - b.ActualCornerSW' b.ActualCornerSW' b.ActualCornerSW);                      inner = RectangleF.FromLTRB( r.Left + b.ActualBorderLeftWidth ' outer.Top ' outer.Right' outer.Bottom - b.ActualBorderBottomWidth);                      start1 = 90;                      start2 = 180;                      outer.Y -= outer.Height;                      inner.Y -= inner.Height;                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,CreateCorner,The following statement contains a magic number: switch (cornerIndex)              {                  case 1:                      outer = new RectangleF(r.Left' r.Top' b.ActualCornerNW' b.ActualCornerNW);                      inner = RectangleF.FromLTRB(outer.Left + b.ActualBorderLeftWidth' outer.Top + b.ActualBorderTopWidth' outer.Right' outer.Bottom);                      start1 = 180;                      start2 = 270;                      break;                  case 2:                      outer = new RectangleF(r.Right - b.ActualCornerNE' r.Top' b.ActualCornerNE' b.ActualCornerNE);                      inner = RectangleF.FromLTRB(outer.Left' outer.Top + b.ActualBorderTopWidth' outer.Right - b.ActualBorderRightWidth' outer.Bottom);                      outer.X -= outer.Width;                      inner.X -= inner.Width;                      start1 = -90;                      start2 = 0;                      break;                  case 3:                      outer = RectangleF.FromLTRB(r.Right - b.ActualCornerSE' r.Bottom - b.ActualCornerSE' r.Right' r.Bottom);                      inner = new RectangleF(outer.Left' outer.Top' outer.Width - b.ActualBorderRightWidth' outer.Height - b.ActualBorderBottomWidth);                      outer.X -= outer.Width;                      outer.Y -= outer.Height;                      inner.X -= inner.Width;                      inner.Y -= inner.Height;                      start1 = 0;                      start2 = 90;                      break;                  case 4:                      outer = new RectangleF(r.Left' r.Bottom - b.ActualCornerSW' b.ActualCornerSW' b.ActualCornerSW);                      inner = RectangleF.FromLTRB( r.Left + b.ActualBorderLeftWidth ' outer.Top ' outer.Right' outer.Bottom - b.ActualBorderBottomWidth);                      start1 = 90;                      start2 = 180;                      outer.Y -= outer.Height;                      inner.Y -= inner.Height;                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,CreateCorner,The following statement contains a magic number: switch (cornerIndex)              {                  case 1:                      outer = new RectangleF(r.Left' r.Top' b.ActualCornerNW' b.ActualCornerNW);                      inner = RectangleF.FromLTRB(outer.Left + b.ActualBorderLeftWidth' outer.Top + b.ActualBorderTopWidth' outer.Right' outer.Bottom);                      start1 = 180;                      start2 = 270;                      break;                  case 2:                      outer = new RectangleF(r.Right - b.ActualCornerNE' r.Top' b.ActualCornerNE' b.ActualCornerNE);                      inner = RectangleF.FromLTRB(outer.Left' outer.Top + b.ActualBorderTopWidth' outer.Right - b.ActualBorderRightWidth' outer.Bottom);                      outer.X -= outer.Width;                      inner.X -= inner.Width;                      start1 = -90;                      start2 = 0;                      break;                  case 3:                      outer = RectangleF.FromLTRB(r.Right - b.ActualCornerSE' r.Bottom - b.ActualCornerSE' r.Right' r.Bottom);                      inner = new RectangleF(outer.Left' outer.Top' outer.Width - b.ActualBorderRightWidth' outer.Height - b.ActualBorderBottomWidth);                      outer.X -= outer.Width;                      outer.Y -= outer.Height;                      inner.X -= inner.Width;                      inner.Y -= inner.Height;                      start1 = 0;                      start2 = 90;                      break;                  case 4:                      outer = new RectangleF(r.Left' r.Bottom - b.ActualCornerSW' b.ActualCornerSW' b.ActualCornerSW);                      inner = RectangleF.FromLTRB( r.Left + b.ActualBorderLeftWidth ' outer.Top ' outer.Right' outer.Bottom - b.ActualBorderBottomWidth);                      start1 = 90;                      start2 = 180;                      outer.Y -= outer.Height;                      inner.Y -= inner.Height;                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,CreateCorner,The following statement contains a magic number: switch (cornerIndex)              {                  case 1:                      outer = new RectangleF(r.Left' r.Top' b.ActualCornerNW' b.ActualCornerNW);                      inner = RectangleF.FromLTRB(outer.Left + b.ActualBorderLeftWidth' outer.Top + b.ActualBorderTopWidth' outer.Right' outer.Bottom);                      start1 = 180;                      start2 = 270;                      break;                  case 2:                      outer = new RectangleF(r.Right - b.ActualCornerNE' r.Top' b.ActualCornerNE' b.ActualCornerNE);                      inner = RectangleF.FromLTRB(outer.Left' outer.Top + b.ActualBorderTopWidth' outer.Right - b.ActualBorderRightWidth' outer.Bottom);                      outer.X -= outer.Width;                      inner.X -= inner.Width;                      start1 = -90;                      start2 = 0;                      break;                  case 3:                      outer = RectangleF.FromLTRB(r.Right - b.ActualCornerSE' r.Bottom - b.ActualCornerSE' r.Right' r.Bottom);                      inner = new RectangleF(outer.Left' outer.Top' outer.Width - b.ActualBorderRightWidth' outer.Height - b.ActualBorderBottomWidth);                      outer.X -= outer.Width;                      outer.Y -= outer.Height;                      inner.X -= inner.Width;                      inner.Y -= inner.Height;                      start1 = 0;                      start2 = 90;                      break;                  case 4:                      outer = new RectangleF(r.Left' r.Bottom - b.ActualCornerSW' b.ActualCornerSW' b.ActualCornerSW);                      inner = RectangleF.FromLTRB( r.Left + b.ActualBorderLeftWidth ' outer.Top ' outer.Right' outer.Bottom - b.ActualBorderBottomWidth);                      start1 = 90;                      start2 = 180;                      outer.Y -= outer.Height;                      inner.Y -= inner.Height;                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,CreateCorner,The following statement contains a magic number: switch (cornerIndex)              {                  case 1:                      outer = new RectangleF(r.Left' r.Top' b.ActualCornerNW' b.ActualCornerNW);                      inner = RectangleF.FromLTRB(outer.Left + b.ActualBorderLeftWidth' outer.Top + b.ActualBorderTopWidth' outer.Right' outer.Bottom);                      start1 = 180;                      start2 = 270;                      break;                  case 2:                      outer = new RectangleF(r.Right - b.ActualCornerNE' r.Top' b.ActualCornerNE' b.ActualCornerNE);                      inner = RectangleF.FromLTRB(outer.Left' outer.Top + b.ActualBorderTopWidth' outer.Right - b.ActualBorderRightWidth' outer.Bottom);                      outer.X -= outer.Width;                      inner.X -= inner.Width;                      start1 = -90;                      start2 = 0;                      break;                  case 3:                      outer = RectangleF.FromLTRB(r.Right - b.ActualCornerSE' r.Bottom - b.ActualCornerSE' r.Right' r.Bottom);                      inner = new RectangleF(outer.Left' outer.Top' outer.Width - b.ActualBorderRightWidth' outer.Height - b.ActualBorderBottomWidth);                      outer.X -= outer.Width;                      outer.Y -= outer.Height;                      inner.X -= inner.Width;                      inner.Y -= inner.Height;                      start1 = 0;                      start2 = 90;                      break;                  case 4:                      outer = new RectangleF(r.Left' r.Bottom - b.ActualCornerSW' b.ActualCornerSW' b.ActualCornerSW);                      inner = RectangleF.FromLTRB( r.Left + b.ActualBorderLeftWidth ' outer.Top ' outer.Right' outer.Bottom - b.ActualBorderBottomWidth);                      start1 = 90;                      start2 = 180;                      outer.Y -= outer.Height;                      inner.Y -= inner.Height;                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,CreateCorner,The following statement contains a magic number: switch (cornerIndex)              {                  case 1:                      outer = new RectangleF(r.Left' r.Top' b.ActualCornerNW' b.ActualCornerNW);                      inner = RectangleF.FromLTRB(outer.Left + b.ActualBorderLeftWidth' outer.Top + b.ActualBorderTopWidth' outer.Right' outer.Bottom);                      start1 = 180;                      start2 = 270;                      break;                  case 2:                      outer = new RectangleF(r.Right - b.ActualCornerNE' r.Top' b.ActualCornerNE' b.ActualCornerNE);                      inner = RectangleF.FromLTRB(outer.Left' outer.Top + b.ActualBorderTopWidth' outer.Right - b.ActualBorderRightWidth' outer.Bottom);                      outer.X -= outer.Width;                      inner.X -= inner.Width;                      start1 = -90;                      start2 = 0;                      break;                  case 3:                      outer = RectangleF.FromLTRB(r.Right - b.ActualCornerSE' r.Bottom - b.ActualCornerSE' r.Right' r.Bottom);                      inner = new RectangleF(outer.Left' outer.Top' outer.Width - b.ActualBorderRightWidth' outer.Height - b.ActualBorderBottomWidth);                      outer.X -= outer.Width;                      outer.Y -= outer.Height;                      inner.X -= inner.Width;                      inner.Y -= inner.Height;                      start1 = 0;                      start2 = 90;                      break;                  case 4:                      outer = new RectangleF(r.Left' r.Bottom - b.ActualCornerSW' b.ActualCornerSW' b.ActualCornerSW);                      inner = RectangleF.FromLTRB( r.Left + b.ActualBorderLeftWidth ' outer.Top ' outer.Right' outer.Bottom - b.ActualBorderBottomWidth);                      start1 = 90;                      start2 = 180;                      outer.Y -= outer.Height;                      inner.Y -= inner.Height;                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,CreateCorner,The following statement contains a magic number: switch (cornerIndex)              {                  case 1:                      outer = new RectangleF(r.Left' r.Top' b.ActualCornerNW' b.ActualCornerNW);                      inner = RectangleF.FromLTRB(outer.Left + b.ActualBorderLeftWidth' outer.Top + b.ActualBorderTopWidth' outer.Right' outer.Bottom);                      start1 = 180;                      start2 = 270;                      break;                  case 2:                      outer = new RectangleF(r.Right - b.ActualCornerNE' r.Top' b.ActualCornerNE' b.ActualCornerNE);                      inner = RectangleF.FromLTRB(outer.Left' outer.Top + b.ActualBorderTopWidth' outer.Right - b.ActualBorderRightWidth' outer.Bottom);                      outer.X -= outer.Width;                      inner.X -= inner.Width;                      start1 = -90;                      start2 = 0;                      break;                  case 3:                      outer = RectangleF.FromLTRB(r.Right - b.ActualCornerSE' r.Bottom - b.ActualCornerSE' r.Right' r.Bottom);                      inner = new RectangleF(outer.Left' outer.Top' outer.Width - b.ActualBorderRightWidth' outer.Height - b.ActualBorderBottomWidth);                      outer.X -= outer.Width;                      outer.Y -= outer.Height;                      inner.X -= inner.Width;                      inner.Y -= inner.Height;                      start1 = 0;                      start2 = 90;                      break;                  case 4:                      outer = new RectangleF(r.Left' r.Bottom - b.ActualCornerSW' b.ActualCornerSW' b.ActualCornerSW);                      inner = RectangleF.FromLTRB( r.Left + b.ActualBorderLeftWidth ' outer.Top ' outer.Right' outer.Bottom - b.ActualBorderBottomWidth);                      start1 = 90;                      start2 = 180;                      outer.Y -= outer.Height;                      inner.Y -= inner.Height;                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,CreateCorner,The following statement contains a magic number: switch (cornerIndex)              {                  case 1:                      outer = new RectangleF(r.Left' r.Top' b.ActualCornerNW' b.ActualCornerNW);                      inner = RectangleF.FromLTRB(outer.Left + b.ActualBorderLeftWidth' outer.Top + b.ActualBorderTopWidth' outer.Right' outer.Bottom);                      start1 = 180;                      start2 = 270;                      break;                  case 2:                      outer = new RectangleF(r.Right - b.ActualCornerNE' r.Top' b.ActualCornerNE' b.ActualCornerNE);                      inner = RectangleF.FromLTRB(outer.Left' outer.Top + b.ActualBorderTopWidth' outer.Right - b.ActualBorderRightWidth' outer.Bottom);                      outer.X -= outer.Width;                      inner.X -= inner.Width;                      start1 = -90;                      start2 = 0;                      break;                  case 3:                      outer = RectangleF.FromLTRB(r.Right - b.ActualCornerSE' r.Bottom - b.ActualCornerSE' r.Right' r.Bottom);                      inner = new RectangleF(outer.Left' outer.Top' outer.Width - b.ActualBorderRightWidth' outer.Height - b.ActualBorderBottomWidth);                      outer.X -= outer.Width;                      outer.Y -= outer.Height;                      inner.X -= inner.Width;                      inner.Y -= inner.Height;                      start1 = 0;                      start2 = 90;                      break;                  case 4:                      outer = new RectangleF(r.Left' r.Bottom - b.ActualCornerSW' b.ActualCornerSW' b.ActualCornerSW);                      inner = RectangleF.FromLTRB( r.Left + b.ActualBorderLeftWidth ' outer.Top ' outer.Right' outer.Bottom - b.ActualBorderBottomWidth);                      start1 = 90;                      start2 = 180;                      outer.Y -= outer.Height;                      inner.Y -= inner.Height;                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,CreateCorner,The following statement contains a magic number: switch (cornerIndex)              {                  case 1:                      outer = new RectangleF(r.Left' r.Top' b.ActualCornerNW' b.ActualCornerNW);                      inner = RectangleF.FromLTRB(outer.Left + b.ActualBorderLeftWidth' outer.Top + b.ActualBorderTopWidth' outer.Right' outer.Bottom);                      start1 = 180;                      start2 = 270;                      break;                  case 2:                      outer = new RectangleF(r.Right - b.ActualCornerNE' r.Top' b.ActualCornerNE' b.ActualCornerNE);                      inner = RectangleF.FromLTRB(outer.Left' outer.Top + b.ActualBorderTopWidth' outer.Right - b.ActualBorderRightWidth' outer.Bottom);                      outer.X -= outer.Width;                      inner.X -= inner.Width;                      start1 = -90;                      start2 = 0;                      break;                  case 3:                      outer = RectangleF.FromLTRB(r.Right - b.ActualCornerSE' r.Bottom - b.ActualCornerSE' r.Right' r.Bottom);                      inner = new RectangleF(outer.Left' outer.Top' outer.Width - b.ActualBorderRightWidth' outer.Height - b.ActualBorderBottomWidth);                      outer.X -= outer.Width;                      outer.Y -= outer.Height;                      inner.X -= inner.Width;                      inner.Y -= inner.Height;                      start1 = 0;                      start2 = 90;                      break;                  case 4:                      outer = new RectangleF(r.Left' r.Bottom - b.ActualCornerSW' b.ActualCornerSW' b.ActualCornerSW);                      inner = RectangleF.FromLTRB( r.Left + b.ActualBorderLeftWidth ' outer.Top ' outer.Right' outer.Bottom - b.ActualBorderBottomWidth);                      start1 = 90;                      start2 = 180;                      outer.Y -= outer.Height;                      inner.Y -= inner.Height;                      break;              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,CreateCorner,The following statement contains a magic number: outer.Width *= 2;
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,CreateCorner,The following statement contains a magic number: outer.Height *= 2;
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,CreateCorner,The following statement contains a magic number: inner.Width *= 2;
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,CreateCorner,The following statement contains a magic number: inner.Height *= 2;
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,CreateCorner,The following statement contains a magic number: corner.AddArc(outer' start1' 90);
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,CreateCorner,The following statement contains a magic number: corner.AddArc(inner' start2' -90);
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetRoundRect,The following statement contains a magic number: nwRadius *= 2;
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetRoundRect,The following statement contains a magic number: neRadius *= 2;
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetRoundRect,The following statement contains a magic number: seRadius *= 2;
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetRoundRect,The following statement contains a magic number: swRadius *= 2;
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetRoundRect,The following statement contains a magic number: if (neRadius > 0f)              {                  path.AddArc(                      RectangleF.FromLTRB(rect.Right - neRadius' rect.Top' rect.Right' rect.Top + neRadius)'                      -90' 90);              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetRoundRect,The following statement contains a magic number: if (neRadius > 0f)              {                  path.AddArc(                      RectangleF.FromLTRB(rect.Right - neRadius' rect.Top' rect.Right' rect.Top + neRadius)'                      -90' 90);              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetRoundRect,The following statement contains a magic number: if (seRadius > 0f)              {                  path.AddArc(                      RectangleF.FromLTRB(rect.Right - seRadius' rect.Bottom - seRadius' rect.Right' rect.Bottom)'                      0' 90);              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetRoundRect,The following statement contains a magic number: if (swRadius > 0f)              {                  path.AddArc(                      RectangleF.FromLTRB(rect.Left' rect.Bottom - swRadius' rect.Left + swRadius' rect.Bottom)'                      90' 90);              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetRoundRect,The following statement contains a magic number: if (swRadius > 0f)              {                  path.AddArc(                      RectangleF.FromLTRB(rect.Left' rect.Bottom - swRadius' rect.Left + swRadius' rect.Bottom)'                      90' 90);              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetRoundRect,The following statement contains a magic number: if (nwRadius > 0f)              {                  path.AddArc(                      RectangleF.FromLTRB(rect.Left' rect.Top' rect.Left + nwRadius' rect.Top + nwRadius)'                      180' 90);              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetRoundRect,The following statement contains a magic number: if (nwRadius > 0f)              {                  path.AddArc(                      RectangleF.FromLTRB(rect.Left' rect.Top' rect.Left + nwRadius' rect.Top + nwRadius)'                      180' 90);              }
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,Darken,The following statement contains a magic number: return Color.FromArgb(c.R / 2' c.G / 2' c.B / 2);
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,Darken,The following statement contains a magic number: return Color.FromArgb(c.R / 2' c.G / 2' c.B / 2);
Magic Number,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,Darken,The following statement contains a magic number: return Color.FromArgb(c.R / 2' c.G / 2' c.B / 2);
Magic Number,MetroFramework.Drawing.Html,CssLayoutEngine,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssLayoutEngine.cs,ApplyVerticalAlignment,The following statement contains a magic number: float baseline = lineBox.GetMaxWordBottom() - GetDescent(lineBox.OwnerBox.ActualFont) - 2;
Magic Number,MetroFramework.Drawing.Html,CssLayoutEngine,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssLayoutEngine.cs,ApplyCellVerticalAlignment,The following statement contains a magic number: if (cell.VerticalAlign == CssConstants.Bottom)              {                  dist = cellbot - bottom;              }              else if (cell.VerticalAlign == CssConstants.Middle)              {                  dist = (cellbot - bottom) / 2;              }
Magic Number,MetroFramework.Drawing.Html,CssLayoutEngine,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssLayoutEngine.cs,ApplyCenterAlignment,The following statement contains a magic number: diff /= 2;
Magic Number,MetroFramework.Drawing.Html,CssLength,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssLength.cs,CssLength,The following statement contains a magic number: if (length.Length < 3)              {                  float.TryParse(length' out _number);                  _hasError = true;                  return;              }
Magic Number,MetroFramework.Drawing.Html,CssLength,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssLength.cs,CssLength,The following statement contains a magic number: string u = length.Substring(length.Length - 2' 2);
Magic Number,MetroFramework.Drawing.Html,CssLength,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssLength.cs,CssLength,The following statement contains a magic number: string u = length.Substring(length.Length - 2' 2);
Magic Number,MetroFramework.Drawing.Html,CssLength,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssLength.cs,CssLength,The following statement contains a magic number: string number = length.Substring(0' length.Length - 2);
Magic Number,MetroFramework.Drawing.Html,CssLineBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssLineBox.cs,DrawRectangles,The following statement contains a magic number: foreach (CssBox b in Rectangles.Keys)              {                  if (float.IsInfinity(Rectangles[b].Width))                       continue;                  g.FillRectangle(new SolidBrush(Color.FromArgb(50' Color.Black))'                      Rectangle.Round(Rectangles[b]));                  g.DrawRectangle(Pens.Red' Rectangle.Round(Rectangles[b]));              }
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,ParseLength,The following statement contains a magic number: if (length.Length < 3) return 0f;
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,ParseLength,The following statement contains a magic number: string unit = length.Substring(length.Length - 2' 2);
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,ParseLength,The following statement contains a magic number: string unit = length.Substring(length.Length - 2' 2);
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,ParseLength,The following statement contains a magic number: string number = length.Substring(0' length.Length - 2);
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,GetActualColor,The following statement contains a magic number: if (colorValue.StartsWith("#"))              {                  #region hexadecimal forms                  string hex = colorValue.Substring(1);                    if (hex.Length == 6)                  {                      r = int.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 3)                  {                      r = int.Parse(new String(hex.Substring(0' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(new String(hex.Substring(1' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(new String(hex.Substring(2' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      return onError;                  }                   #endregion              }              else if (colorValue.StartsWith("rgb(") && colorValue.EndsWith(")"))              {                  #region RGB forms                    string rgb = colorValue.Substring(4' colorValue.Length - 5);                  string[] chunks = rgb.Split(''');                    if (chunks.Length == 3)                  {                      unchecked                      {                          r = Convert.ToInt32(ParseNumber(chunks[0].Trim()' 255f));                          g = Convert.ToInt32(ParseNumber(chunks[1].Trim()' 255f));                          b = Convert.ToInt32(ParseNumber(chunks[2].Trim()' 255f));                       }                  }                  else                  {                      return onError;                  }                    #endregion              }              else              {                  #region Color Constants                    string hex = string.Empty;                    switch (colorValue)                  {                      case CssConstants.Maroon:                          hex = "#800000"; break;                      case CssConstants.Red:                          hex = "#ff0000"; break;                      case CssConstants.Orange:                          hex = "#ffA500"; break;                      case CssConstants.Olive:                          hex = "#808000"; break;                      case CssConstants.Purple:                          hex = "#800080"; break;                      case CssConstants.Fuchsia:                          hex = "#ff00ff"; break;                      case CssConstants.White:                          hex = "#ffffff"; break;                      case CssConstants.Lime:                          hex = "#00ff00"; break;                      case CssConstants.Green:                          hex = "#008000"; break;                      case CssConstants.Navy:                          hex = "#000080"; break;                      case CssConstants.Blue:                          hex = "#0000ff"; break;                      case CssConstants.Aqua:                          hex = "#00ffff"; break;                      case CssConstants.Teal:                          hex = "#008080"; break;                      case CssConstants.Black:                          hex = "#000000"; break;                      case CssConstants.Silver:                          hex = "#c0c0c0"; break;                      case CssConstants.Gray:                          hex = "#808080"; break;                      case CssConstants.Yellow:                          hex = "#FFFF00"; break;                  }                    if (string.IsNullOrEmpty(hex))                  {                      return onError;                  }                  else                  {                      Color c = GetActualColor(hex);                      r = c.R;                      g = c.G;                      b = c.B;                  }                    #endregion              }
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,GetActualColor,The following statement contains a magic number: if (colorValue.StartsWith("#"))              {                  #region hexadecimal forms                  string hex = colorValue.Substring(1);                    if (hex.Length == 6)                  {                      r = int.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 3)                  {                      r = int.Parse(new String(hex.Substring(0' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(new String(hex.Substring(1' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(new String(hex.Substring(2' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      return onError;                  }                   #endregion              }              else if (colorValue.StartsWith("rgb(") && colorValue.EndsWith(")"))              {                  #region RGB forms                    string rgb = colorValue.Substring(4' colorValue.Length - 5);                  string[] chunks = rgb.Split(''');                    if (chunks.Length == 3)                  {                      unchecked                      {                          r = Convert.ToInt32(ParseNumber(chunks[0].Trim()' 255f));                          g = Convert.ToInt32(ParseNumber(chunks[1].Trim()' 255f));                          b = Convert.ToInt32(ParseNumber(chunks[2].Trim()' 255f));                       }                  }                  else                  {                      return onError;                  }                    #endregion              }              else              {                  #region Color Constants                    string hex = string.Empty;                    switch (colorValue)                  {                      case CssConstants.Maroon:                          hex = "#800000"; break;                      case CssConstants.Red:                          hex = "#ff0000"; break;                      case CssConstants.Orange:                          hex = "#ffA500"; break;                      case CssConstants.Olive:                          hex = "#808000"; break;                      case CssConstants.Purple:                          hex = "#800080"; break;                      case CssConstants.Fuchsia:                          hex = "#ff00ff"; break;                      case CssConstants.White:                          hex = "#ffffff"; break;                      case CssConstants.Lime:                          hex = "#00ff00"; break;                      case CssConstants.Green:                          hex = "#008000"; break;                      case CssConstants.Navy:                          hex = "#000080"; break;                      case CssConstants.Blue:                          hex = "#0000ff"; break;                      case CssConstants.Aqua:                          hex = "#00ffff"; break;                      case CssConstants.Teal:                          hex = "#008080"; break;                      case CssConstants.Black:                          hex = "#000000"; break;                      case CssConstants.Silver:                          hex = "#c0c0c0"; break;                      case CssConstants.Gray:                          hex = "#808080"; break;                      case CssConstants.Yellow:                          hex = "#FFFF00"; break;                  }                    if (string.IsNullOrEmpty(hex))                  {                      return onError;                  }                  else                  {                      Color c = GetActualColor(hex);                      r = c.R;                      g = c.G;                      b = c.B;                  }                    #endregion              }
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,GetActualColor,The following statement contains a magic number: if (colorValue.StartsWith("#"))              {                  #region hexadecimal forms                  string hex = colorValue.Substring(1);                    if (hex.Length == 6)                  {                      r = int.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 3)                  {                      r = int.Parse(new String(hex.Substring(0' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(new String(hex.Substring(1' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(new String(hex.Substring(2' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      return onError;                  }                   #endregion              }              else if (colorValue.StartsWith("rgb(") && colorValue.EndsWith(")"))              {                  #region RGB forms                    string rgb = colorValue.Substring(4' colorValue.Length - 5);                  string[] chunks = rgb.Split(''');                    if (chunks.Length == 3)                  {                      unchecked                      {                          r = Convert.ToInt32(ParseNumber(chunks[0].Trim()' 255f));                          g = Convert.ToInt32(ParseNumber(chunks[1].Trim()' 255f));                          b = Convert.ToInt32(ParseNumber(chunks[2].Trim()' 255f));                       }                  }                  else                  {                      return onError;                  }                    #endregion              }              else              {                  #region Color Constants                    string hex = string.Empty;                    switch (colorValue)                  {                      case CssConstants.Maroon:                          hex = "#800000"; break;                      case CssConstants.Red:                          hex = "#ff0000"; break;                      case CssConstants.Orange:                          hex = "#ffA500"; break;                      case CssConstants.Olive:                          hex = "#808000"; break;                      case CssConstants.Purple:                          hex = "#800080"; break;                      case CssConstants.Fuchsia:                          hex = "#ff00ff"; break;                      case CssConstants.White:                          hex = "#ffffff"; break;                      case CssConstants.Lime:                          hex = "#00ff00"; break;                      case CssConstants.Green:                          hex = "#008000"; break;                      case CssConstants.Navy:                          hex = "#000080"; break;                      case CssConstants.Blue:                          hex = "#0000ff"; break;                      case CssConstants.Aqua:                          hex = "#00ffff"; break;                      case CssConstants.Teal:                          hex = "#008080"; break;                      case CssConstants.Black:                          hex = "#000000"; break;                      case CssConstants.Silver:                          hex = "#c0c0c0"; break;                      case CssConstants.Gray:                          hex = "#808080"; break;                      case CssConstants.Yellow:                          hex = "#FFFF00"; break;                  }                    if (string.IsNullOrEmpty(hex))                  {                      return onError;                  }                  else                  {                      Color c = GetActualColor(hex);                      r = c.R;                      g = c.G;                      b = c.B;                  }                    #endregion              }
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,GetActualColor,The following statement contains a magic number: if (colorValue.StartsWith("#"))              {                  #region hexadecimal forms                  string hex = colorValue.Substring(1);                    if (hex.Length == 6)                  {                      r = int.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 3)                  {                      r = int.Parse(new String(hex.Substring(0' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(new String(hex.Substring(1' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(new String(hex.Substring(2' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      return onError;                  }                   #endregion              }              else if (colorValue.StartsWith("rgb(") && colorValue.EndsWith(")"))              {                  #region RGB forms                    string rgb = colorValue.Substring(4' colorValue.Length - 5);                  string[] chunks = rgb.Split(''');                    if (chunks.Length == 3)                  {                      unchecked                      {                          r = Convert.ToInt32(ParseNumber(chunks[0].Trim()' 255f));                          g = Convert.ToInt32(ParseNumber(chunks[1].Trim()' 255f));                          b = Convert.ToInt32(ParseNumber(chunks[2].Trim()' 255f));                       }                  }                  else                  {                      return onError;                  }                    #endregion              }              else              {                  #region Color Constants                    string hex = string.Empty;                    switch (colorValue)                  {                      case CssConstants.Maroon:                          hex = "#800000"; break;                      case CssConstants.Red:                          hex = "#ff0000"; break;                      case CssConstants.Orange:                          hex = "#ffA500"; break;                      case CssConstants.Olive:                          hex = "#808000"; break;                      case CssConstants.Purple:                          hex = "#800080"; break;                      case CssConstants.Fuchsia:                          hex = "#ff00ff"; break;                      case CssConstants.White:                          hex = "#ffffff"; break;                      case CssConstants.Lime:                          hex = "#00ff00"; break;                      case CssConstants.Green:                          hex = "#008000"; break;                      case CssConstants.Navy:                          hex = "#000080"; break;                      case CssConstants.Blue:                          hex = "#0000ff"; break;                      case CssConstants.Aqua:                          hex = "#00ffff"; break;                      case CssConstants.Teal:                          hex = "#008080"; break;                      case CssConstants.Black:                          hex = "#000000"; break;                      case CssConstants.Silver:                          hex = "#c0c0c0"; break;                      case CssConstants.Gray:                          hex = "#808080"; break;                      case CssConstants.Yellow:                          hex = "#FFFF00"; break;                  }                    if (string.IsNullOrEmpty(hex))                  {                      return onError;                  }                  else                  {                      Color c = GetActualColor(hex);                      r = c.R;                      g = c.G;                      b = c.B;                  }                    #endregion              }
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,GetActualColor,The following statement contains a magic number: if (colorValue.StartsWith("#"))              {                  #region hexadecimal forms                  string hex = colorValue.Substring(1);                    if (hex.Length == 6)                  {                      r = int.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 3)                  {                      r = int.Parse(new String(hex.Substring(0' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(new String(hex.Substring(1' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(new String(hex.Substring(2' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      return onError;                  }                   #endregion              }              else if (colorValue.StartsWith("rgb(") && colorValue.EndsWith(")"))              {                  #region RGB forms                    string rgb = colorValue.Substring(4' colorValue.Length - 5);                  string[] chunks = rgb.Split(''');                    if (chunks.Length == 3)                  {                      unchecked                      {                          r = Convert.ToInt32(ParseNumber(chunks[0].Trim()' 255f));                          g = Convert.ToInt32(ParseNumber(chunks[1].Trim()' 255f));                          b = Convert.ToInt32(ParseNumber(chunks[2].Trim()' 255f));                       }                  }                  else                  {                      return onError;                  }                    #endregion              }              else              {                  #region Color Constants                    string hex = string.Empty;                    switch (colorValue)                  {                      case CssConstants.Maroon:                          hex = "#800000"; break;                      case CssConstants.Red:                          hex = "#ff0000"; break;                      case CssConstants.Orange:                          hex = "#ffA500"; break;                      case CssConstants.Olive:                          hex = "#808000"; break;                      case CssConstants.Purple:                          hex = "#800080"; break;                      case CssConstants.Fuchsia:                          hex = "#ff00ff"; break;                      case CssConstants.White:                          hex = "#ffffff"; break;                      case CssConstants.Lime:                          hex = "#00ff00"; break;                      case CssConstants.Green:                          hex = "#008000"; break;                      case CssConstants.Navy:                          hex = "#000080"; break;                      case CssConstants.Blue:                          hex = "#0000ff"; break;                      case CssConstants.Aqua:                          hex = "#00ffff"; break;                      case CssConstants.Teal:                          hex = "#008080"; break;                      case CssConstants.Black:                          hex = "#000000"; break;                      case CssConstants.Silver:                          hex = "#c0c0c0"; break;                      case CssConstants.Gray:                          hex = "#808080"; break;                      case CssConstants.Yellow:                          hex = "#FFFF00"; break;                  }                    if (string.IsNullOrEmpty(hex))                  {                      return onError;                  }                  else                  {                      Color c = GetActualColor(hex);                      r = c.R;                      g = c.G;                      b = c.B;                  }                    #endregion              }
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,GetActualColor,The following statement contains a magic number: if (colorValue.StartsWith("#"))              {                  #region hexadecimal forms                  string hex = colorValue.Substring(1);                    if (hex.Length == 6)                  {                      r = int.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 3)                  {                      r = int.Parse(new String(hex.Substring(0' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(new String(hex.Substring(1' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(new String(hex.Substring(2' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      return onError;                  }                   #endregion              }              else if (colorValue.StartsWith("rgb(") && colorValue.EndsWith(")"))              {                  #region RGB forms                    string rgb = colorValue.Substring(4' colorValue.Length - 5);                  string[] chunks = rgb.Split(''');                    if (chunks.Length == 3)                  {                      unchecked                      {                          r = Convert.ToInt32(ParseNumber(chunks[0].Trim()' 255f));                          g = Convert.ToInt32(ParseNumber(chunks[1].Trim()' 255f));                          b = Convert.ToInt32(ParseNumber(chunks[2].Trim()' 255f));                       }                  }                  else                  {                      return onError;                  }                    #endregion              }              else              {                  #region Color Constants                    string hex = string.Empty;                    switch (colorValue)                  {                      case CssConstants.Maroon:                          hex = "#800000"; break;                      case CssConstants.Red:                          hex = "#ff0000"; break;                      case CssConstants.Orange:                          hex = "#ffA500"; break;                      case CssConstants.Olive:                          hex = "#808000"; break;                      case CssConstants.Purple:                          hex = "#800080"; break;                      case CssConstants.Fuchsia:                          hex = "#ff00ff"; break;                      case CssConstants.White:                          hex = "#ffffff"; break;                      case CssConstants.Lime:                          hex = "#00ff00"; break;                      case CssConstants.Green:                          hex = "#008000"; break;                      case CssConstants.Navy:                          hex = "#000080"; break;                      case CssConstants.Blue:                          hex = "#0000ff"; break;                      case CssConstants.Aqua:                          hex = "#00ffff"; break;                      case CssConstants.Teal:                          hex = "#008080"; break;                      case CssConstants.Black:                          hex = "#000000"; break;                      case CssConstants.Silver:                          hex = "#c0c0c0"; break;                      case CssConstants.Gray:                          hex = "#808080"; break;                      case CssConstants.Yellow:                          hex = "#FFFF00"; break;                  }                    if (string.IsNullOrEmpty(hex))                  {                      return onError;                  }                  else                  {                      Color c = GetActualColor(hex);                      r = c.R;                      g = c.G;                      b = c.B;                  }                    #endregion              }
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,GetActualColor,The following statement contains a magic number: if (colorValue.StartsWith("#"))              {                  #region hexadecimal forms                  string hex = colorValue.Substring(1);                    if (hex.Length == 6)                  {                      r = int.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 3)                  {                      r = int.Parse(new String(hex.Substring(0' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(new String(hex.Substring(1' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(new String(hex.Substring(2' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      return onError;                  }                   #endregion              }              else if (colorValue.StartsWith("rgb(") && colorValue.EndsWith(")"))              {                  #region RGB forms                    string rgb = colorValue.Substring(4' colorValue.Length - 5);                  string[] chunks = rgb.Split(''');                    if (chunks.Length == 3)                  {                      unchecked                      {                          r = Convert.ToInt32(ParseNumber(chunks[0].Trim()' 255f));                          g = Convert.ToInt32(ParseNumber(chunks[1].Trim()' 255f));                          b = Convert.ToInt32(ParseNumber(chunks[2].Trim()' 255f));                       }                  }                  else                  {                      return onError;                  }                    #endregion              }              else              {                  #region Color Constants                    string hex = string.Empty;                    switch (colorValue)                  {                      case CssConstants.Maroon:                          hex = "#800000"; break;                      case CssConstants.Red:                          hex = "#ff0000"; break;                      case CssConstants.Orange:                          hex = "#ffA500"; break;                      case CssConstants.Olive:                          hex = "#808000"; break;                      case CssConstants.Purple:                          hex = "#800080"; break;                      case CssConstants.Fuchsia:                          hex = "#ff00ff"; break;                      case CssConstants.White:                          hex = "#ffffff"; break;                      case CssConstants.Lime:                          hex = "#00ff00"; break;                      case CssConstants.Green:                          hex = "#008000"; break;                      case CssConstants.Navy:                          hex = "#000080"; break;                      case CssConstants.Blue:                          hex = "#0000ff"; break;                      case CssConstants.Aqua:                          hex = "#00ffff"; break;                      case CssConstants.Teal:                          hex = "#008080"; break;                      case CssConstants.Black:                          hex = "#000000"; break;                      case CssConstants.Silver:                          hex = "#c0c0c0"; break;                      case CssConstants.Gray:                          hex = "#808080"; break;                      case CssConstants.Yellow:                          hex = "#FFFF00"; break;                  }                    if (string.IsNullOrEmpty(hex))                  {                      return onError;                  }                  else                  {                      Color c = GetActualColor(hex);                      r = c.R;                      g = c.G;                      b = c.B;                  }                    #endregion              }
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,GetActualColor,The following statement contains a magic number: if (colorValue.StartsWith("#"))              {                  #region hexadecimal forms                  string hex = colorValue.Substring(1);                    if (hex.Length == 6)                  {                      r = int.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 3)                  {                      r = int.Parse(new String(hex.Substring(0' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(new String(hex.Substring(1' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(new String(hex.Substring(2' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      return onError;                  }                   #endregion              }              else if (colorValue.StartsWith("rgb(") && colorValue.EndsWith(")"))              {                  #region RGB forms                    string rgb = colorValue.Substring(4' colorValue.Length - 5);                  string[] chunks = rgb.Split(''');                    if (chunks.Length == 3)                  {                      unchecked                      {                          r = Convert.ToInt32(ParseNumber(chunks[0].Trim()' 255f));                          g = Convert.ToInt32(ParseNumber(chunks[1].Trim()' 255f));                          b = Convert.ToInt32(ParseNumber(chunks[2].Trim()' 255f));                       }                  }                  else                  {                      return onError;                  }                    #endregion              }              else              {                  #region Color Constants                    string hex = string.Empty;                    switch (colorValue)                  {                      case CssConstants.Maroon:                          hex = "#800000"; break;                      case CssConstants.Red:                          hex = "#ff0000"; break;                      case CssConstants.Orange:                          hex = "#ffA500"; break;                      case CssConstants.Olive:                          hex = "#808000"; break;                      case CssConstants.Purple:                          hex = "#800080"; break;                      case CssConstants.Fuchsia:                          hex = "#ff00ff"; break;                      case CssConstants.White:                          hex = "#ffffff"; break;                      case CssConstants.Lime:                          hex = "#00ff00"; break;                      case CssConstants.Green:                          hex = "#008000"; break;                      case CssConstants.Navy:                          hex = "#000080"; break;                      case CssConstants.Blue:                          hex = "#0000ff"; break;                      case CssConstants.Aqua:                          hex = "#00ffff"; break;                      case CssConstants.Teal:                          hex = "#008080"; break;                      case CssConstants.Black:                          hex = "#000000"; break;                      case CssConstants.Silver:                          hex = "#c0c0c0"; break;                      case CssConstants.Gray:                          hex = "#808080"; break;                      case CssConstants.Yellow:                          hex = "#FFFF00"; break;                  }                    if (string.IsNullOrEmpty(hex))                  {                      return onError;                  }                  else                  {                      Color c = GetActualColor(hex);                      r = c.R;                      g = c.G;                      b = c.B;                  }                    #endregion              }
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,GetActualColor,The following statement contains a magic number: if (colorValue.StartsWith("#"))              {                  #region hexadecimal forms                  string hex = colorValue.Substring(1);                    if (hex.Length == 6)                  {                      r = int.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 3)                  {                      r = int.Parse(new String(hex.Substring(0' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(new String(hex.Substring(1' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(new String(hex.Substring(2' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      return onError;                  }                   #endregion              }              else if (colorValue.StartsWith("rgb(") && colorValue.EndsWith(")"))              {                  #region RGB forms                    string rgb = colorValue.Substring(4' colorValue.Length - 5);                  string[] chunks = rgb.Split(''');                    if (chunks.Length == 3)                  {                      unchecked                      {                          r = Convert.ToInt32(ParseNumber(chunks[0].Trim()' 255f));                          g = Convert.ToInt32(ParseNumber(chunks[1].Trim()' 255f));                          b = Convert.ToInt32(ParseNumber(chunks[2].Trim()' 255f));                       }                  }                  else                  {                      return onError;                  }                    #endregion              }              else              {                  #region Color Constants                    string hex = string.Empty;                    switch (colorValue)                  {                      case CssConstants.Maroon:                          hex = "#800000"; break;                      case CssConstants.Red:                          hex = "#ff0000"; break;                      case CssConstants.Orange:                          hex = "#ffA500"; break;                      case CssConstants.Olive:                          hex = "#808000"; break;                      case CssConstants.Purple:                          hex = "#800080"; break;                      case CssConstants.Fuchsia:                          hex = "#ff00ff"; break;                      case CssConstants.White:                          hex = "#ffffff"; break;                      case CssConstants.Lime:                          hex = "#00ff00"; break;                      case CssConstants.Green:                          hex = "#008000"; break;                      case CssConstants.Navy:                          hex = "#000080"; break;                      case CssConstants.Blue:                          hex = "#0000ff"; break;                      case CssConstants.Aqua:                          hex = "#00ffff"; break;                      case CssConstants.Teal:                          hex = "#008080"; break;                      case CssConstants.Black:                          hex = "#000000"; break;                      case CssConstants.Silver:                          hex = "#c0c0c0"; break;                      case CssConstants.Gray:                          hex = "#808080"; break;                      case CssConstants.Yellow:                          hex = "#FFFF00"; break;                  }                    if (string.IsNullOrEmpty(hex))                  {                      return onError;                  }                  else                  {                      Color c = GetActualColor(hex);                      r = c.R;                      g = c.G;                      b = c.B;                  }                    #endregion              }
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,GetActualColor,The following statement contains a magic number: if (colorValue.StartsWith("#"))              {                  #region hexadecimal forms                  string hex = colorValue.Substring(1);                    if (hex.Length == 6)                  {                      r = int.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 3)                  {                      r = int.Parse(new String(hex.Substring(0' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(new String(hex.Substring(1' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(new String(hex.Substring(2' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      return onError;                  }                   #endregion              }              else if (colorValue.StartsWith("rgb(") && colorValue.EndsWith(")"))              {                  #region RGB forms                    string rgb = colorValue.Substring(4' colorValue.Length - 5);                  string[] chunks = rgb.Split(''');                    if (chunks.Length == 3)                  {                      unchecked                      {                          r = Convert.ToInt32(ParseNumber(chunks[0].Trim()' 255f));                          g = Convert.ToInt32(ParseNumber(chunks[1].Trim()' 255f));                          b = Convert.ToInt32(ParseNumber(chunks[2].Trim()' 255f));                       }                  }                  else                  {                      return onError;                  }                    #endregion              }              else              {                  #region Color Constants                    string hex = string.Empty;                    switch (colorValue)                  {                      case CssConstants.Maroon:                          hex = "#800000"; break;                      case CssConstants.Red:                          hex = "#ff0000"; break;                      case CssConstants.Orange:                          hex = "#ffA500"; break;                      case CssConstants.Olive:                          hex = "#808000"; break;                      case CssConstants.Purple:                          hex = "#800080"; break;                      case CssConstants.Fuchsia:                          hex = "#ff00ff"; break;                      case CssConstants.White:                          hex = "#ffffff"; break;                      case CssConstants.Lime:                          hex = "#00ff00"; break;                      case CssConstants.Green:                          hex = "#008000"; break;                      case CssConstants.Navy:                          hex = "#000080"; break;                      case CssConstants.Blue:                          hex = "#0000ff"; break;                      case CssConstants.Aqua:                          hex = "#00ffff"; break;                      case CssConstants.Teal:                          hex = "#008080"; break;                      case CssConstants.Black:                          hex = "#000000"; break;                      case CssConstants.Silver:                          hex = "#c0c0c0"; break;                      case CssConstants.Gray:                          hex = "#808080"; break;                      case CssConstants.Yellow:                          hex = "#FFFF00"; break;                  }                    if (string.IsNullOrEmpty(hex))                  {                      return onError;                  }                  else                  {                      Color c = GetActualColor(hex);                      r = c.R;                      g = c.G;                      b = c.B;                  }                    #endregion              }
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,GetActualColor,The following statement contains a magic number: if (colorValue.StartsWith("#"))              {                  #region hexadecimal forms                  string hex = colorValue.Substring(1);                    if (hex.Length == 6)                  {                      r = int.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 3)                  {                      r = int.Parse(new String(hex.Substring(0' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(new String(hex.Substring(1' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(new String(hex.Substring(2' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      return onError;                  }                   #endregion              }              else if (colorValue.StartsWith("rgb(") && colorValue.EndsWith(")"))              {                  #region RGB forms                    string rgb = colorValue.Substring(4' colorValue.Length - 5);                  string[] chunks = rgb.Split(''');                    if (chunks.Length == 3)                  {                      unchecked                      {                          r = Convert.ToInt32(ParseNumber(chunks[0].Trim()' 255f));                          g = Convert.ToInt32(ParseNumber(chunks[1].Trim()' 255f));                          b = Convert.ToInt32(ParseNumber(chunks[2].Trim()' 255f));                       }                  }                  else                  {                      return onError;                  }                    #endregion              }              else              {                  #region Color Constants                    string hex = string.Empty;                    switch (colorValue)                  {                      case CssConstants.Maroon:                          hex = "#800000"; break;                      case CssConstants.Red:                          hex = "#ff0000"; break;                      case CssConstants.Orange:                          hex = "#ffA500"; break;                      case CssConstants.Olive:                          hex = "#808000"; break;                      case CssConstants.Purple:                          hex = "#800080"; break;                      case CssConstants.Fuchsia:                          hex = "#ff00ff"; break;                      case CssConstants.White:                          hex = "#ffffff"; break;                      case CssConstants.Lime:                          hex = "#00ff00"; break;                      case CssConstants.Green:                          hex = "#008000"; break;                      case CssConstants.Navy:                          hex = "#000080"; break;                      case CssConstants.Blue:                          hex = "#0000ff"; break;                      case CssConstants.Aqua:                          hex = "#00ffff"; break;                      case CssConstants.Teal:                          hex = "#008080"; break;                      case CssConstants.Black:                          hex = "#000000"; break;                      case CssConstants.Silver:                          hex = "#c0c0c0"; break;                      case CssConstants.Gray:                          hex = "#808080"; break;                      case CssConstants.Yellow:                          hex = "#FFFF00"; break;                  }                    if (string.IsNullOrEmpty(hex))                  {                      return onError;                  }                  else                  {                      Color c = GetActualColor(hex);                      r = c.R;                      g = c.G;                      b = c.B;                  }                    #endregion              }
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,GetActualColor,The following statement contains a magic number: if (colorValue.StartsWith("#"))              {                  #region hexadecimal forms                  string hex = colorValue.Substring(1);                    if (hex.Length == 6)                  {                      r = int.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 3)                  {                      r = int.Parse(new String(hex.Substring(0' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(new String(hex.Substring(1' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(new String(hex.Substring(2' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      return onError;                  }                   #endregion              }              else if (colorValue.StartsWith("rgb(") && colorValue.EndsWith(")"))              {                  #region RGB forms                    string rgb = colorValue.Substring(4' colorValue.Length - 5);                  string[] chunks = rgb.Split(''');                    if (chunks.Length == 3)                  {                      unchecked                      {                          r = Convert.ToInt32(ParseNumber(chunks[0].Trim()' 255f));                          g = Convert.ToInt32(ParseNumber(chunks[1].Trim()' 255f));                          b = Convert.ToInt32(ParseNumber(chunks[2].Trim()' 255f));                       }                  }                  else                  {                      return onError;                  }                    #endregion              }              else              {                  #region Color Constants                    string hex = string.Empty;                    switch (colorValue)                  {                      case CssConstants.Maroon:                          hex = "#800000"; break;                      case CssConstants.Red:                          hex = "#ff0000"; break;                      case CssConstants.Orange:                          hex = "#ffA500"; break;                      case CssConstants.Olive:                          hex = "#808000"; break;                      case CssConstants.Purple:                          hex = "#800080"; break;                      case CssConstants.Fuchsia:                          hex = "#ff00ff"; break;                      case CssConstants.White:                          hex = "#ffffff"; break;                      case CssConstants.Lime:                          hex = "#00ff00"; break;                      case CssConstants.Green:                          hex = "#008000"; break;                      case CssConstants.Navy:                          hex = "#000080"; break;                      case CssConstants.Blue:                          hex = "#0000ff"; break;                      case CssConstants.Aqua:                          hex = "#00ffff"; break;                      case CssConstants.Teal:                          hex = "#008080"; break;                      case CssConstants.Black:                          hex = "#000000"; break;                      case CssConstants.Silver:                          hex = "#c0c0c0"; break;                      case CssConstants.Gray:                          hex = "#808080"; break;                      case CssConstants.Yellow:                          hex = "#FFFF00"; break;                  }                    if (string.IsNullOrEmpty(hex))                  {                      return onError;                  }                  else                  {                      Color c = GetActualColor(hex);                      r = c.R;                      g = c.G;                      b = c.B;                  }                    #endregion              }
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,GetActualColor,The following statement contains a magic number: if (colorValue.StartsWith("#"))              {                  #region hexadecimal forms                  string hex = colorValue.Substring(1);                    if (hex.Length == 6)                  {                      r = int.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 3)                  {                      r = int.Parse(new String(hex.Substring(0' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(new String(hex.Substring(1' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(new String(hex.Substring(2' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      return onError;                  }                   #endregion              }              else if (colorValue.StartsWith("rgb(") && colorValue.EndsWith(")"))              {                  #region RGB forms                    string rgb = colorValue.Substring(4' colorValue.Length - 5);                  string[] chunks = rgb.Split(''');                    if (chunks.Length == 3)                  {                      unchecked                      {                          r = Convert.ToInt32(ParseNumber(chunks[0].Trim()' 255f));                          g = Convert.ToInt32(ParseNumber(chunks[1].Trim()' 255f));                          b = Convert.ToInt32(ParseNumber(chunks[2].Trim()' 255f));                       }                  }                  else                  {                      return onError;                  }                    #endregion              }              else              {                  #region Color Constants                    string hex = string.Empty;                    switch (colorValue)                  {                      case CssConstants.Maroon:                          hex = "#800000"; break;                      case CssConstants.Red:                          hex = "#ff0000"; break;                      case CssConstants.Orange:                          hex = "#ffA500"; break;                      case CssConstants.Olive:                          hex = "#808000"; break;                      case CssConstants.Purple:                          hex = "#800080"; break;                      case CssConstants.Fuchsia:                          hex = "#ff00ff"; break;                      case CssConstants.White:                          hex = "#ffffff"; break;                      case CssConstants.Lime:                          hex = "#00ff00"; break;                      case CssConstants.Green:                          hex = "#008000"; break;                      case CssConstants.Navy:                          hex = "#000080"; break;                      case CssConstants.Blue:                          hex = "#0000ff"; break;                      case CssConstants.Aqua:                          hex = "#00ffff"; break;                      case CssConstants.Teal:                          hex = "#008080"; break;                      case CssConstants.Black:                          hex = "#000000"; break;                      case CssConstants.Silver:                          hex = "#c0c0c0"; break;                      case CssConstants.Gray:                          hex = "#808080"; break;                      case CssConstants.Yellow:                          hex = "#FFFF00"; break;                  }                    if (string.IsNullOrEmpty(hex))                  {                      return onError;                  }                  else                  {                      Color c = GetActualColor(hex);                      r = c.R;                      g = c.G;                      b = c.B;                  }                    #endregion              }
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,GetActualColor,The following statement contains a magic number: if (colorValue.StartsWith("#"))              {                  #region hexadecimal forms                  string hex = colorValue.Substring(1);                    if (hex.Length == 6)                  {                      r = int.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 3)                  {                      r = int.Parse(new String(hex.Substring(0' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(new String(hex.Substring(1' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(new String(hex.Substring(2' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      return onError;                  }                   #endregion              }              else if (colorValue.StartsWith("rgb(") && colorValue.EndsWith(")"))              {                  #region RGB forms                    string rgb = colorValue.Substring(4' colorValue.Length - 5);                  string[] chunks = rgb.Split(''');                    if (chunks.Length == 3)                  {                      unchecked                      {                          r = Convert.ToInt32(ParseNumber(chunks[0].Trim()' 255f));                          g = Convert.ToInt32(ParseNumber(chunks[1].Trim()' 255f));                          b = Convert.ToInt32(ParseNumber(chunks[2].Trim()' 255f));                       }                  }                  else                  {                      return onError;                  }                    #endregion              }              else              {                  #region Color Constants                    string hex = string.Empty;                    switch (colorValue)                  {                      case CssConstants.Maroon:                          hex = "#800000"; break;                      case CssConstants.Red:                          hex = "#ff0000"; break;                      case CssConstants.Orange:                          hex = "#ffA500"; break;                      case CssConstants.Olive:                          hex = "#808000"; break;                      case CssConstants.Purple:                          hex = "#800080"; break;                      case CssConstants.Fuchsia:                          hex = "#ff00ff"; break;                      case CssConstants.White:                          hex = "#ffffff"; break;                      case CssConstants.Lime:                          hex = "#00ff00"; break;                      case CssConstants.Green:                          hex = "#008000"; break;                      case CssConstants.Navy:                          hex = "#000080"; break;                      case CssConstants.Blue:                          hex = "#0000ff"; break;                      case CssConstants.Aqua:                          hex = "#00ffff"; break;                      case CssConstants.Teal:                          hex = "#008080"; break;                      case CssConstants.Black:                          hex = "#000000"; break;                      case CssConstants.Silver:                          hex = "#c0c0c0"; break;                      case CssConstants.Gray:                          hex = "#808080"; break;                      case CssConstants.Yellow:                          hex = "#FFFF00"; break;                  }                    if (string.IsNullOrEmpty(hex))                  {                      return onError;                  }                  else                  {                      Color c = GetActualColor(hex);                      r = c.R;                      g = c.G;                      b = c.B;                  }                    #endregion              }
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,GetActualColor,The following statement contains a magic number: if (colorValue.StartsWith("#"))              {                  #region hexadecimal forms                  string hex = colorValue.Substring(1);                    if (hex.Length == 6)                  {                      r = int.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 3)                  {                      r = int.Parse(new String(hex.Substring(0' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      g = int.Parse(new String(hex.Substring(1' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                      b = int.Parse(new String(hex.Substring(2' 1)[0]' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      return onError;                  }                   #endregion              }              else if (colorValue.StartsWith("rgb(") && colorValue.EndsWith(")"))              {                  #region RGB forms                    string rgb = colorValue.Substring(4' colorValue.Length - 5);                  string[] chunks = rgb.Split(''');                    if (chunks.Length == 3)                  {                      unchecked                      {                          r = Convert.ToInt32(ParseNumber(chunks[0].Trim()' 255f));                          g = Convert.ToInt32(ParseNumber(chunks[1].Trim()' 255f));                          b = Convert.ToInt32(ParseNumber(chunks[2].Trim()' 255f));                       }                  }                  else                  {                      return onError;                  }                    #endregion              }              else              {                  #region Color Constants                    string hex = string.Empty;                    switch (colorValue)                  {                      case CssConstants.Maroon:                          hex = "#800000"; break;                      case CssConstants.Red:                          hex = "#ff0000"; break;                      case CssConstants.Orange:                          hex = "#ffA500"; break;                      case CssConstants.Olive:                          hex = "#808000"; break;                      case CssConstants.Purple:                          hex = "#800080"; break;                      case CssConstants.Fuchsia:                          hex = "#ff00ff"; break;                      case CssConstants.White:                          hex = "#ffffff"; break;                      case CssConstants.Lime:                          hex = "#00ff00"; break;                      case CssConstants.Green:                          hex = "#008000"; break;                      case CssConstants.Navy:                          hex = "#000080"; break;                      case CssConstants.Blue:                          hex = "#0000ff"; break;                      case CssConstants.Aqua:                          hex = "#00ffff"; break;                      case CssConstants.Teal:                          hex = "#008080"; break;                      case CssConstants.Black:                          hex = "#000000"; break;                      case CssConstants.Silver:                          hex = "#c0c0c0"; break;                      case CssConstants.Gray:                          hex = "#808080"; break;                      case CssConstants.Yellow:                          hex = "#FFFF00"; break;                  }                    if (string.IsNullOrEmpty(hex))                  {                      return onError;                  }                  else                  {                      Color c = GetActualColor(hex);                      r = c.R;                      g = c.G;                      b = c.B;                  }                    #endregion              }
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,DetectSource,The following statement contains a magic number: if (path.StartsWith("method:"' StringComparison.CurrentCultureIgnoreCase))              {                  string methodName = string.Empty;                  Type t = GetTypeInfo(path.Substring(7)' ref methodName); if (t == null) return null;                  MethodInfo method = t.GetMethod(methodName);                    if (!method.IsStatic || method.GetParameters().Length > 0)                  {                      return null;                  }                    return method;              }              else if (path.StartsWith("property:"' StringComparison.CurrentCultureIgnoreCase))              {                  string propName = string.Empty;                  Type t = GetTypeInfo(path.Substring(9)' ref propName); if (t == null) return null;                  PropertyInfo prop = t.GetProperty(propName);                    return prop;              }              else if (Uri.IsWellFormedUriString(path' UriKind.RelativeOrAbsolute))              {                  return new Uri(path);              }              else              {                  return new FileInfo(path);              }
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,DetectSource,The following statement contains a magic number: if (path.StartsWith("method:"' StringComparison.CurrentCultureIgnoreCase))              {                  string methodName = string.Empty;                  Type t = GetTypeInfo(path.Substring(7)' ref methodName); if (t == null) return null;                  MethodInfo method = t.GetMethod(methodName);                    if (!method.IsStatic || method.GetParameters().Length > 0)                  {                      return null;                  }                    return method;              }              else if (path.StartsWith("property:"' StringComparison.CurrentCultureIgnoreCase))              {                  string propName = string.Empty;                  Type t = GetTypeInfo(path.Substring(9)' ref propName); if (t == null) return null;                  PropertyInfo prop = t.GetProperty(propName);                    return prop;              }              else if (Uri.IsWellFormedUriString(path' UriKind.RelativeOrAbsolute))              {                  return new Uri(path);              }              else              {                  return new FileInfo(path);              }
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,GetImage,The following statement contains a magic number: try              {                  if (finfo != null)                  {                      if (!finfo.Exists) return null;                        return Image.FromFile(finfo.FullName);                    }                  else if (prop != null)                  {                      if (!prop.PropertyType.IsSubclassOf(typeof(Image)) && !prop.PropertyType.Equals(typeof(Image))) return null;                                            return prop.GetValue(null' null) as Image;                  }                  else if (method != null)                  {                      if (!method.ReturnType.IsSubclassOf(typeof(Image))) return null;                        return method.Invoke(null' null) as Image;                  }                  else                  {                      return null;                  }              }              catch              {                  return new Bitmap(50' 50); //TODO: Return error image              }
Magic Number,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,GetImage,The following statement contains a magic number: try              {                  if (finfo != null)                  {                      if (!finfo.Exists) return null;                        return Image.FromFile(finfo.FullName);                    }                  else if (prop != null)                  {                      if (!prop.PropertyType.IsSubclassOf(typeof(Image)) && !prop.PropertyType.Equals(typeof(Image))) return null;                                            return prop.GetValue(null' null) as Image;                  }                  else if (method != null)                  {                      if (!method.ReturnType.IsSubclassOf(typeof(Image))) return null;                        return method.Invoke(null' null) as Image;                  }                  else                  {                      return null;                  }              }              catch              {                  return new Bitmap(50' 50); //TODO: Return error image              }
Magic Number,MetroFramework.Drawing.Html,HtmlPanel,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\HtmlPanel.cs,MeasureBounds,The following statement contains a magic number: htmlContainer.SetBounds(this is HtmlLabel ? new Rectangle(0' 0' 10' 10) : ClientRectangle);
Magic Number,MetroFramework.Drawing.Html,HtmlPanel,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\HtmlPanel.cs,MeasureBounds,The following statement contains a magic number: htmlContainer.SetBounds(this is HtmlLabel ? new Rectangle(0' 0' 10' 10) : ClientRectangle);
Magic Number,MetroFramework.Drawing.Html,HtmlTag,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\HtmlTag.cs,HtmlTag,The following statement contains a magic number: tag = tag.Substring(1' tag.Length - 2);
Magic Number,MetroFramework.Drawing.Html,HtmlTag,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\HtmlTag.cs,HtmlTag,The following statement contains a magic number: foreach (Match att in atts)              {                  //Extract attribute and value                  string[] chunks = att.Value.Split('=');                    if (chunks.Length == 1)                  {                      if(!Attributes.ContainsKey(chunks[0]))                          Attributes.Add(chunks[0].ToLower()' string.Empty);                  }                  else if (chunks.Length == 2)                  {                      string attname = chunks[0].Trim();                      string attvalue = chunks[1].Trim();                        if (attvalue.StartsWith("\"") && attvalue.EndsWith("\"") && attvalue.Length > 2)                      {                          attvalue = attvalue.Substring(1' attvalue.Length - 2);                      }                        if (!Attributes.ContainsKey(attname))                          Attributes.Add(attname' attvalue);                  }              }
Magic Number,MetroFramework.Drawing.Html,HtmlTag,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\HtmlTag.cs,HtmlTag,The following statement contains a magic number: foreach (Match att in atts)              {                  //Extract attribute and value                  string[] chunks = att.Value.Split('=');                    if (chunks.Length == 1)                  {                      if(!Attributes.ContainsKey(chunks[0]))                          Attributes.Add(chunks[0].ToLower()' string.Empty);                  }                  else if (chunks.Length == 2)                  {                      string attname = chunks[0].Trim();                      string attvalue = chunks[1].Trim();                        if (attvalue.StartsWith("\"") && attvalue.EndsWith("\"") && attvalue.Length > 2)                      {                          attvalue = attvalue.Substring(1' attvalue.Length - 2);                      }                        if (!Attributes.ContainsKey(attname))                          Attributes.Add(attname' attvalue);                  }              }
Magic Number,MetroFramework.Drawing.Html,HtmlTag,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\HtmlTag.cs,HtmlTag,The following statement contains a magic number: foreach (Match att in atts)              {                  //Extract attribute and value                  string[] chunks = att.Value.Split('=');                    if (chunks.Length == 1)                  {                      if(!Attributes.ContainsKey(chunks[0]))                          Attributes.Add(chunks[0].ToLower()' string.Empty);                  }                  else if (chunks.Length == 2)                  {                      string attname = chunks[0].Trim();                      string attvalue = chunks[1].Trim();                        if (attvalue.StartsWith("\"") && attvalue.EndsWith("\"") && attvalue.Length > 2)                      {                          attvalue = attvalue.Substring(1' attvalue.Length - 2);                      }                        if (!Attributes.ContainsKey(attname))                          Attributes.Add(attname' attvalue);                  }              }
Magic Number,MetroFramework.Drawing.Html,HtmlToolTip,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\HtmlToolTip.cs,HtmlToolTip_Popup,The following statement contains a magic number: container.SetBounds(new Rectangle(0' 0' 10' 10));
Magic Number,MetroFramework.Drawing.Html,HtmlToolTip,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\HtmlToolTip.cs,HtmlToolTip_Popup,The following statement contains a magic number: container.SetBounds(new Rectangle(0' 0' 10' 10));
Magic Number,MetroFramework.Drawing.Html,InitialContainer,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\InitialContainer.cs,FeedStyleSheet,The following statement contains a magic number: for(MatchCollection atrules = Parser.Match(Parser.CssAtRules' stylesheet); atrules.Count > 0; atrules = Parser.Match(Parser.CssAtRules' stylesheet))              {                  Match match = atrules[0];                    //Extract whole at-rule                  string atrule = match.Value;                    //Remove rule from sheet                  stylesheet = stylesheet.Remove(match.Index' match.Length);                    //Just processs @media rules                  if (!atrule.StartsWith("@media")) continue;                    //Extract specified media types                  MatchCollection types = Parser.Match(Parser.CssMediaTypes' atrule);                    if (types.Count == 1)                  {                      string line = types[0].Value;                        if (line.StartsWith("@media") && line.EndsWith("{"))                      {                          //Get specified media types in the at-rule                          string[] media = line.Substring(6' line.Length - 7).Split(' ');                            //Scan media types                          for (int i = 0; i < media.Length; i++)                          {                              if (string.IsNullOrEmpty(media[i].Trim())) continue;                                //Get blocks inside the at-rule                              MatchCollection insideBlocks = Parser.Match(Parser.CssBlocks' atrule);                                //Scan blocks and feed them to the style sheet                              foreach (Match insideBlock in insideBlocks)                              {                                  FeedStyleBlock(media[i].Trim()' insideBlock.Value);                              }                          }                      }                  }              }
Magic Number,MetroFramework.Drawing.Html,InitialContainer,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\InitialContainer.cs,FeedStyleSheet,The following statement contains a magic number: for(MatchCollection atrules = Parser.Match(Parser.CssAtRules' stylesheet); atrules.Count > 0; atrules = Parser.Match(Parser.CssAtRules' stylesheet))              {                  Match match = atrules[0];                    //Extract whole at-rule                  string atrule = match.Value;                    //Remove rule from sheet                  stylesheet = stylesheet.Remove(match.Index' match.Length);                    //Just processs @media rules                  if (!atrule.StartsWith("@media")) continue;                    //Extract specified media types                  MatchCollection types = Parser.Match(Parser.CssMediaTypes' atrule);                    if (types.Count == 1)                  {                      string line = types[0].Value;                        if (line.StartsWith("@media") && line.EndsWith("{"))                      {                          //Get specified media types in the at-rule                          string[] media = line.Substring(6' line.Length - 7).Split(' ');                            //Scan media types                          for (int i = 0; i < media.Length; i++)                          {                              if (string.IsNullOrEmpty(media[i].Trim())) continue;                                //Get blocks inside the at-rule                              MatchCollection insideBlocks = Parser.Match(Parser.CssBlocks' atrule);                                //Scan blocks and feed them to the style sheet                              foreach (Match insideBlock in insideBlocks)                              {                                  FeedStyleBlock(media[i].Trim()' insideBlock.Value);                              }                          }                      }                  }              }
Magic Number,MetroFramework.Drawing,BorderColor,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Form,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                      return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,BorderColor,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Form,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                      return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,BorderColor,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Form,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                      return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,BorderColor,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Form,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,BorderColor,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Form,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,BorderColor,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Form,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(102' 102' 102);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(102' 102' 102);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(102' 102' 102);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(238' 238' 238);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(238' 238' 238);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(238' 238' 238);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(109' 109' 109);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(109' 109' 109);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(109' 109' 109);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(155' 155' 155);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(155' 155' 155);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(155' 155' 155);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(34' 34' 34);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(34' 34' 34);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(34' 34' 34);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(238' 238' 238);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(238' 238' 238);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(238' 238' 238);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(102' 102' 102);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(102' 102' 102);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(102' 102' 102);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(238' 238' 238);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(238' 238' 238);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(238' 238' 238);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(80' 80' 80);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(80' 80' 80);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(80' 80' 80);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(109' 109' 109);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(109' 109' 109);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(109' 109' 109);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(136' 136' 136);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(136' 136' 136);
Magic Number,MetroFramework.Drawing,Button,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(136' 136' 136);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(85' 85' 85);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(85' 85' 85);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(85' 85' 85);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(93' 93' 93);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(93' 93' 93);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(93' 93' 93);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(136' 136' 136);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(136' 136' 136);
Magic Number,MetroFramework.Drawing,CheckBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(136' 136' 136);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(85' 85' 85);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(85' 85' 85);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(85' 85' 85);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(93' 93' 93);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(93' 93' 93);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(93' 93' 93);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(136' 136' 136);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(136' 136' 136);
Magic Number,MetroFramework.Drawing,ComboBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(136' 136' 136);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(109' 109' 109);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(109' 109' 109);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(109' 109' 109);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(155' 155' 155);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(155' 155' 155);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(155' 155' 155);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(209' 209' 209);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(209' 209' 209);
Magic Number,MetroFramework.Drawing,ProgressBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(209' 209' 209);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(68' 68' 68);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(109' 109' 109);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(109' 109' 109);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(109' 109' 109);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(155' 155' 155);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(155' 155' 155);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(155' 155' 155);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(209' 209' 209);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(209' 209' 209);
Magic Number,MetroFramework.Drawing,TabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(209' 209' 209);
Magic Number,MetroFramework.Drawing,BackColor,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Form,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                      return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,BackColor,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Form,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                      return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,BackColor,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Form,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                      return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,BackColor,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Form,The following statement contains a magic number: return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,BackColor,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Form,The following statement contains a magic number: return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,BackColor,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Form,The following statement contains a magic number: return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(153' 153' 153);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(102' 102' 102);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(102' 102' 102);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(102' 102' 102);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(85' 85' 85);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(85' 85' 85);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(85' 85' 85);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(179' 179' 179);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(179' 179' 179);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(179' 179' 179);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(221' 221' 221);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(221' 221' 221);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(221' 221' 221);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(17' 17' 17);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(221' 221' 221);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(221' 221' 221);
Magic Number,MetroFramework.Drawing,Thumb,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(221' 221' 221);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(204' 204' 204);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(34' 34' 34);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(34' 34' 34);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(34' 34' 34);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(230' 230' 230);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(230' 230' 230);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(230' 230' 230);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(38' 38' 38);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(38' 38' 38);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(38' 38' 38);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(234' 234' 234);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(234' 234' 234);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(234' 234' 234);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(38' 38' 38);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(38' 38' 38);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(38' 38' 38);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(234' 234' 234);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(234' 234' 234);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(234' 234' 234);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(38' 38' 38);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(38' 38' 38);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(38' 38' 38);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(234' 234' 234);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(234' 234' 234);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(234' 234' 234);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(38' 38' 38);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(38' 38' 38);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(38' 38' 38);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(234' 234' 234);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(234' 234' 234);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(234' 234' 234);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(38' 38' 38);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(38' 38' 38);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(38' 38' 38);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(234' 234' 234);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(234' 234' 234);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(234' 234' 234);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(38' 38' 38);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(38' 38' 38);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(38' 38' 38);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(234' 234' 234);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(234' 234' 234);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(234' 234' 234);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(38' 38' 38);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(38' 38' 38);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(38' 38' 38);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(234' 234' 234);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(234' 234' 234);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(234' 234' 234);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                              return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(221' 221' 221);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(221' 221' 221);
Magic Number,MetroFramework.Drawing,Bar,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(221' 221' 221);
Magic Number,MetroFramework.Drawing,ForeColor,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Title,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                      return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,ForeColor,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Title,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                      return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,ForeColor,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Title,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                      return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(255' 255' 255);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(209' 209' 209);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(209' 209' 209);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(209' 209' 209);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(209' 209' 209);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(209' 209' 209);
Magic Number,MetroFramework.Drawing,Tile,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(209' 209' 209);
Magic Number,MetroFramework.Drawing,Link,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,Link,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,Link,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,Link,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(93' 93' 93);
Magic Number,MetroFramework.Drawing,Link,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(93' 93' 93);
Magic Number,MetroFramework.Drawing,Link,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(93' 93' 93);
Magic Number,MetroFramework.Drawing,Link,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(128' 128' 128);
Magic Number,MetroFramework.Drawing,Link,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(128' 128' 128);
Magic Number,MetroFramework.Drawing,Link,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Hover,The following statement contains a magic number: return Color.FromArgb(128' 128' 128);
Magic Number,MetroFramework.Drawing,Link,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(93' 93' 93);
Magic Number,MetroFramework.Drawing,Link,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(93' 93' 93);
Magic Number,MetroFramework.Drawing,Link,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(93' 93' 93);
Magic Number,MetroFramework.Drawing,Link,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(128' 128' 128);
Magic Number,MetroFramework.Drawing,Link,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(128' 128' 128);
Magic Number,MetroFramework.Drawing,Link,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Press,The following statement contains a magic number: return Color.FromArgb(128' 128' 128);
Magic Number,MetroFramework.Drawing,Link,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Link,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Link,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Link,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(209' 209' 209);
Magic Number,MetroFramework.Drawing,Link,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(209' 209' 209);
Magic Number,MetroFramework.Drawing,Link,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(209' 209' 209);
Magic Number,MetroFramework.Drawing,Label,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,Label,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,Label,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Normal,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(170' 170' 170);
Magic Number,MetroFramework.Drawing,Label,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Label,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Label,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: if (theme == MetroThemeStyle.Dark)                          return Color.FromArgb(51' 51' 51);
Magic Number,MetroFramework.Drawing,Label,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(209' 209' 209);
Magic Number,MetroFramework.Drawing,Label,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(209' 209' 209);
Magic Number,MetroFramework.Drawing,Label,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,Disabled,The following statement contains a magic number: return Color.FromArgb(209' 209' 209);
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,ApplyInvert,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++)              {                  for (int x = 0; x < bitmapImage.Width; x++)                  {                      pixelColor = bitmapImage.GetPixel(x' y);                      A = pixelColor.A;                      R = (byte)(255 - pixelColor.R);                      G = (byte)(255 - pixelColor.G);                      B = (byte)(255 - pixelColor.B);                        if (R <= 0) R= 17;                      if (G <= 0) G= 17;                      if (B <= 0) B= 17;                      //bitmapImage.SetPixel(x' y' Color.FromArgb((int)A' (int)R' (int)G' (int)B));                      bitmapImage.SetPixel(x' y' Color.FromArgb((int)R' (int)G' (int)B));                  }              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,ApplyInvert,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++)              {                  for (int x = 0; x < bitmapImage.Width; x++)                  {                      pixelColor = bitmapImage.GetPixel(x' y);                      A = pixelColor.A;                      R = (byte)(255 - pixelColor.R);                      G = (byte)(255 - pixelColor.G);                      B = (byte)(255 - pixelColor.B);                        if (R <= 0) R= 17;                      if (G <= 0) G= 17;                      if (B <= 0) B= 17;                      //bitmapImage.SetPixel(x' y' Color.FromArgb((int)A' (int)R' (int)G' (int)B));                      bitmapImage.SetPixel(x' y' Color.FromArgb((int)R' (int)G' (int)B));                  }              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,ApplyInvert,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++)              {                  for (int x = 0; x < bitmapImage.Width; x++)                  {                      pixelColor = bitmapImage.GetPixel(x' y);                      A = pixelColor.A;                      R = (byte)(255 - pixelColor.R);                      G = (byte)(255 - pixelColor.G);                      B = (byte)(255 - pixelColor.B);                        if (R <= 0) R= 17;                      if (G <= 0) G= 17;                      if (B <= 0) B= 17;                      //bitmapImage.SetPixel(x' y' Color.FromArgb((int)A' (int)R' (int)G' (int)B));                      bitmapImage.SetPixel(x' y' Color.FromArgb((int)R' (int)G' (int)B));                  }              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,ApplyInvert,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++)              {                  for (int x = 0; x < bitmapImage.Width; x++)                  {                      pixelColor = bitmapImage.GetPixel(x' y);                      A = pixelColor.A;                      R = (byte)(255 - pixelColor.R);                      G = (byte)(255 - pixelColor.G);                      B = (byte)(255 - pixelColor.B);                        if (R <= 0) R= 17;                      if (G <= 0) G= 17;                      if (B <= 0) B= 17;                      //bitmapImage.SetPixel(x' y' Color.FromArgb((int)A' (int)R' (int)G' (int)B));                      bitmapImage.SetPixel(x' y' Color.FromArgb((int)R' (int)G' (int)B));                  }              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,ApplyInvert,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++)              {                  for (int x = 0; x < bitmapImage.Width; x++)                  {                      pixelColor = bitmapImage.GetPixel(x' y);                      A = pixelColor.A;                      R = (byte)(255 - pixelColor.R);                      G = (byte)(255 - pixelColor.G);                      B = (byte)(255 - pixelColor.B);                        if (R <= 0) R= 17;                      if (G <= 0) G= 17;                      if (B <= 0) B= 17;                      //bitmapImage.SetPixel(x' y' Color.FromArgb((int)A' (int)R' (int)G' (int)B));                      bitmapImage.SetPixel(x' y' Color.FromArgb((int)R' (int)G' (int)B));                  }              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,ApplyInvert,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++)              {                  for (int x = 0; x < bitmapImage.Width; x++)                  {                      pixelColor = bitmapImage.GetPixel(x' y);                      A = pixelColor.A;                      R = (byte)(255 - pixelColor.R);                      G = (byte)(255 - pixelColor.G);                      B = (byte)(255 - pixelColor.B);                        if (R <= 0) R= 17;                      if (G <= 0) G= 17;                      if (B <= 0) B= 17;                      //bitmapImage.SetPixel(x' y' Color.FromArgb((int)A' (int)R' (int)G' (int)B));                      bitmapImage.SetPixel(x' y' Color.FromArgb((int)R' (int)G' (int)B));                  }              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnPaint,The following statement contains a magic number: if (displayHeader)              {                  Rectangle bounds = new Rectangle(10' 20' ClientRectangle.Width - 2 * 20' 40);                  TextFormatFlags flags = TextFormatFlags.EndEllipsis | GetTextFormatFlags();                  TextRenderer.DrawText(e.Graphics' Text' MetroFonts.Title' bounds' foreColor' flags);              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnPaint,The following statement contains a magic number: if (displayHeader)              {                  Rectangle bounds = new Rectangle(10' 20' ClientRectangle.Width - 2 * 20' 40);                  TextFormatFlags flags = TextFormatFlags.EndEllipsis | GetTextFormatFlags();                  TextRenderer.DrawText(e.Graphics' Text' MetroFonts.Title' bounds' foreColor' flags);              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnPaint,The following statement contains a magic number: if (displayHeader)              {                  Rectangle bounds = new Rectangle(10' 20' ClientRectangle.Width - 2 * 20' 40);                  TextFormatFlags flags = TextFormatFlags.EndEllipsis | GetTextFormatFlags();                  TextRenderer.DrawText(e.Graphics' Text' MetroFonts.Title' bounds' foreColor' flags);              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnPaint,The following statement contains a magic number: if (displayHeader)              {                  Rectangle bounds = new Rectangle(10' 20' ClientRectangle.Width - 2 * 20' 40);                  TextFormatFlags flags = TextFormatFlags.EndEllipsis | GetTextFormatFlags();                  TextRenderer.DrawText(e.Graphics' Text' MetroFonts.Title' bounds' foreColor' flags);              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnPaint,The following statement contains a magic number: if (displayHeader)              {                  Rectangle bounds = new Rectangle(10' 20' ClientRectangle.Width - 2 * 20' 40);                  TextFormatFlags flags = TextFormatFlags.EndEllipsis | GetTextFormatFlags();                  TextRenderer.DrawText(e.Graphics' Text' MetroFonts.Title' bounds' foreColor' flags);              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnPaint,The following statement contains a magic number: if (Resizable && (SizeGripStyle == SizeGripStyle.Auto || SizeGripStyle == SizeGripStyle.Show))              {                  using (SolidBrush b = new SolidBrush(MetroPaint.ForeColor.Button.Disabled(Theme)))                  {                      Size resizeHandleSize = new Size(2' 2);                      e.Graphics.FillRectangles(b' new Rectangle[] {                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-14'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-14)' resizeHandleSize)                      });                  }              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnPaint,The following statement contains a magic number: if (Resizable && (SizeGripStyle == SizeGripStyle.Auto || SizeGripStyle == SizeGripStyle.Show))              {                  using (SolidBrush b = new SolidBrush(MetroPaint.ForeColor.Button.Disabled(Theme)))                  {                      Size resizeHandleSize = new Size(2' 2);                      e.Graphics.FillRectangles(b' new Rectangle[] {                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-14'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-14)' resizeHandleSize)                      });                  }              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnPaint,The following statement contains a magic number: if (Resizable && (SizeGripStyle == SizeGripStyle.Auto || SizeGripStyle == SizeGripStyle.Show))              {                  using (SolidBrush b = new SolidBrush(MetroPaint.ForeColor.Button.Disabled(Theme)))                  {                      Size resizeHandleSize = new Size(2' 2);                      e.Graphics.FillRectangles(b' new Rectangle[] {                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-14'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-14)' resizeHandleSize)                      });                  }              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnPaint,The following statement contains a magic number: if (Resizable && (SizeGripStyle == SizeGripStyle.Auto || SizeGripStyle == SizeGripStyle.Show))              {                  using (SolidBrush b = new SolidBrush(MetroPaint.ForeColor.Button.Disabled(Theme)))                  {                      Size resizeHandleSize = new Size(2' 2);                      e.Graphics.FillRectangles(b' new Rectangle[] {                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-14'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-14)' resizeHandleSize)                      });                  }              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnPaint,The following statement contains a magic number: if (Resizable && (SizeGripStyle == SizeGripStyle.Auto || SizeGripStyle == SizeGripStyle.Show))              {                  using (SolidBrush b = new SolidBrush(MetroPaint.ForeColor.Button.Disabled(Theme)))                  {                      Size resizeHandleSize = new Size(2' 2);                      e.Graphics.FillRectangles(b' new Rectangle[] {                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-14'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-14)' resizeHandleSize)                      });                  }              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnPaint,The following statement contains a magic number: if (Resizable && (SizeGripStyle == SizeGripStyle.Auto || SizeGripStyle == SizeGripStyle.Show))              {                  using (SolidBrush b = new SolidBrush(MetroPaint.ForeColor.Button.Disabled(Theme)))                  {                      Size resizeHandleSize = new Size(2' 2);                      e.Graphics.FillRectangles(b' new Rectangle[] {                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-14'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-14)' resizeHandleSize)                      });                  }              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnPaint,The following statement contains a magic number: if (Resizable && (SizeGripStyle == SizeGripStyle.Auto || SizeGripStyle == SizeGripStyle.Show))              {                  using (SolidBrush b = new SolidBrush(MetroPaint.ForeColor.Button.Disabled(Theme)))                  {                      Size resizeHandleSize = new Size(2' 2);                      e.Graphics.FillRectangles(b' new Rectangle[] {                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-14'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-14)' resizeHandleSize)                      });                  }              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnPaint,The following statement contains a magic number: if (Resizable && (SizeGripStyle == SizeGripStyle.Auto || SizeGripStyle == SizeGripStyle.Show))              {                  using (SolidBrush b = new SolidBrush(MetroPaint.ForeColor.Button.Disabled(Theme)))                  {                      Size resizeHandleSize = new Size(2' 2);                      e.Graphics.FillRectangles(b' new Rectangle[] {                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-14'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-14)' resizeHandleSize)                      });                  }              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnPaint,The following statement contains a magic number: if (Resizable && (SizeGripStyle == SizeGripStyle.Auto || SizeGripStyle == SizeGripStyle.Show))              {                  using (SolidBrush b = new SolidBrush(MetroPaint.ForeColor.Button.Disabled(Theme)))                  {                      Size resizeHandleSize = new Size(2' 2);                      e.Graphics.FillRectangles(b' new Rectangle[] {                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-14'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-14)' resizeHandleSize)                      });                  }              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnPaint,The following statement contains a magic number: if (Resizable && (SizeGripStyle == SizeGripStyle.Auto || SizeGripStyle == SizeGripStyle.Show))              {                  using (SolidBrush b = new SolidBrush(MetroPaint.ForeColor.Button.Disabled(Theme)))                  {                      Size resizeHandleSize = new Size(2' 2);                      e.Graphics.FillRectangles(b' new Rectangle[] {                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-14'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-14)' resizeHandleSize)                      });                  }              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnPaint,The following statement contains a magic number: if (Resizable && (SizeGripStyle == SizeGripStyle.Auto || SizeGripStyle == SizeGripStyle.Show))              {                  using (SolidBrush b = new SolidBrush(MetroPaint.ForeColor.Button.Disabled(Theme)))                  {                      Size resizeHandleSize = new Size(2' 2);                      e.Graphics.FillRectangles(b' new Rectangle[] {                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-14'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-14)' resizeHandleSize)                      });                  }              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnPaint,The following statement contains a magic number: if (Resizable && (SizeGripStyle == SizeGripStyle.Auto || SizeGripStyle == SizeGripStyle.Show))              {                  using (SolidBrush b = new SolidBrush(MetroPaint.ForeColor.Button.Disabled(Theme)))                  {                      Size resizeHandleSize = new Size(2' 2);                      e.Graphics.FillRectangles(b' new Rectangle[] {                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-14'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-14)' resizeHandleSize)                      });                  }              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnPaint,The following statement contains a magic number: if (Resizable && (SizeGripStyle == SizeGripStyle.Auto || SizeGripStyle == SizeGripStyle.Show))              {                  using (SolidBrush b = new SolidBrush(MetroPaint.ForeColor.Button.Disabled(Theme)))                  {                      Size resizeHandleSize = new Size(2' 2);                      e.Graphics.FillRectangles(b' new Rectangle[] {                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-14'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-14)' resizeHandleSize)                      });                  }              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnPaint,The following statement contains a magic number: if (Resizable && (SizeGripStyle == SizeGripStyle.Auto || SizeGripStyle == SizeGripStyle.Show))              {                  using (SolidBrush b = new SolidBrush(MetroPaint.ForeColor.Button.Disabled(Theme)))                  {                      Size resizeHandleSize = new Size(2' 2);                      e.Graphics.FillRectangles(b' new Rectangle[] {                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-10'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-10)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-14'ClientRectangle.Height-6)' resizeHandleSize)'                          new Rectangle(new Point(ClientRectangle.Width-6'ClientRectangle.Height-14)' resizeHandleSize)                      });                  }              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnActivated,The following statement contains a magic number: if (shadowType == MetroFormShadowType.AeroShadow &&                  IsAeroThemeEnabled() && IsDropShadowSupported())              {                  int val = 2;                  DwmApi.DwmSetWindowAttribute(Handle' 2' ref val' 4);                  var m = new DwmApi.MARGINS                  {                      cyBottomHeight = 1'                      cxLeftWidth = 0'                      cxRightWidth = 0'                      cyTopHeight = 0                  };                    DwmApi.DwmExtendFrameIntoClientArea(Handle' ref m);              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnActivated,The following statement contains a magic number: if (shadowType == MetroFormShadowType.AeroShadow &&                  IsAeroThemeEnabled() && IsDropShadowSupported())              {                  int val = 2;                  DwmApi.DwmSetWindowAttribute(Handle' 2' ref val' 4);                  var m = new DwmApi.MARGINS                  {                      cyBottomHeight = 1'                      cxLeftWidth = 0'                      cxRightWidth = 0'                      cyTopHeight = 0                  };                    DwmApi.DwmExtendFrameIntoClientArea(Handle' ref m);              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnActivated,The following statement contains a magic number: if (shadowType == MetroFormShadowType.AeroShadow &&                  IsAeroThemeEnabled() && IsDropShadowSupported())              {                  int val = 2;                  DwmApi.DwmSetWindowAttribute(Handle' 2' ref val' 4);                  var m = new DwmApi.MARGINS                  {                      cyBottomHeight = 1'                      cxLeftWidth = 0'                      cxRightWidth = 0'                      cyTopHeight = 0                  };                    DwmApi.DwmExtendFrameIntoClientArea(Handle' ref m);              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,HitTestNCA,The following statement contains a magic number: Point vPoint = new Point((Int16)lparam' (Int16)((int)lparam >> 16));
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,HitTestNCA,The following statement contains a magic number: if (RectangleToScreen(new Rectangle(borderWidth' borderWidth' ClientRectangle.Width - 2 * borderWidth' 50)).Contains(vPoint))                  return WinApi.HitTest.HTCAPTION;
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,HitTestNCA,The following statement contains a magic number: if (RectangleToScreen(new Rectangle(borderWidth' borderWidth' ClientRectangle.Width - 2 * borderWidth' 50)).Contains(vPoint))                  return WinApi.HitTest.HTCAPTION;
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,IsAeroThemeEnabled,The following statement contains a magic number: if (Environment.OSVersion.Version.Major <= 5) return false;
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,IsDropShadowSupported,The following statement contains a magic number: return Environment.OSVersion.Version.Major > 5 && SystemInformation.IsDropShadowEnabled;
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,AddWindowButton,The following statement contains a magic number: newButton.Size = new Size(25' 20);
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,AddWindowButton,The following statement contains a magic number: newButton.Size = new Size(25' 20);
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,UpdateWindowButtonPosition,The following statement contains a magic number: Dictionary<int' WindowButtons> priorityOrder = new Dictionary<int' WindowButtons>(3) { {0' WindowButtons.Close}' {1' WindowButtons.Maximize}' {2' WindowButtons.Minimize} };
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,UpdateWindowButtonPosition,The following statement contains a magic number: Dictionary<int' WindowButtons> priorityOrder = new Dictionary<int' WindowButtons>(3) { {0' WindowButtons.Close}' {1' WindowButtons.Maximize}' {2' WindowButtons.Minimize} };
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,UpdateWindowButtonPosition,The following statement contains a magic number: Point firstButtonLocation = new Point(ClientRectangle.Width - borderWidth - 25' borderWidth);
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,UpdateWindowButtonPosition,The following statement contains a magic number: int lastDrawedButtonPosition = firstButtonLocation.X - 25;
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,UpdateWindowButtonPosition,The following statement contains a magic number: if (windowButtonList.Count == 1)              {                  foreach (KeyValuePair<WindowButtons' MetroFormButton> button in windowButtonList)                  {                      button.Value.Location = firstButtonLocation;                  }              }              else              {                  foreach (KeyValuePair<int' WindowButtons> button in priorityOrder)                  {                      bool buttonExists = windowButtonList.ContainsKey(button.Value);                        if (firstButton == null && buttonExists)                      {                          firstButton = windowButtonList[button.Value];                          firstButton.Location = firstButtonLocation;                          continue;                      }                        if (firstButton == null || !buttonExists) continue;                        windowButtonList[button.Value].Location = new Point(lastDrawedButtonPosition' borderWidth);                      lastDrawedButtonPosition = lastDrawedButtonPosition - 25;                  }              }
Magic Number,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,RemoveCloseButton,The following statement contains a magic number: WinApi.RemoveMenu(hMenu' (uint)(n - 2)' WinApi.MfByposition | WinApi.MfRemove);
Magic Number,MetroFramework.Forms,MetroFlatDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,PaintShadow,The following statement contains a magic number: using( Bitmap getShadow = DrawBlurBorder() )                      SetBitmap(getShadow' 255);
Magic Number,MetroFramework.Forms,MetroFlatDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,ClearShadow,The following statement contains a magic number: SetBitmap(img' 255);
Magic Number,MetroFramework.Forms,MetroFlatDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,DrawOutsetShadow,The following statement contains a magic number: Rectangle rInner = new Rectangle(shadowCanvasArea.X + (-Offset.X - 1)' shadowCanvasArea.Y + (-Offset.Y - 1)' shadowCanvasArea.Width - (-Offset.X * 2 - 1)' shadowCanvasArea.Height - (-Offset.Y * 2 - 1));
Magic Number,MetroFramework.Forms,MetroFlatDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,DrawOutsetShadow,The following statement contains a magic number: Rectangle rInner = new Rectangle(shadowCanvasArea.X + (-Offset.X - 1)' shadowCanvasArea.Y + (-Offset.Y - 1)' shadowCanvasArea.Width - (-Offset.X * 2 - 1)' shadowCanvasArea.Height - (-Offset.Y * 2 - 1));
Magic Number,MetroFramework.Forms,MetroFlatDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,DrawOutsetShadow,The following statement contains a magic number: using (Brush bgBrush = new SolidBrush(Color.FromArgb(30' Color.Black)))                  {                      g.FillRectangle(bgBrush' rOuter);                  }
Magic Number,MetroFramework.Forms,MetroFlatDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,DrawOutsetShadow,The following statement contains a magic number: using (Brush bgBrush = new SolidBrush(Color.FromArgb(60' Color.Black)))                  {                      g.FillRectangle(bgBrush' rInner);                  }
Magic Number,MetroFramework.Forms,MetroRealisticDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,PaintShadow,The following statement contains a magic number: using( Bitmap getShadow = DrawBlurBorder() )                      SetBitmap(getShadow' 255);
Magic Number,MetroFramework.Forms,MetroRealisticDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,ClearShadow,The following statement contains a magic number: SetBitmap(img' 255);
Magic Number,MetroFramework.Forms,MetroRealisticDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,DrawBlurBorder,The following statement contains a magic number: return (Bitmap)DrawOutsetShadow(0' 0' 40' 1' Color.Black' new Rectangle(1' 1' ClientRectangle.Width' ClientRectangle.Height));
Magic Number,MetroFramework.Forms,MetroRealisticDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,DrawOutsetShadow,The following statement contains a magic number: do                  {                      var transparency = (rOuter.Height - rInner.Height) / (double)(blur * 2 + spread * 2);                      var shadowColor = Color.FromArgb(((int)(200 * (transparency * transparency)))' color);                      var rOutput = rInner;                      rOutput.Offset(-originalOuter.Left' -originalOuter.Top);                        DrawRoundedRectangle(g' rOutput' currentBlur' Pens.Transparent' shadowColor);                      rInner.Inflate(1' 1);                      currentBlur = (int)((double)blur * (1 - (transparency * transparency)));                    } while (rOuter.Contains(rInner));
Magic Number,MetroFramework.Forms,MetroRealisticDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,DrawOutsetShadow,The following statement contains a magic number: do                  {                      var transparency = (rOuter.Height - rInner.Height) / (double)(blur * 2 + spread * 2);                      var shadowColor = Color.FromArgb(((int)(200 * (transparency * transparency)))' color);                      var rOutput = rInner;                      rOutput.Offset(-originalOuter.Left' -originalOuter.Top);                        DrawRoundedRectangle(g' rOutput' currentBlur' Pens.Transparent' shadowColor);                      rInner.Inflate(1' 1);                      currentBlur = (int)((double)blur * (1 - (transparency * transparency)));                    } while (rOuter.Contains(rInner));
Magic Number,MetroFramework.Forms,MetroRealisticDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,DrawOutsetShadow,The following statement contains a magic number: do                  {                      var transparency = (rOuter.Height - rInner.Height) / (double)(blur * 2 + spread * 2);                      var shadowColor = Color.FromArgb(((int)(200 * (transparency * transparency)))' color);                      var rOutput = rInner;                      rOutput.Offset(-originalOuter.Left' -originalOuter.Top);                        DrawRoundedRectangle(g' rOutput' currentBlur' Pens.Transparent' shadowColor);                      rInner.Inflate(1' 1);                      currentBlur = (int)((double)blur * (1 - (transparency * transparency)));                    } while (rOuter.Contains(rInner));
Magic Number,MetroFramework.Forms,MetroRealisticDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,DrawRoundedRectangle,The following statement contains a magic number: if (cornerRadius > 0)                  {                      gfxPath.AddArc(bounds.X' bounds.Y' cornerRadius' cornerRadius' 180' 90);                      gfxPath.AddArc(bounds.X + bounds.Width - cornerRadius' bounds.Y' cornerRadius' cornerRadius' 270' 90);                      gfxPath.AddArc(bounds.X + bounds.Width - cornerRadius' bounds.Y + bounds.Height - cornerRadius' cornerRadius' cornerRadius' 0' 90);                      gfxPath.AddArc(bounds.X' bounds.Y + bounds.Height - cornerRadius' cornerRadius' cornerRadius' 90' 90);                  }                  else                  {                      gfxPath.AddRectangle(bounds);                  }
Magic Number,MetroFramework.Forms,MetroRealisticDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,DrawRoundedRectangle,The following statement contains a magic number: if (cornerRadius > 0)                  {                      gfxPath.AddArc(bounds.X' bounds.Y' cornerRadius' cornerRadius' 180' 90);                      gfxPath.AddArc(bounds.X + bounds.Width - cornerRadius' bounds.Y' cornerRadius' cornerRadius' 270' 90);                      gfxPath.AddArc(bounds.X + bounds.Width - cornerRadius' bounds.Y + bounds.Height - cornerRadius' cornerRadius' cornerRadius' 0' 90);                      gfxPath.AddArc(bounds.X' bounds.Y + bounds.Height - cornerRadius' cornerRadius' cornerRadius' 90' 90);                  }                  else                  {                      gfxPath.AddRectangle(bounds);                  }
Magic Number,MetroFramework.Forms,MetroRealisticDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,DrawRoundedRectangle,The following statement contains a magic number: if (cornerRadius > 0)                  {                      gfxPath.AddArc(bounds.X' bounds.Y' cornerRadius' cornerRadius' 180' 90);                      gfxPath.AddArc(bounds.X + bounds.Width - cornerRadius' bounds.Y' cornerRadius' cornerRadius' 270' 90);                      gfxPath.AddArc(bounds.X + bounds.Width - cornerRadius' bounds.Y + bounds.Height - cornerRadius' cornerRadius' cornerRadius' 0' 90);                      gfxPath.AddArc(bounds.X' bounds.Y + bounds.Height - cornerRadius' cornerRadius' cornerRadius' 90' 90);                  }                  else                  {                      gfxPath.AddRectangle(bounds);                  }
Magic Number,MetroFramework.Forms,MetroRealisticDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,DrawRoundedRectangle,The following statement contains a magic number: if (cornerRadius > 0)                  {                      gfxPath.AddArc(bounds.X' bounds.Y' cornerRadius' cornerRadius' 180' 90);                      gfxPath.AddArc(bounds.X + bounds.Width - cornerRadius' bounds.Y' cornerRadius' cornerRadius' 270' 90);                      gfxPath.AddArc(bounds.X + bounds.Width - cornerRadius' bounds.Y + bounds.Height - cornerRadius' cornerRadius' cornerRadius' 0' 90);                      gfxPath.AddArc(bounds.X' bounds.Y + bounds.Height - cornerRadius' cornerRadius' cornerRadius' 90' 90);                  }                  else                  {                      gfxPath.AddRectangle(bounds);                  }
Magic Number,MetroFramework.Forms,MetroRealisticDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,DrawRoundedRectangle,The following statement contains a magic number: if (cornerRadius > 0)                  {                      gfxPath.AddArc(bounds.X' bounds.Y' cornerRadius' cornerRadius' 180' 90);                      gfxPath.AddArc(bounds.X + bounds.Width - cornerRadius' bounds.Y' cornerRadius' cornerRadius' 270' 90);                      gfxPath.AddArc(bounds.X + bounds.Width - cornerRadius' bounds.Y + bounds.Height - cornerRadius' cornerRadius' cornerRadius' 0' 90);                      gfxPath.AddArc(bounds.X' bounds.Y + bounds.Height - cornerRadius' cornerRadius' cornerRadius' 90' 90);                  }                  else                  {                      gfxPath.AddRectangle(bounds);                  }
Magic Number,MetroFramework.Forms,MetroRealisticDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,DrawRoundedRectangle,The following statement contains a magic number: if (cornerRadius > 0)                  {                      gfxPath.AddArc(bounds.X' bounds.Y' cornerRadius' cornerRadius' 180' 90);                      gfxPath.AddArc(bounds.X + bounds.Width - cornerRadius' bounds.Y' cornerRadius' cornerRadius' 270' 90);                      gfxPath.AddArc(bounds.X + bounds.Width - cornerRadius' bounds.Y + bounds.Height - cornerRadius' cornerRadius' cornerRadius' 0' 90);                      gfxPath.AddArc(bounds.X' bounds.Y + bounds.Height - cornerRadius' cornerRadius' cornerRadius' 90' 90);                  }                  else                  {                      gfxPath.AddRectangle(bounds);                  }
Magic Number,MetroFramework.Forms,MetroRealisticDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,DrawRoundedRectangle,The following statement contains a magic number: if (cornerRadius > 0)                  {                      gfxPath.AddArc(bounds.X' bounds.Y' cornerRadius' cornerRadius' 180' 90);                      gfxPath.AddArc(bounds.X + bounds.Width - cornerRadius' bounds.Y' cornerRadius' cornerRadius' 270' 90);                      gfxPath.AddArc(bounds.X + bounds.Width - cornerRadius' bounds.Y + bounds.Height - cornerRadius' cornerRadius' cornerRadius' 0' 90);                      gfxPath.AddArc(bounds.X' bounds.Y + bounds.Height - cornerRadius' cornerRadius' cornerRadius' 90' 90);                  }                  else                  {                      gfxPath.AddRectangle(bounds);                  }
Magic Number,MetroFramework.Forms,MetroRealisticDropShadow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,DrawRoundedRectangle,The following statement contains a magic number: if (cornerRadius > 5)                  {                      using (SolidBrush b = new SolidBrush(fillColor))                      {                          g.FillPath(b' gfxPath);                      }                  }
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,MetroTaskWindow,The following statement contains a magic number: closeTime = duration * 500;
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,MetroTaskWindow,The following statement contains a magic number: if (closeTime > 0)                  timer = DelayedCall.Start(UpdateProgress' 5);
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,OnActivated,The following statement contains a magic number: if (!isInitialized)              {                  controlContainer.Theme = Theme;                  controlContainer.Style = Style;                  controlContainer.StyleManager = StyleManager;                    MaximizeBox = false;                  MinimizeBox = false;                  Movable = true;                    TopMost = true;                    Size = new Size(400' 200);                    Taskbar myTaskbar = new Taskbar();                  switch (myTaskbar.Position)                  {                      case TaskbarPosition.Left:                          Location = new Point(myTaskbar.Bounds.Width + 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Top:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Height + 5);                          break;                      case TaskbarPosition.Right:                          Location = new Point(myTaskbar.Bounds.X - Width - 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Bottom:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Y - Height - 5);                          break;                      case TaskbarPosition.Unknown:                      default:                          Location = new Point(Screen.PrimaryScreen.Bounds.Width - Width - 5' Screen.PrimaryScreen.Bounds.Height - Height - 5);                          break;                  }                    controlContainer.Location = new Point(0' 60);                  controlContainer.Size = new Size(Width - 40' Height - 80);                  controlContainer.Anchor = AnchorStyles.Top | AnchorStyles.Right | AnchorStyles.Bottom | AnchorStyles.Left;                    controlContainer.AutoScroll = false;                  controlContainer.HorizontalScrollbar = false;                  controlContainer.VerticalScrollbar = false;                  controlContainer.Refresh();                    if (StyleManager != null)                  {                      StyleManager.Update();                  }                    isInitialized = true;                    MoveAnimation myMoveAnim = new MoveAnimation();                  myMoveAnim.Start(controlContainer' new Point(20' 60)' TransitionType.EaseInOutCubic' 15);              }
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,OnActivated,The following statement contains a magic number: if (!isInitialized)              {                  controlContainer.Theme = Theme;                  controlContainer.Style = Style;                  controlContainer.StyleManager = StyleManager;                    MaximizeBox = false;                  MinimizeBox = false;                  Movable = true;                    TopMost = true;                    Size = new Size(400' 200);                    Taskbar myTaskbar = new Taskbar();                  switch (myTaskbar.Position)                  {                      case TaskbarPosition.Left:                          Location = new Point(myTaskbar.Bounds.Width + 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Top:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Height + 5);                          break;                      case TaskbarPosition.Right:                          Location = new Point(myTaskbar.Bounds.X - Width - 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Bottom:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Y - Height - 5);                          break;                      case TaskbarPosition.Unknown:                      default:                          Location = new Point(Screen.PrimaryScreen.Bounds.Width - Width - 5' Screen.PrimaryScreen.Bounds.Height - Height - 5);                          break;                  }                    controlContainer.Location = new Point(0' 60);                  controlContainer.Size = new Size(Width - 40' Height - 80);                  controlContainer.Anchor = AnchorStyles.Top | AnchorStyles.Right | AnchorStyles.Bottom | AnchorStyles.Left;                    controlContainer.AutoScroll = false;                  controlContainer.HorizontalScrollbar = false;                  controlContainer.VerticalScrollbar = false;                  controlContainer.Refresh();                    if (StyleManager != null)                  {                      StyleManager.Update();                  }                    isInitialized = true;                    MoveAnimation myMoveAnim = new MoveAnimation();                  myMoveAnim.Start(controlContainer' new Point(20' 60)' TransitionType.EaseInOutCubic' 15);              }
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,OnActivated,The following statement contains a magic number: if (!isInitialized)              {                  controlContainer.Theme = Theme;                  controlContainer.Style = Style;                  controlContainer.StyleManager = StyleManager;                    MaximizeBox = false;                  MinimizeBox = false;                  Movable = true;                    TopMost = true;                    Size = new Size(400' 200);                    Taskbar myTaskbar = new Taskbar();                  switch (myTaskbar.Position)                  {                      case TaskbarPosition.Left:                          Location = new Point(myTaskbar.Bounds.Width + 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Top:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Height + 5);                          break;                      case TaskbarPosition.Right:                          Location = new Point(myTaskbar.Bounds.X - Width - 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Bottom:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Y - Height - 5);                          break;                      case TaskbarPosition.Unknown:                      default:                          Location = new Point(Screen.PrimaryScreen.Bounds.Width - Width - 5' Screen.PrimaryScreen.Bounds.Height - Height - 5);                          break;                  }                    controlContainer.Location = new Point(0' 60);                  controlContainer.Size = new Size(Width - 40' Height - 80);                  controlContainer.Anchor = AnchorStyles.Top | AnchorStyles.Right | AnchorStyles.Bottom | AnchorStyles.Left;                    controlContainer.AutoScroll = false;                  controlContainer.HorizontalScrollbar = false;                  controlContainer.VerticalScrollbar = false;                  controlContainer.Refresh();                    if (StyleManager != null)                  {                      StyleManager.Update();                  }                    isInitialized = true;                    MoveAnimation myMoveAnim = new MoveAnimation();                  myMoveAnim.Start(controlContainer' new Point(20' 60)' TransitionType.EaseInOutCubic' 15);              }
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,OnActivated,The following statement contains a magic number: if (!isInitialized)              {                  controlContainer.Theme = Theme;                  controlContainer.Style = Style;                  controlContainer.StyleManager = StyleManager;                    MaximizeBox = false;                  MinimizeBox = false;                  Movable = true;                    TopMost = true;                    Size = new Size(400' 200);                    Taskbar myTaskbar = new Taskbar();                  switch (myTaskbar.Position)                  {                      case TaskbarPosition.Left:                          Location = new Point(myTaskbar.Bounds.Width + 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Top:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Height + 5);                          break;                      case TaskbarPosition.Right:                          Location = new Point(myTaskbar.Bounds.X - Width - 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Bottom:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Y - Height - 5);                          break;                      case TaskbarPosition.Unknown:                      default:                          Location = new Point(Screen.PrimaryScreen.Bounds.Width - Width - 5' Screen.PrimaryScreen.Bounds.Height - Height - 5);                          break;                  }                    controlContainer.Location = new Point(0' 60);                  controlContainer.Size = new Size(Width - 40' Height - 80);                  controlContainer.Anchor = AnchorStyles.Top | AnchorStyles.Right | AnchorStyles.Bottom | AnchorStyles.Left;                    controlContainer.AutoScroll = false;                  controlContainer.HorizontalScrollbar = false;                  controlContainer.VerticalScrollbar = false;                  controlContainer.Refresh();                    if (StyleManager != null)                  {                      StyleManager.Update();                  }                    isInitialized = true;                    MoveAnimation myMoveAnim = new MoveAnimation();                  myMoveAnim.Start(controlContainer' new Point(20' 60)' TransitionType.EaseInOutCubic' 15);              }
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,OnActivated,The following statement contains a magic number: if (!isInitialized)              {                  controlContainer.Theme = Theme;                  controlContainer.Style = Style;                  controlContainer.StyleManager = StyleManager;                    MaximizeBox = false;                  MinimizeBox = false;                  Movable = true;                    TopMost = true;                    Size = new Size(400' 200);                    Taskbar myTaskbar = new Taskbar();                  switch (myTaskbar.Position)                  {                      case TaskbarPosition.Left:                          Location = new Point(myTaskbar.Bounds.Width + 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Top:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Height + 5);                          break;                      case TaskbarPosition.Right:                          Location = new Point(myTaskbar.Bounds.X - Width - 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Bottom:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Y - Height - 5);                          break;                      case TaskbarPosition.Unknown:                      default:                          Location = new Point(Screen.PrimaryScreen.Bounds.Width - Width - 5' Screen.PrimaryScreen.Bounds.Height - Height - 5);                          break;                  }                    controlContainer.Location = new Point(0' 60);                  controlContainer.Size = new Size(Width - 40' Height - 80);                  controlContainer.Anchor = AnchorStyles.Top | AnchorStyles.Right | AnchorStyles.Bottom | AnchorStyles.Left;                    controlContainer.AutoScroll = false;                  controlContainer.HorizontalScrollbar = false;                  controlContainer.VerticalScrollbar = false;                  controlContainer.Refresh();                    if (StyleManager != null)                  {                      StyleManager.Update();                  }                    isInitialized = true;                    MoveAnimation myMoveAnim = new MoveAnimation();                  myMoveAnim.Start(controlContainer' new Point(20' 60)' TransitionType.EaseInOutCubic' 15);              }
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,OnActivated,The following statement contains a magic number: if (!isInitialized)              {                  controlContainer.Theme = Theme;                  controlContainer.Style = Style;                  controlContainer.StyleManager = StyleManager;                    MaximizeBox = false;                  MinimizeBox = false;                  Movable = true;                    TopMost = true;                    Size = new Size(400' 200);                    Taskbar myTaskbar = new Taskbar();                  switch (myTaskbar.Position)                  {                      case TaskbarPosition.Left:                          Location = new Point(myTaskbar.Bounds.Width + 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Top:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Height + 5);                          break;                      case TaskbarPosition.Right:                          Location = new Point(myTaskbar.Bounds.X - Width - 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Bottom:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Y - Height - 5);                          break;                      case TaskbarPosition.Unknown:                      default:                          Location = new Point(Screen.PrimaryScreen.Bounds.Width - Width - 5' Screen.PrimaryScreen.Bounds.Height - Height - 5);                          break;                  }                    controlContainer.Location = new Point(0' 60);                  controlContainer.Size = new Size(Width - 40' Height - 80);                  controlContainer.Anchor = AnchorStyles.Top | AnchorStyles.Right | AnchorStyles.Bottom | AnchorStyles.Left;                    controlContainer.AutoScroll = false;                  controlContainer.HorizontalScrollbar = false;                  controlContainer.VerticalScrollbar = false;                  controlContainer.Refresh();                    if (StyleManager != null)                  {                      StyleManager.Update();                  }                    isInitialized = true;                    MoveAnimation myMoveAnim = new MoveAnimation();                  myMoveAnim.Start(controlContainer' new Point(20' 60)' TransitionType.EaseInOutCubic' 15);              }
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,OnActivated,The following statement contains a magic number: if (!isInitialized)              {                  controlContainer.Theme = Theme;                  controlContainer.Style = Style;                  controlContainer.StyleManager = StyleManager;                    MaximizeBox = false;                  MinimizeBox = false;                  Movable = true;                    TopMost = true;                    Size = new Size(400' 200);                    Taskbar myTaskbar = new Taskbar();                  switch (myTaskbar.Position)                  {                      case TaskbarPosition.Left:                          Location = new Point(myTaskbar.Bounds.Width + 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Top:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Height + 5);                          break;                      case TaskbarPosition.Right:                          Location = new Point(myTaskbar.Bounds.X - Width - 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Bottom:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Y - Height - 5);                          break;                      case TaskbarPosition.Unknown:                      default:                          Location = new Point(Screen.PrimaryScreen.Bounds.Width - Width - 5' Screen.PrimaryScreen.Bounds.Height - Height - 5);                          break;                  }                    controlContainer.Location = new Point(0' 60);                  controlContainer.Size = new Size(Width - 40' Height - 80);                  controlContainer.Anchor = AnchorStyles.Top | AnchorStyles.Right | AnchorStyles.Bottom | AnchorStyles.Left;                    controlContainer.AutoScroll = false;                  controlContainer.HorizontalScrollbar = false;                  controlContainer.VerticalScrollbar = false;                  controlContainer.Refresh();                    if (StyleManager != null)                  {                      StyleManager.Update();                  }                    isInitialized = true;                    MoveAnimation myMoveAnim = new MoveAnimation();                  myMoveAnim.Start(controlContainer' new Point(20' 60)' TransitionType.EaseInOutCubic' 15);              }
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,OnActivated,The following statement contains a magic number: if (!isInitialized)              {                  controlContainer.Theme = Theme;                  controlContainer.Style = Style;                  controlContainer.StyleManager = StyleManager;                    MaximizeBox = false;                  MinimizeBox = false;                  Movable = true;                    TopMost = true;                    Size = new Size(400' 200);                    Taskbar myTaskbar = new Taskbar();                  switch (myTaskbar.Position)                  {                      case TaskbarPosition.Left:                          Location = new Point(myTaskbar.Bounds.Width + 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Top:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Height + 5);                          break;                      case TaskbarPosition.Right:                          Location = new Point(myTaskbar.Bounds.X - Width - 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Bottom:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Y - Height - 5);                          break;                      case TaskbarPosition.Unknown:                      default:                          Location = new Point(Screen.PrimaryScreen.Bounds.Width - Width - 5' Screen.PrimaryScreen.Bounds.Height - Height - 5);                          break;                  }                    controlContainer.Location = new Point(0' 60);                  controlContainer.Size = new Size(Width - 40' Height - 80);                  controlContainer.Anchor = AnchorStyles.Top | AnchorStyles.Right | AnchorStyles.Bottom | AnchorStyles.Left;                    controlContainer.AutoScroll = false;                  controlContainer.HorizontalScrollbar = false;                  controlContainer.VerticalScrollbar = false;                  controlContainer.Refresh();                    if (StyleManager != null)                  {                      StyleManager.Update();                  }                    isInitialized = true;                    MoveAnimation myMoveAnim = new MoveAnimation();                  myMoveAnim.Start(controlContainer' new Point(20' 60)' TransitionType.EaseInOutCubic' 15);              }
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,OnActivated,The following statement contains a magic number: if (!isInitialized)              {                  controlContainer.Theme = Theme;                  controlContainer.Style = Style;                  controlContainer.StyleManager = StyleManager;                    MaximizeBox = false;                  MinimizeBox = false;                  Movable = true;                    TopMost = true;                    Size = new Size(400' 200);                    Taskbar myTaskbar = new Taskbar();                  switch (myTaskbar.Position)                  {                      case TaskbarPosition.Left:                          Location = new Point(myTaskbar.Bounds.Width + 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Top:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Height + 5);                          break;                      case TaskbarPosition.Right:                          Location = new Point(myTaskbar.Bounds.X - Width - 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Bottom:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Y - Height - 5);                          break;                      case TaskbarPosition.Unknown:                      default:                          Location = new Point(Screen.PrimaryScreen.Bounds.Width - Width - 5' Screen.PrimaryScreen.Bounds.Height - Height - 5);                          break;                  }                    controlContainer.Location = new Point(0' 60);                  controlContainer.Size = new Size(Width - 40' Height - 80);                  controlContainer.Anchor = AnchorStyles.Top | AnchorStyles.Right | AnchorStyles.Bottom | AnchorStyles.Left;                    controlContainer.AutoScroll = false;                  controlContainer.HorizontalScrollbar = false;                  controlContainer.VerticalScrollbar = false;                  controlContainer.Refresh();                    if (StyleManager != null)                  {                      StyleManager.Update();                  }                    isInitialized = true;                    MoveAnimation myMoveAnim = new MoveAnimation();                  myMoveAnim.Start(controlContainer' new Point(20' 60)' TransitionType.EaseInOutCubic' 15);              }
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,OnActivated,The following statement contains a magic number: if (!isInitialized)              {                  controlContainer.Theme = Theme;                  controlContainer.Style = Style;                  controlContainer.StyleManager = StyleManager;                    MaximizeBox = false;                  MinimizeBox = false;                  Movable = true;                    TopMost = true;                    Size = new Size(400' 200);                    Taskbar myTaskbar = new Taskbar();                  switch (myTaskbar.Position)                  {                      case TaskbarPosition.Left:                          Location = new Point(myTaskbar.Bounds.Width + 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Top:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Height + 5);                          break;                      case TaskbarPosition.Right:                          Location = new Point(myTaskbar.Bounds.X - Width - 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Bottom:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Y - Height - 5);                          break;                      case TaskbarPosition.Unknown:                      default:                          Location = new Point(Screen.PrimaryScreen.Bounds.Width - Width - 5' Screen.PrimaryScreen.Bounds.Height - Height - 5);                          break;                  }                    controlContainer.Location = new Point(0' 60);                  controlContainer.Size = new Size(Width - 40' Height - 80);                  controlContainer.Anchor = AnchorStyles.Top | AnchorStyles.Right | AnchorStyles.Bottom | AnchorStyles.Left;                    controlContainer.AutoScroll = false;                  controlContainer.HorizontalScrollbar = false;                  controlContainer.VerticalScrollbar = false;                  controlContainer.Refresh();                    if (StyleManager != null)                  {                      StyleManager.Update();                  }                    isInitialized = true;                    MoveAnimation myMoveAnim = new MoveAnimation();                  myMoveAnim.Start(controlContainer' new Point(20' 60)' TransitionType.EaseInOutCubic' 15);              }
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,OnActivated,The following statement contains a magic number: if (!isInitialized)              {                  controlContainer.Theme = Theme;                  controlContainer.Style = Style;                  controlContainer.StyleManager = StyleManager;                    MaximizeBox = false;                  MinimizeBox = false;                  Movable = true;                    TopMost = true;                    Size = new Size(400' 200);                    Taskbar myTaskbar = new Taskbar();                  switch (myTaskbar.Position)                  {                      case TaskbarPosition.Left:                          Location = new Point(myTaskbar.Bounds.Width + 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Top:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Height + 5);                          break;                      case TaskbarPosition.Right:                          Location = new Point(myTaskbar.Bounds.X - Width - 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Bottom:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Y - Height - 5);                          break;                      case TaskbarPosition.Unknown:                      default:                          Location = new Point(Screen.PrimaryScreen.Bounds.Width - Width - 5' Screen.PrimaryScreen.Bounds.Height - Height - 5);                          break;                  }                    controlContainer.Location = new Point(0' 60);                  controlContainer.Size = new Size(Width - 40' Height - 80);                  controlContainer.Anchor = AnchorStyles.Top | AnchorStyles.Right | AnchorStyles.Bottom | AnchorStyles.Left;                    controlContainer.AutoScroll = false;                  controlContainer.HorizontalScrollbar = false;                  controlContainer.VerticalScrollbar = false;                  controlContainer.Refresh();                    if (StyleManager != null)                  {                      StyleManager.Update();                  }                    isInitialized = true;                    MoveAnimation myMoveAnim = new MoveAnimation();                  myMoveAnim.Start(controlContainer' new Point(20' 60)' TransitionType.EaseInOutCubic' 15);              }
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,OnActivated,The following statement contains a magic number: if (!isInitialized)              {                  controlContainer.Theme = Theme;                  controlContainer.Style = Style;                  controlContainer.StyleManager = StyleManager;                    MaximizeBox = false;                  MinimizeBox = false;                  Movable = true;                    TopMost = true;                    Size = new Size(400' 200);                    Taskbar myTaskbar = new Taskbar();                  switch (myTaskbar.Position)                  {                      case TaskbarPosition.Left:                          Location = new Point(myTaskbar.Bounds.Width + 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Top:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Height + 5);                          break;                      case TaskbarPosition.Right:                          Location = new Point(myTaskbar.Bounds.X - Width - 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Bottom:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Y - Height - 5);                          break;                      case TaskbarPosition.Unknown:                      default:                          Location = new Point(Screen.PrimaryScreen.Bounds.Width - Width - 5' Screen.PrimaryScreen.Bounds.Height - Height - 5);                          break;                  }                    controlContainer.Location = new Point(0' 60);                  controlContainer.Size = new Size(Width - 40' Height - 80);                  controlContainer.Anchor = AnchorStyles.Top | AnchorStyles.Right | AnchorStyles.Bottom | AnchorStyles.Left;                    controlContainer.AutoScroll = false;                  controlContainer.HorizontalScrollbar = false;                  controlContainer.VerticalScrollbar = false;                  controlContainer.Refresh();                    if (StyleManager != null)                  {                      StyleManager.Update();                  }                    isInitialized = true;                    MoveAnimation myMoveAnim = new MoveAnimation();                  myMoveAnim.Start(controlContainer' new Point(20' 60)' TransitionType.EaseInOutCubic' 15);              }
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,OnActivated,The following statement contains a magic number: if (!isInitialized)              {                  controlContainer.Theme = Theme;                  controlContainer.Style = Style;                  controlContainer.StyleManager = StyleManager;                    MaximizeBox = false;                  MinimizeBox = false;                  Movable = true;                    TopMost = true;                    Size = new Size(400' 200);                    Taskbar myTaskbar = new Taskbar();                  switch (myTaskbar.Position)                  {                      case TaskbarPosition.Left:                          Location = new Point(myTaskbar.Bounds.Width + 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Top:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Height + 5);                          break;                      case TaskbarPosition.Right:                          Location = new Point(myTaskbar.Bounds.X - Width - 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Bottom:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Y - Height - 5);                          break;                      case TaskbarPosition.Unknown:                      default:                          Location = new Point(Screen.PrimaryScreen.Bounds.Width - Width - 5' Screen.PrimaryScreen.Bounds.Height - Height - 5);                          break;                  }                    controlContainer.Location = new Point(0' 60);                  controlContainer.Size = new Size(Width - 40' Height - 80);                  controlContainer.Anchor = AnchorStyles.Top | AnchorStyles.Right | AnchorStyles.Bottom | AnchorStyles.Left;                    controlContainer.AutoScroll = false;                  controlContainer.HorizontalScrollbar = false;                  controlContainer.VerticalScrollbar = false;                  controlContainer.Refresh();                    if (StyleManager != null)                  {                      StyleManager.Update();                  }                    isInitialized = true;                    MoveAnimation myMoveAnim = new MoveAnimation();                  myMoveAnim.Start(controlContainer' new Point(20' 60)' TransitionType.EaseInOutCubic' 15);              }
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,OnActivated,The following statement contains a magic number: if (!isInitialized)              {                  controlContainer.Theme = Theme;                  controlContainer.Style = Style;                  controlContainer.StyleManager = StyleManager;                    MaximizeBox = false;                  MinimizeBox = false;                  Movable = true;                    TopMost = true;                    Size = new Size(400' 200);                    Taskbar myTaskbar = new Taskbar();                  switch (myTaskbar.Position)                  {                      case TaskbarPosition.Left:                          Location = new Point(myTaskbar.Bounds.Width + 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Top:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Height + 5);                          break;                      case TaskbarPosition.Right:                          Location = new Point(myTaskbar.Bounds.X - Width - 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Bottom:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Y - Height - 5);                          break;                      case TaskbarPosition.Unknown:                      default:                          Location = new Point(Screen.PrimaryScreen.Bounds.Width - Width - 5' Screen.PrimaryScreen.Bounds.Height - Height - 5);                          break;                  }                    controlContainer.Location = new Point(0' 60);                  controlContainer.Size = new Size(Width - 40' Height - 80);                  controlContainer.Anchor = AnchorStyles.Top | AnchorStyles.Right | AnchorStyles.Bottom | AnchorStyles.Left;                    controlContainer.AutoScroll = false;                  controlContainer.HorizontalScrollbar = false;                  controlContainer.VerticalScrollbar = false;                  controlContainer.Refresh();                    if (StyleManager != null)                  {                      StyleManager.Update();                  }                    isInitialized = true;                    MoveAnimation myMoveAnim = new MoveAnimation();                  myMoveAnim.Start(controlContainer' new Point(20' 60)' TransitionType.EaseInOutCubic' 15);              }
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,OnActivated,The following statement contains a magic number: if (!isInitialized)              {                  controlContainer.Theme = Theme;                  controlContainer.Style = Style;                  controlContainer.StyleManager = StyleManager;                    MaximizeBox = false;                  MinimizeBox = false;                  Movable = true;                    TopMost = true;                    Size = new Size(400' 200);                    Taskbar myTaskbar = new Taskbar();                  switch (myTaskbar.Position)                  {                      case TaskbarPosition.Left:                          Location = new Point(myTaskbar.Bounds.Width + 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Top:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Height + 5);                          break;                      case TaskbarPosition.Right:                          Location = new Point(myTaskbar.Bounds.X - Width - 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Bottom:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Y - Height - 5);                          break;                      case TaskbarPosition.Unknown:                      default:                          Location = new Point(Screen.PrimaryScreen.Bounds.Width - Width - 5' Screen.PrimaryScreen.Bounds.Height - Height - 5);                          break;                  }                    controlContainer.Location = new Point(0' 60);                  controlContainer.Size = new Size(Width - 40' Height - 80);                  controlContainer.Anchor = AnchorStyles.Top | AnchorStyles.Right | AnchorStyles.Bottom | AnchorStyles.Left;                    controlContainer.AutoScroll = false;                  controlContainer.HorizontalScrollbar = false;                  controlContainer.VerticalScrollbar = false;                  controlContainer.Refresh();                    if (StyleManager != null)                  {                      StyleManager.Update();                  }                    isInitialized = true;                    MoveAnimation myMoveAnim = new MoveAnimation();                  myMoveAnim.Start(controlContainer' new Point(20' 60)' TransitionType.EaseInOutCubic' 15);              }
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,OnActivated,The following statement contains a magic number: if (!isInitialized)              {                  controlContainer.Theme = Theme;                  controlContainer.Style = Style;                  controlContainer.StyleManager = StyleManager;                    MaximizeBox = false;                  MinimizeBox = false;                  Movable = true;                    TopMost = true;                    Size = new Size(400' 200);                    Taskbar myTaskbar = new Taskbar();                  switch (myTaskbar.Position)                  {                      case TaskbarPosition.Left:                          Location = new Point(myTaskbar.Bounds.Width + 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Top:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Height + 5);                          break;                      case TaskbarPosition.Right:                          Location = new Point(myTaskbar.Bounds.X - Width - 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Bottom:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Y - Height - 5);                          break;                      case TaskbarPosition.Unknown:                      default:                          Location = new Point(Screen.PrimaryScreen.Bounds.Width - Width - 5' Screen.PrimaryScreen.Bounds.Height - Height - 5);                          break;                  }                    controlContainer.Location = new Point(0' 60);                  controlContainer.Size = new Size(Width - 40' Height - 80);                  controlContainer.Anchor = AnchorStyles.Top | AnchorStyles.Right | AnchorStyles.Bottom | AnchorStyles.Left;                    controlContainer.AutoScroll = false;                  controlContainer.HorizontalScrollbar = false;                  controlContainer.VerticalScrollbar = false;                  controlContainer.Refresh();                    if (StyleManager != null)                  {                      StyleManager.Update();                  }                    isInitialized = true;                    MoveAnimation myMoveAnim = new MoveAnimation();                  myMoveAnim.Start(controlContainer' new Point(20' 60)' TransitionType.EaseInOutCubic' 15);              }
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,OnActivated,The following statement contains a magic number: if (!isInitialized)              {                  controlContainer.Theme = Theme;                  controlContainer.Style = Style;                  controlContainer.StyleManager = StyleManager;                    MaximizeBox = false;                  MinimizeBox = false;                  Movable = true;                    TopMost = true;                    Size = new Size(400' 200);                    Taskbar myTaskbar = new Taskbar();                  switch (myTaskbar.Position)                  {                      case TaskbarPosition.Left:                          Location = new Point(myTaskbar.Bounds.Width + 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Top:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Height + 5);                          break;                      case TaskbarPosition.Right:                          Location = new Point(myTaskbar.Bounds.X - Width - 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Bottom:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Y - Height - 5);                          break;                      case TaskbarPosition.Unknown:                      default:                          Location = new Point(Screen.PrimaryScreen.Bounds.Width - Width - 5' Screen.PrimaryScreen.Bounds.Height - Height - 5);                          break;                  }                    controlContainer.Location = new Point(0' 60);                  controlContainer.Size = new Size(Width - 40' Height - 80);                  controlContainer.Anchor = AnchorStyles.Top | AnchorStyles.Right | AnchorStyles.Bottom | AnchorStyles.Left;                    controlContainer.AutoScroll = false;                  controlContainer.HorizontalScrollbar = false;                  controlContainer.VerticalScrollbar = false;                  controlContainer.Refresh();                    if (StyleManager != null)                  {                      StyleManager.Update();                  }                    isInitialized = true;                    MoveAnimation myMoveAnim = new MoveAnimation();                  myMoveAnim.Start(controlContainer' new Point(20' 60)' TransitionType.EaseInOutCubic' 15);              }
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,OnActivated,The following statement contains a magic number: if (!isInitialized)              {                  controlContainer.Theme = Theme;                  controlContainer.Style = Style;                  controlContainer.StyleManager = StyleManager;                    MaximizeBox = false;                  MinimizeBox = false;                  Movable = true;                    TopMost = true;                    Size = new Size(400' 200);                    Taskbar myTaskbar = new Taskbar();                  switch (myTaskbar.Position)                  {                      case TaskbarPosition.Left:                          Location = new Point(myTaskbar.Bounds.Width + 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Top:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Height + 5);                          break;                      case TaskbarPosition.Right:                          Location = new Point(myTaskbar.Bounds.X - Width - 5' myTaskbar.Bounds.Height - Height - 5);                          break;                      case TaskbarPosition.Bottom:                          Location = new Point(myTaskbar.Bounds.Width - Width - 5' myTaskbar.Bounds.Y - Height - 5);                          break;                      case TaskbarPosition.Unknown:                      default:                          Location = new Point(Screen.PrimaryScreen.Bounds.Width - Width - 5' Screen.PrimaryScreen.Bounds.Height - Height - 5);                          break;                  }                    controlContainer.Location = new Point(0' 60);                  controlContainer.Size = new Size(Width - 40' Height - 80);                  controlContainer.Anchor = AnchorStyles.Top | AnchorStyles.Right | AnchorStyles.Bottom | AnchorStyles.Left;                    controlContainer.AutoScroll = false;                  controlContainer.HorizontalScrollbar = false;                  controlContainer.VerticalScrollbar = false;                  controlContainer.Refresh();                    if (StyleManager != null)                  {                      StyleManager.Update();                  }                    isInitialized = true;                    MoveAnimation myMoveAnim = new MoveAnimation();                  myMoveAnim.Start(controlContainer' new Point(20' 60)' TransitionType.EaseInOutCubic' 15);              }
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,OnPaint,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(MetroPaint.BackColor.Form(Theme)))              {                  e.Graphics.FillRectangle(b' new Rectangle(Width - progressWidth' 0' progressWidth' 5));              }
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,UpdateProgress,The following statement contains a magic number: elapsedTime += 5;
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,UpdateProgress,The following statement contains a magic number: double perc = (double)elapsedTime / ((double)closeTime / 100);
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,UpdateProgress,The following statement contains a magic number: progressWidth = (int)((double)Width * (perc / 100));
Magic Number,MetroFramework.Forms,MetroTaskWindow,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroTaskWindow.cs,UpdateProgress,The following statement contains a magic number: Invalidate(new Rectangle(0'0'Width'5));
Magic Number,MetroFramework,MetroMessageBox,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBox.cs,Show,The following statement contains a magic number: if (owner != null)              {                  Form _owner;                    try                  {                      _owner = (Form)owner;                  }                  catch                  {                      _owner = ((UserControl)owner).ParentForm;                  }                    //int _minWidth = 500;                  //int _minHeight = 350;                    //if (_owner.Size.Width < _minWidth ||                  //    _owner.Size.Height < _minHeight)                  //{                  //    if (_owner.Size.Width < _minWidth && _owner.Size.Height < _minHeight) {                  //            _owner.Size = new Size(_minWidth' _minHeight);                  //    }                  //    else                  //    {                  //        if (_owner.Size.Width < _minWidth) _owner.Size = new Size(_minWidth' _owner.Size.Height);                  //        else _owner.Size = new Size(_owner.Size.Width' _minHeight);                  //    }                    //    int x = Convert.ToInt32(Math.Ceiling((decimal)(Screen.PrimaryScreen.WorkingArea.Size.Width / 2) - (_owner.Size.Width / 2)));                  //    int y = Convert.ToInt32(Math.Ceiling((decimal)(Screen.PrimaryScreen.WorkingArea.Size.Height / 2) - (_owner.Size.Height / 2)));                  //    _owner.Location = new Point(x' y);                  //}                    switch (icon)                  {                      case MessageBoxIcon.Error:                          SystemSounds.Hand.Play(); break;                      case MessageBoxIcon.Exclamation:                          SystemSounds.Exclamation.Play(); break;                      case MessageBoxIcon.Question:                          SystemSounds.Beep.Play(); break;                      default:                          SystemSounds.Asterisk.Play(); break;                  }                    MetroMessageBoxControl _control = new MetroMessageBoxControl();                  _control.BackColor = _owner.BackColor;                  _control.Properties.Buttons = buttons;                  _control.Properties.DefaultButton = defaultbutton;                  _control.Properties.Icon = icon;                  _control.Properties.Message = message;                  _control.Properties.Title = title;                  _control.Padding = new Padding(0' 0' 0' 0);                  _control.ControlBox = false;                  _control.ShowInTaskbar = false;                  //_owner.Controls.Add(_control);                  //if (_owner is IMetroForm)                  //{                  //    //if (((MetroForm)_owner).DisplayHeader)                  //    //{                  //    //    _offset += 30;                  //    //}                  //    _control.Theme = ((MetroForm)_owner).Theme;                  //    _control.Style = ((MetroForm)_owner).Style;                  //}                    _control.Size = new Size(_owner.Size.Width' _control.Height);                  _control.Location = new Point(_owner.Location.X' _owner.Location.Y + (_owner.Height - _control.Height) / 2);                  _control.ArrangeApperance();                  int _overlaySizes = Convert.ToInt32(Math.Floor(_control.Size.Height * 0.28));                  //_control.OverlayPanelTop.Size = new Size(_control.Size.Width' _overlaySizes - 30);                  //_control.OverlayPanelBottom.Size = new Size(_control.Size.Width' _overlaySizes);                    _control.ShowDialog();                  _control.BringToFront();                  _control.SetDefaultButton();                    Action<MetroMessageBoxControl> _delegate = new Action<MetroMessageBoxControl>(ModalState);                  IAsyncResult _asyncresult = _delegate.BeginInvoke(_control' null' _delegate);                  bool _cancelled = false;                    try                  {                      while (!_asyncresult.IsCompleted)                      { Thread.Sleep(1); Application.DoEvents(); }                  }                  catch                  {                      _cancelled = true;                        if (!_asyncresult.IsCompleted)                      {                          try { _asyncresult = null; }                          catch { }                      }                        _delegate = null;                  }                    if (!_cancelled)                  {                      _result = _control.Result;                      //_owner.Controls.Remove(_control);                      _control.Dispose(); _control = null;                  }                }
Magic Number,MetroFramework,MetroMessageBox,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBox.cs,Show,The following statement contains a magic number: if (owner != null)              {                  Form _owner;                    try                  {                      _owner = (Form)owner;                  }                  catch                  {                      _owner = ((UserControl)owner).ParentForm;                  }                    //int _minWidth = 500;                  //int _minHeight = 350;                    //if (_owner.Size.Width < _minWidth ||                  //    _owner.Size.Height < _minHeight)                  //{                  //    if (_owner.Size.Width < _minWidth && _owner.Size.Height < _minHeight) {                  //            _owner.Size = new Size(_minWidth' _minHeight);                  //    }                  //    else                  //    {                  //        if (_owner.Size.Width < _minWidth) _owner.Size = new Size(_minWidth' _owner.Size.Height);                  //        else _owner.Size = new Size(_owner.Size.Width' _minHeight);                  //    }                    //    int x = Convert.ToInt32(Math.Ceiling((decimal)(Screen.PrimaryScreen.WorkingArea.Size.Width / 2) - (_owner.Size.Width / 2)));                  //    int y = Convert.ToInt32(Math.Ceiling((decimal)(Screen.PrimaryScreen.WorkingArea.Size.Height / 2) - (_owner.Size.Height / 2)));                  //    _owner.Location = new Point(x' y);                  //}                    switch (icon)                  {                      case MessageBoxIcon.Error:                          SystemSounds.Hand.Play(); break;                      case MessageBoxIcon.Exclamation:                          SystemSounds.Exclamation.Play(); break;                      case MessageBoxIcon.Question:                          SystemSounds.Beep.Play(); break;                      default:                          SystemSounds.Asterisk.Play(); break;                  }                    MetroMessageBoxControl _control = new MetroMessageBoxControl();                  _control.BackColor = _owner.BackColor;                  _control.Properties.Buttons = buttons;                  _control.Properties.DefaultButton = defaultbutton;                  _control.Properties.Icon = icon;                  _control.Properties.Message = message;                  _control.Properties.Title = title;                  _control.Padding = new Padding(0' 0' 0' 0);                  _control.ControlBox = false;                  _control.ShowInTaskbar = false;                  //_owner.Controls.Add(_control);                  //if (_owner is IMetroForm)                  //{                  //    //if (((MetroForm)_owner).DisplayHeader)                  //    //{                  //    //    _offset += 30;                  //    //}                  //    _control.Theme = ((MetroForm)_owner).Theme;                  //    _control.Style = ((MetroForm)_owner).Style;                  //}                    _control.Size = new Size(_owner.Size.Width' _control.Height);                  _control.Location = new Point(_owner.Location.X' _owner.Location.Y + (_owner.Height - _control.Height) / 2);                  _control.ArrangeApperance();                  int _overlaySizes = Convert.ToInt32(Math.Floor(_control.Size.Height * 0.28));                  //_control.OverlayPanelTop.Size = new Size(_control.Size.Width' _overlaySizes - 30);                  //_control.OverlayPanelBottom.Size = new Size(_control.Size.Width' _overlaySizes);                    _control.ShowDialog();                  _control.BringToFront();                  _control.SetDefaultButton();                    Action<MetroMessageBoxControl> _delegate = new Action<MetroMessageBoxControl>(ModalState);                  IAsyncResult _asyncresult = _delegate.BeginInvoke(_control' null' _delegate);                  bool _cancelled = false;                    try                  {                      while (!_asyncresult.IsCompleted)                      { Thread.Sleep(1); Application.DoEvents(); }                  }                  catch                  {                      _cancelled = true;                        if (!_asyncresult.IsCompleted)                      {                          try { _asyncresult = null; }                          catch { }                      }                        _delegate = null;                  }                    if (!_cancelled)                  {                      _result = _control.Result;                      //_owner.Controls.Remove(_control);                      _control.Dispose(); _control = null;                  }                }
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.panelbody.Size = new System.Drawing.Size(804' 211);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.panelbody.Size = new System.Drawing.Size(804' 211);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.panelbody.TabIndex = 2;
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.tlpBody.ColumnCount = 3;
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.tlpBody.Controls.Add(this.messageLabel' 1' 2);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.tlpBody.Controls.Add(this.pnlBottom' 1' 3);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.tlpBody.RowCount = 4;
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.tlpBody.Size = new System.Drawing.Size(804' 211);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.tlpBody.Size = new System.Drawing.Size(804' 211);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.tlpBody.TabIndex = 6;
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.messageLabel.Location = new System.Drawing.Point(83' 30);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.messageLabel.Location = new System.Drawing.Point(83' 30);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.messageLabel.Margin = new System.Windows.Forms.Padding(3' 0' 0' 0);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.messageLabel.Size = new System.Drawing.Size(640' 141);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.messageLabel.Size = new System.Drawing.Size(640' 141);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.titleLabel.Location = new System.Drawing.Point(80' 5);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.titleLabel.Location = new System.Drawing.Point(80' 5);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.titleLabel.Size = new System.Drawing.Size(125' 25);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.titleLabel.Size = new System.Drawing.Size(125' 25);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.metroButton1.Location = new System.Drawing.Point(357' 1);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.metroButton1.Size = new System.Drawing.Size(90' 26);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.metroButton1.Size = new System.Drawing.Size(90' 26);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.metroButton1.TabIndex = 3;
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.metroButton3.Location = new System.Drawing.Point(553' 1);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.metroButton3.Size = new System.Drawing.Size(90' 26);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.metroButton3.Size = new System.Drawing.Size(90' 26);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.metroButton3.TabIndex = 5;
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.metroButton2.Location = new System.Drawing.Point(455' 1);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.metroButton2.Size = new System.Drawing.Size(90' 26);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.metroButton2.Size = new System.Drawing.Size(90' 26);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.metroButton2.TabIndex = 4;
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.pnlBottom.Location = new System.Drawing.Point(80' 171);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.pnlBottom.Location = new System.Drawing.Point(80' 171);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.pnlBottom.Size = new System.Drawing.Size(643' 40);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.pnlBottom.Size = new System.Drawing.Size(643' 40);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.pnlBottom.TabIndex = 2;
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(804' 211);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(804' 211);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,MetroFramework,MetroMessageBoxControl,C:\repos\waylaidwanderer_Mist\MetroFramework\MessageBox\MetroMessageBoxControl.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,MetroFramework.Native,SubClass,C:\repos\waylaidwanderer_Mist\MetroFramework\Native\SubClass.cs,HiWord,The following statement contains a magic number: return ((Number >> 16) & 0xffff);
Magic Number,MetroFramework.Native,SubClass,C:\repos\waylaidwanderer_Mist\MetroFramework\Native\SubClass.cs,MakeLong,The following statement contains a magic number: return (HiWord << 16) | (LoWord & 0xffff);
Magic Number,MetroFramework.Native,SubClass,C:\repos\waylaidwanderer_Mist\MetroFramework\Native\SubClass.cs,MakeLParam,The following statement contains a magic number: return (IntPtr)((HiWord << 16) | (LoWord & 0xffff));
Magic Number,MetroFramework.Native,WinApi,C:\repos\waylaidwanderer_Mist\MetroFramework\Native\WinApi.cs,HiWord,The following statement contains a magic number: return (dwValue >> 16) & 0xffff;
Missing Default,MetroFramework.Controls,MetroTabControl,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTabControl.cs,scUpDown_SubClassedWndProc,The following switch statement is missing a default case: switch (m.Msg)              {                  case (int)WinApi.Messages.WM_PAINT:                        IntPtr hDC = WinApi.GetWindowDC(scUpDown.Handle);                        Graphics g = Graphics.FromHdc(hDC);    					DrawUpDown(g);    					g.Dispose();                        WinApi.ReleaseDC(scUpDown.Handle' hDC);                        m.Result = IntPtr.Zero;                        Rectangle rect = new Rectangle();                        WinApi.GetClientRect(scUpDown.Handle' ref rect);                      WinApi.ValidateRect(scUpDown.Handle' ref rect);                        return 1;              }
Missing Default,MetroFramework.Controls,PromptedTextBox,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTextBox.cs,DrawTextPrompt,The following switch statement is missing a default case: switch (TextAlign)                  {                      case HorizontalAlignment.Left:                          clientRectangle.Offset(1' 1);                          break;                        case HorizontalAlignment.Right:                          flags |= TextFormatFlags.Right;                          clientRectangle.Offset(0' 1);                          break;                        case HorizontalAlignment.Center:                          flags |= TextFormatFlags.HorizontalCenter;                          clientRectangle.Offset(0' 1);                          break;                  }
Missing Default,MetroFramework.Controls,MetroTrackBar,C:\repos\waylaidwanderer_Mist\MetroFramework\Controls\MetroTrackBar.cs,OnKeyUp,The following switch statement is missing a default case: switch (e.KeyCode)              {                  case Keys.Down:                  case Keys.Left:                      SetProperValue(Value - (int)smallChange);                      OnScroll(ScrollEventType.SmallDecrement' Value);                      break;                  case Keys.Up:                  case Keys.Right:                      SetProperValue(Value + (int)smallChange);                      OnScroll(ScrollEventType.SmallIncrement' Value);                      break;                  case Keys.Home:                      Value = barMinimum;                      break;                  case Keys.End:                      Value = barMaximum;                      break;                  case Keys.PageDown:                      SetProperValue(Value - (int)largeChange);                      OnScroll(ScrollEventType.LargeDecrement' Value);                      break;                  case Keys.PageUp:                      SetProperValue(Value + (int)largeChange);                      OnScroll(ScrollEventType.LargeIncrement' Value);                      break;              }
Missing Default,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,GetBorderPath,The following switch statement is missing a default case: switch (border)              {                  case Border.Top:                      bwidth = b.ActualBorderTopWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerNE' r.Top + bwidth)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerNW' r.Top + bwidth)' b);                        if (isLineEnd && b.ActualCornerNE == 0f) pts[2].X -= b.ActualBorderRightWidth;                      if (isLineStart && b.ActualCornerNW == 0f) pts[3].X += b.ActualBorderLeftWidth;                        if (b.ActualCornerNW > 0f) corner = CreateCorner(b' r' 1);                                            break;                  case Border.Right:                      bwidth = b.ActualBorderRightWidth;                      pts[0] = RoundP(new PointF(r.Right - bwidth' r.Top + b.ActualCornerNE)' b);                      pts[1] = RoundP(new PointF(r.Right' r.Top + b.ActualCornerNE)' b);                      pts[2] = RoundP(new PointF(r.Right' r.Bottom - b.ActualCornerSE)' b);                      pts[3] = RoundP(new PointF(r.Right - bwidth' r.Bottom - b.ActualCornerSE)' b);                                                                 if (b.ActualCornerNE == 0f) pts[0].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSE == 0f) pts[3].Y -= b.ActualBorderBottomWidth;                       if (b.ActualCornerNE > 0f) corner = CreateCorner(b' r' 2);                      break;                  case Border.Bottom:                      bwidth = b.ActualBorderBottomWidth;                      pts[0] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom - bwidth)' b);                      pts[1] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom - bwidth)' b);                      pts[2] = RoundP(new PointF(r.Right - b.ActualCornerSE' r.Bottom)' b);                      pts[3] = RoundP(new PointF(r.Left + b.ActualCornerSW' r.Bottom)' b);                        if (isLineStart && b.ActualCornerSW == 0f) pts[0].X += b.ActualBorderLeftWidth;                      if (isLineEnd && b.ActualCornerSE == 0f) pts[1].X -= b.ActualBorderRightWidth;                        if (b.ActualCornerSE > 0f) corner = CreateCorner(b' r' 3);                      break;                  case Border.Left:                      bwidth = b.ActualBorderLeftWidth;                      pts[0] = RoundP(new PointF(r.Left' r.Top + b.ActualCornerNW)' b);                      pts[1] = RoundP(new PointF(r.Left + bwidth' r.Top + b.ActualCornerNW)' b);                      pts[2] = RoundP(new PointF(r.Left + bwidth' r.Bottom - b.ActualCornerSW)' b);                      pts[3] = RoundP(new PointF(r.Left' r.Bottom - b.ActualCornerSW)' b);                        if (b.ActualCornerNW == 0f) pts[1].Y += b.ActualBorderTopWidth;                      if (b.ActualCornerSW == 0f) pts[2].Y -= b.ActualBorderBottomWidth;                        if (b.ActualCornerSW > 0f) corner = CreateCorner(b' r' 4);                      break;              }
Missing Default,MetroFramework.Drawing.Html,CssDrawingHelper,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssDrawingHelper.cs,CreateCorner,The following switch statement is missing a default case: switch (cornerIndex)              {                  case 1:                      outer = new RectangleF(r.Left' r.Top' b.ActualCornerNW' b.ActualCornerNW);                      inner = RectangleF.FromLTRB(outer.Left + b.ActualBorderLeftWidth' outer.Top + b.ActualBorderTopWidth' outer.Right' outer.Bottom);                      start1 = 180;                      start2 = 270;                      break;                  case 2:                      outer = new RectangleF(r.Right - b.ActualCornerNE' r.Top' b.ActualCornerNE' b.ActualCornerNE);                      inner = RectangleF.FromLTRB(outer.Left' outer.Top + b.ActualBorderTopWidth' outer.Right - b.ActualBorderRightWidth' outer.Bottom);                      outer.X -= outer.Width;                      inner.X -= inner.Width;                      start1 = -90;                      start2 = 0;                      break;                  case 3:                      outer = RectangleF.FromLTRB(r.Right - b.ActualCornerSE' r.Bottom - b.ActualCornerSE' r.Right' r.Bottom);                      inner = new RectangleF(outer.Left' outer.Top' outer.Width - b.ActualBorderRightWidth' outer.Height - b.ActualBorderBottomWidth);                      outer.X -= outer.Width;                      outer.Y -= outer.Height;                      inner.X -= inner.Width;                      inner.Y -= inner.Height;                      start1 = 0;                      start2 = 90;                      break;                  case 4:                      outer = new RectangleF(r.Left' r.Bottom - b.ActualCornerSW' b.ActualCornerSW' b.ActualCornerSW);                      inner = RectangleF.FromLTRB( r.Left + b.ActualBorderLeftWidth ' outer.Top ' outer.Right' outer.Bottom - b.ActualBorderBottomWidth);                      start1 = 90;                      start2 = 180;                      outer.Y -= outer.Height;                      inner.Y -= inner.Height;                      break;              }
Missing Default,MetroFramework.Drawing.Html,CssLength,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssLength.cs,ToString,The following switch statement is missing a default case: switch (Unit)                  {                      case CssUnit.None:                          break;                      case CssUnit.Ems:                          u = "em";                          break;                      case CssUnit.Pixels:                          u = "px";                          break;                      case CssUnit.Ex:                          u = "ex";                          break;                      case CssUnit.Inches:                          u = "in";                          break;                      case CssUnit.Centimeters:                          u = "cm";                          break;                      case CssUnit.Milimeters:                          u = "mm";                          break;                      case CssUnit.Points:                          u = "pt";                          break;                      case CssUnit.Picas:                          u = "pc";                          break;                  }
Missing Default,MetroFramework.Drawing.Html,CssValue,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\CssValue.cs,GetActualColor,The following switch statement is missing a default case: switch (colorValue)                  {                      case CssConstants.Maroon:                          hex = "#800000"; break;                      case CssConstants.Red:                          hex = "#ff0000"; break;                      case CssConstants.Orange:                          hex = "#ffA500"; break;                      case CssConstants.Olive:                          hex = "#808000"; break;                      case CssConstants.Purple:                          hex = "#800080"; break;                      case CssConstants.Fuchsia:                          hex = "#ff00ff"; break;                      case CssConstants.White:                          hex = "#ffffff"; break;                      case CssConstants.Lime:                          hex = "#00ff00"; break;                      case CssConstants.Green:                          hex = "#008000"; break;                      case CssConstants.Navy:                          hex = "#000080"; break;                      case CssConstants.Blue:                          hex = "#0000ff"; break;                      case CssConstants.Aqua:                          hex = "#00ffff"; break;                      case CssConstants.Teal:                          hex = "#008080"; break;                      case CssConstants.Black:                          hex = "#000000"; break;                      case CssConstants.Silver:                          hex = "#c0c0c0"; break;                      case CssConstants.Gray:                          hex = "#808080"; break;                      case CssConstants.Yellow:                          hex = "#FFFF00"; break;                  }
Missing Default,MetroFramework.Drawing.Html,HtmlTag,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\Html\HtmlTag.cs,TranslateAttributes,The following switch statement is missing a default case: switch (att)                  {                      case HtmlConstants.align:                          if (value == HtmlConstants.left || value == HtmlConstants.center || value == HtmlConstants.right || value == HtmlConstants.justify)                              box.TextAlign = value;                          else                              box.VerticalAlign = value;                          break;                      case HtmlConstants.background:                              box.BackgroundImage = value;                          break;                      case HtmlConstants.bgcolor:                          box.BackgroundColor = value;                          break;                      case HtmlConstants.border:                          box.BorderWidth = TranslateLength(value);                                                    if (t == HtmlConstants.TABLE)                          {                              ApplyTableBorder(box' value);                          }                          else                          {                              box.BorderStyle = CssConstants.Solid;                          }                          break;                      case HtmlConstants.bordercolor:                          box.BorderColor = value;                          break;                      case HtmlConstants.cellspacing:                          box.BorderSpacing = TranslateLength(value);                          break;                      case HtmlConstants.cellpadding:                          ApplyTablePadding(box' value);                          break;                      case HtmlConstants.color:                          box.Color = value;                          break;                      case HtmlConstants.dir:                          box.Direction = value;                          break;                      case HtmlConstants.face:                          box.FontFamily = value;                          break;                      case HtmlConstants.height:                          box.Height = TranslateLength(value);                          break;                      case HtmlConstants.hspace:                          box.MarginRight = box.MarginLeft = TranslateLength(value);                          break;                      case HtmlConstants.nowrap:                          box.WhiteSpace = CssConstants.Nowrap;                          break;                      case HtmlConstants.size:                          if (t == HtmlConstants.HR)                              box.Height = TranslateLength(value);                          break;                      case HtmlConstants.valign:                          box.VerticalAlign = value;                          break;                      case HtmlConstants.vspace:                          box.MarginTop = box.MarginBottom = TranslateLength(value);                          break;                      case HtmlConstants.width:                          box.Width = TranslateLength(value);                          break;                    }
Missing Default,MetroFramework.Drawing,MetroPaint,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,GetStringFormat,The following switch statement is missing a default case: switch (textAlign)              {                  case ContentAlignment.TopLeft:                      stringFormat.Alignment = StringAlignment.Near;                      stringFormat.LineAlignment = StringAlignment.Near;                      break;                  case ContentAlignment.TopCenter:                      stringFormat.Alignment = StringAlignment.Center;                      stringFormat.LineAlignment = StringAlignment.Near;                      break;                  case ContentAlignment.TopRight:                      stringFormat.Alignment = StringAlignment.Far;                      stringFormat.LineAlignment = StringAlignment.Near;                      break;                    case ContentAlignment.MiddleLeft:                      stringFormat.Alignment = StringAlignment.Center;                      stringFormat.LineAlignment = StringAlignment.Near;                      break;                  case ContentAlignment.MiddleCenter:                      stringFormat.Alignment = StringAlignment.Center;                      stringFormat.LineAlignment = StringAlignment.Center;                      break;                  case ContentAlignment.MiddleRight:                      stringFormat.Alignment = StringAlignment.Center;                      stringFormat.LineAlignment = StringAlignment.Far;                      break;                    case ContentAlignment.BottomLeft:                      stringFormat.Alignment = StringAlignment.Far;                      stringFormat.LineAlignment = StringAlignment.Near;                      break;                  case ContentAlignment.BottomCenter:                      stringFormat.Alignment = StringAlignment.Far;                      stringFormat.LineAlignment = StringAlignment.Center;                      break;                  case ContentAlignment.BottomRight:                      stringFormat.Alignment = StringAlignment.Far;                      stringFormat.LineAlignment = StringAlignment.Far;                      break;              }
Missing Default,MetroFramework.Drawing,MetroPaint,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,GetTextFormatFlags,The following switch statement is missing a default case: switch (WrapToLine)              {                  case true:                      controlFlags = TextFormatFlags.WordBreak;                      break;                  case false:                      controlFlags = TextFormatFlags.EndEllipsis;                      break;              }
Missing Default,MetroFramework.Drawing,MetroPaint,C:\repos\waylaidwanderer_Mist\MetroFramework\Drawing\MetroPaint.cs,GetTextFormatFlags,The following switch statement is missing a default case: switch (textAlign)              {                  case ContentAlignment.TopLeft:                      controlFlags |= TextFormatFlags.Top | TextFormatFlags.Left;                      break;                  case ContentAlignment.TopCenter:                      controlFlags |= TextFormatFlags.Top | TextFormatFlags.HorizontalCenter;                      break;                  case ContentAlignment.TopRight:                      controlFlags |= TextFormatFlags.Top | TextFormatFlags.Right;                      break;                    case ContentAlignment.MiddleLeft:                      controlFlags |= TextFormatFlags.VerticalCenter | TextFormatFlags.Left;                      break;                  case ContentAlignment.MiddleCenter:                      controlFlags |= TextFormatFlags.VerticalCenter | TextFormatFlags.HorizontalCenter;                      break;                  case ContentAlignment.MiddleRight:                      controlFlags |= TextFormatFlags.VerticalCenter | TextFormatFlags.Right;                      break;                    case ContentAlignment.BottomLeft:                      controlFlags |= TextFormatFlags.Bottom | TextFormatFlags.Left;                      break;                  case ContentAlignment.BottomCenter:                      controlFlags |= TextFormatFlags.Bottom | TextFormatFlags.HorizontalCenter;                      break;                  case ContentAlignment.BottomRight:                      controlFlags |= TextFormatFlags.Bottom | TextFormatFlags.Right;                      break;              }
Missing Default,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnPaint,The following switch statement is missing a default case: switch (backLocation)                  {                      case BackLocation.TopLeft:                          e.Graphics.DrawImage(img' 0 + backImagePadding.Left' 0 + backImagePadding.Top);                          break;                      case BackLocation.TopRight:                          e.Graphics.DrawImage(img' ClientRectangle.Right - (backImagePadding.Right + img.Width)' 0 + backImagePadding.Top);                          break;                      case BackLocation.BottomLeft:                          e.Graphics.DrawImage(img' 0 + backImagePadding.Left' ClientRectangle.Bottom - (img.Height + backImagePadding.Bottom));                          break;                      case BackLocation.BottomRight:                          e.Graphics.DrawImage(img' ClientRectangle.Right - (backImagePadding.Right + img.Width)'                                               ClientRectangle.Bottom - (img.Height + backImagePadding.Bottom));                          break;                  }
Missing Default,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,GetTextFormatFlags,The following switch statement is missing a default case: switch (TextAlign)              {                  case MetroFormTextAlign.Left: return TextFormatFlags.Left;                  case MetroFormTextAlign.Center: return TextFormatFlags.HorizontalCenter;                  case MetroFormTextAlign.Right: return TextFormatFlags.Right;              }
Missing Default,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,OnLoad,The following switch statement is missing a default case: switch (StartPosition)              {                  case FormStartPosition.CenterParent:                      CenterToParent();                      break;                  case FormStartPosition.CenterScreen:                      if (IsMdiChild)                      {                          CenterToParent();                       }                      else                       {                          CenterToScreen();                      }                      break;              }
Missing Default,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg)              {                  case (int)WinApi.Messages.WM_SYSCOMMAND:                      int sc = m.WParam.ToInt32() & 0xFFF0;                      switch (sc)                      {                          case (int)WinApi.Messages.SC_MOVE:                               if (!Movable) return;                               break;                          case (int)WinApi.Messages.SC_MAXIMIZE:                               break;                          case (int)WinApi.Messages.SC_RESTORE:                              break;                      }                      break;                    case (int)WinApi.Messages.WM_NCLBUTTONDBLCLK:                  case (int)WinApi.Messages.WM_LBUTTONDBLCLK:                      if (!MaximizeBox) return;                      break;                    case (int)WinApi.Messages.WM_NCHITTEST:                      WinApi.HitTest ht = HitTestNCA(m.HWnd' m.WParam' m.LParam);                      if (ht != WinApi.HitTest.HTCLIENT)                      {                          m.Result = (IntPtr)ht;                          return;                      }                      break;                    case (int)WinApi.Messages.WM_DWMCOMPOSITIONCHANGED:                      break;              }
Missing Default,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,WndProc,The following switch statement is missing a default case: switch (sc)                      {                          case (int)WinApi.Messages.SC_MOVE:                               if (!Movable) return;                               break;                          case (int)WinApi.Messages.SC_MAXIMIZE:                               break;                          case (int)WinApi.Messages.SC_RESTORE:                              break;                      }
Missing Default,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg)              {                  case (int)WinApi.Messages.WM_GETMINMAXINFO:                      OnGetMinMaxInfo(m.HWnd' m.LParam);                      break;              }
Missing Default,MetroFramework.Forms,MetroForm,C:\repos\waylaidwanderer_Mist\MetroFramework\Forms\MetroForm.cs,CreateShadow,The following switch statement is missing a default case: switch (ShadowType)              {                  case MetroFormShadowType.Flat:                      shadowForm = new MetroFlatDropShadow(this);                      return;                    case MetroFormShadowType.DropShadow:                      shadowForm = new MetroRealisticDropShadow(this);                      return;              }
