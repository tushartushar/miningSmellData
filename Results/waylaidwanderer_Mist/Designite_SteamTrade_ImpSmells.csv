Implementation smell,Namespace,Class,File,Method,Description
Long Method,SteamTrade,Trade,C:\repos\waylaidwanderer_Mist\SteamTrade\Trade.cs,Poll,The method has 100 lines of code.
Complex Method,SteamTrade,Trade,C:\repos\waylaidwanderer_Mist\SteamTrade\Trade.cs,Poll,Cyclomatic complexity of the method is 12
Long Parameter List,SteamTrade,GenericInventory,C:\repos\waylaidwanderer_Mist\SteamTrade\GenericInventory.cs,FetchInventory,The method has 5 parameters. Parameters: inventoryUrl' steamId' botId' appId' contextId
Long Parameter List,SteamTrade,GenericItem,C:\repos\waylaidwanderer_Mist\SteamTrade\GenericInventory.cs,GenericItem,The method has 5 parameters. Parameters: appId' contextId' itemId' amount' isCurrency
Long Parameter List,SteamTrade,Trade,C:\repos\waylaidwanderer_Mist\SteamTrade\Trade.cs,Trade,The method has 6 parameters. Parameters: me' other' sessionId' token' myInventory' otherInventory
Long Parameter List,SteamTrade,Trade,C:\repos\waylaidwanderer_Mist\SteamTrade\Trade.cs,AddItem,The method has 5 parameters. Parameters: itemid' appid' contextid' amount' iscurrency
Long Parameter List,SteamTrade,Trade,C:\repos\waylaidwanderer_Mist\SteamTrade\Trade.cs,RemoveItem,The method has 5 parameters. Parameters: itemid' appid' contextid' amount' iscurrency
Long Parameter List,SteamTrade,Trade,C:\repos\waylaidwanderer_Mist\SteamTrade\Trade.cs,GetItemSlot,The method has 5 parameters. Parameters: itemid' appid' contextid' amount' iscurrency
Long Parameter List,SteamTrade,SteamWeb,C:\repos\waylaidwanderer_Mist\SteamTrade\SteamWeb.cs,Fetch,The method has 6 parameters. Parameters: url' method' data' cookies' ajax' referer
Long Parameter List,SteamTrade,SteamWeb,C:\repos\waylaidwanderer_Mist\SteamTrade\SteamWeb.cs,Request,The method has 6 parameters. Parameters: url' method' data' cookies' ajax' referer
Long Parameter List,SteamTrade,SteamWeb,C:\repos\waylaidwanderer_Mist\SteamTrade\SteamWeb.cs,Authenticate,The method has 5 parameters. Parameters: callback' client' sessionId' token' MyLoginKey
Long Parameter List,SteamTrade.TradeWebAPI,TradeSession,C:\repos\waylaidwanderer_Mist\SteamTrade\TradeWebAPI\TradeSession.cs,AddItemWebCmd,The method has 5 parameters. Parameters: itemid' slot' appid' contextid' amount
Long Parameter List,SteamTrade.TradeWebAPI,TradeSession,C:\repos\waylaidwanderer_Mist\SteamTrade\TradeWebAPI\TradeSession.cs,RemoveItemWebCmd,The method has 5 parameters. Parameters: itemid' slot' appid' contextid' amount
Long Identifier,SteamTrade,GenericInventory,C:\repos\waylaidwanderer_Mist\SteamTrade\GenericInventory.cs,,The length of the parameter WEB_REQUEST_TIME_BETWEEN_RETRIES_MS is 35.
Long Identifier,SteamTrade,Trade,C:\repos\waylaidwanderer_Mist\SteamTrade\Trade.cs,,The length of the parameter WEB_REQUEST_TIME_BETWEEN_RETRIES_MS is 35.
Long Statement,SteamTrade,GenericInventory,C:\repos\waylaidwanderer_Mist\SteamTrade\GenericInventory.cs,FetchForeignInventory,The length of the statement  "            string inventoryUrl = string.Format("http://steamcommunity.com/trade/{0}/foreigninventory/?sessionid={1}&steamid={2}&appid={3}&contextid={4}"' steamId.ConvertToUInt64()' GetSessionId(botId)' steamId.ConvertToUInt64()' appId' contextId); " is 236.
Long Statement,SteamTrade,Trade,C:\repos\waylaidwanderer_Mist\SteamTrade\Trade.cs,AddItem,The length of the statement  "            return AddItem(new TradeUserAssets() { assetid = item.Id' appid = item.AppId' contextid = item.ContextId' amount = amount' iscurrency = item.IsCurrency }); " is 155.
Long Statement,SteamTrade,Trade,C:\repos\waylaidwanderer_Mist\SteamTrade\Trade.cs,AddItem,The length of the statement  "            return AddItem(new TradeUserAssets() { assetid = itemid' appid = appid' contextid = contextid' amount = amount' iscurrency = iscurrency }); " is 139.
Long Statement,SteamTrade,Trade,C:\repos\waylaidwanderer_Mist\SteamTrade\Trade.cs,AddItem,The length of the statement  "                steamMyOfferedItems[slot] = new GenericInventory.GenericItem(item.appid' item.contextid' item.assetid' item.amount' item.iscurrency); " is 133.
Long Statement,SteamTrade,Trade,C:\repos\waylaidwanderer_Mist\SteamTrade\Trade.cs,CopyNewAssets,The length of the statement  "                var genericItem = new GenericInventory.GenericItem(asset.appid' asset.contextid' asset.assetid' asset.amount' asset.iscurrency); " is 128.
Long Statement,SteamTrade,Trade,C:\repos\waylaidwanderer_Mist\SteamTrade\Trade.cs,FireOnUserAddItem,The length of the statement  "            var item = OtherInventory.GetItem(tradeEvent.appid' tradeEvent.contextid' isCurrency ? tradeEvent.currencyid : tradeEvent.assetid' isCurrency); " is 143.
Long Statement,SteamTrade,Trade,C:\repos\waylaidwanderer_Mist\SteamTrade\Trade.cs,FireOnUserAddItem,The length of the statement  "                OtherInventory.AddForeignInventory(new SteamID(Convert.ToUInt64(tradeEvent.steamid))' botId' tradeEvent.appid' tradeEvent.contextid); " is 133.
Long Statement,SteamTrade,Trade,C:\repos\waylaidwanderer_Mist\SteamTrade\Trade.cs,FireOnUserAddItem,The length of the statement  "                item = OtherInventory.GetItem(tradeEvent.appid' tradeEvent.contextid' isCurrency ? tradeEvent.currencyid : tradeEvent.assetid' isCurrency);                 " is 139.
Long Statement,SteamTrade,Trade,C:\repos\waylaidwanderer_Mist\SteamTrade\Trade.cs,FireOnUserRemoveItem,The length of the statement  "            var item = OtherInventory.GetItem(tradeEvent.appid' tradeEvent.contextid' isCurrency ? tradeEvent.currencyid : tradeEvent.assetid' isCurrency); " is 143.
Long Statement,SteamTrade,Trade,C:\repos\waylaidwanderer_Mist\SteamTrade\Trade.cs,FireOnUserRemoveItem,The length of the statement  "                OtherInventory.AddForeignInventory(new SteamID(Convert.ToUInt64(tradeEvent.steamid))' botId' tradeEvent.appid' tradeEvent.contextid); " is 133.
Long Statement,SteamTrade,Trade,C:\repos\waylaidwanderer_Mist\SteamTrade\Trade.cs,FireOnUserRemoveItem,The length of the statement  "                item = OtherInventory.GetItem(tradeEvent.appid' tradeEvent.contextid' isCurrency ? tradeEvent.currencyid : tradeEvent.assetid' isCurrency); " is 139.
Long Statement,SteamTrade,SteamWeb,C:\repos\waylaidwanderer_Mist\SteamTrade\SteamWeb.cs,Request,The length of the statement  "            request.UserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/31.0.1650.57 Safari/537.36"; " is 131.
Long Statement,SteamTrade.TradeWebAPI,TradeSession,C:\repos\waylaidwanderer_Mist\SteamTrade\TradeWebAPI\TradeSession.cs,IsSuccess,The length of the statement  "                //I believe this is Steam's way of asking the trade window (which is actually a webpage) to refresh' following a large successful update " is 136.
Magic Number,SteamTrade,TF2Inventory,C:\repos\waylaidwanderer_Mist\SteamTrade\Inventories\TF2Inventory.cs,IsFreeToPlay,The following statement contains a magic number: return this.NumSlots % 100 == 50;
Magic Number,SteamTrade,TF2Inventory,C:\repos\waylaidwanderer_Mist\SteamTrade\Inventories\TF2Inventory.cs,IsFreeToPlay,The following statement contains a magic number: return this.NumSlots % 100 == 50;
Magic Number,SteamTrade,Dota2Schema,C:\repos\waylaidwanderer_Mist\SteamTrade\Schemas\Dota2Schema.cs,FetchSchema,The following statement contains a magic number: if (!wasCreated)              {                  bool signaled = mre.WaitOne(10000);                    if (!signaled)                  {                      return null;                  }              }
Magic Number,SteamTrade,TF2Schema,C:\repos\waylaidwanderer_Mist\SteamTrade\Schemas\TF2Schema.cs,FetchSchema,The following statement contains a magic number: if (!wasCreated)              {                  bool signaled = mre.WaitOne(10000);                    if (!signaled)                  {                      return null;                  }              }
Magic Number,SteamTrade,SteamWeb,C:\repos\waylaidwanderer_Mist\SteamTrade\SteamWeb.cs,Fetch,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  try                  {                      HttpWebResponse response = Request(url' method' data' cookies' ajax' referer);                      using (Stream responseStream = response.GetResponseStream())                      {                          using (StreamReader reader = new StreamReader(responseStream))                          {                              return reader.ReadToEnd();                          }                      }                  }                  catch                  {                      System.Threading.Thread.Sleep(2000);                  }              }
Magic Number,SteamTrade,SteamWeb,C:\repos\waylaidwanderer_Mist\SteamTrade\SteamWeb.cs,Fetch,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  try                  {                      HttpWebResponse response = Request(url' method' data' cookies' ajax' referer);                      using (Stream responseStream = response.GetResponseStream())                      {                          using (StreamReader reader = new StreamReader(responseStream))                          {                              return reader.ReadToEnd();                          }                      }                  }                  catch                  {                      System.Threading.Thread.Sleep(2000);                  }              }
Magic Number,SteamTrade,SteamWeb,C:\repos\waylaidwanderer_Mist\SteamTrade\SteamWeb.cs,Request,The following statement contains a magic number: request.Timeout = 50000;
Magic Number,SteamTrade,SteamWeb,C:\repos\waylaidwanderer_Mist\SteamTrade\SteamWeb.cs,Authenticate,The following statement contains a magic number: using (dynamic userAuth = WebAPI.GetInterface ("ISteamUserAuth"))              {                  // generate an AES session key                  var sessionKey = CryptoHelper.GenerateRandomBlock (32);                                    // rsa encrypt it with the public key for the universe we're on                  byte[] cryptedSessionKey = null;                  using (RSACrypto rsa = new RSACrypto (KeyDictionary.GetPublicKey (client.ConnectedUniverse)))                  {                      cryptedSessionKey = rsa.Encrypt (sessionKey);                  }                                                      byte[] loginKey = new byte[20];                  Array.Copy(Encoding.ASCII.GetBytes(MyLoginKey)' loginKey' MyLoginKey.Length);                                    // aes encrypt the loginkey with our session key                  byte[] cryptedLoginKey = CryptoHelper.SymmetricEncrypt (loginKey' sessionKey);                                    KeyValue authResult;                                    try                  {                      authResult = userAuth.AuthenticateUser (                          steamid: client.SteamID.ConvertToUInt64 ()'                          sessionkey: HttpUtility.UrlEncode (cryptedSessionKey)'                          encrypted_loginkey: HttpUtility.UrlEncode (cryptedLoginKey)'                          method: "POST"                          );                  }                  catch (Exception)                  {                      token = null;                      return false;                  }                                    token = authResult ["token"].AsString ();                                    return true;              }
Magic Number,SteamTrade,SteamWeb,C:\repos\waylaidwanderer_Mist\SteamTrade\SteamWeb.cs,Authenticate,The following statement contains a magic number: using (dynamic userAuth = WebAPI.GetInterface ("ISteamUserAuth"))              {                  // generate an AES session key                  var sessionKey = CryptoHelper.GenerateRandomBlock (32);                                    // rsa encrypt it with the public key for the universe we're on                  byte[] cryptedSessionKey = null;                  using (RSACrypto rsa = new RSACrypto (KeyDictionary.GetPublicKey (client.ConnectedUniverse)))                  {                      cryptedSessionKey = rsa.Encrypt (sessionKey);                  }                                                      byte[] loginKey = new byte[20];                  Array.Copy(Encoding.ASCII.GetBytes(MyLoginKey)' loginKey' MyLoginKey.Length);                                    // aes encrypt the loginkey with our session key                  byte[] cryptedLoginKey = CryptoHelper.SymmetricEncrypt (loginKey' sessionKey);                                    KeyValue authResult;                                    try                  {                      authResult = userAuth.AuthenticateUser (                          steamid: client.SteamID.ConvertToUInt64 ()'                          sessionkey: HttpUtility.UrlEncode (cryptedSessionKey)'                          encrypted_loginkey: HttpUtility.UrlEncode (cryptedLoginKey)'                          method: "POST"                          );                  }                  catch (Exception)                  {                      token = null;                      return false;                  }                                    token = authResult ["token"].AsString ();                                    return true;              }
Magic Number,SteamTrade,SteamWeb,C:\repos\waylaidwanderer_Mist\SteamTrade\SteamWeb.cs,HexToByte,The following statement contains a magic number: if (hex.Length % 2 == 1)                  throw new Exception ("The binary key cannot have an odd number of digits");
Magic Number,SteamTrade,SteamWeb,C:\repos\waylaidwanderer_Mist\SteamTrade\SteamWeb.cs,HexToByte,The following statement contains a magic number: for (int i = 0; i < (l >> 1); ++i)              {                  arr [i] = (byte)((GetHexVal (hex [i << 1]) << 4) + (GetHexVal (hex [(i << 1) + 1])));              }
Magic Number,SteamTrade,SteamWeb,C:\repos\waylaidwanderer_Mist\SteamTrade\SteamWeb.cs,GetHexVal,The following statement contains a magic number: return val - (val < 58 ? 48 : 55);
Magic Number,SteamTrade,SteamWeb,C:\repos\waylaidwanderer_Mist\SteamTrade\SteamWeb.cs,GetHexVal,The following statement contains a magic number: return val - (val < 58 ? 48 : 55);
Magic Number,SteamTrade,SteamWeb,C:\repos\waylaidwanderer_Mist\SteamTrade\SteamWeb.cs,GetHexVal,The following statement contains a magic number: return val - (val < 58 ? 48 : 55);
Magic Number,SteamTrade,TradeManager,C:\repos\waylaidwanderer_Mist\SteamTrade\TradeManager.cs,StartTradeThread,The following statement contains a magic number: lastTimeoutMessage = DateTime.Now.AddSeconds(-1000);
