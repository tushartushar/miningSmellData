Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DbUp.Support.SqlServer,SqlParser,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\SqlServer\SqlParser.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,DbUp.Support.SqlServer,SqlScriptExecutor,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\SqlServer\SqlScriptExecutor.cs,Execute,Cyclomatic complexity of the method is 8
Long Parameter List,DbUp.Support.SqlServer,SqlScriptExecutor,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\SqlServer\SqlScriptExecutor.cs,SqlScriptExecutor,The method has 5 parameters.
Long Statement,DbUp.Builder,UpgradeConfiguration,F:\newReposMay17\DbUp_DbUp\src\DbUp\Builder\UpgradeConfiguration.cs,Validate,The length of the statement  "		throw new ArgumentException ("A log is required to build a database upgrader. Please use one of the logging extension methods"); " is 128.
Long Statement,DbUp.Builder,UpgradeConfiguration,F:\newReposMay17\DbUp_DbUp\src\DbUp\Builder\UpgradeConfiguration.cs,Validate,The length of the statement  "		throw new ArgumentException ("A journal is required. Please use one of the Journal extension methods before calling Build()"); " is 126.
Long Statement,DbUp.Builder,UpgradeConfiguration,F:\newReposMay17\DbUp_DbUp\src\DbUp\Builder\UpgradeConfiguration.cs,Validate,The length of the statement  "		throw new ArgumentException ("No script providers were added. Please use one of the WithScripts extension methods before calling Build()"); " is 139.
Long Statement,DbUp.Engine.Preprocessors,VariableSubstitutionSqlParser,F:\newReposMay17\DbUp_DbUp\src\DbUp\Engine\Preprocessors\VariableSubstitutionSqlParser.cs,ReplaceVariables,The length of the statement  "			throw new InvalidOperationException (string.Format (CultureInfo.CurrentCulture' "Variable {0} has no value defined"' name)); " is 124.
Long Statement,DbUp.Engine,UpgradeEngine,F:\newReposMay17\DbUp_DbUp\src\DbUp\Engine\UpgradeEngine.cs,GetScriptsToExecuteInsideOperation,The length of the statement  "	var allScripts = configuration.ScriptProviders.SelectMany (scriptProvider => scriptProvider.GetScripts (configuration.ConnectionManager)); " is 138.
Long Statement,DbUp.Helpers,AdHocSqlRunner,F:\newReposMay17\DbUp_DbUp\src\DbUp\Helpers\AdHocSqlRunner.cs,Preprocess,The length of the statement  "	query = additionalScriptPreprocessors.Aggregate (query' (current' additionalScriptPreprocessor) => additionalScriptPreprocessor.Process (current)); " is 147.
Long Statement,DbUp.ScriptProviders,EmbeddedScriptsProvider,F:\newReposMay17\DbUp_DbUp\src\DbUp\ScriptProviders\EmbeddedScriptsProvider.cs,GetScripts,The length of the statement  "	}).SelectMany (x => x.ResourceNames.Select (resourceName => SqlScript.FromStream (resourceName' x.Assembly.GetManifestResourceStream (resourceName)' this.encoding))).OrderBy (sqlScript => sqlScript.Name).ToList (); " is 214.
Long Statement,DbUp.ScriptProviders,EmbeddedScriptAndCodeProvider,F:\newReposMay17\DbUp_DbUp\src\DbUp\ScriptProviders\EmbeddedScriptAndCodeProvider.cs,ScriptsFromScriptClasses,The length of the statement  "	return connectionManager.ExecuteCommandsWithManagedConnection (dbCommandFactory => assembly.GetTypes ().Where (type => script.IsAssignableFrom (type) && type.IsClass).Select (s => (SqlScript)new LazySqlScript (s.FullName + ".cs"' () => ((IScript)Activator.CreateInstance (s)).ProvideScript (dbCommandFactory))).ToList ()); " is 322.
Long Statement,DbUp.ScriptProviders,EmbeddedScriptAndCodeProvider,F:\newReposMay17\DbUp_DbUp\src\DbUp\ScriptProviders\EmbeddedScriptAndCodeProvider.cs,GetScripts,The length of the statement  "	var sqlScripts = embeddedScriptProvider.GetScripts (connectionManager).Concat (ScriptsFromScriptClasses (connectionManager)).OrderBy (x => x.Name).ToList (); " is 157.
Long Statement,DbUp.Support.Firebird,FirebirdTableJournal,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\Firebird\FirebirdTableJournal.cs,GetExecutedScripts,The length of the statement  "		log ().WriteInformation (string.Format ("The {0} table could not be found. The database is assumed to be at version 0."' tableName)); " is 133.
Long Statement,DbUp.Support.Firebird,FirebirdTableJournal,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\Firebird\FirebirdTableJournal.cs,StoreExecutedScript,The length of the statement  "			command.CommandText = string.Format ("insert into {0} (ScriptName' Applied) values (@scriptName' @applied)"' tableName); " is 120.
Long Statement,DbUp.Support.Firebird,FirebirdTableJournal,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\Firebird\FirebirdTableJournal.cs,VerifyTableExistsCommand,The length of the statement  "	command.CommandText = string.Format ("select 1 from RDB$RELATIONS where RDB$SYSTEM_FLAG = 0 and RDB$RELATION_NAME = '{0}'"' tableName); " is 135.
Long Statement,DbUp.Support.MySql,MySqlITableJournal,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\MySql\MySqlITableJournal.cs,GetExecutedScripts,The length of the statement  "		log ().WriteInformation (string.Format ("The {0} table could not be found. The database is assumed to be at version 0."' schemaTableName)); " is 139.
Long Statement,DbUp.Support.MySql,MySqlITableJournal,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\MySql\MySqlITableJournal.cs,StoreExecutedScript,The length of the statement  "			command.CommandText = string.Format ("insert into {0} (ScriptName' Applied) values (@scriptName' @applied)"' schemaTableName); " is 126.
Long Statement,DbUp.Support.MySql,MySqlITableJournal,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\MySql\MySqlITableJournal.cs,VerifyTableExistsCommand,The length of the statement  "	command.CommandText = string.IsNullOrEmpty (schemaName) ? string.Format ("select 1 from INFORMATION_SCHEMA.TABLES where TABLE_NAME = '{0}'"' tableName) : string.Format ("select 1 from INFORMATION_SCHEMA.TABLES where TABLE_NAME = '{0}' and TABLE_SCHEMA = '{1}'"' tableName' schemaName); " is 285.
Long Statement,DbUp.Support.Postgresql,PostgresqlTableJournal,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\Postgresql\PostgresqlTableJournal.cs,GetExecutedScripts,The length of the statement  "		log ().WriteInformation (string.Format ("The {0} table could not be found. The database is assumed to be at version 0."' CreateTableName (schema' table))); " is 155.
Long Statement,DbUp.Support.Postgresql,PostgresqlTableJournal,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\Postgresql\PostgresqlTableJournal.cs,StoreExecutedScript,The length of the statement  "			command.CommandText = string.Format ("insert into {0} (ScriptName' Applied) values (@scriptName' @applied)"' CreateTableName (schema' table)); " is 142.
Long Statement,DbUp.Support.Postgresql,PostgresqlTableJournal,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\Postgresql\PostgresqlTableJournal.cs,CreateTableName,The length of the statement  "	return string.IsNullOrEmpty (schema) ? QuoteIdentifier (table) : QuoteIdentifier (schema) + "." + QuoteIdentifier (table); " is 122.
Long Statement,DbUp.Support.Postgresql,PostgresqlTableJournal,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\Postgresql\PostgresqlTableJournal.cs,VerifyTableExistsCommand,The length of the statement  "	command.CommandText = string.IsNullOrEmpty (schema) ? string.Format ("select 1 from INFORMATION_SCHEMA.TABLES where TABLE_NAME = '{0}'"' tableName) : string.Format ("select 1 from INFORMATION_SCHEMA.TABLES where TABLE_NAME = '{0}' and TABLE_SCHEMA = '{1}'"' tableName' schemaName); " is 281.
Long Statement,DbUp.Support.SqlServer,SqlScriptExecutor,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\SqlServer\SqlScriptExecutor.cs,VerifySchema,The length of the statement  "		sqlRunner.ExecuteNonQuery (string.Format (@"IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'{0}') Exec('CREATE SCHEMA [{0}]')"' Schema)); " is 145.
Long Statement,DbUp.Support.SqlServer,SqlScriptExecutor,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\SqlServer\SqlScriptExecutor.cs,Execute,The length of the statement  "	contents = (scriptPreprocessors ?? new IScriptPreprocessor[0]).Aggregate (contents' (current' additionalScriptPreprocessor) => additionalScriptPreprocessor.Process (current)); " is 175.
Long Statement,DbUp.Support.SqlServer,SqlScriptExecutor,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\SqlServer\SqlScriptExecutor.cs,Execute,The length of the statement  "		log ().WriteError ("Script block number: {0}; Block line {1}; Message: {2}"' index' sqlException.LineNumber' sqlException.Procedure' sqlException.Number' sqlException.Message); " is 176.
Long Statement,DbUp.Support.SqlServer,SqlScriptExecutor,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\SqlServer\SqlScriptExecutor.cs,Execute,The length of the statement  "		log ().WriteError ("Script block number: {0}; Error code {1}; Message: {2}"' index' sqlException.ErrorCode' sqlException.Message); " is 130.
Long Statement,DbUp.Support.SqlServer,SqlTableJournal,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\SqlServer\SqlTableJournal.cs,GetExecutedScripts,The length of the statement  "		log ().WriteInformation (string.Format ("The {0} table could not be found. The database is assumed to be at version 0."' CreateTableName (schema' table))); " is 155.
Long Statement,DbUp.Support.SqlServer,SqlTableJournal,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\SqlServer\SqlTableJournal.cs,StoreExecutedScript,The length of the statement  "			command.CommandText = string.Format ("insert into {0} (ScriptName' Applied) values (@scriptName' @applied)"' CreateTableName (schema' table)); " is 142.
Long Statement,DbUp.Support.SqlServer,SqlTableJournal,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\SqlServer\SqlTableJournal.cs,CreateTableName,The length of the statement  "	return string.IsNullOrEmpty (schema) ? SqlObjectParser.QuoteSqlObjectName (table) : SqlObjectParser.QuoteSqlObjectName (schema) + "." + SqlObjectParser.QuoteSqlObjectName (table); " is 179.
Long Statement,DbUp.Support.SqlServer,SqlTableJournal,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\SqlServer\SqlTableJournal.cs,VerifyTableExistsCommand,The length of the statement  "	command.CommandText = string.IsNullOrEmpty (schema) ? string.Format ("select 1 from INFORMATION_SCHEMA.TABLES where TABLE_NAME = '{0}'"' tableName) : string.Format ("select 1 from INFORMATION_SCHEMA.TABLES where TABLE_NAME = '{0}' and TABLE_SCHEMA = '{1}'"' tableName' schemaName); " is 281.
Long Statement,DbUp.Support.SQLite,SQLiteTableJournal,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\SQLite\SQLiteTableJournal.cs,VerifyTableExistsCommand,The length of the statement  "	command.CommandText = string.Format ("SELECT count(*) FROM sqlite_master WHERE type = 'table' AND name = '{0}' COLLATE NOCASE"' tableName); " is 139.
Empty Catch Block,DbUp.Helpers,TemporarySqlDatabase,F:\newReposMay17\DbUp_DbUp\src\DbUp\Helpers\TemporarySqlDatabase.cs,Create,The method has an empty catch block.
Magic Number,DbUp.Support.SqlServer,SqlObjectParser,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\SqlServer\SqlObjectParser.cs,QuoteSqlObjectName,The following statement contains a magic number: if (objectName.StartsWith ("[") && objectName.EndsWith ("]") && objectName.Count (x => x == ']') % 2 == 1)  	return objectName;  
Magic Number,DbUp.Support.SqlServer,SqlScriptExecutor,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\SqlServer\SqlScriptExecutor.cs,Log,The following statement contains a magic number: do {  	var names = new List<string> ();  	for (int i = 0; i < reader.FieldCount; i++) {  		names.Add (reader.GetName (i));  	}  	if (names.Count == 0)  		return;  	var lines = new List<List<string>> ();  	while (reader.Read ()) {  		var line = new List<string> ();  		for (int i = 0; i < reader.FieldCount; i++) {  			var value = reader.GetValue (i);  			value = value == DBNull.Value ? null : value.ToString ();  			line.Add ((string)value);  		}  		lines.Add (line);  	}  	string format = "";  	int totalLength = 0;  	for (int i = 0; i < reader.FieldCount; i++) {  		int maxLength = (lines.Count == 0 ? 0 : lines.Max (l => (l [i] ?? "").Length)) + 2;  		format += " {" + i + "' " + maxLength + "} |";  		totalLength += (maxLength + 3);  	}  	format = "|" + format;  	totalLength += 1;  	log ().WriteInformation (new string ('-'' totalLength));  	log ().WriteInformation (format' names.ToArray ());  	log ().WriteInformation (new string ('-'' totalLength));  	foreach (var line in lines) {  		log ().WriteInformation (format' line.ToArray ());  	}  	log ().WriteInformation (new string ('-'' totalLength));  	log ().WriteInformation ("\r\n");  } while (reader.NextResult ());  
Magic Number,DbUp.Support.SqlServer,SqlScriptExecutor,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\SqlServer\SqlScriptExecutor.cs,Log,The following statement contains a magic number: do {  	var names = new List<string> ();  	for (int i = 0; i < reader.FieldCount; i++) {  		names.Add (reader.GetName (i));  	}  	if (names.Count == 0)  		return;  	var lines = new List<List<string>> ();  	while (reader.Read ()) {  		var line = new List<string> ();  		for (int i = 0; i < reader.FieldCount; i++) {  			var value = reader.GetValue (i);  			value = value == DBNull.Value ? null : value.ToString ();  			line.Add ((string)value);  		}  		lines.Add (line);  	}  	string format = "";  	int totalLength = 0;  	for (int i = 0; i < reader.FieldCount; i++) {  		int maxLength = (lines.Count == 0 ? 0 : lines.Max (l => (l [i] ?? "").Length)) + 2;  		format += " {" + i + "' " + maxLength + "} |";  		totalLength += (maxLength + 3);  	}  	format = "|" + format;  	totalLength += 1;  	log ().WriteInformation (new string ('-'' totalLength));  	log ().WriteInformation (format' names.ToArray ());  	log ().WriteInformation (new string ('-'' totalLength));  	foreach (var line in lines) {  		log ().WriteInformation (format' line.ToArray ());  	}  	log ().WriteInformation (new string ('-'' totalLength));  	log ().WriteInformation ("\r\n");  } while (reader.NextResult ());  
Magic Number,DbUp.Support.SqlServer,SqlScriptExecutor,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\SqlServer\SqlScriptExecutor.cs,Log,The following statement contains a magic number: for (int i = 0; i < reader.FieldCount; i++) {  	int maxLength = (lines.Count == 0 ? 0 : lines.Max (l => (l [i] ?? "").Length)) + 2;  	format += " {" + i + "' " + maxLength + "} |";  	totalLength += (maxLength + 3);  }  
Magic Number,DbUp.Support.SqlServer,SqlScriptExecutor,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\SqlServer\SqlScriptExecutor.cs,Log,The following statement contains a magic number: for (int i = 0; i < reader.FieldCount; i++) {  	int maxLength = (lines.Count == 0 ? 0 : lines.Max (l => (l [i] ?? "").Length)) + 2;  	format += " {" + i + "' " + maxLength + "} |";  	totalLength += (maxLength + 3);  }  
Magic Number,DbUp.Support.SqlServer,SqlScriptExecutor,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\SqlServer\SqlScriptExecutor.cs,Log,The following statement contains a magic number: totalLength += (maxLength + 3);  
Magic Number,DbUp.Support.SQLite,SQLiteObjectParser,F:\newReposMay17\DbUp_DbUp\src\DbUp\Support\SQLite\SQLiteObjectParser.cs,QuoteSqlObjectName,The following statement contains a magic number: if (objectName.StartsWith ("[") && objectName.EndsWith ("]") && objectName.Count (x => x == ']') % 2 == 1)  	return objectName;  
