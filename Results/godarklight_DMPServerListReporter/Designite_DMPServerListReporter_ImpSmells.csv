Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DMPServerListReporter,Main,C:\repos\godarklight_DMPServerListReporter\DMPServerListReporter\Main.cs,LoadSettings,Cyclomatic complexity of the method is 45
Long Statement,DMPServerListReporter,Main,C:\repos\godarklight_DMPServerListReporter\DMPServerListReporter\Main.cs,LoadSettings,The length of the statement  "	string tokenFileFullPath = Path.Combine (Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location)' TOKEN_FILE); " is 138.
Long Statement,DMPServerListReporter,Main,C:\repos\godarklight_DMPServerListReporter\DMPServerListReporter\Main.cs,LoadSettings,The length of the statement  "	string settingsFileFullPath = Path.Combine (Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location)' SETTINGS_FILE); " is 144.
Long Statement,DMPServerListReporter,Main,C:\repos\godarklight_DMPServerListReporter\DMPServerListReporter\Main.cs,OnUpdate,The length of the statement  "	if (!connectedStatus && loadedSettings && Server.serverRunning && (Server.serverClock.ElapsedMilliseconds > (lastConnectionTry + CONNECTION_RETRY))) { " is 150.
Complex Conditional,DMPServerListReporter,Main,C:\repos\godarklight_DMPServerListReporter\DMPServerListReporter\Main.cs,OnUpdate,The conditional expression  "!connectedStatus && loadedSettings && Server.serverRunning && (Server.serverClock.ElapsedMilliseconds > (lastConnectionTry + CONNECTION_RETRY))"  is complex.
Magic Number,DMPServerListReporter,Main,C:\repos\godarklight_DMPServerListReporter\DMPServerListReporter\Main.cs,LoadSettings,The following statement contains a magic number: using (StreamReader sr = new StreamReader (settingsFileFullPath)) {  	bool readingDescription = false;  	string currentLine;  	while ((currentLine = sr.ReadLine ()) != null) {  		if (!readingDescription) {  			try {  				string key = currentLine.Substring (0' currentLine.IndexOf ("=")).Trim ();  				string value = currentLine.Substring (currentLine.IndexOf ("=") + 1).Trim ();  				switch (key) {  				case "reporting":  					{  						string address = value.Substring (0' value.LastIndexOf (":"));  						string port = value.Substring (value.LastIndexOf (":") + 1);  						IPAddress reportingIP;  						int reportingPort = 0;  						if (Int32.TryParse (port' out reportingPort)) {  							if (reportingPort > 0 && reportingPort < 65535) {  								//Try parsing the address directly before trying a DNS lookup  								if (!IPAddress.TryParse (address' out reportingIP)) {  									IPHostEntry entry = Dns.GetHostEntry (address);  									reportingIP = entry.AddressList [0];  								}  								settingsStore.reportingEndpoint = new IPEndPoint (reportingIP' reportingPort);  							}  						}  					}  					break;  				case "gameAddress":  					settingsStore.gameAddress = value;  					break;  				case "banner":  					settingsStore.banner = value;  					break;  				case "homepage":  					settingsStore.homepage = value;  					break;  				case "admin":  					settingsStore.admin = value;  					break;  				case "team":  					settingsStore.team = value;  					break;  				case "location":  					settingsStore.location = value;  					break;  				case "fixedIP":  					settingsStore.fixedIP = (value == "true");  					break;  				case "description":  					readingDescription = true;  					settingsStore.description = value;  					break;  				}  			}  			catch (Exception e) {  				DarkLog.Error ("Error reading settings file' Exception " + e);  			}  		}  		else {  			//Reading description  			settingsStore.description += "\n" + currentLine;  		}  	}  }  
Magic Number,DMPServerListReporter,Main,C:\repos\godarklight_DMPServerListReporter\DMPServerListReporter\Main.cs,LoadSettings,The following statement contains a magic number: while ((currentLine = sr.ReadLine ()) != null) {  	if (!readingDescription) {  		try {  			string key = currentLine.Substring (0' currentLine.IndexOf ("=")).Trim ();  			string value = currentLine.Substring (currentLine.IndexOf ("=") + 1).Trim ();  			switch (key) {  			case "reporting":  				{  					string address = value.Substring (0' value.LastIndexOf (":"));  					string port = value.Substring (value.LastIndexOf (":") + 1);  					IPAddress reportingIP;  					int reportingPort = 0;  					if (Int32.TryParse (port' out reportingPort)) {  						if (reportingPort > 0 && reportingPort < 65535) {  							//Try parsing the address directly before trying a DNS lookup  							if (!IPAddress.TryParse (address' out reportingIP)) {  								IPHostEntry entry = Dns.GetHostEntry (address);  								reportingIP = entry.AddressList [0];  							}  							settingsStore.reportingEndpoint = new IPEndPoint (reportingIP' reportingPort);  						}  					}  				}  				break;  			case "gameAddress":  				settingsStore.gameAddress = value;  				break;  			case "banner":  				settingsStore.banner = value;  				break;  			case "homepage":  				settingsStore.homepage = value;  				break;  			case "admin":  				settingsStore.admin = value;  				break;  			case "team":  				settingsStore.team = value;  				break;  			case "location":  				settingsStore.location = value;  				break;  			case "fixedIP":  				settingsStore.fixedIP = (value == "true");  				break;  			case "description":  				readingDescription = true;  				settingsStore.description = value;  				break;  			}  		}  		catch (Exception e) {  			DarkLog.Error ("Error reading settings file' Exception " + e);  		}  	}  	else {  		//Reading description  		settingsStore.description += "\n" + currentLine;  	}  }  
Magic Number,DMPServerListReporter,Main,C:\repos\godarklight_DMPServerListReporter\DMPServerListReporter\Main.cs,LoadSettings,The following statement contains a magic number: if (!readingDescription) {  	try {  		string key = currentLine.Substring (0' currentLine.IndexOf ("=")).Trim ();  		string value = currentLine.Substring (currentLine.IndexOf ("=") + 1).Trim ();  		switch (key) {  		case "reporting":  			{  				string address = value.Substring (0' value.LastIndexOf (":"));  				string port = value.Substring (value.LastIndexOf (":") + 1);  				IPAddress reportingIP;  				int reportingPort = 0;  				if (Int32.TryParse (port' out reportingPort)) {  					if (reportingPort > 0 && reportingPort < 65535) {  						//Try parsing the address directly before trying a DNS lookup  						if (!IPAddress.TryParse (address' out reportingIP)) {  							IPHostEntry entry = Dns.GetHostEntry (address);  							reportingIP = entry.AddressList [0];  						}  						settingsStore.reportingEndpoint = new IPEndPoint (reportingIP' reportingPort);  					}  				}  			}  			break;  		case "gameAddress":  			settingsStore.gameAddress = value;  			break;  		case "banner":  			settingsStore.banner = value;  			break;  		case "homepage":  			settingsStore.homepage = value;  			break;  		case "admin":  			settingsStore.admin = value;  			break;  		case "team":  			settingsStore.team = value;  			break;  		case "location":  			settingsStore.location = value;  			break;  		case "fixedIP":  			settingsStore.fixedIP = (value == "true");  			break;  		case "description":  			readingDescription = true;  			settingsStore.description = value;  			break;  		}  	}  	catch (Exception e) {  		DarkLog.Error ("Error reading settings file' Exception " + e);  	}  }  else {  	//Reading description  	settingsStore.description += "\n" + currentLine;  }  
Magic Number,DMPServerListReporter,Main,C:\repos\godarklight_DMPServerListReporter\DMPServerListReporter\Main.cs,LoadSettings,The following statement contains a magic number: try {  	string key = currentLine.Substring (0' currentLine.IndexOf ("=")).Trim ();  	string value = currentLine.Substring (currentLine.IndexOf ("=") + 1).Trim ();  	switch (key) {  	case "reporting":  		{  			string address = value.Substring (0' value.LastIndexOf (":"));  			string port = value.Substring (value.LastIndexOf (":") + 1);  			IPAddress reportingIP;  			int reportingPort = 0;  			if (Int32.TryParse (port' out reportingPort)) {  				if (reportingPort > 0 && reportingPort < 65535) {  					//Try parsing the address directly before trying a DNS lookup  					if (!IPAddress.TryParse (address' out reportingIP)) {  						IPHostEntry entry = Dns.GetHostEntry (address);  						reportingIP = entry.AddressList [0];  					}  					settingsStore.reportingEndpoint = new IPEndPoint (reportingIP' reportingPort);  				}  			}  		}  		break;  	case "gameAddress":  		settingsStore.gameAddress = value;  		break;  	case "banner":  		settingsStore.banner = value;  		break;  	case "homepage":  		settingsStore.homepage = value;  		break;  	case "admin":  		settingsStore.admin = value;  		break;  	case "team":  		settingsStore.team = value;  		break;  	case "location":  		settingsStore.location = value;  		break;  	case "fixedIP":  		settingsStore.fixedIP = (value == "true");  		break;  	case "description":  		readingDescription = true;  		settingsStore.description = value;  		break;  	}  }  catch (Exception e) {  	DarkLog.Error ("Error reading settings file' Exception " + e);  }  
Magic Number,DMPServerListReporter,Main,C:\repos\godarklight_DMPServerListReporter\DMPServerListReporter\Main.cs,LoadSettings,The following statement contains a magic number: switch (key) {  case "reporting":  	{  		string address = value.Substring (0' value.LastIndexOf (":"));  		string port = value.Substring (value.LastIndexOf (":") + 1);  		IPAddress reportingIP;  		int reportingPort = 0;  		if (Int32.TryParse (port' out reportingPort)) {  			if (reportingPort > 0 && reportingPort < 65535) {  				//Try parsing the address directly before trying a DNS lookup  				if (!IPAddress.TryParse (address' out reportingIP)) {  					IPHostEntry entry = Dns.GetHostEntry (address);  					reportingIP = entry.AddressList [0];  				}  				settingsStore.reportingEndpoint = new IPEndPoint (reportingIP' reportingPort);  			}  		}  	}  	break;  case "gameAddress":  	settingsStore.gameAddress = value;  	break;  case "banner":  	settingsStore.banner = value;  	break;  case "homepage":  	settingsStore.homepage = value;  	break;  case "admin":  	settingsStore.admin = value;  	break;  case "team":  	settingsStore.team = value;  	break;  case "location":  	settingsStore.location = value;  	break;  case "fixedIP":  	settingsStore.fixedIP = (value == "true");  	break;  case "description":  	readingDescription = true;  	settingsStore.description = value;  	break;  }  
Magic Number,DMPServerListReporter,Main,C:\repos\godarklight_DMPServerListReporter\DMPServerListReporter\Main.cs,LoadSettings,The following statement contains a magic number: if (Int32.TryParse (port' out reportingPort)) {  	if (reportingPort > 0 && reportingPort < 65535) {  		//Try parsing the address directly before trying a DNS lookup  		if (!IPAddress.TryParse (address' out reportingIP)) {  			IPHostEntry entry = Dns.GetHostEntry (address);  			reportingIP = entry.AddressList [0];  		}  		settingsStore.reportingEndpoint = new IPEndPoint (reportingIP' reportingPort);  	}  }  
Magic Number,DMPServerListReporter,Main,C:\repos\godarklight_DMPServerListReporter\DMPServerListReporter\Main.cs,LoadSettings,The following statement contains a magic number: if (reportingPort > 0 && reportingPort < 65535) {  	//Try parsing the address directly before trying a DNS lookup  	if (!IPAddress.TryParse (address' out reportingIP)) {  		IPHostEntry entry = Dns.GetHostEntry (address);  		reportingIP = entry.AddressList [0];  	}  	settingsStore.reportingEndpoint = new IPEndPoint (reportingIP' reportingPort);  }  
Magic Number,DMPServerListReporter,Main,C:\repos\godarklight_DMPServerListReporter\DMPServerListReporter\Main.cs,SendThreadMain,The following statement contains a magic number: try {  	while (true) {  		lock (sendMessages) {  			if (Server.serverClock.ElapsedMilliseconds > (lastMessageSendTime + CONNECTION_HEARTBEAT)) {  				lastMessageSendTime = Server.serverClock.ElapsedMilliseconds;  				//Queue a heartbeat to prevent the connection from timing out  				QueueHeartbeat ();  			}  			if (sendMessages.Count == 0) {  				sendEvent.WaitOne (100);  			}  			else {  				while (sendMessages.Count > 0) {  					SendNetworkMessage (sendMessages.Dequeue ());  				}  			}  		}  	}  }  catch (Exception e) {  	DarkLog.Debug ("Reporting send error: " + e);  	connectedStatus = false;  }  
Magic Number,DMPServerListReporter,Main,C:\repos\godarklight_DMPServerListReporter\DMPServerListReporter\Main.cs,SendThreadMain,The following statement contains a magic number: while (true) {  	lock (sendMessages) {  		if (Server.serverClock.ElapsedMilliseconds > (lastMessageSendTime + CONNECTION_HEARTBEAT)) {  			lastMessageSendTime = Server.serverClock.ElapsedMilliseconds;  			//Queue a heartbeat to prevent the connection from timing out  			QueueHeartbeat ();  		}  		if (sendMessages.Count == 0) {  			sendEvent.WaitOne (100);  		}  		else {  			while (sendMessages.Count > 0) {  				SendNetworkMessage (sendMessages.Dequeue ());  			}  		}  	}  }  
Magic Number,DMPServerListReporter,Main,C:\repos\godarklight_DMPServerListReporter\DMPServerListReporter\Main.cs,SendThreadMain,The following statement contains a magic number: lock (sendMessages) {  	if (Server.serverClock.ElapsedMilliseconds > (lastMessageSendTime + CONNECTION_HEARTBEAT)) {  		lastMessageSendTime = Server.serverClock.ElapsedMilliseconds;  		//Queue a heartbeat to prevent the connection from timing out  		QueueHeartbeat ();  	}  	if (sendMessages.Count == 0) {  		sendEvent.WaitOne (100);  	}  	else {  		while (sendMessages.Count > 0) {  			SendNetworkMessage (sendMessages.Dequeue ());  		}  	}  }  
Magic Number,DMPServerListReporter,Main,C:\repos\godarklight_DMPServerListReporter\DMPServerListReporter\Main.cs,SendThreadMain,The following statement contains a magic number: if (sendMessages.Count == 0) {  	sendEvent.WaitOne (100);  }  else {  	while (sendMessages.Count > 0) {  		SendNetworkMessage (sendMessages.Dequeue ());  	}  }  
Magic Number,DMPServerListReporter,Main,C:\repos\godarklight_DMPServerListReporter\DMPServerListReporter\Main.cs,SendThreadMain,The following statement contains a magic number: sendEvent.WaitOne (100);  
Magic Number,DMPServerListReporter,Main,C:\repos\godarklight_DMPServerListReporter\DMPServerListReporter\Main.cs,QueueHeartbeat,The following statement contains a magic number: BitConverter.GetBytes (0).CopyTo (messageBytes' 4);  
Magic Number,DMPServerListReporter,Main,C:\repos\godarklight_DMPServerListReporter\DMPServerListReporter\Main.cs,QueueNetworkMessage,The following statement contains a magic number: BitConverter.GetBytes (data.Length).CopyTo (messageBytes' 4);  
Magic Number,DMPServerListReporter,Main,C:\repos\godarklight_DMPServerListReporter\DMPServerListReporter\Main.cs,QueueNetworkMessage,The following statement contains a magic number: Array.Copy (data' 0' messageBytes' 8' data.Length);  
Missing Default,DMPServerListReporter,Main,C:\repos\godarklight_DMPServerListReporter\DMPServerListReporter\Main.cs,LoadSettings,The following switch statement is missing a default case: switch (key) {  case "reporting":  	{  		string address = value.Substring (0' value.LastIndexOf (":"));  		string port = value.Substring (value.LastIndexOf (":") + 1);  		IPAddress reportingIP;  		int reportingPort = 0;  		if (Int32.TryParse (port' out reportingPort)) {  			if (reportingPort > 0 && reportingPort < 65535) {  				//Try parsing the address directly before trying a DNS lookup  				if (!IPAddress.TryParse (address' out reportingIP)) {  					IPHostEntry entry = Dns.GetHostEntry (address);  					reportingIP = entry.AddressList [0];  				}  				settingsStore.reportingEndpoint = new IPEndPoint (reportingIP' reportingPort);  			}  		}  	}  	break;  case "gameAddress":  	settingsStore.gameAddress = value;  	break;  case "banner":  	settingsStore.banner = value;  	break;  case "homepage":  	settingsStore.homepage = value;  	break;  case "admin":  	settingsStore.admin = value;  	break;  case "team":  	settingsStore.team = value;  	break;  case "location":  	settingsStore.location = value;  	break;  case "fixedIP":  	settingsStore.fixedIP = (value == "true");  	break;  case "description":  	readingDescription = true;  	settingsStore.description = value;  	break;  }  
