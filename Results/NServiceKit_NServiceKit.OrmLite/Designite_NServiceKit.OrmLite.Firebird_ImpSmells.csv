Implementation smell,Namespace,Class,File,Method,Description
Long Method,NServiceKit.OrmLite.Firebird.DbSchema,PocoCreator<TTable;TColumn;TProcedure;TParameter>,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\DbSchema\PocoCreator.cs,WriteClass,The method has 102 lines of code.
Long Method,NServiceKit.OrmLite.Firebird,Schema,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FbSchema\Schema.cs,Init,The method has 116 lines of code.
Complex Method,NServiceKit.OrmLite.Firebird.DbSchema,PocoCreator<TTable;TColumn;TProcedure;TParameter>,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\DbSchema\PocoCreator.cs,WriteClass,Cyclomatic complexity of the method is 17
Complex Method,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,GetQuotedValue,Cyclomatic complexity of the method is 8
Complex Method,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,ToInsertRowStatement,Cyclomatic complexity of the method is 11
Complex Method,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,ToUpdateRowStatement,Cyclomatic complexity of the method is 8
Complex Method,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,ToExistStatement,Cyclomatic complexity of the method is 12
Complex Method,NServiceKit.OrmLite.Firebird,FirebirdSqlExpressionVisitor<T>,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdSqlExpressionVisitor.cs,VisitBinary,Cyclomatic complexity of the method is 9
Long Parameter List,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,GetColumnDefinition,The method has 8 parameters. Parameters: fieldName' fieldType' isPrimaryKey' autoIncrement' isNullable' fieldLength' scale' defaultValue
Long Parameter List,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,ToCreateIndexStatement,The method has 5 parameters. Parameters: isUnique' indexName' modelDef' fieldName' isCombined
Long Statement,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,GetForeignKeyOnDeleteClause,The length of the statement  "			return (!string.IsNullOrEmpty(foreignKey.OnDelete) && foreignKey.OnDelete.ToUpper()!="RESTRICT" )? " ON DELETE " + foreignKey.OnDelete : ""; " is 140.
Long Statement,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,GetForeignKeyOnUpdateClause,The length of the statement  "			return (!string.IsNullOrEmpty(foreignKey.OnUpdate) && foreignKey.OnUpdate.ToUpper()!="RESTRICT" )? " ON UPDATE " + foreignKey.OnUpdate : ""; " is 140.
Long Statement,NServiceKit.OrmLite.Firebird,Schema,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FbSchema\Schema.cs,Init,The length of the statement  "			sqlColumns.Append("         WHEN 14 THEN trim(iif( cset.rdb$character_set_name='OCTETS'and f.rdb$field_length=16''GUID'' 'CHAR' )) \n"); //CHAR " is 143.
Complex Conditional,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,GetQuotedValue,The conditional expression  "fieldType == typeof(decimal ?) || fieldType == typeof(decimal) ||  				fieldType == typeof(double ?) || fieldType == typeof(double)  ||  				fieldType == typeof(float ?) || fieldType == typeof(float)"  is complex.
Complex Conditional,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,ToInsertRowStatement,The conditional expression  "(fieldDef.AutoIncrement || ! string.IsNullOrEmpty(fieldDef.Sequence)  					|| fieldDef.Name == OrmLiteConfig.IdField)   					&& dbCommand != null"  is complex.
Magic Number,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,FirebirdOrmLiteDialectProvider,The following statement contains a magic number: base.DefaultStringLength=128;
Magic Number,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,ConvertDbValue,The following statement contains a magic number: if (type == typeof(Guid) && BitConverter.IsLittleEndian) // TODO: check big endian  			{  				if (CompactGuid)  				{  					byte[] raw = ((Guid)value).ToByteArray();  					return new Guid(System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt32(raw' 0))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 4))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 6))'  						raw[8]' raw[9]' raw[10]' raw[11]' raw[12]' raw[13]' raw[14]' raw[15]);  				}  				return new Guid(value.ToString());  			}
Magic Number,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,ConvertDbValue,The following statement contains a magic number: if (type == typeof(Guid) && BitConverter.IsLittleEndian) // TODO: check big endian  			{  				if (CompactGuid)  				{  					byte[] raw = ((Guid)value).ToByteArray();  					return new Guid(System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt32(raw' 0))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 4))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 6))'  						raw[8]' raw[9]' raw[10]' raw[11]' raw[12]' raw[13]' raw[14]' raw[15]);  				}  				return new Guid(value.ToString());  			}
Magic Number,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,ConvertDbValue,The following statement contains a magic number: if (type == typeof(Guid) && BitConverter.IsLittleEndian) // TODO: check big endian  			{  				if (CompactGuid)  				{  					byte[] raw = ((Guid)value).ToByteArray();  					return new Guid(System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt32(raw' 0))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 4))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 6))'  						raw[8]' raw[9]' raw[10]' raw[11]' raw[12]' raw[13]' raw[14]' raw[15]);  				}  				return new Guid(value.ToString());  			}
Magic Number,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,ConvertDbValue,The following statement contains a magic number: if (type == typeof(Guid) && BitConverter.IsLittleEndian) // TODO: check big endian  			{  				if (CompactGuid)  				{  					byte[] raw = ((Guid)value).ToByteArray();  					return new Guid(System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt32(raw' 0))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 4))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 6))'  						raw[8]' raw[9]' raw[10]' raw[11]' raw[12]' raw[13]' raw[14]' raw[15]);  				}  				return new Guid(value.ToString());  			}
Magic Number,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,ConvertDbValue,The following statement contains a magic number: if (type == typeof(Guid) && BitConverter.IsLittleEndian) // TODO: check big endian  			{  				if (CompactGuid)  				{  					byte[] raw = ((Guid)value).ToByteArray();  					return new Guid(System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt32(raw' 0))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 4))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 6))'  						raw[8]' raw[9]' raw[10]' raw[11]' raw[12]' raw[13]' raw[14]' raw[15]);  				}  				return new Guid(value.ToString());  			}
Magic Number,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,ConvertDbValue,The following statement contains a magic number: if (type == typeof(Guid) && BitConverter.IsLittleEndian) // TODO: check big endian  			{  				if (CompactGuid)  				{  					byte[] raw = ((Guid)value).ToByteArray();  					return new Guid(System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt32(raw' 0))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 4))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 6))'  						raw[8]' raw[9]' raw[10]' raw[11]' raw[12]' raw[13]' raw[14]' raw[15]);  				}  				return new Guid(value.ToString());  			}
Magic Number,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,ConvertDbValue,The following statement contains a magic number: if (type == typeof(Guid) && BitConverter.IsLittleEndian) // TODO: check big endian  			{  				if (CompactGuid)  				{  					byte[] raw = ((Guid)value).ToByteArray();  					return new Guid(System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt32(raw' 0))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 4))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 6))'  						raw[8]' raw[9]' raw[10]' raw[11]' raw[12]' raw[13]' raw[14]' raw[15]);  				}  				return new Guid(value.ToString());  			}
Magic Number,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,ConvertDbValue,The following statement contains a magic number: if (type == typeof(Guid) && BitConverter.IsLittleEndian) // TODO: check big endian  			{  				if (CompactGuid)  				{  					byte[] raw = ((Guid)value).ToByteArray();  					return new Guid(System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt32(raw' 0))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 4))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 6))'  						raw[8]' raw[9]' raw[10]' raw[11]' raw[12]' raw[13]' raw[14]' raw[15]);  				}  				return new Guid(value.ToString());  			}
Magic Number,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,ConvertDbValue,The following statement contains a magic number: if (type == typeof(Guid) && BitConverter.IsLittleEndian) // TODO: check big endian  			{  				if (CompactGuid)  				{  					byte[] raw = ((Guid)value).ToByteArray();  					return new Guid(System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt32(raw' 0))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 4))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 6))'  						raw[8]' raw[9]' raw[10]' raw[11]' raw[12]' raw[13]' raw[14]' raw[15]);  				}  				return new Guid(value.ToString());  			}
Magic Number,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,ConvertDbValue,The following statement contains a magic number: if (type == typeof(Guid) && BitConverter.IsLittleEndian) // TODO: check big endian  			{  				if (CompactGuid)  				{  					byte[] raw = ((Guid)value).ToByteArray();  					return new Guid(System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt32(raw' 0))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 4))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 6))'  						raw[8]' raw[9]' raw[10]' raw[11]' raw[12]' raw[13]' raw[14]' raw[15]);  				}  				return new Guid(value.ToString());  			}
Magic Number,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,GetQuotedValue,The following statement contains a magic number: if (fieldType == typeof(decimal ?) || fieldType == typeof(decimal) ||  				fieldType == typeof(double ?) || fieldType == typeof(double)  ||  				fieldType == typeof(float ?) || fieldType == typeof(float)  ){  				var s = base.GetQuotedValue( value' fieldType);  				if (s.Length>20) s= s.Substring(0'20);  				return "'" + s + "'"; // when quoted exception is more clear!  			}
Magic Number,NServiceKit.OrmLite.Firebird,FirebirdOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Firebird\FirebirdOrmLiteDialectProvider.cs,GetQuotedValue,The following statement contains a magic number: if (fieldType == typeof(decimal ?) || fieldType == typeof(decimal) ||  				fieldType == typeof(double ?) || fieldType == typeof(double)  ||  				fieldType == typeof(float ?) || fieldType == typeof(float)  ){  				var s = base.GetQuotedValue( value' fieldType);  				if (s.Length>20) s= s.Substring(0'20);  				return "'" + s + "'"; // when quoted exception is more clear!  			}
