Implementation smell,Namespace,Class,File,Method,Description
Long Method,NServiceKit.OrmLite.Oracle.DbSchema,PocoCreator<TTable;TColumn;TProcedure;TParameter>,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\DbSchema\PocoCreator.cs,WriteClass,The method has 102 lines of code.
Complex Method,NServiceKit.OrmLite.Oracle.DbSchema,PocoCreator<TTable;TColumn;TProcedure;TParameter>,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\DbSchema\PocoCreator.cs,WriteClass,Cyclomatic complexity of the method is 17
Complex Method,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,GetQuotedValue,Cyclomatic complexity of the method is 9
Complex Method,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,CreateParameterizedInsertStatement,Cyclomatic complexity of the method is 11
Complex Method,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,ToInsertRowStatement,Cyclomatic complexity of the method is 11
Complex Method,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,ToUpdateRowStatement,Cyclomatic complexity of the method is 8
Complex Method,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,ToExistStatement,Cyclomatic complexity of the method is 12
Long Parameter List,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,GetColumnDefinition,The method has 8 parameters. Parameters: fieldName' fieldType' isPrimaryKey' autoIncrement' isNullable' fieldLength' scale' defaultValue
Long Parameter List,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,ToCreateIndexStatement,The method has 5 parameters. Parameters: isUnique' indexName' modelDef' fieldName' isCombined
Long Statement,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,GetQuotedValue,The length of the statement  "                return "TO_TIMESTAMP(" + base.GetQuotedValue(dateValue.ToString(iso8601Format)' typeof(string)) + "' " + base.GetQuotedValue(oracleFormat' typeof(string)) + ")"; " is 161.
Long Statement,NServiceKit.OrmLite.Oracle,Schema,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OraSchema\Schema.cs,GetColumns,The length of the statement  "			string sql = string.Format(sqlColumns.ToString()'string.IsNullOrEmpty(tableName) ? "\'\'" : string.Format("\'{0}\'"' tableName)); " is 129.
Long Statement,NServiceKit.OrmLite.Oracle,Schema,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OraSchema\Schema.cs,GetColumns,The length of the statement  "                record.IsPrimaryKey = (Connection.GetScalar<int>(string.Format(sqlColConstrains.ToString()' tableName' record.Name' "P")) > 0); " is 127.
Long Statement,NServiceKit.OrmLite.Oracle,Schema,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OraSchema\Schema.cs,GetColumns,The length of the statement  "                record.IsUnique = (Connection.GetScalar<int>(string.Format(sqlColConstrains.ToString()' tableName' record.Name' "U")) > 0); " is 123.
Long Statement,NServiceKit.OrmLite.Oracle,Schema,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OraSchema\Schema.cs,Init,The length of the statement  "            sqlProcedures.Append("SELECT * FROM ALL_PROCEDURES WHERE OBJECT_TYPE = \'PROCEDURE\'  OR  OBJECT_TYPE = \'FUNCTION\' \n"); " is 122.
Complex Conditional,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,GetQuotedValue,The conditional expression  "fieldType == typeof(decimal ?) || fieldType == typeof(decimal) ||  				fieldType == typeof(double ?) || fieldType == typeof(double)  ||  				fieldType == typeof(float ?) || fieldType == typeof(float)"  is complex.
Complex Conditional,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,CreateParameterizedInsertStatement,The conditional expression  "(fieldDef.AutoIncrement || !string.IsNullOrEmpty(fieldDef.Sequence)                      || fieldDef.Name == OrmLiteConfig.IdField)                      && dbCommand != null"  is complex.
Complex Conditional,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,ToInsertRowStatement,The conditional expression  "(fieldDef.AutoIncrement || ! string.IsNullOrEmpty(fieldDef.Sequence)  					|| fieldDef.Name == OrmLiteConfig.IdField)   					&& dbCommand != null"  is complex.
Magic Number,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,OracleOrmLiteDialectProvider,The following statement contains a magic number: base.DefaultStringLength=128;
Magic Number,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,ConvertDbValue,The following statement contains a magic number: if (type == typeof(Guid) && BitConverter.IsLittleEndian) // TODO: check big endian  			{  				if (CompactGuid)  				{  					byte[] raw = ((Guid)value).ToByteArray();  					return new Guid(System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt32(raw' 0))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 4))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 6))'  						raw[8]' raw[9]' raw[10]' raw[11]' raw[12]' raw[13]' raw[14]' raw[15]);  				}  				return new Guid(value.ToString());  			}
Magic Number,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,ConvertDbValue,The following statement contains a magic number: if (type == typeof(Guid) && BitConverter.IsLittleEndian) // TODO: check big endian  			{  				if (CompactGuid)  				{  					byte[] raw = ((Guid)value).ToByteArray();  					return new Guid(System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt32(raw' 0))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 4))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 6))'  						raw[8]' raw[9]' raw[10]' raw[11]' raw[12]' raw[13]' raw[14]' raw[15]);  				}  				return new Guid(value.ToString());  			}
Magic Number,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,ConvertDbValue,The following statement contains a magic number: if (type == typeof(Guid) && BitConverter.IsLittleEndian) // TODO: check big endian  			{  				if (CompactGuid)  				{  					byte[] raw = ((Guid)value).ToByteArray();  					return new Guid(System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt32(raw' 0))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 4))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 6))'  						raw[8]' raw[9]' raw[10]' raw[11]' raw[12]' raw[13]' raw[14]' raw[15]);  				}  				return new Guid(value.ToString());  			}
Magic Number,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,ConvertDbValue,The following statement contains a magic number: if (type == typeof(Guid) && BitConverter.IsLittleEndian) // TODO: check big endian  			{  				if (CompactGuid)  				{  					byte[] raw = ((Guid)value).ToByteArray();  					return new Guid(System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt32(raw' 0))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 4))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 6))'  						raw[8]' raw[9]' raw[10]' raw[11]' raw[12]' raw[13]' raw[14]' raw[15]);  				}  				return new Guid(value.ToString());  			}
Magic Number,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,ConvertDbValue,The following statement contains a magic number: if (type == typeof(Guid) && BitConverter.IsLittleEndian) // TODO: check big endian  			{  				if (CompactGuid)  				{  					byte[] raw = ((Guid)value).ToByteArray();  					return new Guid(System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt32(raw' 0))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 4))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 6))'  						raw[8]' raw[9]' raw[10]' raw[11]' raw[12]' raw[13]' raw[14]' raw[15]);  				}  				return new Guid(value.ToString());  			}
Magic Number,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,ConvertDbValue,The following statement contains a magic number: if (type == typeof(Guid) && BitConverter.IsLittleEndian) // TODO: check big endian  			{  				if (CompactGuid)  				{  					byte[] raw = ((Guid)value).ToByteArray();  					return new Guid(System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt32(raw' 0))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 4))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 6))'  						raw[8]' raw[9]' raw[10]' raw[11]' raw[12]' raw[13]' raw[14]' raw[15]);  				}  				return new Guid(value.ToString());  			}
Magic Number,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,ConvertDbValue,The following statement contains a magic number: if (type == typeof(Guid) && BitConverter.IsLittleEndian) // TODO: check big endian  			{  				if (CompactGuid)  				{  					byte[] raw = ((Guid)value).ToByteArray();  					return new Guid(System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt32(raw' 0))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 4))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 6))'  						raw[8]' raw[9]' raw[10]' raw[11]' raw[12]' raw[13]' raw[14]' raw[15]);  				}  				return new Guid(value.ToString());  			}
Magic Number,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,ConvertDbValue,The following statement contains a magic number: if (type == typeof(Guid) && BitConverter.IsLittleEndian) // TODO: check big endian  			{  				if (CompactGuid)  				{  					byte[] raw = ((Guid)value).ToByteArray();  					return new Guid(System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt32(raw' 0))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 4))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 6))'  						raw[8]' raw[9]' raw[10]' raw[11]' raw[12]' raw[13]' raw[14]' raw[15]);  				}  				return new Guid(value.ToString());  			}
Magic Number,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,ConvertDbValue,The following statement contains a magic number: if (type == typeof(Guid) && BitConverter.IsLittleEndian) // TODO: check big endian  			{  				if (CompactGuid)  				{  					byte[] raw = ((Guid)value).ToByteArray();  					return new Guid(System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt32(raw' 0))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 4))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 6))'  						raw[8]' raw[9]' raw[10]' raw[11]' raw[12]' raw[13]' raw[14]' raw[15]);  				}  				return new Guid(value.ToString());  			}
Magic Number,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,ConvertDbValue,The following statement contains a magic number: if (type == typeof(Guid) && BitConverter.IsLittleEndian) // TODO: check big endian  			{  				if (CompactGuid)  				{  					byte[] raw = ((Guid)value).ToByteArray();  					return new Guid(System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt32(raw' 0))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 4))'  						System.Net.IPAddress.NetworkToHostOrder(BitConverter.ToInt16(raw' 6))'  						raw[8]' raw[9]' raw[10]' raw[11]' raw[12]' raw[13]' raw[14]' raw[15]);  				}  				return new Guid(value.ToString());  			}
Magic Number,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,GetQuotedValue,The following statement contains a magic number: if (fieldType == typeof(decimal ?) || fieldType == typeof(decimal) ||  				fieldType == typeof(double ?) || fieldType == typeof(double)  ||  				fieldType == typeof(float ?) || fieldType == typeof(float)  ){  				var s = base.GetQuotedValue( value' fieldType);  				if (s.Length>20) s= s.Substring(0'20);  				return "'" + s + "'"; // when quoted exception is more clear!  			}
Magic Number,NServiceKit.OrmLite.Oracle,OracleOrmLiteDialectProvider,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleOrmLiteDialectProvider.cs,GetQuotedValue,The following statement contains a magic number: if (fieldType == typeof(decimal ?) || fieldType == typeof(decimal) ||  				fieldType == typeof(double ?) || fieldType == typeof(double)  ||  				fieldType == typeof(float ?) || fieldType == typeof(float)  ){  				var s = base.GetQuotedValue( value' fieldType);  				if (s.Length>20) s= s.Substring(0'20);  				return "'" + s + "'"; // when quoted exception is more clear!  			}
Magic Number,NServiceKit.OrmLite.Oracle,OracleSqlExpressionVisitor<T>,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleSqlExpressionVisitor.cs,VisitColumnAccessMethod,The following statement contains a magic number: if (m.Method.Name == "Substring")              {                  List<Object> args = this.VisitExpressionList(m.Arguments);                  var quotedColName = Visit(m.Object);                  var startIndex = Int32.Parse(args[0].ToString()) + 1;                  if (args.Count == 2)                  {                      var length = Int32.Parse(args[1].ToString());                      return new PartialSqlString(string.Format("subStr({0}'{1}'{2})"'                                                                quotedColName'                                                                startIndex'                                                                length));                  }                    return new PartialSqlString(string.Format("subStr({0}'{1})"'                                                            quotedColName'                                                            startIndex));              }
Magic Number,NServiceKit.OrmLite.Oracle,OracleSqlExpressionVisitor<T>,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleSqlExpressionVisitor.cs,GetFirstColumn,The following statement contains a magic number: var idx1 = sql.IndexOf("select") + 7;
Magic Number,NServiceKit.OrmLite.Oracle,OracleSqlExpressionVisitor<T>,C:\repos\NServiceKit_NServiceKit.OrmLite\src\NServiceKit.OrmLite.Oracle\OracleSqlExpressionVisitor.cs,GetFirstColumn,The following statement contains a magic number: return sql.Substring(idx1' idx2 - 7).Trim();
