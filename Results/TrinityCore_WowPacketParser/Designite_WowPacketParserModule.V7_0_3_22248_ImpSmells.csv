Implementation smell,Namespace,Class,File,Method,Description
Long Method,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The method has 177 lines of code.
Long Method,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The method has 386 lines of code.
Complex Method,WowPacketParserModule.V7_0_3_22248.Parsers,AuthenticationHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AuthenticationHandler.cs,HandleAuthResponse,Cyclomatic complexity of the method is 11
Complex Method,WowPacketParserModule.V7_0_3_22248.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CombatLogHandler.cs,ReadAttackRoundInfo,Cyclomatic complexity of the method is 8
Complex Method,WowPacketParserModule.V7_0_3_22248.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CombatLogHandler.cs,HandleSpellHealLog,Cyclomatic complexity of the method is 8
Complex Method,WowPacketParserModule.V7_0_3_22248.Parsers,CreatureHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CreatureHandler.cs,HandleCreatureQueryResponse,Cyclomatic complexity of the method is 12
Complex Method,WowPacketParserModule.V7_0_3_22248.Parsers,GarrisonHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GarrisonHandler.cs,HandleGetGarrisonInfoResult,Cyclomatic complexity of the method is 21
Complex Method,WowPacketParserModule.V7_0_3_22248.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\MovementHandler.cs,ReadMovementSpline,Cyclomatic complexity of the method is 8
Complex Method,WowPacketParserModule.V7_0_3_22248.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\MovementHandler.cs,HandleMoveUpdateTeleport,Cyclomatic complexity of the method is 11
Complex Method,WowPacketParserModule.V7_0_3_22248.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\MovementHandler.cs,HandleMoveUpdateTeleport720,Cyclomatic complexity of the method is 11
Complex Method,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,Cyclomatic complexity of the method is 13
Complex Method,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestGiverQuestDetails,Cyclomatic complexity of the method is 8
Complex Method,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,ReadSpellTargetData,Cyclomatic complexity of the method is 10
Complex Method,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,HandleAuraUpdate,Cyclomatic complexity of the method is 14
Complex Method,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,Cyclomatic complexity of the method is 78
Complex Method,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadDynamicValuesUpdateBlock,Cyclomatic complexity of the method is 10
Complex Method,WowPacketParserModule.V6_0_2_19033.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GroupHandler.cs,HandlePartyMemberState,Cyclomatic complexity of the method is 8
Long Identifier,WowPacketParserModule.V7_0_3_22248.Parsers,GarrisonHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GarrisonHandler.cs,HandleGetGarrisonInfoResult,The length of the parameter garrisonMissionOvermaxRewardsCount is 34.
Long Statement,WowPacketParserModule.V7_0_3_22248.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AccountDataHandler.cs,HandleSaveClientVarables,The length of the statement  "                packet.WriteLine($"[{ i.ToString() }] VariableName: \"{ packet.ReadWoWString((int)variableNameLen) }\" Value: \"{ packet.ReadWoWString((int)valueLen) }\""); " is 156.
Long Statement,WowPacketParserModule.V7_0_3_22248.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AccountDataHandler.cs,HandleCacheInfo,The length of the statement  "                packet.WriteLine($"[{ i.ToString() }] VariableName: \"{ packet.ReadWoWString((int)variableNameLen) }\" Value: \"{ packet.ReadWoWString((int)valueLen) }\""); " is 156.
Long Statement,WowPacketParserModule.V7_0_3_22248.Parsers,AuctionHouseHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AuctionHouseHandler.cs,HandleAuctionListItems,The length of the statement  "            var sorts = new Packet(data' packet.Opcode' packet.Time' packet.Direction' packet.Number' packet.Writer' packet.FileName); " is 122.
Long Statement,WowPacketParserModule.V7_0_3_22248.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CharacterHandler.cs,ReadCharactersData,The length of the statement  "                PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = mapId' Zone = zone' Position = pos' Orientation = 0 }; " is 139.
Long Statement,WowPacketParserModule.V7_0_3_22248.Parsers,GarrisonHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GarrisonHandler.cs,HandleGetGarrisonInfoResult,The length of the statement  "                if (ClientVersion.AddedInVersion(ClientVersionBuild.V7_2_0_23826) && ClientVersion.RemovedInVersion(ClientVersionBuild.V7_2_5_24330)) " is 133.
Long Statement,WowPacketParserModule.V7_0_3_22248.Parsers,HotfixHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\HotfixHandler.cs,HandleDBReply,The length of the statement  "            var db2File = new Packet(data' packet.Opcode' packet.Time' packet.Direction' packet.Number' packet.Writer' packet.FileName); " is 124.
Long Statement,WowPacketParserModule.V7_0_3_22248.Parsers,HotfixHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\HotfixHandler.cs,ReadHotfixRecord,The length of the statement  "            var db2File = new Packet(data' packet.Opcode' packet.Time' packet.Direction' packet.Number' packet.Writer' packet.FileName); " is 124.
Long Statement,WowPacketParserModule.V7_0_3_22248.Parsers,HotfixHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\HotfixHandler.cs,ReadHotfixRecord725,The length of the statement  "            var db2File = new Packet(data' packet.Opcode' packet.Time' packet.Direction' packet.Number' packet.Writer' packet.FileName); " is 124.
Long Statement,WowPacketParserModule.V7_0_3_22248.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\NpcHandler.cs,HandleNpcGossip,The length of the statement  "                Storage.GossipMenuOptionActions.Add(new GossipMenuOptionAction { MenuId = lastGossipOption.MenuId' OptionIndex = lastGossipOption.OptionIndex' ActionMenuId = gossip.Entry }' packet.TimeSpan); " is 191.
Long Statement,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,ReadSpellTargetData,The length of the statement  "                        if ((Targets)effect.ImplicitTarget[0] == Targets.TARGET_DEST_DB || (Targets)effect.ImplicitTarget[1] == Targets.TARGET_DEST_DB) " is 127.
Long Statement,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,ReadSpellTargetData,The length of the statement  "                            string effectHelper = $"Spell: { StoreGetters.GetName(StoreNameType.Spell' (int)spellID) } Efffect: { effect.Effect } ({ (SpellEffects)effect.Effect })"; " is 153.
Long Statement,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadCreateObjectBlock,The length of the statement  "                CoreParsers.UpdateHandler.ProcessExistingObject(ref existObj' obj' guid); // can't do "ref Storage.Objects[guid].Item1 directly " is 127.
Long Statement,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadValuesUpdateBlock,The length of the statement  "                    packet.AddValue(key' value + $" ({ StoreGetters.GetName(StoreNameType.Faction' (int)blockVal.UInt32Value' false) })"' index); " is 125.
Complex Conditional,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The conditional expression  "moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                      guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature"  is complex.
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AccountDataHandler.cs,HandleSaveClientVarables,The following statement contains a magic number: for (var i = 0; i < varablesCount; ++i)              {                  var variableNameLen = packet.ReadBits(6);                  var valueLen = packet.ReadBits(10);                    packet.WriteLine($"[{ i.ToString() }] VariableName: \"{ packet.ReadWoWString((int)variableNameLen) }\" Value: \"{ packet.ReadWoWString((int)valueLen) }\"");              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AccountDataHandler.cs,HandleSaveClientVarables,The following statement contains a magic number: for (var i = 0; i < varablesCount; ++i)              {                  var variableNameLen = packet.ReadBits(6);                  var valueLen = packet.ReadBits(10);                    packet.WriteLine($"[{ i.ToString() }] VariableName: \"{ packet.ReadWoWString((int)variableNameLen) }\" Value: \"{ packet.ReadWoWString((int)valueLen) }\"");              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AccountDataHandler.cs,HandleSaveEnabledAddons,The following statement contains a magic number: for (var i = 0; i < enableAddonsCount; ++i)              {                  packet.ResetBitReader();                    var addonNameLen = packet.ReadBits(7);                  var versionLen = packet.ReadBits(6);                    packet.ReadBit("Loaded"' i);                  packet.ReadBit("Disabled"' i);                    if (addonNameLen > 1)                      packet.ReadCString("AddonName"' i);                  if (versionLen > 1)                      packet.ReadCString("Version"' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AccountDataHandler.cs,HandleSaveEnabledAddons,The following statement contains a magic number: for (var i = 0; i < enableAddonsCount; ++i)              {                  packet.ResetBitReader();                    var addonNameLen = packet.ReadBits(7);                  var versionLen = packet.ReadBits(6);                    packet.ReadBit("Loaded"' i);                  packet.ReadBit("Disabled"' i);                    if (addonNameLen > 1)                      packet.ReadCString("AddonName"' i);                  if (versionLen > 1)                      packet.ReadCString("Version"' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AccountDataHandler.cs,HandleCacheInfo,The following statement contains a magic number: var signatureLen = packet.ReadBits(6);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AccountDataHandler.cs,HandleCacheInfo,The following statement contains a magic number: for (var i = 0; i < cacheInfoCount; ++i)              {                  packet.ResetBitReader();                    var variableNameLen = packet.ReadBits(6);                  var valueLen = packet.ReadBits(6);                    packet.WriteLine($"[{ i.ToString() }] VariableName: \"{ packet.ReadWoWString((int)variableNameLen) }\" Value: \"{ packet.ReadWoWString((int)valueLen) }\"");              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AccountDataHandler.cs,HandleCacheInfo,The following statement contains a magic number: for (var i = 0; i < cacheInfoCount; ++i)              {                  packet.ResetBitReader();                    var variableNameLen = packet.ReadBits(6);                  var valueLen = packet.ReadBits(6);                    packet.WriteLine($"[{ i.ToString() }] VariableName: \"{ packet.ReadWoWString((int)variableNameLen) }\" Value: \"{ packet.ReadWoWString((int)valueLen) }\"");              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,AreaTriggerHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AreaTriggerHandler.cs,ReadAreaTriggerSpline,The following statement contains a magic number: var verticesCount = packet.ReadBits("VerticesCount"' 16' indexes);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,AuctionHouseHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AuctionHouseHandler.cs,ReadCliAuctionItem,The following statement contains a magic number: var enchantmentsCount = packet.ReadBits("EnchantmentsCount"' 4' idx);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,AuctionHouseHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AuctionHouseHandler.cs,ReadCliAuctionItem,The following statement contains a magic number: var gemsCount = packet.ReadBits("GemsCount"' 2' idx);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,AuctionHouseHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AuctionHouseHandler.cs,HandleAuctionListItems,The following statement contains a magic number: var nameLength = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,AuctionHouseHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AuctionHouseHandler.cs,HandleAuctionListItems,The following statement contains a magic number: var classFiltersCount = packet.ReadBits("ClassFiltersCount"' 3);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,AuctionHouseHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AuctionHouseHandler.cs,HandleAuctionListItems,The following statement contains a magic number: for (int i = 0; i < classFiltersCount; ++i)              {                  packet.ReadInt32E<ItemClass>("ItemClass"' "ClassFilters"' i);                    var subClassFiltersCount = packet.ReadBits("SubClassFiltersCount"' 5' "ClassFilters"' i);                  for (int j = 0; j < subClassFiltersCount; ++j)                  {                      packet.ReadInt32("ItemSubclass"' "ClassFilters"' i' "SubClassFilters"' j);                      packet.ReadUInt32("InvTypeMask"' "ClassFilters"' i' "SubClassFilters"' j);                  }              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,AuctionHouseHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AuctionHouseHandler.cs,HandleAuctionListBidderItems,The following statement contains a magic number: var count = packet.ReadBits("AuctionItemIDsCount"' 7);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,AuthenticationHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AuthenticationHandler.cs,HandleAuthSession,The following statement contains a magic number: packet.ReadBytes("LocalChallenge"' 16);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,AuthenticationHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AuthenticationHandler.cs,HandleAuthSession,The following statement contains a magic number: packet.ReadBytes("Digest"' 24);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,AuthenticationHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AuthenticationHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (ok)              {                  packet.ReadUInt32("VirtualRealmAddress");                  var realms = packet.ReadUInt32();                  packet.ReadUInt32("TimeRested");                  packet.ReadByte("ActiveExpansionLevel");                  packet.ReadByte("AccountExpansionLevel");                  packet.ReadUInt32("TimeSecondsUntilPCKick");                  var races = packet.ReadUInt32("AvailableRaces");                  var classes = packet.ReadUInt32("AvailableClasses");                  var templates = packet.ReadUInt32("Templates");                  packet.ReadUInt32("AccountCurrency");                  if (ClientVersion.AddedInVersion(ClientVersionBuild.V7_1_0_22900))                      packet.ReadTime("Time");                    for (var i = 0; i < races; ++i)                  {                      packet.ReadByteE<Race>("Race"' "AvailableRaces"' i);                      packet.ReadByteE<ClientType>("RequiredExpansion"' "AvailableRaces"' i);                  }                    for (var i = 0; i < classes; ++i)                  {                      packet.ReadByteE<Class>("Class"' "AvailableClasses"' i);                      packet.ReadByteE<ClientType>("RequiredExpansion"' "AvailableClasses"' i);                  }                    packet.ResetBitReader();                  packet.ReadBit("IsExpansionTrial");                  packet.ReadBit("ForceCharacterTemplate");                  var horde = packet.ReadBit(); // NumPlayersHorde                  var alliance = packet.ReadBit(); // NumPlayersAlliance                    packet.ResetBitReader();                  packet.ReadUInt32("BillingPlan");                  packet.ReadUInt32("TimeRemain");                  packet.ReadBit("InGameRoom");                  packet.ReadBit("InGameRoom");                  packet.ReadBit("InGameRoom");                    if (horde)                      packet.ReadUInt16("NumPlayersHorde");                    if (alliance)                      packet.ReadUInt16("NumPlayersAlliance");                    for (var i = 0; i < realms; ++i)                  {                      packet.ReadUInt32("RealmAddress"' "VirtualRealms"' i);                      packet.ResetBitReader();                      packet.ReadBit("IsLocal"' "VirtualRealms"' i);                      packet.ReadBit("IsInternalRealm"' "VirtualRealms"' i);                      var nameLen1 = packet.ReadBits(8);                      var nameLen2 = packet.ReadBits(8);                      packet.ReadWoWString("RealmNameActual"' nameLen1' "VirtualRealms"' i);                      packet.ReadWoWString("RealmNameNormalized"' nameLen2' "VirtualRealms"' i);                  }                    for (var i = 0; i < templates; ++i)                  {                      packet.ReadUInt32("TemplateSetId"' i);                      var templateClasses = packet.ReadUInt32();                      for (var j = 0; j < templateClasses; ++j)                      {                          packet.ReadByteE<Class>("Class"' i' j);                          packet.ReadByte("FactionGroup"' i' j);                      }                        packet.ResetBitReader();                      var nameLen = packet.ReadBits(7);                      var descLen = packet.ReadBits(10);                      packet.ReadWoWString("Name"' nameLen' i);                      packet.ReadWoWString("Description"' descLen' i);                  }              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,AuthenticationHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AuthenticationHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (ok)              {                  packet.ReadUInt32("VirtualRealmAddress");                  var realms = packet.ReadUInt32();                  packet.ReadUInt32("TimeRested");                  packet.ReadByte("ActiveExpansionLevel");                  packet.ReadByte("AccountExpansionLevel");                  packet.ReadUInt32("TimeSecondsUntilPCKick");                  var races = packet.ReadUInt32("AvailableRaces");                  var classes = packet.ReadUInt32("AvailableClasses");                  var templates = packet.ReadUInt32("Templates");                  packet.ReadUInt32("AccountCurrency");                  if (ClientVersion.AddedInVersion(ClientVersionBuild.V7_1_0_22900))                      packet.ReadTime("Time");                    for (var i = 0; i < races; ++i)                  {                      packet.ReadByteE<Race>("Race"' "AvailableRaces"' i);                      packet.ReadByteE<ClientType>("RequiredExpansion"' "AvailableRaces"' i);                  }                    for (var i = 0; i < classes; ++i)                  {                      packet.ReadByteE<Class>("Class"' "AvailableClasses"' i);                      packet.ReadByteE<ClientType>("RequiredExpansion"' "AvailableClasses"' i);                  }                    packet.ResetBitReader();                  packet.ReadBit("IsExpansionTrial");                  packet.ReadBit("ForceCharacterTemplate");                  var horde = packet.ReadBit(); // NumPlayersHorde                  var alliance = packet.ReadBit(); // NumPlayersAlliance                    packet.ResetBitReader();                  packet.ReadUInt32("BillingPlan");                  packet.ReadUInt32("TimeRemain");                  packet.ReadBit("InGameRoom");                  packet.ReadBit("InGameRoom");                  packet.ReadBit("InGameRoom");                    if (horde)                      packet.ReadUInt16("NumPlayersHorde");                    if (alliance)                      packet.ReadUInt16("NumPlayersAlliance");                    for (var i = 0; i < realms; ++i)                  {                      packet.ReadUInt32("RealmAddress"' "VirtualRealms"' i);                      packet.ResetBitReader();                      packet.ReadBit("IsLocal"' "VirtualRealms"' i);                      packet.ReadBit("IsInternalRealm"' "VirtualRealms"' i);                      var nameLen1 = packet.ReadBits(8);                      var nameLen2 = packet.ReadBits(8);                      packet.ReadWoWString("RealmNameActual"' nameLen1' "VirtualRealms"' i);                      packet.ReadWoWString("RealmNameNormalized"' nameLen2' "VirtualRealms"' i);                  }                    for (var i = 0; i < templates; ++i)                  {                      packet.ReadUInt32("TemplateSetId"' i);                      var templateClasses = packet.ReadUInt32();                      for (var j = 0; j < templateClasses; ++j)                      {                          packet.ReadByteE<Class>("Class"' i' j);                          packet.ReadByte("FactionGroup"' i' j);                      }                        packet.ResetBitReader();                      var nameLen = packet.ReadBits(7);                      var descLen = packet.ReadBits(10);                      packet.ReadWoWString("Name"' nameLen' i);                      packet.ReadWoWString("Description"' descLen' i);                  }              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,AuthenticationHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AuthenticationHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (ok)              {                  packet.ReadUInt32("VirtualRealmAddress");                  var realms = packet.ReadUInt32();                  packet.ReadUInt32("TimeRested");                  packet.ReadByte("ActiveExpansionLevel");                  packet.ReadByte("AccountExpansionLevel");                  packet.ReadUInt32("TimeSecondsUntilPCKick");                  var races = packet.ReadUInt32("AvailableRaces");                  var classes = packet.ReadUInt32("AvailableClasses");                  var templates = packet.ReadUInt32("Templates");                  packet.ReadUInt32("AccountCurrency");                  if (ClientVersion.AddedInVersion(ClientVersionBuild.V7_1_0_22900))                      packet.ReadTime("Time");                    for (var i = 0; i < races; ++i)                  {                      packet.ReadByteE<Race>("Race"' "AvailableRaces"' i);                      packet.ReadByteE<ClientType>("RequiredExpansion"' "AvailableRaces"' i);                  }                    for (var i = 0; i < classes; ++i)                  {                      packet.ReadByteE<Class>("Class"' "AvailableClasses"' i);                      packet.ReadByteE<ClientType>("RequiredExpansion"' "AvailableClasses"' i);                  }                    packet.ResetBitReader();                  packet.ReadBit("IsExpansionTrial");                  packet.ReadBit("ForceCharacterTemplate");                  var horde = packet.ReadBit(); // NumPlayersHorde                  var alliance = packet.ReadBit(); // NumPlayersAlliance                    packet.ResetBitReader();                  packet.ReadUInt32("BillingPlan");                  packet.ReadUInt32("TimeRemain");                  packet.ReadBit("InGameRoom");                  packet.ReadBit("InGameRoom");                  packet.ReadBit("InGameRoom");                    if (horde)                      packet.ReadUInt16("NumPlayersHorde");                    if (alliance)                      packet.ReadUInt16("NumPlayersAlliance");                    for (var i = 0; i < realms; ++i)                  {                      packet.ReadUInt32("RealmAddress"' "VirtualRealms"' i);                      packet.ResetBitReader();                      packet.ReadBit("IsLocal"' "VirtualRealms"' i);                      packet.ReadBit("IsInternalRealm"' "VirtualRealms"' i);                      var nameLen1 = packet.ReadBits(8);                      var nameLen2 = packet.ReadBits(8);                      packet.ReadWoWString("RealmNameActual"' nameLen1' "VirtualRealms"' i);                      packet.ReadWoWString("RealmNameNormalized"' nameLen2' "VirtualRealms"' i);                  }                    for (var i = 0; i < templates; ++i)                  {                      packet.ReadUInt32("TemplateSetId"' i);                      var templateClasses = packet.ReadUInt32();                      for (var j = 0; j < templateClasses; ++j)                      {                          packet.ReadByteE<Class>("Class"' i' j);                          packet.ReadByte("FactionGroup"' i' j);                      }                        packet.ResetBitReader();                      var nameLen = packet.ReadBits(7);                      var descLen = packet.ReadBits(10);                      packet.ReadWoWString("Name"' nameLen' i);                      packet.ReadWoWString("Description"' descLen' i);                  }              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,AuthenticationHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\AuthenticationHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (ok)              {                  packet.ReadUInt32("VirtualRealmAddress");                  var realms = packet.ReadUInt32();                  packet.ReadUInt32("TimeRested");                  packet.ReadByte("ActiveExpansionLevel");                  packet.ReadByte("AccountExpansionLevel");                  packet.ReadUInt32("TimeSecondsUntilPCKick");                  var races = packet.ReadUInt32("AvailableRaces");                  var classes = packet.ReadUInt32("AvailableClasses");                  var templates = packet.ReadUInt32("Templates");                  packet.ReadUInt32("AccountCurrency");                  if (ClientVersion.AddedInVersion(ClientVersionBuild.V7_1_0_22900))                      packet.ReadTime("Time");                    for (var i = 0; i < races; ++i)                  {                      packet.ReadByteE<Race>("Race"' "AvailableRaces"' i);                      packet.ReadByteE<ClientType>("RequiredExpansion"' "AvailableRaces"' i);                  }                    for (var i = 0; i < classes; ++i)                  {                      packet.ReadByteE<Class>("Class"' "AvailableClasses"' i);                      packet.ReadByteE<ClientType>("RequiredExpansion"' "AvailableClasses"' i);                  }                    packet.ResetBitReader();                  packet.ReadBit("IsExpansionTrial");                  packet.ReadBit("ForceCharacterTemplate");                  var horde = packet.ReadBit(); // NumPlayersHorde                  var alliance = packet.ReadBit(); // NumPlayersAlliance                    packet.ResetBitReader();                  packet.ReadUInt32("BillingPlan");                  packet.ReadUInt32("TimeRemain");                  packet.ReadBit("InGameRoom");                  packet.ReadBit("InGameRoom");                  packet.ReadBit("InGameRoom");                    if (horde)                      packet.ReadUInt16("NumPlayersHorde");                    if (alliance)                      packet.ReadUInt16("NumPlayersAlliance");                    for (var i = 0; i < realms; ++i)                  {                      packet.ReadUInt32("RealmAddress"' "VirtualRealms"' i);                      packet.ResetBitReader();                      packet.ReadBit("IsLocal"' "VirtualRealms"' i);                      packet.ReadBit("IsInternalRealm"' "VirtualRealms"' i);                      var nameLen1 = packet.ReadBits(8);                      var nameLen2 = packet.ReadBits(8);                      packet.ReadWoWString("RealmNameActual"' nameLen1' "VirtualRealms"' i);                      packet.ReadWoWString("RealmNameNormalized"' nameLen2' "VirtualRealms"' i);                  }                    for (var i = 0; i < templates; ++i)                  {                      packet.ReadUInt32("TemplateSetId"' i);                      var templateClasses = packet.ReadUInt32();                      for (var j = 0; j < templateClasses; ++j)                      {                          packet.ReadByteE<Class>("Class"' i' j);                          packet.ReadByte("FactionGroup"' i' j);                      }                        packet.ResetBitReader();                      var nameLen = packet.ReadBits(7);                      var descLen = packet.ReadBits(10);                      packet.ReadWoWString("Name"' nameLen' i);                      packet.ReadWoWString("Description"' descLen' i);                  }              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,BattlegroundHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\BattlegroundHandler.cs,HandlePvPLogData,The following statement contains a magic number: for (int i = 0; i < 2; i++)                  packet.ReadByte("PlayerCount"' i);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\BattlePetHandler.cs,ReadClientBattlePet,The following statement contains a magic number: var customNameLength = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\BattlePetHandler.cs,HandleBattlePetError,The following statement contains a magic number: packet.ReadBits("Result"' 3);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\BattlePetHandler.cs,HandleBattlePetModifyName,The following statement contains a magic number: var nameLen = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\BattlePetHandler.cs,HandleBattlePetModifyName,The following statement contains a magic number: if (hasDeclinedNames)              {                  var declinedNamesLen = new uint[5];                  for (int i = 0; i < 5; i++)                      declinedNamesLen[i] = packet.ReadBits(7);                    for (int i = 0; i < 5; i++)                      packet.ReadWoWString("DeclinedNames"' declinedNamesLen[i]);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\BattlePetHandler.cs,HandleBattlePetModifyName,The following statement contains a magic number: if (hasDeclinedNames)              {                  var declinedNamesLen = new uint[5];                  for (int i = 0; i < 5; i++)                      declinedNamesLen[i] = packet.ReadBits(7);                    for (int i = 0; i < 5; i++)                      packet.ReadWoWString("DeclinedNames"' declinedNamesLen[i]);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\BattlePetHandler.cs,HandleBattlePetModifyName,The following statement contains a magic number: if (hasDeclinedNames)              {                  var declinedNamesLen = new uint[5];                  for (int i = 0; i < 5; i++)                      declinedNamesLen[i] = packet.ReadBits(7);                    for (int i = 0; i < 5; i++)                      packet.ReadWoWString("DeclinedNames"' declinedNamesLen[i]);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\BattlePetHandler.cs,HandleBattlePetModifyName,The following statement contains a magic number: if (hasDeclinedNames)              {                  var declinedNamesLen = new uint[5];                  for (int i = 0; i < 5; i++)                      declinedNamesLen[i] = packet.ReadBits(7);                    for (int i = 0; i < 5; i++)                      packet.ReadWoWString("DeclinedNames"' declinedNamesLen[i]);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CalendarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CalendarHandler.cs,HandleCalendarSendEvent,The following statement contains a magic number: var lenEventName = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CalendarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CalendarHandler.cs,HandleCalendarSendEvent,The following statement contains a magic number: var lenDescription = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CharacterHandler.cs,ReadCharactersData,The following statement contains a magic number: for (uint j = 0; j < 3; ++j)                  packet.ReadByte("CustomDisplay"' idx' j);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CharacterHandler.cs,ReadCharactersData,The following statement contains a magic number: for (uint j = 0; j < 2; ++j)                  packet.ReadUInt32("ProfessionIDs"' idx' j);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CharacterHandler.cs,ReadCharactersData,The following statement contains a magic number: for (uint j = 0; j < 23; ++j)              {                  packet.ReadUInt32("InventoryItem DisplayID"' idx' j);                  packet.ReadUInt32("InventoryItem DisplayEnchantID"' idx' j);                  packet.ReadByteE<InventoryType>("InventoryItem InvType"' idx' j);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CharacterHandler.cs,ReadCharactersData,The following statement contains a magic number: var nameLength = packet.ReadBits("Character Name Length"' 6' idx);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CharacterHandler.cs,ReadCharactersData,The following statement contains a magic number: packet.ReadBits("UnkWod61x"' 5' idx);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CharacterHandler.cs,HandleClientCharCreate,The following statement contains a magic number: var nameLen = packet.ReadBits(6);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CharacterHandler.cs,HandleClientCharCreate,The following statement contains a magic number: for (uint i = 0; i < 3; ++i)                  packet.ReadByte("CustomDisplay"' i);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CharacterHandler.cs,HandleLevelUpInfo,The following statement contains a magic number: for (var i = 0; i < 6; i++)                  packet.ReadInt32("PowerDelta"' (PowerType)i);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CharacterHandler.cs,HandleLevelUpInfo,The following statement contains a magic number: for (var i = 0; i < 4; i++)                  packet.ReadInt32("StatDelta"' (StatType)i);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CharacterHandler.cs,HandleAlterAppearance,The following statement contains a magic number: for (uint i = 0; i < 3; ++i)                  packet.ReadUInt32("NewCustomDisplay"' i);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CharacterHandler.cs,HandleInspectPVP,The following statement contains a magic number: var bracketCount = packet.ReadBits(3);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CharacterHandler.cs,HandleLearnPvPTalents,The following statement contains a magic number: var talentCount = packet.ReadBits("TalentCount"' 6);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CharacterHandler.cs,HandleLearnPvPTalentsFailed,The following statement contains a magic number: packet.ReadBits("Reason"' 4);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\ChatHandler.cs,HandleAddonMessage,The following statement contains a magic number: var prefixLen = packet.ReadBits(5);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\ChatHandler.cs,HandleAddonMessage,The following statement contains a magic number: var testLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\ChatHandler.cs,HandleAddonMessageWhisper,The following statement contains a magic number: var targetLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\ChatHandler.cs,HandleAddonMessageWhisper,The following statement contains a magic number: var prefixLen = packet.ReadBits(5);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\ChatHandler.cs,HandleAddonMessageWhisper,The following statement contains a magic number: var testLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\ChatHandler.cs,HandleClientChatMessage,The following statement contains a magic number: var len = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\ChatHandler.cs,HandleChatAddonMessageChannel,The following statement contains a magic number: var channelNameLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\ChatHandler.cs,HandleChatAddonMessageChannel,The following statement contains a magic number: var msgLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\ChatHandler.cs,HandleClientChatMessageWhisper,The following statement contains a magic number: var recvName = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\ChatHandler.cs,HandleClientChatMessageWhisper,The following statement contains a magic number: var msgLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\ChatHandler.cs,HandleMessageChat,The following statement contains a magic number: var len = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadBitsE<AttackerStateFlags>("Flags"' 7);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CreatureHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CreatureHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: uint titleLen = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CreatureHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CreatureHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: uint titleAltLen = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CreatureHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CreatureHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: uint cursorNameLen = packet.ReadBits(6);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CreatureHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CreatureHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: var stringLens = new int[4][];
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CreatureHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CreatureHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][0] = (int)packet.ReadBits(11);                  stringLens[i][1] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CreatureHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CreatureHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][0] = (int)packet.ReadBits(11);                  stringLens[i][1] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CreatureHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CreatureHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][0] = (int)packet.ReadBits(11);                  stringLens[i][1] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CreatureHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CreatureHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][0] = (int)packet.ReadBits(11);                  stringLens[i][1] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CreatureHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CreatureHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (var i = 0; i < 4; ++i)              {                  if (stringLens[i][0] > 1)                      creature.Name = packet.ReadCString("Name");                  if (stringLens[i][1] > 1)                      creature.FemaleName = packet.ReadCString("NameAlt");              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CreatureHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CreatureHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.KillCredits = new uint?[2];
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CreatureHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CreatureHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 2; ++i)                  creature.KillCredits[i] = packet.ReadUInt32("ProxyCreatureID"' i);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CreatureHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CreatureHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.ModelIDs = new uint?[4];
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CreatureHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CreatureHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; ++i)                  creature.ModelIDs[i] = packet.ReadUInt32("CreatureDisplayID"' i);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,CurrencyHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\CurrencyHandler.cs,HandleSetupCurrency,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadUInt32("Type"' i);                  packet.ReadUInt32("Quantity"' i);                    packet.ResetBitReader();                    var hasWeeklyQuantity = packet.ReadBit();                  var hasMaxWeeklyQuantity = packet.ReadBit();                  var hasTrackedQuantity = packet.ReadBit();                  var hasMaxQuantity = packet.ReadBit();                  packet.ReadBits("Flags"' 5' i);                    if (hasWeeklyQuantity)                      packet.ReadUInt32("WeeklyQuantity"' i);                    if (hasMaxWeeklyQuantity)                      packet.ReadUInt32("MaxWeeklyQuantity"' i);                    if (hasTrackedQuantity)                      packet.ReadUInt32("TrackedQuantity"' i);                    if (hasMaxQuantity)                      packet.ReadUInt32("MaxQuantity"' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  packet.ReadInt32("Type"' i);                  packet.ReadUInt64("Guid"' i);                  packet.ReadUInt32("SetID"' i);                  uint ignoreMask = packet.ReadUInt32("IgnoreMask");                    for (var j = 0; j < NumSlots; j++)                  {                      bool ignore = (ignoreMask & (1 << j)) != 0;                      packet.ReadPackedGuid128("Pieces" + (ignore ? " (Ignored)" : "")' i' j);                      packet.ReadInt32("Appearances"' i);                  }                    for (var j = 0; j < 2; j++)                      packet.ReadInt32("Enchants"' i);                    packet.ResetBitReader();                  var setNameLen = packet.ReadBits(8);                  var setIconLen = packet.ReadBits(9);                    packet.ReadWoWString("SetName"' setNameLen' i);                  packet.ReadWoWString("SetIcon"' setIconLen' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  packet.ReadInt32("Type"' i);                  packet.ReadUInt64("Guid"' i);                  packet.ReadUInt32("SetID"' i);                  uint ignoreMask = packet.ReadUInt32("IgnoreMask");                    for (var j = 0; j < NumSlots; j++)                  {                      bool ignore = (ignoreMask & (1 << j)) != 0;                      packet.ReadPackedGuid128("Pieces" + (ignore ? " (Ignored)" : "")' i' j);                      packet.ReadInt32("Appearances"' i);                  }                    for (var j = 0; j < 2; j++)                      packet.ReadInt32("Enchants"' i);                    packet.ResetBitReader();                  var setNameLen = packet.ReadBits(8);                  var setIconLen = packet.ReadBits(9);                    packet.ReadWoWString("SetName"' setNameLen' i);                  packet.ReadWoWString("SetIcon"' setIconLen' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  packet.ReadInt32("Type"' i);                  packet.ReadUInt64("Guid"' i);                  packet.ReadUInt32("SetID"' i);                  uint ignoreMask = packet.ReadUInt32("IgnoreMask");                    for (var j = 0; j < NumSlots; j++)                  {                      bool ignore = (ignoreMask & (1 << j)) != 0;                      packet.ReadPackedGuid128("Pieces" + (ignore ? " (Ignored)" : "")' i' j);                      packet.ReadInt32("Appearances"' i);                  }                    for (var j = 0; j < 2; j++)                      packet.ReadInt32("Enchants"' i);                    packet.ResetBitReader();                  var setNameLen = packet.ReadBits(8);                  var setIconLen = packet.ReadBits(9);                    packet.ReadWoWString("SetName"' setNameLen' i);                  packet.ReadWoWString("SetIcon"' setIconLen' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList720,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  packet.ReadInt32("Type"' i);                  packet.ReadUInt64("Guid"' i);                  packet.ReadUInt32("SetID"' i);                  uint ignoreMask = packet.ReadUInt32("IgnoreMask");                    for (var j = 0; j < NumSlots; j++)                  {                      bool ignore = (ignoreMask & (1 << j)) != 0;                      packet.ReadPackedGuid128("Pieces" + (ignore ? " (Ignored)" : "")' i' j);                      packet.ReadInt32("Appearances"' i);                  }                    for (var j = 0; j < 2; j++)                      packet.ReadInt32("Enchants"' i' j);                    packet.ResetBitReader();                  var hasAssignedSpecIndex = packet.ReadBit("HasAssignedSpecIndex");                  var setNameLen = packet.ReadBits(8);                  var setIconLen = packet.ReadBits(9);                    if (hasAssignedSpecIndex)                      packet.ReadInt32("AssignedSpecIndex"' i);                    packet.ReadWoWString("SetName"' setNameLen' i);                  packet.ReadWoWString("SetIcon"' setIconLen' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList720,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  packet.ReadInt32("Type"' i);                  packet.ReadUInt64("Guid"' i);                  packet.ReadUInt32("SetID"' i);                  uint ignoreMask = packet.ReadUInt32("IgnoreMask");                    for (var j = 0; j < NumSlots; j++)                  {                      bool ignore = (ignoreMask & (1 << j)) != 0;                      packet.ReadPackedGuid128("Pieces" + (ignore ? " (Ignored)" : "")' i' j);                      packet.ReadInt32("Appearances"' i);                  }                    for (var j = 0; j < 2; j++)                      packet.ReadInt32("Enchants"' i' j);                    packet.ResetBitReader();                  var hasAssignedSpecIndex = packet.ReadBit("HasAssignedSpecIndex");                  var setNameLen = packet.ReadBits(8);                  var setIconLen = packet.ReadBits(9);                    if (hasAssignedSpecIndex)                      packet.ReadInt32("AssignedSpecIndex"' i);                    packet.ReadWoWString("SetName"' setNameLen' i);                  packet.ReadWoWString("SetIcon"' setIconLen' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList720,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  packet.ReadInt32("Type"' i);                  packet.ReadUInt64("Guid"' i);                  packet.ReadUInt32("SetID"' i);                  uint ignoreMask = packet.ReadUInt32("IgnoreMask");                    for (var j = 0; j < NumSlots; j++)                  {                      bool ignore = (ignoreMask & (1 << j)) != 0;                      packet.ReadPackedGuid128("Pieces" + (ignore ? " (Ignored)" : "")' i' j);                      packet.ReadInt32("Appearances"' i);                  }                    for (var j = 0; j < 2; j++)                      packet.ReadInt32("Enchants"' i' j);                    packet.ResetBitReader();                  var hasAssignedSpecIndex = packet.ReadBit("HasAssignedSpecIndex");                  var setNameLen = packet.ReadBits(8);                  var setIconLen = packet.ReadBits(9);                    if (hasAssignedSpecIndex)                      packet.ReadInt32("AssignedSpecIndex"' i);                    packet.ReadWoWString("SetName"' setNameLen' i);                  packet.ReadWoWString("SetIcon"' setIconLen' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetSave,The following statement contains a magic number: for (var j = 0; j < 2; j++)                  packet.ReadInt32("Enchants"' j);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetSave,The following statement contains a magic number: var setNameLen = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetSave,The following statement contains a magic number: var setIconLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,GarrisonHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GarrisonHandler.cs,ReadGarrisonFollower,The following statement contains a magic number: var len = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,GarrisonHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GarrisonHandler.cs,HandleDisplayToast,The following statement contains a magic number: var type = packet.ReadBits("Type"' 2);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadPackedGuid128("GuildGUID");                  packet.ReadInt32("VirtualRealmAddress");                  var rankCount = packet.ReadInt32("RankCount");                  packet.ReadInt32("EmblemColor");                  packet.ReadInt32("EmblemStyle");                  packet.ReadInt32("BorderColor");                  packet.ReadInt32("BorderStyle");                  packet.ReadInt32("BackgroundColor");                    packet.ResetBitReader();                  var nameLen = packet.ReadBits(7);                    for (var i = 0; i < rankCount; i++)                  {                      packet.ReadInt32("RankID"' i);                      packet.ReadInt32("RankOrder"' i);                        packet.ResetBitReader();                      var rankNameLen = packet.ReadBits(7);                      packet.ReadWoWString("Rank Name"' rankNameLen' i);                  }                    packet.ReadWoWString("Guild Name"' nameLen);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadPackedGuid128("GuildGUID");                  packet.ReadInt32("VirtualRealmAddress");                  var rankCount = packet.ReadInt32("RankCount");                  packet.ReadInt32("EmblemColor");                  packet.ReadInt32("EmblemStyle");                  packet.ReadInt32("BorderColor");                  packet.ReadInt32("BorderStyle");                  packet.ReadInt32("BackgroundColor");                    packet.ResetBitReader();                  var nameLen = packet.ReadBits(7);                    for (var i = 0; i < rankCount; i++)                  {                      packet.ReadInt32("RankID"' i);                      packet.ReadInt32("RankOrder"' i);                        packet.ResetBitReader();                      var rankNameLen = packet.ReadBits(7);                      packet.ReadWoWString("Rank Name"' rankNameLen' i);                  }                    packet.ReadWoWString("Guild Name"' nameLen);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: var bits2037 = packet.ReadBits(10);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: var bits9 = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < int20; ++i)              {                  packet.ReadPackedGuid128("Guid"' i);                    packet.ReadUInt32("RankID"' i);                  packet.ReadUInt32<AreaId>("AreaID"' i);                  packet.ReadUInt32("PersonalAchievementPoints"' i);                  packet.ReadUInt32("GuildReputation"' i);                    packet.ReadSingle("LastSave"' i);                    for (var j = 0; j < 2; ++j)                  {                      packet.ReadUInt32("DbID"' i' j);                      packet.ReadUInt32("Rank"' i' j);                      packet.ReadUInt32("Step"' i' j);                  }                    packet.ReadUInt32("VirtualRealmAddress"' i);                    packet.ReadByteE<GuildMemberFlag>("Status"' i);                  packet.ReadByte("Level"' i);                  packet.ReadByteE<Class>("ClassID"' i);                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ResetBitReader();                    var bits36 = packet.ReadBits(6);                  var bits92 = packet.ReadBits(8);                  var bits221 = packet.ReadBits(8);                    packet.ReadBit("Authenticated"' i);                  packet.ReadBit("SorEligible"' i);                    packet.ReadWoWString("Name"' bits36' i);                  packet.ReadWoWString("Note"' bits92' i);                  packet.ReadWoWString("OfficerNote"' bits221' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < int20; ++i)              {                  packet.ReadPackedGuid128("Guid"' i);                    packet.ReadUInt32("RankID"' i);                  packet.ReadUInt32<AreaId>("AreaID"' i);                  packet.ReadUInt32("PersonalAchievementPoints"' i);                  packet.ReadUInt32("GuildReputation"' i);                    packet.ReadSingle("LastSave"' i);                    for (var j = 0; j < 2; ++j)                  {                      packet.ReadUInt32("DbID"' i' j);                      packet.ReadUInt32("Rank"' i' j);                      packet.ReadUInt32("Step"' i' j);                  }                    packet.ReadUInt32("VirtualRealmAddress"' i);                    packet.ReadByteE<GuildMemberFlag>("Status"' i);                  packet.ReadByte("Level"' i);                  packet.ReadByteE<Class>("ClassID"' i);                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ResetBitReader();                    var bits36 = packet.ReadBits(6);                  var bits92 = packet.ReadBits(8);                  var bits221 = packet.ReadBits(8);                    packet.ReadBit("Authenticated"' i);                  packet.ReadBit("SorEligible"' i);                    packet.ReadWoWString("Name"' bits36' i);                  packet.ReadWoWString("Note"' bits92' i);                  packet.ReadWoWString("OfficerNote"' bits221' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < int20; ++i)              {                  packet.ReadPackedGuid128("Guid"' i);                    packet.ReadUInt32("RankID"' i);                  packet.ReadUInt32<AreaId>("AreaID"' i);                  packet.ReadUInt32("PersonalAchievementPoints"' i);                  packet.ReadUInt32("GuildReputation"' i);                    packet.ReadSingle("LastSave"' i);                    for (var j = 0; j < 2; ++j)                  {                      packet.ReadUInt32("DbID"' i' j);                      packet.ReadUInt32("Rank"' i' j);                      packet.ReadUInt32("Step"' i' j);                  }                    packet.ReadUInt32("VirtualRealmAddress"' i);                    packet.ReadByteE<GuildMemberFlag>("Status"' i);                  packet.ReadByte("Level"' i);                  packet.ReadByteE<Class>("ClassID"' i);                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ResetBitReader();                    var bits36 = packet.ReadBits(6);                  var bits92 = packet.ReadBits(8);                  var bits221 = packet.ReadBits(8);                    packet.ReadBit("Authenticated"' i);                  packet.ReadBit("SorEligible"' i);                    packet.ReadWoWString("Name"' bits36' i);                  packet.ReadWoWString("Note"' bits92' i);                  packet.ReadWoWString("OfficerNote"' bits221' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < int20; ++i)              {                  packet.ReadPackedGuid128("Guid"' i);                    packet.ReadUInt32("RankID"' i);                  packet.ReadUInt32<AreaId>("AreaID"' i);                  packet.ReadUInt32("PersonalAchievementPoints"' i);                  packet.ReadUInt32("GuildReputation"' i);                    packet.ReadSingle("LastSave"' i);                    for (var j = 0; j < 2; ++j)                  {                      packet.ReadUInt32("DbID"' i' j);                      packet.ReadUInt32("Rank"' i' j);                      packet.ReadUInt32("Step"' i' j);                  }                    packet.ReadUInt32("VirtualRealmAddress"' i);                    packet.ReadByteE<GuildMemberFlag>("Status"' i);                  packet.ReadByte("Level"' i);                  packet.ReadByteE<Class>("ClassID"' i);                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ResetBitReader();                    var bits36 = packet.ReadBits(6);                  var bits92 = packet.ReadBits(8);                  var bits221 = packet.ReadBits(8);                    packet.ReadBit("Authenticated"' i);                  packet.ReadBit("SorEligible"' i);                    packet.ReadWoWString("Name"' bits36' i);                  packet.ReadWoWString("Note"' bits92' i);                  packet.ReadWoWString("OfficerNote"' bits221' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GuildHandler.cs,HandleGuildBankQueryResults,The following statement contains a magic number: for (int i = 0; i < tabInfoCount; i++)              {                  packet.ReadInt32("TabIndex"' i);                    packet.ResetBitReader();                    var bits1 = packet.ReadBits(7);                  var bits69 = packet.ReadBits(9);                    packet.ReadWoWString("Name"' bits1' i);                  packet.ReadWoWString("Icon"' bits69' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GuildHandler.cs,HandleGuildBankQueryResults,The following statement contains a magic number: for (int i = 0; i < tabInfoCount; i++)              {                  packet.ReadInt32("TabIndex"' i);                    packet.ResetBitReader();                    var bits1 = packet.ReadBits(7);                  var bits69 = packet.ReadBits(9);                    packet.ReadWoWString("Name"' bits1' i);                  packet.ReadWoWString("Icon"' bits69' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,HotfixHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\HotfixHandler.cs,HandleDBReply,The following statement contains a magic number: if (entry < 0 || !allow)              {                  packet.WriteLine("Row {0} has been removed."' -entry);                  HotfixStoreMgr.RemoveRecord(type' entry);              }              else              {                  switch (type)                  {                      case DB2Hash.BroadcastText:                      {                          var bct = new BroadcastText()                          {                              ID = (uint)entry'                              MaleText = db2File.ReadCString("MaleText")'                              FemaleText = db2File.ReadCString("FemaleText")'                          };                            bct.EmoteID = new ushort?[3];                          bct.EmoteDelay = new ushort?[3];                            for (int i = 0; i < 3; ++i)                              bct.EmoteID[i] = db2File.ReadUInt16("EmoteID"' i);                          for (int i = 0; i < 3; ++i)                              bct.EmoteDelay[i] = db2File.ReadUInt16("EmoteDelay"' i);                            bct.UnkEmoteID = db2File.ReadUInt16("UnkEmoteID");                          bct.Language = db2File.ReadByte("Language");                          bct.Type = db2File.ReadByte("Type");                            bct.SoundID = new uint?[2];                          for (int i = 0; i < 2; ++i)                              bct.SoundID[i] = db2File.ReadUInt32("SoundID"' i);                            bct.PlayerConditionID = db2File.ReadUInt32("PlayerConditionID");                            Storage.BroadcastTexts.Add(bct' packet.TimeSpan);                          break;                      }                      default:                          HotfixStoreMgr.AddRecord(type' entry' db2File);                          break;                  }                    db2File.ClosePacket(false);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,HotfixHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\HotfixHandler.cs,HandleDBReply,The following statement contains a magic number: if (entry < 0 || !allow)              {                  packet.WriteLine("Row {0} has been removed."' -entry);                  HotfixStoreMgr.RemoveRecord(type' entry);              }              else              {                  switch (type)                  {                      case DB2Hash.BroadcastText:                      {                          var bct = new BroadcastText()                          {                              ID = (uint)entry'                              MaleText = db2File.ReadCString("MaleText")'                              FemaleText = db2File.ReadCString("FemaleText")'                          };                            bct.EmoteID = new ushort?[3];                          bct.EmoteDelay = new ushort?[3];                            for (int i = 0; i < 3; ++i)                              bct.EmoteID[i] = db2File.ReadUInt16("EmoteID"' i);                          for (int i = 0; i < 3; ++i)                              bct.EmoteDelay[i] = db2File.ReadUInt16("EmoteDelay"' i);                            bct.UnkEmoteID = db2File.ReadUInt16("UnkEmoteID");                          bct.Language = db2File.ReadByte("Language");                          bct.Type = db2File.ReadByte("Type");                            bct.SoundID = new uint?[2];                          for (int i = 0; i < 2; ++i)                              bct.SoundID[i] = db2File.ReadUInt32("SoundID"' i);                            bct.PlayerConditionID = db2File.ReadUInt32("PlayerConditionID");                            Storage.BroadcastTexts.Add(bct' packet.TimeSpan);                          break;                      }                      default:                          HotfixStoreMgr.AddRecord(type' entry' db2File);                          break;                  }                    db2File.ClosePacket(false);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,HotfixHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\HotfixHandler.cs,HandleDBReply,The following statement contains a magic number: if (entry < 0 || !allow)              {                  packet.WriteLine("Row {0} has been removed."' -entry);                  HotfixStoreMgr.RemoveRecord(type' entry);              }              else              {                  switch (type)                  {                      case DB2Hash.BroadcastText:                      {                          var bct = new BroadcastText()                          {                              ID = (uint)entry'                              MaleText = db2File.ReadCString("MaleText")'                              FemaleText = db2File.ReadCString("FemaleText")'                          };                            bct.EmoteID = new ushort?[3];                          bct.EmoteDelay = new ushort?[3];                            for (int i = 0; i < 3; ++i)                              bct.EmoteID[i] = db2File.ReadUInt16("EmoteID"' i);                          for (int i = 0; i < 3; ++i)                              bct.EmoteDelay[i] = db2File.ReadUInt16("EmoteDelay"' i);                            bct.UnkEmoteID = db2File.ReadUInt16("UnkEmoteID");                          bct.Language = db2File.ReadByte("Language");                          bct.Type = db2File.ReadByte("Type");                            bct.SoundID = new uint?[2];                          for (int i = 0; i < 2; ++i)                              bct.SoundID[i] = db2File.ReadUInt32("SoundID"' i);                            bct.PlayerConditionID = db2File.ReadUInt32("PlayerConditionID");                            Storage.BroadcastTexts.Add(bct' packet.TimeSpan);                          break;                      }                      default:                          HotfixStoreMgr.AddRecord(type' entry' db2File);                          break;                  }                    db2File.ClosePacket(false);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,HotfixHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\HotfixHandler.cs,HandleDBReply,The following statement contains a magic number: if (entry < 0 || !allow)              {                  packet.WriteLine("Row {0} has been removed."' -entry);                  HotfixStoreMgr.RemoveRecord(type' entry);              }              else              {                  switch (type)                  {                      case DB2Hash.BroadcastText:                      {                          var bct = new BroadcastText()                          {                              ID = (uint)entry'                              MaleText = db2File.ReadCString("MaleText")'                              FemaleText = db2File.ReadCString("FemaleText")'                          };                            bct.EmoteID = new ushort?[3];                          bct.EmoteDelay = new ushort?[3];                            for (int i = 0; i < 3; ++i)                              bct.EmoteID[i] = db2File.ReadUInt16("EmoteID"' i);                          for (int i = 0; i < 3; ++i)                              bct.EmoteDelay[i] = db2File.ReadUInt16("EmoteDelay"' i);                            bct.UnkEmoteID = db2File.ReadUInt16("UnkEmoteID");                          bct.Language = db2File.ReadByte("Language");                          bct.Type = db2File.ReadByte("Type");                            bct.SoundID = new uint?[2];                          for (int i = 0; i < 2; ++i)                              bct.SoundID[i] = db2File.ReadUInt32("SoundID"' i);                            bct.PlayerConditionID = db2File.ReadUInt32("PlayerConditionID");                            Storage.BroadcastTexts.Add(bct' packet.TimeSpan);                          break;                      }                      default:                          HotfixStoreMgr.AddRecord(type' entry' db2File);                          break;                  }                    db2File.ClosePacket(false);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,HotfixHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\HotfixHandler.cs,HandleDBReply,The following statement contains a magic number: if (entry < 0 || !allow)              {                  packet.WriteLine("Row {0} has been removed."' -entry);                  HotfixStoreMgr.RemoveRecord(type' entry);              }              else              {                  switch (type)                  {                      case DB2Hash.BroadcastText:                      {                          var bct = new BroadcastText()                          {                              ID = (uint)entry'                              MaleText = db2File.ReadCString("MaleText")'                              FemaleText = db2File.ReadCString("FemaleText")'                          };                            bct.EmoteID = new ushort?[3];                          bct.EmoteDelay = new ushort?[3];                            for (int i = 0; i < 3; ++i)                              bct.EmoteID[i] = db2File.ReadUInt16("EmoteID"' i);                          for (int i = 0; i < 3; ++i)                              bct.EmoteDelay[i] = db2File.ReadUInt16("EmoteDelay"' i);                            bct.UnkEmoteID = db2File.ReadUInt16("UnkEmoteID");                          bct.Language = db2File.ReadByte("Language");                          bct.Type = db2File.ReadByte("Type");                            bct.SoundID = new uint?[2];                          for (int i = 0; i < 2; ++i)                              bct.SoundID[i] = db2File.ReadUInt32("SoundID"' i);                            bct.PlayerConditionID = db2File.ReadUInt32("PlayerConditionID");                            Storage.BroadcastTexts.Add(bct' packet.TimeSpan);                          break;                      }                      default:                          HotfixStoreMgr.AddRecord(type' entry' db2File);                          break;                  }                    db2File.ClosePacket(false);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,HotfixHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\HotfixHandler.cs,HandleDBReply,The following statement contains a magic number: if (entry < 0 || !allow)              {                  packet.WriteLine("Row {0} has been removed."' -entry);                  HotfixStoreMgr.RemoveRecord(type' entry);              }              else              {                  switch (type)                  {                      case DB2Hash.BroadcastText:                      {                          var bct = new BroadcastText()                          {                              ID = (uint)entry'                              MaleText = db2File.ReadCString("MaleText")'                              FemaleText = db2File.ReadCString("FemaleText")'                          };                            bct.EmoteID = new ushort?[3];                          bct.EmoteDelay = new ushort?[3];                            for (int i = 0; i < 3; ++i)                              bct.EmoteID[i] = db2File.ReadUInt16("EmoteID"' i);                          for (int i = 0; i < 3; ++i)                              bct.EmoteDelay[i] = db2File.ReadUInt16("EmoteDelay"' i);                            bct.UnkEmoteID = db2File.ReadUInt16("UnkEmoteID");                          bct.Language = db2File.ReadByte("Language");                          bct.Type = db2File.ReadByte("Type");                            bct.SoundID = new uint?[2];                          for (int i = 0; i < 2; ++i)                              bct.SoundID[i] = db2File.ReadUInt32("SoundID"' i);                            bct.PlayerConditionID = db2File.ReadUInt32("PlayerConditionID");                            Storage.BroadcastTexts.Add(bct' packet.TimeSpan);                          break;                      }                      default:                          HotfixStoreMgr.AddRecord(type' entry' db2File);                          break;                  }                    db2File.ClosePacket(false);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\ItemHandler.cs,HandleItemPushResult,The following statement contains a magic number: packet.ReadBits("DisplayText"' 3);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\ItemHandler.cs,HandleBuyItem,The following statement contains a magic number: packet.ReadBits("ItemType"' 2);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\LootHandler.cs,ReadLootItem,The following statement contains a magic number: packet.ReadBits("ItemType"' 2' indexes);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,LootHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\LootHandler.cs,ReadLootItem,The following statement contains a magic number: packet.ReadBits("ItemUiType"' 3' indexes);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\MiscellaneousHandler.cs,HandleAccountMountUpdate,The following statement contains a magic number: for (int i = 0; i < mountSpellIDsCount; i++)              {                  packet.ReadInt32("MountSpellIDs"' i);                    packet.ResetBitReader();                  packet.ReadBits("MountIsFavorite"' 2' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\MiscellaneousHandler.cs,HandlePageTextResponse,The following statement contains a magic number: for (int i = 0; i < pagesCount; i++)              {                  PageText pageText = new PageText();                    uint entry = packet.ReadUInt32("ID"' i);                  pageText.ID = entry;                  pageText.NextPageID = packet.ReadUInt32("NextPageID"' i);                    pageText.PlayerConditionID = packet.ReadInt32("PlayerConditionID"' i);                  pageText.Flags = packet.ReadByte("Flags"' i);                    packet.ResetBitReader();                  uint textLen = packet.ReadBits(12);                  pageText.Text = packet.ReadWoWString("Text"' textLen' i);                    packet.AddSniffData(StoreNameType.PageText' (int)entry' "QUERY_RESPONSE");                  Storage.PageTexts.Add(pageText' packet.TimeSpan);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\MovementHandler.cs,ReadMovementStats,The following statement contains a magic number: packet.ReadBitsE<MovementFlag>("MovementFlags"' 30' idx);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\MovementHandler.cs,ReadMovementStats,The following statement contains a magic number: packet.ReadBitsE<MovementFlags2>("ExtraMovementFlags"' 18' idx);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\MovementHandler.cs,ReadMovementForce,The following statement contains a magic number: packet.ReadBits("Type"' 2' idx);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\MovementHandler.cs,ReadMovementMonsterSpline,The following statement contains a magic number: packet.ReadBits("StopDistanceTolerance"' 3' indexes);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\MovementHandler.cs,ReadMonsterSplineFilter,The following statement contains a magic number: packet.ReadBits("FilterFlags"' 2' indexes);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\MovementHandler.cs,ReadMovementSpline,The following statement contains a magic number: var type = packet.ReadBits("Face"' 2' indexes);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\MovementHandler.cs,ReadMovementSpline,The following statement contains a magic number: var pointsCount = packet.ReadBits("PointsCount"' 16' indexes);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\MovementHandler.cs,ReadMovementSpline,The following statement contains a magic number: var packedDeltasCount = packet.ReadBits("PackedDeltasCount"' 16' indexes);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\MovementHandler.cs,ReadMovementSpline,The following statement contains a magic number: switch (type)              {                  case 1:                      packet.ReadVector3("FaceSpot"' indexes);                      break;                  case 2:                      packet.ReadSingle("FaceDirection"' indexes);                      packet.ReadPackedGuid128("FacingGUID"' indexes);                      break;                  case 3:                      packet.ReadSingle("FaceDirection"' indexes);                      break;              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\MovementHandler.cs,ReadMovementSpline,The following statement contains a magic number: switch (type)              {                  case 1:                      packet.ReadVector3("FaceSpot"' indexes);                      break;                  case 2:                      packet.ReadSingle("FaceDirection"' indexes);                      packet.ReadPackedGuid128("FacingGUID"' indexes);                      break;                  case 3:                      packet.ReadSingle("FaceDirection"' indexes);                      break;              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\MovementHandler.cs,HandleMoveSetCollisionHeightAck,The following statement contains a magic number: packet.ReadBits("Reason"' 2);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\MovementHandler.cs,HandleSetCollisionHeight,The following statement contains a magic number: packet.ReadBits("Reason"' 2);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\NpcHandler.cs,ReadGossipQuestTextData,The following statement contains a magic number: for (int j = 0; j < 2; ++j)                  packet.ReadInt32("QuestFlags"' idx' j);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\NpcHandler.cs,ReadGossipQuestTextData,The following statement contains a magic number: uint questTitleLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\NpcHandler.cs,HandleVendorInventory,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  NpcVendor vendor = new NpcVendor                  {                      Entry = entry'                      Slot = packet.ReadInt32("Muid"' i)'                      Type = (uint)packet.ReadInt32("Type"' i)                  };                    int maxCount = packet.ReadInt32("Quantity"' i);                  packet.ReadInt64("Price"' i);                  packet.ReadInt32("Durability"' i);                  int buyCount = packet.ReadInt32("StackCount"' i);                  vendor.ExtendedCost = packet.ReadUInt32("ExtendedCostID"' i);                  vendor.PlayerConditionID = packet.ReadUInt32("PlayerConditionFailed"' i);                    vendor.Item = V6_0_2_19033.Parsers.ItemHandler.ReadItemInstance(packet' i);                  vendor.IgnoreFiltering = packet.ReadBit("DoNotFilterOnVendor"' i);                    vendor.MaxCount = maxCount == -1 ? 0 : (uint)maxCount; // TDB                  if (vendor.Type == 2)                      vendor.MaxCount = (uint)buyCount;                    Storage.NpcVendors.Add(vendor' packet.TimeSpan);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\PetHandler.cs,ReadPetFlags,The following statement contains a magic number: var flag = petModeFlag >> 16;
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\PetHandler.cs,HandlePetSpells,The following statement contains a magic number: const int maxCreatureSpells = 10;
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,ReadQuestRewards,The following statement contains a magic number: for (var i = 0; i < 6; ++i)              {                  packet.ReadInt32("ItemID"' idx' i);                  packet.ReadInt32("Quantity"' idx' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,ReadQuestRewards,The following statement contains a magic number: for (var i = 0; i < 4; ++i)              {                  packet.ReadInt32("ItemID"' idx' i);                  packet.ReadInt32("ItemQty"' idx' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,ReadQuestRewards,The following statement contains a magic number: for (var i = 0; i < 5; ++i)              {                  packet.ReadInt32("FactionID"' idx' i);                  packet.ReadInt32("FactionValue"' idx' i);                  packet.ReadInt32("FactionOverride"' idx' i);                  packet.ReadInt32("FactionCapIn"' idx' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,ReadQuestRewards,The following statement contains a magic number: for (var i = 0; i < 3; ++i)                  packet.ReadInt32("SpellCompletionDisplayID"' idx' i);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,ReadQuestRewards,The following statement contains a magic number: for (var i = 0; i < 4; ++i)              {                  packet.ReadInt32("CurrencyID"' idx' i);                  packet.ReadInt32("CurrencyQty"' idx' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,ReadGossipText,The following statement contains a magic number: for (int i = 0; i < 2; i++)                  packet.ReadUInt32("QuestFlags"' indexes' i);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,ReadGossipText,The following statement contains a magic number: var guestTitleLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: quest.RewardDisplaySpellLegion = new uint?[3];
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (int i = 0; i < 3; ++i)                  quest.RewardDisplaySpellLegion[i] = packet.ReadUInt32("RewardDisplaySpell"' i);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: quest.RewardItem = new uint?[4];
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: quest.RewardAmount = new uint?[4];
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: quest.ItemDrop = new uint?[4];
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: quest.ItemDropQuantity = new uint?[4];
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; ++i)              {                  quest.RewardItem[i] = packet.ReadUInt32("RewardItems"' i);                  quest.RewardAmount[i] = packet.ReadUInt32("RewardAmount"' i);                  quest.ItemDrop[i] = packet.ReadUInt32("ItemDrop"' i);                  quest.ItemDropQuantity[i] = packet.ReadUInt32("ItemDropQuantity"' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: quest.RewardChoiceItemID = new uint?[6];
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: quest.RewardChoiceItemQuantity = new uint?[6];
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: quest.RewardChoiceItemDisplayID = new uint?[6];
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (int i = 0; i < 6; ++i) // CliQuestInfoChoiceItem              {                  quest.RewardChoiceItemID[i] = packet.ReadUInt32("RewardChoiceItemID"' i);                  quest.RewardChoiceItemQuantity[i] = packet.ReadUInt32("RewardChoiceItemQuantity"' i);                  quest.RewardChoiceItemDisplayID[i] = packet.ReadUInt32("RewardChoiceItemDisplayID"' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: quest.RewardFactionID = new uint?[5];
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: quest.RewardFactionOverride = new int?[5];
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: quest.RewardFactionValue = new int?[5];
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: quest.RewardFactionCapIn = new int?[5];
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (int i = 0; i < 5; ++i)              {                  quest.RewardFactionID[i] = packet.ReadUInt32("RewardFactionID"' i);                  quest.RewardFactionValue[i] = packet.ReadInt32("RewardFactionValue"' i);                  quest.RewardFactionOverride[i] = packet.ReadInt32("RewardFactionOverride"' i);                  quest.RewardFactionCapIn[i] = packet.ReadInt32("RewardFactionCapIn"' i);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: quest.RewardCurrencyID = new uint?[4];
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: quest.RewardCurrencyCount = new uint?[4];
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; ++i)              {                  quest.RewardCurrencyID[i] = packet.ReadUInt32("RewardCurrencyID");                  quest.RewardCurrencyCount[i] = packet.ReadUInt32("RewardCurrencyQty");              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: uint logTitleLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: uint logDescriptionLen = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: uint questDescriptionLen = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: uint areaDescriptionLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: uint questGiverTextWindowLen = packet.ReadBits(10);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: uint questGiverTargetNameLen = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: uint questTurnTextWindowLen = packet.ReadBits(10);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: uint questTurnTargetNameLen = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: uint questCompletionLogLen = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (uint i = 0; i < int2946; ++i)              {                  var objectiveId = packet.ReadEntry("Id"' i);                    QuestObjective questInfoObjective = new QuestObjective                  {                      ID = (uint)objectiveId.Key'                      QuestID = (uint)id.Key                  };                  questInfoObjective.Type = packet.ReadByteE<QuestRequirementType>("Quest Requirement Type"' i);                  questInfoObjective.StorageIndex = packet.ReadSByte("StorageIndex"' i);                  questInfoObjective.Order = i;                  questInfoObjective.ObjectID = packet.ReadInt32("ObjectID"' i);                  questInfoObjective.Amount = packet.ReadInt32("Amount"' i);                  questInfoObjective.Flags = packet.ReadUInt32("Flags"' i);                  if (ClientVersion.AddedInVersion(ClientVersionBuild.V7_1_0_22900))                      questInfoObjective.Flags2 = packet.ReadUInt32("Flags2"' i);                  questInfoObjective.ProgressBarWeight = packet.ReadSingle("ProgressBarWeight"' i);                    int visualEffectsCount = packet.ReadInt32("VisualEffects"' i);                  for (uint j = 0; j < visualEffectsCount; ++j)                  {                      QuestVisualEffect questVisualEffect = new QuestVisualEffect                      {                          ID = questInfoObjective.ID'                          Index = j'                          VisualEffect = packet.ReadInt32("VisualEffectId"' i' j)                      };                        Storage.QuestVisualEffects.Add(questVisualEffect' packet.TimeSpan);                  }                    packet.ResetBitReader();                    uint bits6 = packet.ReadBits(8);                  questInfoObjective.Description = packet.ReadWoWString("Description"' bits6' i);                    if (BinaryPacketReader.GetLocale() != LocaleConstant.enUS && questInfoObjective.Description != string.Empty)                  {                      QuestObjectivesLocale localesQuestObjectives = new QuestObjectivesLocale                      {                          ID = (uint)objectiveId.Key'                          QuestId = (uint)id.Key'                          StorageIndex = questInfoObjective.StorageIndex'                          Description = questInfoObjective.Description                      };                        Storage.LocalesQuestObjectives.Add(localesQuestObjectives' packet.TimeSpan);                  }                    Storage.QuestObjectives.Add(questInfoObjective' packet.TimeSpan);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,QuestGiverOfferReward,The following statement contains a magic number: for (int i = 0; i < 2; i++)                  packet.ReadInt32("QuestFlags"' i);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,QuestGiverOfferReward,The following statement contains a magic number: uint questTitleLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,QuestGiverOfferReward,The following statement contains a magic number: uint rewardTextLen = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,QuestGiverOfferReward,The following statement contains a magic number: uint portraitGiverTextLen = packet.ReadBits(10);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,QuestGiverOfferReward,The following statement contains a magic number: uint portraitGiverNameLen = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,QuestGiverOfferReward,The following statement contains a magic number: uint portraitTurnInTextLen = packet.ReadBits(10);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,QuestGiverOfferReward,The following statement contains a magic number: uint portraitTurnInNameLen = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestGiverQuestDetails,The following statement contains a magic number: for (int i = 0; i < 2; i++)                  packet.ReadInt32("QuestFlags"' i);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestGiverQuestDetails,The following statement contains a magic number: uint questTitleLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestGiverQuestDetails,The following statement contains a magic number: uint descriptionTextLen = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestGiverQuestDetails,The following statement contains a magic number: uint logDescriptionLen = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestGiverQuestDetails,The following statement contains a magic number: uint portraitGiverTextLen = packet.ReadBits(10);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestGiverQuestDetails,The following statement contains a magic number: uint portraitGiverNameLen = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestGiverQuestDetails,The following statement contains a magic number: uint portraitTurnInTextLen = packet.ReadBits(10);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestGiverQuestDetails,The following statement contains a magic number: uint portraitTurnInNameLen = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestGiverRequestItems,The following statement contains a magic number: for (int i = 0; i < 2; i++)                  packet.ReadInt32("QuestFlags"' i);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestGiverRequestItems,The following statement contains a magic number: uint questTitleLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestGiverRequestItems,The following statement contains a magic number: uint completionTextLen = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestgiverQuestList,The following statement contains a magic number: uint greetingLen = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestGiverInvalidQuest,The following statement contains a magic number: var len = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleDisplayPlayerChoice,The following statement contains a magic number: var questionLength = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,ReadPlayerChoiceResponse,The following statement contains a magic number: var answerLength = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,ReadPlayerChoiceResponse,The following statement contains a magic number: var headerLength = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,ReadPlayerChoiceResponse,The following statement contains a magic number: var descriptionLength = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,ReadPlayerChoiceResponse,The following statement contains a magic number: var confirmationTextLength = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,ReadSpellCastRequest,The following statement contains a magic number: for (var i = 0; i < 2; i++)                  packet.ReadInt32("Misc"' idx' i);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,ReadSpellCastRequest,The following statement contains a magic number: packet.ReadBits("SendCastFlags"' 5' idx);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,ReadSpellCastRequest,The following statement contains a magic number: var weightCount = packet.ReadBits("WeightCount"' 2' idx);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,ReadSpellCastData,The following statement contains a magic number: packet.ReadBits("CastFlagsEx"' 22' idx);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,ReadSpellCastData,The following statement contains a magic number: var hitTargetsCount = packet.ReadBits("HitTargetsCount"' 16' idx);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,ReadSpellCastData,The following statement contains a magic number: var missTargetsCount = packet.ReadBits("MissTargetsCount"' 16' idx);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,ReadSpellCastData,The following statement contains a magic number: var missStatusCount = packet.ReadBits("MissStatusCount"' 16' idx);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,ReadSpellCastData,The following statement contains a magic number: var remainingPowerCount = packet.ReadBits("RemainingPowerCount"' 9' idx);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,ReadSpellCastData,The following statement contains a magic number: var targetPointsCount = packet.ReadBits("TargetPointsCount"' 16' idx);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,ReadSpellTargetData,The following statement contains a magic number: packet.ReadBitsE<TargetFlag>("Flags"' 25' idx);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,ReadSpellTargetData,The following statement contains a magic number: var nameLength = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,ReadSpellTargetData,The following statement contains a magic number: if (Settings.UseDBC && dstLocation != null && mapID != -1)              {                  for (uint i = 0; i < 32; i++)                  {                      var tuple = Tuple.Create(spellID' i);                      if (DBC.SpellEffectStores.ContainsKey(tuple))                      {                          var effect = DBC.SpellEffectStores[tuple];                          if ((Targets)effect.ImplicitTarget[0] == Targets.TARGET_DEST_DB || (Targets)effect.ImplicitTarget[1] == Targets.TARGET_DEST_DB)                          {                              string effectHelper = $"Spell: { StoreGetters.GetName(StoreNameType.Spell' (int)spellID) } Efffect: { effect.Effect } ({ (SpellEffects)effect.Effect })";                                var spellTargetPosition = new SpellTargetPosition                              {                                  ID = spellID'                                  EffectIndex = (byte)i'                                  PositionX = dstLocation.X'                                  PositionY = dstLocation.Y'                                  PositionZ = dstLocation.Z'                                  MapID = (ushort)mapID'                                  EffectHelper = effectHelper                              };                                if (!Storage.SpellTargetPositions.ContainsKey(spellTargetPosition))                                  Storage.SpellTargetPositions.Add(spellTargetPosition);                          }                      }                  }              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,ReadSandboxScalingData,The following statement contains a magic number: packet.ReadBits("Type"' 3' idx);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,ReadSpellCastLogData,The following statement contains a magic number: var spellLogPowerDataCount = packet.ReadBits("SpellLogPowerData"' 9' idx);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: var count = packet.ReadBits("AurasCount"' 9);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  var aura = new Aura();                    packet.ReadByte("Slot"' i);                    packet.ResetBitReader();                  var hasAura = packet.ReadBit("HasAura"' i);                  if (hasAura)                  {                      packet.ReadPackedGuid128("CastID"' i);                      aura.SpellId = (uint)packet.ReadInt32<SpellId>("SpellID"' i);                      packet.ReadInt32("SpellXSpellVisualID"' i);                      aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                      packet.ReadInt32("ActiveFlags"' i);                      aura.Level = packet.ReadUInt16("CastLevel"' i);                      aura.Charges = packet.ReadByte("Applications"' i);                        packet.ResetBitReader();                        var hasCastUnit = packet.ReadBit("HasCastUnit"' i);                      var hasDuration = packet.ReadBit("HasDuration"' i);                      var hasRemaining = packet.ReadBit("HasRemaining"' i);                        var hasTimeMod = packet.ReadBit("HasTimeMod"' i);                        var pointsCount = packet.ReadBits("PointsCount"' 6' i);                      var effectCount = packet.ReadBits("EstimatedPoints"' 6' i);                        var hasSandboxScaling = packet.ReadBit("HasSandboxScaling"' i);                        if (ClientVersion.AddedInVersion(ClientVersionBuild.V7_2_0_23826))                      {                          if (hasSandboxScaling)                              ReadSandboxScalingData(packet' "SandboxScalingData"' i);                      }                        if (hasCastUnit)                          packet.ReadPackedGuid128("CastUnit"' i);                        aura.Duration = hasDuration ? (int)packet.ReadUInt32("Duration"' i) : 0;                      aura.MaxDuration = hasRemaining ? (int)packet.ReadUInt32("Remaining"' i) : 0;                        if (hasTimeMod)                          packet.ReadSingle("TimeMod");                        for (var j = 0; j < pointsCount; ++j)                          packet.ReadSingle("Points"' i' j);                        for (var j = 0; j < effectCount; ++j)                          packet.ReadSingle("EstimatedPoints"' i' j);                        if (ClientVersion.RemovedInVersion(ClientVersionBuild.V7_2_0_23826))                      {                          if (hasSandboxScaling)                              ReadSandboxScalingData(packet' "SandboxScalingData"' i);                      }                        auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  var aura = new Aura();                    packet.ReadByte("Slot"' i);                    packet.ResetBitReader();                  var hasAura = packet.ReadBit("HasAura"' i);                  if (hasAura)                  {                      packet.ReadPackedGuid128("CastID"' i);                      aura.SpellId = (uint)packet.ReadInt32<SpellId>("SpellID"' i);                      packet.ReadInt32("SpellXSpellVisualID"' i);                      aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                      packet.ReadInt32("ActiveFlags"' i);                      aura.Level = packet.ReadUInt16("CastLevel"' i);                      aura.Charges = packet.ReadByte("Applications"' i);                        packet.ResetBitReader();                        var hasCastUnit = packet.ReadBit("HasCastUnit"' i);                      var hasDuration = packet.ReadBit("HasDuration"' i);                      var hasRemaining = packet.ReadBit("HasRemaining"' i);                        var hasTimeMod = packet.ReadBit("HasTimeMod"' i);                        var pointsCount = packet.ReadBits("PointsCount"' 6' i);                      var effectCount = packet.ReadBits("EstimatedPoints"' 6' i);                        var hasSandboxScaling = packet.ReadBit("HasSandboxScaling"' i);                        if (ClientVersion.AddedInVersion(ClientVersionBuild.V7_2_0_23826))                      {                          if (hasSandboxScaling)                              ReadSandboxScalingData(packet' "SandboxScalingData"' i);                      }                        if (hasCastUnit)                          packet.ReadPackedGuid128("CastUnit"' i);                        aura.Duration = hasDuration ? (int)packet.ReadUInt32("Duration"' i) : 0;                      aura.MaxDuration = hasRemaining ? (int)packet.ReadUInt32("Remaining"' i) : 0;                        if (hasTimeMod)                          packet.ReadSingle("TimeMod");                        for (var j = 0; j < pointsCount; ++j)                          packet.ReadSingle("Points"' i' j);                        for (var j = 0; j < effectCount; ++j)                          packet.ReadSingle("EstimatedPoints"' i' j);                        if (ClientVersion.RemovedInVersion(ClientVersionBuild.V7_2_0_23826))                      {                          if (hasSandboxScaling)                              ReadSandboxScalingData(packet' "SandboxScalingData"' i);                      }                        auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,HandleLearnTalents,The following statement contains a magic number: var talentCount = packet.ReadBits("TalentCount"' 6);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\SpellHandler.cs,HandleResurrectRequest,The following statement contains a magic number: var len = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasMovementUpdate)              {                  packet.ResetBitReader();                  packet.ReadPackedGuid128("MoverGUID"' index);                    packet.ReadUInt32("MoveTime"' index);                  moveInfo.Position = packet.ReadVector3("Position"' index);                  moveInfo.Orientation = packet.ReadSingle("Orientation"' index);                    packet.ReadSingle("Pitch"' index);                  packet.ReadSingle("StepUpStartElevation"' index);                    var removeForcesIDsCount = packet.ReadInt32();                  packet.ReadInt32("MoveIndex"' index);                    for (var i = 0; i < removeForcesIDsCount; i++)                      packet.ReadPackedGuid128("RemoveForcesIDs"' index' i);                    moveInfo.Flags = (MovementFlag)packet.ReadBitsE<V6_0_2_19033.Enums.MovementFlag>("Movement Flags"' 30' index);                  moveInfo.FlagsExtra = (MovementFlagExtra)packet.ReadBitsE<Enums.MovementFlags2>("Extra Movement Flags"' 18' index);                    var hasTransport = packet.ReadBit("Has Transport Data"' index);                  var hasFall = packet.ReadBit("Has Fall Data"' index);                  packet.ReadBit("HasSpline"' index);                  packet.ReadBit("HeightChangeFailed"' index);                  packet.ReadBit("RemoteTimeValid"' index);                    if (hasTransport)                  {                      packet.ResetBitReader();                      moveInfo.TransportGuid = packet.ReadPackedGuid128("Transport Guid"' index);                      moveInfo.TransportOffset = packet.ReadVector4("Transport Position"' index);                      packet.ReadSByte("Transport Seat"' index);                      packet.ReadInt32("Transport Time"' index);                        var hasPrevMoveTime = packet.ReadBit("HasPrevMoveTime"' index);                      var hasVehicleRecID = packet.ReadBit("HasVehicleRecID"' index);                        if (hasPrevMoveTime)                          packet.ReadUInt32("PrevMoveTime"' index);                        if (hasVehicleRecID)                          packet.ReadUInt32("VehicleRecID"' index);                  }                    if (hasFall)                  {                      packet.ResetBitReader();                      packet.ReadUInt32("Fall Time"' index);                      packet.ReadSingle("JumpVelocity"' index);                        var hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                      if (hasFallDirection)                      {                          packet.ReadVector2("Fall"' index);                          packet.ReadSingle("Horizontal Speed"' index);                      }                  }                    moveInfo.WalkSpeed = packet.ReadSingle("WalkSpeed"' index) / 2.5f;                  moveInfo.RunSpeed = packet.ReadSingle("RunSpeed"' index) / 7.0f;                  packet.ReadSingle("RunBackSpeed"' index);                  packet.ReadSingle("SwimSpeed"' index);                  packet.ReadSingle("SwimBackSpeed"' index);                  packet.ReadSingle("FlightSpeed"' index);                  packet.ReadSingle("FlightBackSpeed"' index);                  packet.ReadSingle("TurnRate"' index);                  packet.ReadSingle("PitchRate"' index);                    var movementForceCount = packet.ReadInt32("MovementForceCount"' index);                    packet.ResetBitReader();                    moveInfo.HasSplineData = packet.ReadBit("HasMovementSpline"' index);                    for (var i = 0; i < movementForceCount; ++i)                  {                      packet.ResetBitReader();                      packet.ReadPackedGuid128("Id"' index);                      packet.ReadVector3("Origin"' index);                      packet.ReadVector3("Direction"' index);                      packet.ReadInt32("TransportID"' index);                      packet.ReadSingle("Magnitude"' index);                      packet.ReadBits("Type"' 2' index);                  }                    if (moveInfo.HasSplineData)                  {                      packet.ResetBitReader();                      packet.ReadInt32("ID"' index);                      packet.ReadVector3("Destination"' index);                        var hasMovementSplineMove = packet.ReadBit("MovementSplineMove"' index);                      if (hasMovementSplineMove)                      {                          packet.ResetBitReader();                            packet.ReadUInt32E<SplineFlag>("SplineFlags"' index);                          packet.ReadUInt32("Elapsed"' index);                          packet.ReadUInt32("Duration"' index);                          packet.ReadSingle("DurationModifier"' index);                          packet.ReadSingle("NextDurationModifier"' index);                            var face = packet.ReadBits("Face"' 2' index);                            var hasJumpGravity = packet.ReadBit("HasJumpGravity"' index);                          var hasSpecialTime = packet.ReadBit("HasSpecialTime"' index);                            var pointsCount = packet.ReadBits("PointsCount"' 16' index);                            packet.ReadBitsE<SplineMode>("Mode"' 2' index);                            var hasSplineFilterKey = packet.ReadBit("HasSplineFilterKey"' index);                          var hasSpellEffectExtraData = packet.ReadBit("HasSpellEffectExtraData"' index);                            if (hasSplineFilterKey)                          {                              packet.ResetBitReader();                              var filterKeysCount = packet.ReadUInt32("FilterKeysCount"' index);                              for (var i = 0; i < filterKeysCount; ++i)                              {                                  packet.ReadSingle("In"' index' i);                                  packet.ReadSingle("Out"' index' i);                              }                                packet.ReadBits("FilterFlags"' 2' index);                          }                            if (face == 3)                              packet.ReadSingle("FaceDirection"' index);                            if (face == 2)                              packet.ReadPackedGuid128("FaceGUID"' index);                            if (face == 1)                              packet.ReadVector3("FaceSpot"' index);                            if (hasJumpGravity)                              packet.ReadSingle("JumpGravity"' index);                            if (hasSpecialTime)                              packet.ReadInt32("SpecialTime"' index);                            for (var i = 0; i < pointsCount; ++i)                              packet.ReadVector3("Points"' index' i);                            if (hasSpellEffectExtraData)                          {                              packet.ReadPackedGuid128("TargetGUID"' index);                              packet.ReadUInt32("SpellVisualID"' index);                              packet.ReadUInt32("ProgressCurveID"' index);                              packet.ReadUInt32("ParabolicCurveID"' index);                          }                      }                  }              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasMovementUpdate)              {                  packet.ResetBitReader();                  packet.ReadPackedGuid128("MoverGUID"' index);                    packet.ReadUInt32("MoveTime"' index);                  moveInfo.Position = packet.ReadVector3("Position"' index);                  moveInfo.Orientation = packet.ReadSingle("Orientation"' index);                    packet.ReadSingle("Pitch"' index);                  packet.ReadSingle("StepUpStartElevation"' index);                    var removeForcesIDsCount = packet.ReadInt32();                  packet.ReadInt32("MoveIndex"' index);                    for (var i = 0; i < removeForcesIDsCount; i++)                      packet.ReadPackedGuid128("RemoveForcesIDs"' index' i);                    moveInfo.Flags = (MovementFlag)packet.ReadBitsE<V6_0_2_19033.Enums.MovementFlag>("Movement Flags"' 30' index);                  moveInfo.FlagsExtra = (MovementFlagExtra)packet.ReadBitsE<Enums.MovementFlags2>("Extra Movement Flags"' 18' index);                    var hasTransport = packet.ReadBit("Has Transport Data"' index);                  var hasFall = packet.ReadBit("Has Fall Data"' index);                  packet.ReadBit("HasSpline"' index);                  packet.ReadBit("HeightChangeFailed"' index);                  packet.ReadBit("RemoteTimeValid"' index);                    if (hasTransport)                  {                      packet.ResetBitReader();                      moveInfo.TransportGuid = packet.ReadPackedGuid128("Transport Guid"' index);                      moveInfo.TransportOffset = packet.ReadVector4("Transport Position"' index);                      packet.ReadSByte("Transport Seat"' index);                      packet.ReadInt32("Transport Time"' index);                        var hasPrevMoveTime = packet.ReadBit("HasPrevMoveTime"' index);                      var hasVehicleRecID = packet.ReadBit("HasVehicleRecID"' index);                        if (hasPrevMoveTime)                          packet.ReadUInt32("PrevMoveTime"' index);                        if (hasVehicleRecID)                          packet.ReadUInt32("VehicleRecID"' index);                  }                    if (hasFall)                  {                      packet.ResetBitReader();                      packet.ReadUInt32("Fall Time"' index);                      packet.ReadSingle("JumpVelocity"' index);                        var hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                      if (hasFallDirection)                      {                          packet.ReadVector2("Fall"' index);                          packet.ReadSingle("Horizontal Speed"' index);                      }                  }                    moveInfo.WalkSpeed = packet.ReadSingle("WalkSpeed"' index) / 2.5f;                  moveInfo.RunSpeed = packet.ReadSingle("RunSpeed"' index) / 7.0f;                  packet.ReadSingle("RunBackSpeed"' index);                  packet.ReadSingle("SwimSpeed"' index);                  packet.ReadSingle("SwimBackSpeed"' index);                  packet.ReadSingle("FlightSpeed"' index);                  packet.ReadSingle("FlightBackSpeed"' index);                  packet.ReadSingle("TurnRate"' index);                  packet.ReadSingle("PitchRate"' index);                    var movementForceCount = packet.ReadInt32("MovementForceCount"' index);                    packet.ResetBitReader();                    moveInfo.HasSplineData = packet.ReadBit("HasMovementSpline"' index);                    for (var i = 0; i < movementForceCount; ++i)                  {                      packet.ResetBitReader();                      packet.ReadPackedGuid128("Id"' index);                      packet.ReadVector3("Origin"' index);                      packet.ReadVector3("Direction"' index);                      packet.ReadInt32("TransportID"' index);                      packet.ReadSingle("Magnitude"' index);                      packet.ReadBits("Type"' 2' index);                  }                    if (moveInfo.HasSplineData)                  {                      packet.ResetBitReader();                      packet.ReadInt32("ID"' index);                      packet.ReadVector3("Destination"' index);                        var hasMovementSplineMove = packet.ReadBit("MovementSplineMove"' index);                      if (hasMovementSplineMove)                      {                          packet.ResetBitReader();                            packet.ReadUInt32E<SplineFlag>("SplineFlags"' index);                          packet.ReadUInt32("Elapsed"' index);                          packet.ReadUInt32("Duration"' index);                          packet.ReadSingle("DurationModifier"' index);                          packet.ReadSingle("NextDurationModifier"' index);                            var face = packet.ReadBits("Face"' 2' index);                            var hasJumpGravity = packet.ReadBit("HasJumpGravity"' index);                          var hasSpecialTime = packet.ReadBit("HasSpecialTime"' index);                            var pointsCount = packet.ReadBits("PointsCount"' 16' index);                            packet.ReadBitsE<SplineMode>("Mode"' 2' index);                            var hasSplineFilterKey = packet.ReadBit("HasSplineFilterKey"' index);                          var hasSpellEffectExtraData = packet.ReadBit("HasSpellEffectExtraData"' index);                            if (hasSplineFilterKey)                          {                              packet.ResetBitReader();                              var filterKeysCount = packet.ReadUInt32("FilterKeysCount"' index);                              for (var i = 0; i < filterKeysCount; ++i)                              {                                  packet.ReadSingle("In"' index' i);                                  packet.ReadSingle("Out"' index' i);                              }                                packet.ReadBits("FilterFlags"' 2' index);                          }                            if (face == 3)                              packet.ReadSingle("FaceDirection"' index);                            if (face == 2)                              packet.ReadPackedGuid128("FaceGUID"' index);                            if (face == 1)                              packet.ReadVector3("FaceSpot"' index);                            if (hasJumpGravity)                              packet.ReadSingle("JumpGravity"' index);                            if (hasSpecialTime)                              packet.ReadInt32("SpecialTime"' index);                            for (var i = 0; i < pointsCount; ++i)                              packet.ReadVector3("Points"' index' i);                            if (hasSpellEffectExtraData)                          {                              packet.ReadPackedGuid128("TargetGUID"' index);                              packet.ReadUInt32("SpellVisualID"' index);                              packet.ReadUInt32("ProgressCurveID"' index);                              packet.ReadUInt32("ParabolicCurveID"' index);                          }                      }                  }              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasMovementUpdate)              {                  packet.ResetBitReader();                  packet.ReadPackedGuid128("MoverGUID"' index);                    packet.ReadUInt32("MoveTime"' index);                  moveInfo.Position = packet.ReadVector3("Position"' index);                  moveInfo.Orientation = packet.ReadSingle("Orientation"' index);                    packet.ReadSingle("Pitch"' index);                  packet.ReadSingle("StepUpStartElevation"' index);                    var removeForcesIDsCount = packet.ReadInt32();                  packet.ReadInt32("MoveIndex"' index);                    for (var i = 0; i < removeForcesIDsCount; i++)                      packet.ReadPackedGuid128("RemoveForcesIDs"' index' i);                    moveInfo.Flags = (MovementFlag)packet.ReadBitsE<V6_0_2_19033.Enums.MovementFlag>("Movement Flags"' 30' index);                  moveInfo.FlagsExtra = (MovementFlagExtra)packet.ReadBitsE<Enums.MovementFlags2>("Extra Movement Flags"' 18' index);                    var hasTransport = packet.ReadBit("Has Transport Data"' index);                  var hasFall = packet.ReadBit("Has Fall Data"' index);                  packet.ReadBit("HasSpline"' index);                  packet.ReadBit("HeightChangeFailed"' index);                  packet.ReadBit("RemoteTimeValid"' index);                    if (hasTransport)                  {                      packet.ResetBitReader();                      moveInfo.TransportGuid = packet.ReadPackedGuid128("Transport Guid"' index);                      moveInfo.TransportOffset = packet.ReadVector4("Transport Position"' index);                      packet.ReadSByte("Transport Seat"' index);                      packet.ReadInt32("Transport Time"' index);                        var hasPrevMoveTime = packet.ReadBit("HasPrevMoveTime"' index);                      var hasVehicleRecID = packet.ReadBit("HasVehicleRecID"' index);                        if (hasPrevMoveTime)                          packet.ReadUInt32("PrevMoveTime"' index);                        if (hasVehicleRecID)                          packet.ReadUInt32("VehicleRecID"' index);                  }                    if (hasFall)                  {                      packet.ResetBitReader();                      packet.ReadUInt32("Fall Time"' index);                      packet.ReadSingle("JumpVelocity"' index);                        var hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                      if (hasFallDirection)                      {                          packet.ReadVector2("Fall"' index);                          packet.ReadSingle("Horizontal Speed"' index);                      }                  }                    moveInfo.WalkSpeed = packet.ReadSingle("WalkSpeed"' index) / 2.5f;                  moveInfo.RunSpeed = packet.ReadSingle("RunSpeed"' index) / 7.0f;                  packet.ReadSingle("RunBackSpeed"' index);                  packet.ReadSingle("SwimSpeed"' index);                  packet.ReadSingle("SwimBackSpeed"' index);                  packet.ReadSingle("FlightSpeed"' index);                  packet.ReadSingle("FlightBackSpeed"' index);                  packet.ReadSingle("TurnRate"' index);                  packet.ReadSingle("PitchRate"' index);                    var movementForceCount = packet.ReadInt32("MovementForceCount"' index);                    packet.ResetBitReader();                    moveInfo.HasSplineData = packet.ReadBit("HasMovementSpline"' index);                    for (var i = 0; i < movementForceCount; ++i)                  {                      packet.ResetBitReader();                      packet.ReadPackedGuid128("Id"' index);                      packet.ReadVector3("Origin"' index);                      packet.ReadVector3("Direction"' index);                      packet.ReadInt32("TransportID"' index);                      packet.ReadSingle("Magnitude"' index);                      packet.ReadBits("Type"' 2' index);                  }                    if (moveInfo.HasSplineData)                  {                      packet.ResetBitReader();                      packet.ReadInt32("ID"' index);                      packet.ReadVector3("Destination"' index);                        var hasMovementSplineMove = packet.ReadBit("MovementSplineMove"' index);                      if (hasMovementSplineMove)                      {                          packet.ResetBitReader();                            packet.ReadUInt32E<SplineFlag>("SplineFlags"' index);                          packet.ReadUInt32("Elapsed"' index);                          packet.ReadUInt32("Duration"' index);                          packet.ReadSingle("DurationModifier"' index);                          packet.ReadSingle("NextDurationModifier"' index);                            var face = packet.ReadBits("Face"' 2' index);                            var hasJumpGravity = packet.ReadBit("HasJumpGravity"' index);                          var hasSpecialTime = packet.ReadBit("HasSpecialTime"' index);                            var pointsCount = packet.ReadBits("PointsCount"' 16' index);                            packet.ReadBitsE<SplineMode>("Mode"' 2' index);                            var hasSplineFilterKey = packet.ReadBit("HasSplineFilterKey"' index);                          var hasSpellEffectExtraData = packet.ReadBit("HasSpellEffectExtraData"' index);                            if (hasSplineFilterKey)                          {                              packet.ResetBitReader();                              var filterKeysCount = packet.ReadUInt32("FilterKeysCount"' index);                              for (var i = 0; i < filterKeysCount; ++i)                              {                                  packet.ReadSingle("In"' index' i);                                  packet.ReadSingle("Out"' index' i);                              }                                packet.ReadBits("FilterFlags"' 2' index);                          }                            if (face == 3)                              packet.ReadSingle("FaceDirection"' index);                            if (face == 2)                              packet.ReadPackedGuid128("FaceGUID"' index);                            if (face == 1)                              packet.ReadVector3("FaceSpot"' index);                            if (hasJumpGravity)                              packet.ReadSingle("JumpGravity"' index);                            if (hasSpecialTime)                              packet.ReadInt32("SpecialTime"' index);                            for (var i = 0; i < pointsCount; ++i)                              packet.ReadVector3("Points"' index' i);                            if (hasSpellEffectExtraData)                          {                              packet.ReadPackedGuid128("TargetGUID"' index);                              packet.ReadUInt32("SpellVisualID"' index);                              packet.ReadUInt32("ProgressCurveID"' index);                              packet.ReadUInt32("ParabolicCurveID"' index);                          }                      }                  }              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasMovementUpdate)              {                  packet.ResetBitReader();                  packet.ReadPackedGuid128("MoverGUID"' index);                    packet.ReadUInt32("MoveTime"' index);                  moveInfo.Position = packet.ReadVector3("Position"' index);                  moveInfo.Orientation = packet.ReadSingle("Orientation"' index);                    packet.ReadSingle("Pitch"' index);                  packet.ReadSingle("StepUpStartElevation"' index);                    var removeForcesIDsCount = packet.ReadInt32();                  packet.ReadInt32("MoveIndex"' index);                    for (var i = 0; i < removeForcesIDsCount; i++)                      packet.ReadPackedGuid128("RemoveForcesIDs"' index' i);                    moveInfo.Flags = (MovementFlag)packet.ReadBitsE<V6_0_2_19033.Enums.MovementFlag>("Movement Flags"' 30' index);                  moveInfo.FlagsExtra = (MovementFlagExtra)packet.ReadBitsE<Enums.MovementFlags2>("Extra Movement Flags"' 18' index);                    var hasTransport = packet.ReadBit("Has Transport Data"' index);                  var hasFall = packet.ReadBit("Has Fall Data"' index);                  packet.ReadBit("HasSpline"' index);                  packet.ReadBit("HeightChangeFailed"' index);                  packet.ReadBit("RemoteTimeValid"' index);                    if (hasTransport)                  {                      packet.ResetBitReader();                      moveInfo.TransportGuid = packet.ReadPackedGuid128("Transport Guid"' index);                      moveInfo.TransportOffset = packet.ReadVector4("Transport Position"' index);                      packet.ReadSByte("Transport Seat"' index);                      packet.ReadInt32("Transport Time"' index);                        var hasPrevMoveTime = packet.ReadBit("HasPrevMoveTime"' index);                      var hasVehicleRecID = packet.ReadBit("HasVehicleRecID"' index);                        if (hasPrevMoveTime)                          packet.ReadUInt32("PrevMoveTime"' index);                        if (hasVehicleRecID)                          packet.ReadUInt32("VehicleRecID"' index);                  }                    if (hasFall)                  {                      packet.ResetBitReader();                      packet.ReadUInt32("Fall Time"' index);                      packet.ReadSingle("JumpVelocity"' index);                        var hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                      if (hasFallDirection)                      {                          packet.ReadVector2("Fall"' index);                          packet.ReadSingle("Horizontal Speed"' index);                      }                  }                    moveInfo.WalkSpeed = packet.ReadSingle("WalkSpeed"' index) / 2.5f;                  moveInfo.RunSpeed = packet.ReadSingle("RunSpeed"' index) / 7.0f;                  packet.ReadSingle("RunBackSpeed"' index);                  packet.ReadSingle("SwimSpeed"' index);                  packet.ReadSingle("SwimBackSpeed"' index);                  packet.ReadSingle("FlightSpeed"' index);                  packet.ReadSingle("FlightBackSpeed"' index);                  packet.ReadSingle("TurnRate"' index);                  packet.ReadSingle("PitchRate"' index);                    var movementForceCount = packet.ReadInt32("MovementForceCount"' index);                    packet.ResetBitReader();                    moveInfo.HasSplineData = packet.ReadBit("HasMovementSpline"' index);                    for (var i = 0; i < movementForceCount; ++i)                  {                      packet.ResetBitReader();                      packet.ReadPackedGuid128("Id"' index);                      packet.ReadVector3("Origin"' index);                      packet.ReadVector3("Direction"' index);                      packet.ReadInt32("TransportID"' index);                      packet.ReadSingle("Magnitude"' index);                      packet.ReadBits("Type"' 2' index);                  }                    if (moveInfo.HasSplineData)                  {                      packet.ResetBitReader();                      packet.ReadInt32("ID"' index);                      packet.ReadVector3("Destination"' index);                        var hasMovementSplineMove = packet.ReadBit("MovementSplineMove"' index);                      if (hasMovementSplineMove)                      {                          packet.ResetBitReader();                            packet.ReadUInt32E<SplineFlag>("SplineFlags"' index);                          packet.ReadUInt32("Elapsed"' index);                          packet.ReadUInt32("Duration"' index);                          packet.ReadSingle("DurationModifier"' index);                          packet.ReadSingle("NextDurationModifier"' index);                            var face = packet.ReadBits("Face"' 2' index);                            var hasJumpGravity = packet.ReadBit("HasJumpGravity"' index);                          var hasSpecialTime = packet.ReadBit("HasSpecialTime"' index);                            var pointsCount = packet.ReadBits("PointsCount"' 16' index);                            packet.ReadBitsE<SplineMode>("Mode"' 2' index);                            var hasSplineFilterKey = packet.ReadBit("HasSplineFilterKey"' index);                          var hasSpellEffectExtraData = packet.ReadBit("HasSpellEffectExtraData"' index);                            if (hasSplineFilterKey)                          {                              packet.ResetBitReader();                              var filterKeysCount = packet.ReadUInt32("FilterKeysCount"' index);                              for (var i = 0; i < filterKeysCount; ++i)                              {                                  packet.ReadSingle("In"' index' i);                                  packet.ReadSingle("Out"' index' i);                              }                                packet.ReadBits("FilterFlags"' 2' index);                          }                            if (face == 3)                              packet.ReadSingle("FaceDirection"' index);                            if (face == 2)                              packet.ReadPackedGuid128("FaceGUID"' index);                            if (face == 1)                              packet.ReadVector3("FaceSpot"' index);                            if (hasJumpGravity)                              packet.ReadSingle("JumpGravity"' index);                            if (hasSpecialTime)                              packet.ReadInt32("SpecialTime"' index);                            for (var i = 0; i < pointsCount; ++i)                              packet.ReadVector3("Points"' index' i);                            if (hasSpellEffectExtraData)                          {                              packet.ReadPackedGuid128("TargetGUID"' index);                              packet.ReadUInt32("SpellVisualID"' index);                              packet.ReadUInt32("ProgressCurveID"' index);                              packet.ReadUInt32("ParabolicCurveID"' index);                          }                      }                  }              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasMovementUpdate)              {                  packet.ResetBitReader();                  packet.ReadPackedGuid128("MoverGUID"' index);                    packet.ReadUInt32("MoveTime"' index);                  moveInfo.Position = packet.ReadVector3("Position"' index);                  moveInfo.Orientation = packet.ReadSingle("Orientation"' index);                    packet.ReadSingle("Pitch"' index);                  packet.ReadSingle("StepUpStartElevation"' index);                    var removeForcesIDsCount = packet.ReadInt32();                  packet.ReadInt32("MoveIndex"' index);                    for (var i = 0; i < removeForcesIDsCount; i++)                      packet.ReadPackedGuid128("RemoveForcesIDs"' index' i);                    moveInfo.Flags = (MovementFlag)packet.ReadBitsE<V6_0_2_19033.Enums.MovementFlag>("Movement Flags"' 30' index);                  moveInfo.FlagsExtra = (MovementFlagExtra)packet.ReadBitsE<Enums.MovementFlags2>("Extra Movement Flags"' 18' index);                    var hasTransport = packet.ReadBit("Has Transport Data"' index);                  var hasFall = packet.ReadBit("Has Fall Data"' index);                  packet.ReadBit("HasSpline"' index);                  packet.ReadBit("HeightChangeFailed"' index);                  packet.ReadBit("RemoteTimeValid"' index);                    if (hasTransport)                  {                      packet.ResetBitReader();                      moveInfo.TransportGuid = packet.ReadPackedGuid128("Transport Guid"' index);                      moveInfo.TransportOffset = packet.ReadVector4("Transport Position"' index);                      packet.ReadSByte("Transport Seat"' index);                      packet.ReadInt32("Transport Time"' index);                        var hasPrevMoveTime = packet.ReadBit("HasPrevMoveTime"' index);                      var hasVehicleRecID = packet.ReadBit("HasVehicleRecID"' index);                        if (hasPrevMoveTime)                          packet.ReadUInt32("PrevMoveTime"' index);                        if (hasVehicleRecID)                          packet.ReadUInt32("VehicleRecID"' index);                  }                    if (hasFall)                  {                      packet.ResetBitReader();                      packet.ReadUInt32("Fall Time"' index);                      packet.ReadSingle("JumpVelocity"' index);                        var hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                      if (hasFallDirection)                      {                          packet.ReadVector2("Fall"' index);                          packet.ReadSingle("Horizontal Speed"' index);                      }                  }                    moveInfo.WalkSpeed = packet.ReadSingle("WalkSpeed"' index) / 2.5f;                  moveInfo.RunSpeed = packet.ReadSingle("RunSpeed"' index) / 7.0f;                  packet.ReadSingle("RunBackSpeed"' index);                  packet.ReadSingle("SwimSpeed"' index);                  packet.ReadSingle("SwimBackSpeed"' index);                  packet.ReadSingle("FlightSpeed"' index);                  packet.ReadSingle("FlightBackSpeed"' index);                  packet.ReadSingle("TurnRate"' index);                  packet.ReadSingle("PitchRate"' index);                    var movementForceCount = packet.ReadInt32("MovementForceCount"' index);                    packet.ResetBitReader();                    moveInfo.HasSplineData = packet.ReadBit("HasMovementSpline"' index);                    for (var i = 0; i < movementForceCount; ++i)                  {                      packet.ResetBitReader();                      packet.ReadPackedGuid128("Id"' index);                      packet.ReadVector3("Origin"' index);                      packet.ReadVector3("Direction"' index);                      packet.ReadInt32("TransportID"' index);                      packet.ReadSingle("Magnitude"' index);                      packet.ReadBits("Type"' 2' index);                  }                    if (moveInfo.HasSplineData)                  {                      packet.ResetBitReader();                      packet.ReadInt32("ID"' index);                      packet.ReadVector3("Destination"' index);                        var hasMovementSplineMove = packet.ReadBit("MovementSplineMove"' index);                      if (hasMovementSplineMove)                      {                          packet.ResetBitReader();                            packet.ReadUInt32E<SplineFlag>("SplineFlags"' index);                          packet.ReadUInt32("Elapsed"' index);                          packet.ReadUInt32("Duration"' index);                          packet.ReadSingle("DurationModifier"' index);                          packet.ReadSingle("NextDurationModifier"' index);                            var face = packet.ReadBits("Face"' 2' index);                            var hasJumpGravity = packet.ReadBit("HasJumpGravity"' index);                          var hasSpecialTime = packet.ReadBit("HasSpecialTime"' index);                            var pointsCount = packet.ReadBits("PointsCount"' 16' index);                            packet.ReadBitsE<SplineMode>("Mode"' 2' index);                            var hasSplineFilterKey = packet.ReadBit("HasSplineFilterKey"' index);                          var hasSpellEffectExtraData = packet.ReadBit("HasSpellEffectExtraData"' index);                            if (hasSplineFilterKey)                          {                              packet.ResetBitReader();                              var filterKeysCount = packet.ReadUInt32("FilterKeysCount"' index);                              for (var i = 0; i < filterKeysCount; ++i)                              {                                  packet.ReadSingle("In"' index' i);                                  packet.ReadSingle("Out"' index' i);                              }                                packet.ReadBits("FilterFlags"' 2' index);                          }                            if (face == 3)                              packet.ReadSingle("FaceDirection"' index);                            if (face == 2)                              packet.ReadPackedGuid128("FaceGUID"' index);                            if (face == 1)                              packet.ReadVector3("FaceSpot"' index);                            if (hasJumpGravity)                              packet.ReadSingle("JumpGravity"' index);                            if (hasSpecialTime)                              packet.ReadInt32("SpecialTime"' index);                            for (var i = 0; i < pointsCount; ++i)                              packet.ReadVector3("Points"' index' i);                            if (hasSpellEffectExtraData)                          {                              packet.ReadPackedGuid128("TargetGUID"' index);                              packet.ReadUInt32("SpellVisualID"' index);                              packet.ReadUInt32("ProgressCurveID"' index);                              packet.ReadUInt32("ParabolicCurveID"' index);                          }                      }                  }              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasMovementUpdate)              {                  packet.ResetBitReader();                  packet.ReadPackedGuid128("MoverGUID"' index);                    packet.ReadUInt32("MoveTime"' index);                  moveInfo.Position = packet.ReadVector3("Position"' index);                  moveInfo.Orientation = packet.ReadSingle("Orientation"' index);                    packet.ReadSingle("Pitch"' index);                  packet.ReadSingle("StepUpStartElevation"' index);                    var removeForcesIDsCount = packet.ReadInt32();                  packet.ReadInt32("MoveIndex"' index);                    for (var i = 0; i < removeForcesIDsCount; i++)                      packet.ReadPackedGuid128("RemoveForcesIDs"' index' i);                    moveInfo.Flags = (MovementFlag)packet.ReadBitsE<V6_0_2_19033.Enums.MovementFlag>("Movement Flags"' 30' index);                  moveInfo.FlagsExtra = (MovementFlagExtra)packet.ReadBitsE<Enums.MovementFlags2>("Extra Movement Flags"' 18' index);                    var hasTransport = packet.ReadBit("Has Transport Data"' index);                  var hasFall = packet.ReadBit("Has Fall Data"' index);                  packet.ReadBit("HasSpline"' index);                  packet.ReadBit("HeightChangeFailed"' index);                  packet.ReadBit("RemoteTimeValid"' index);                    if (hasTransport)                  {                      packet.ResetBitReader();                      moveInfo.TransportGuid = packet.ReadPackedGuid128("Transport Guid"' index);                      moveInfo.TransportOffset = packet.ReadVector4("Transport Position"' index);                      packet.ReadSByte("Transport Seat"' index);                      packet.ReadInt32("Transport Time"' index);                        var hasPrevMoveTime = packet.ReadBit("HasPrevMoveTime"' index);                      var hasVehicleRecID = packet.ReadBit("HasVehicleRecID"' index);                        if (hasPrevMoveTime)                          packet.ReadUInt32("PrevMoveTime"' index);                        if (hasVehicleRecID)                          packet.ReadUInt32("VehicleRecID"' index);                  }                    if (hasFall)                  {                      packet.ResetBitReader();                      packet.ReadUInt32("Fall Time"' index);                      packet.ReadSingle("JumpVelocity"' index);                        var hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                      if (hasFallDirection)                      {                          packet.ReadVector2("Fall"' index);                          packet.ReadSingle("Horizontal Speed"' index);                      }                  }                    moveInfo.WalkSpeed = packet.ReadSingle("WalkSpeed"' index) / 2.5f;                  moveInfo.RunSpeed = packet.ReadSingle("RunSpeed"' index) / 7.0f;                  packet.ReadSingle("RunBackSpeed"' index);                  packet.ReadSingle("SwimSpeed"' index);                  packet.ReadSingle("SwimBackSpeed"' index);                  packet.ReadSingle("FlightSpeed"' index);                  packet.ReadSingle("FlightBackSpeed"' index);                  packet.ReadSingle("TurnRate"' index);                  packet.ReadSingle("PitchRate"' index);                    var movementForceCount = packet.ReadInt32("MovementForceCount"' index);                    packet.ResetBitReader();                    moveInfo.HasSplineData = packet.ReadBit("HasMovementSpline"' index);                    for (var i = 0; i < movementForceCount; ++i)                  {                      packet.ResetBitReader();                      packet.ReadPackedGuid128("Id"' index);                      packet.ReadVector3("Origin"' index);                      packet.ReadVector3("Direction"' index);                      packet.ReadInt32("TransportID"' index);                      packet.ReadSingle("Magnitude"' index);                      packet.ReadBits("Type"' 2' index);                  }                    if (moveInfo.HasSplineData)                  {                      packet.ResetBitReader();                      packet.ReadInt32("ID"' index);                      packet.ReadVector3("Destination"' index);                        var hasMovementSplineMove = packet.ReadBit("MovementSplineMove"' index);                      if (hasMovementSplineMove)                      {                          packet.ResetBitReader();                            packet.ReadUInt32E<SplineFlag>("SplineFlags"' index);                          packet.ReadUInt32("Elapsed"' index);                          packet.ReadUInt32("Duration"' index);                          packet.ReadSingle("DurationModifier"' index);                          packet.ReadSingle("NextDurationModifier"' index);                            var face = packet.ReadBits("Face"' 2' index);                            var hasJumpGravity = packet.ReadBit("HasJumpGravity"' index);                          var hasSpecialTime = packet.ReadBit("HasSpecialTime"' index);                            var pointsCount = packet.ReadBits("PointsCount"' 16' index);                            packet.ReadBitsE<SplineMode>("Mode"' 2' index);                            var hasSplineFilterKey = packet.ReadBit("HasSplineFilterKey"' index);                          var hasSpellEffectExtraData = packet.ReadBit("HasSpellEffectExtraData"' index);                            if (hasSplineFilterKey)                          {                              packet.ResetBitReader();                              var filterKeysCount = packet.ReadUInt32("FilterKeysCount"' index);                              for (var i = 0; i < filterKeysCount; ++i)                              {                                  packet.ReadSingle("In"' index' i);                                  packet.ReadSingle("Out"' index' i);                              }                                packet.ReadBits("FilterFlags"' 2' index);                          }                            if (face == 3)                              packet.ReadSingle("FaceDirection"' index);                            if (face == 2)                              packet.ReadPackedGuid128("FaceGUID"' index);                            if (face == 1)                              packet.ReadVector3("FaceSpot"' index);                            if (hasJumpGravity)                              packet.ReadSingle("JumpGravity"' index);                            if (hasSpecialTime)                              packet.ReadInt32("SpecialTime"' index);                            for (var i = 0; i < pointsCount; ++i)                              packet.ReadVector3("Points"' index' i);                            if (hasSpellEffectExtraData)                          {                              packet.ReadPackedGuid128("TargetGUID"' index);                              packet.ReadUInt32("SpellVisualID"' index);                              packet.ReadUInt32("ProgressCurveID"' index);                              packet.ReadUInt32("ParabolicCurveID"' index);                          }                      }                  }              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasMovementUpdate)              {                  packet.ResetBitReader();                  packet.ReadPackedGuid128("MoverGUID"' index);                    packet.ReadUInt32("MoveTime"' index);                  moveInfo.Position = packet.ReadVector3("Position"' index);                  moveInfo.Orientation = packet.ReadSingle("Orientation"' index);                    packet.ReadSingle("Pitch"' index);                  packet.ReadSingle("StepUpStartElevation"' index);                    var removeForcesIDsCount = packet.ReadInt32();                  packet.ReadInt32("MoveIndex"' index);                    for (var i = 0; i < removeForcesIDsCount; i++)                      packet.ReadPackedGuid128("RemoveForcesIDs"' index' i);                    moveInfo.Flags = (MovementFlag)packet.ReadBitsE<V6_0_2_19033.Enums.MovementFlag>("Movement Flags"' 30' index);                  moveInfo.FlagsExtra = (MovementFlagExtra)packet.ReadBitsE<Enums.MovementFlags2>("Extra Movement Flags"' 18' index);                    var hasTransport = packet.ReadBit("Has Transport Data"' index);                  var hasFall = packet.ReadBit("Has Fall Data"' index);                  packet.ReadBit("HasSpline"' index);                  packet.ReadBit("HeightChangeFailed"' index);                  packet.ReadBit("RemoteTimeValid"' index);                    if (hasTransport)                  {                      packet.ResetBitReader();                      moveInfo.TransportGuid = packet.ReadPackedGuid128("Transport Guid"' index);                      moveInfo.TransportOffset = packet.ReadVector4("Transport Position"' index);                      packet.ReadSByte("Transport Seat"' index);                      packet.ReadInt32("Transport Time"' index);                        var hasPrevMoveTime = packet.ReadBit("HasPrevMoveTime"' index);                      var hasVehicleRecID = packet.ReadBit("HasVehicleRecID"' index);                        if (hasPrevMoveTime)                          packet.ReadUInt32("PrevMoveTime"' index);                        if (hasVehicleRecID)                          packet.ReadUInt32("VehicleRecID"' index);                  }                    if (hasFall)                  {                      packet.ResetBitReader();                      packet.ReadUInt32("Fall Time"' index);                      packet.ReadSingle("JumpVelocity"' index);                        var hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                      if (hasFallDirection)                      {                          packet.ReadVector2("Fall"' index);                          packet.ReadSingle("Horizontal Speed"' index);                      }                  }                    moveInfo.WalkSpeed = packet.ReadSingle("WalkSpeed"' index) / 2.5f;                  moveInfo.RunSpeed = packet.ReadSingle("RunSpeed"' index) / 7.0f;                  packet.ReadSingle("RunBackSpeed"' index);                  packet.ReadSingle("SwimSpeed"' index);                  packet.ReadSingle("SwimBackSpeed"' index);                  packet.ReadSingle("FlightSpeed"' index);                  packet.ReadSingle("FlightBackSpeed"' index);                  packet.ReadSingle("TurnRate"' index);                  packet.ReadSingle("PitchRate"' index);                    var movementForceCount = packet.ReadInt32("MovementForceCount"' index);                    packet.ResetBitReader();                    moveInfo.HasSplineData = packet.ReadBit("HasMovementSpline"' index);                    for (var i = 0; i < movementForceCount; ++i)                  {                      packet.ResetBitReader();                      packet.ReadPackedGuid128("Id"' index);                      packet.ReadVector3("Origin"' index);                      packet.ReadVector3("Direction"' index);                      packet.ReadInt32("TransportID"' index);                      packet.ReadSingle("Magnitude"' index);                      packet.ReadBits("Type"' 2' index);                  }                    if (moveInfo.HasSplineData)                  {                      packet.ResetBitReader();                      packet.ReadInt32("ID"' index);                      packet.ReadVector3("Destination"' index);                        var hasMovementSplineMove = packet.ReadBit("MovementSplineMove"' index);                      if (hasMovementSplineMove)                      {                          packet.ResetBitReader();                            packet.ReadUInt32E<SplineFlag>("SplineFlags"' index);                          packet.ReadUInt32("Elapsed"' index);                          packet.ReadUInt32("Duration"' index);                          packet.ReadSingle("DurationModifier"' index);                          packet.ReadSingle("NextDurationModifier"' index);                            var face = packet.ReadBits("Face"' 2' index);                            var hasJumpGravity = packet.ReadBit("HasJumpGravity"' index);                          var hasSpecialTime = packet.ReadBit("HasSpecialTime"' index);                            var pointsCount = packet.ReadBits("PointsCount"' 16' index);                            packet.ReadBitsE<SplineMode>("Mode"' 2' index);                            var hasSplineFilterKey = packet.ReadBit("HasSplineFilterKey"' index);                          var hasSpellEffectExtraData = packet.ReadBit("HasSpellEffectExtraData"' index);                            if (hasSplineFilterKey)                          {                              packet.ResetBitReader();                              var filterKeysCount = packet.ReadUInt32("FilterKeysCount"' index);                              for (var i = 0; i < filterKeysCount; ++i)                              {                                  packet.ReadSingle("In"' index' i);                                  packet.ReadSingle("Out"' index' i);                              }                                packet.ReadBits("FilterFlags"' 2' index);                          }                            if (face == 3)                              packet.ReadSingle("FaceDirection"' index);                            if (face == 2)                              packet.ReadPackedGuid128("FaceGUID"' index);                            if (face == 1)                              packet.ReadVector3("FaceSpot"' index);                            if (hasJumpGravity)                              packet.ReadSingle("JumpGravity"' index);                            if (hasSpecialTime)                              packet.ReadInt32("SpecialTime"' index);                            for (var i = 0; i < pointsCount; ++i)                              packet.ReadVector3("Points"' index' i);                            if (hasSpellEffectExtraData)                          {                              packet.ReadPackedGuid128("TargetGUID"' index);                              packet.ReadUInt32("SpellVisualID"' index);                              packet.ReadUInt32("ProgressCurveID"' index);                              packet.ReadUInt32("ParabolicCurveID"' index);                          }                      }                  }              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasMovementUpdate)              {                  packet.ResetBitReader();                  packet.ReadPackedGuid128("MoverGUID"' index);                    packet.ReadUInt32("MoveTime"' index);                  moveInfo.Position = packet.ReadVector3("Position"' index);                  moveInfo.Orientation = packet.ReadSingle("Orientation"' index);                    packet.ReadSingle("Pitch"' index);                  packet.ReadSingle("StepUpStartElevation"' index);                    var removeForcesIDsCount = packet.ReadInt32();                  packet.ReadInt32("MoveIndex"' index);                    for (var i = 0; i < removeForcesIDsCount; i++)                      packet.ReadPackedGuid128("RemoveForcesIDs"' index' i);                    moveInfo.Flags = (MovementFlag)packet.ReadBitsE<V6_0_2_19033.Enums.MovementFlag>("Movement Flags"' 30' index);                  moveInfo.FlagsExtra = (MovementFlagExtra)packet.ReadBitsE<Enums.MovementFlags2>("Extra Movement Flags"' 18' index);                    var hasTransport = packet.ReadBit("Has Transport Data"' index);                  var hasFall = packet.ReadBit("Has Fall Data"' index);                  packet.ReadBit("HasSpline"' index);                  packet.ReadBit("HeightChangeFailed"' index);                  packet.ReadBit("RemoteTimeValid"' index);                    if (hasTransport)                  {                      packet.ResetBitReader();                      moveInfo.TransportGuid = packet.ReadPackedGuid128("Transport Guid"' index);                      moveInfo.TransportOffset = packet.ReadVector4("Transport Position"' index);                      packet.ReadSByte("Transport Seat"' index);                      packet.ReadInt32("Transport Time"' index);                        var hasPrevMoveTime = packet.ReadBit("HasPrevMoveTime"' index);                      var hasVehicleRecID = packet.ReadBit("HasVehicleRecID"' index);                        if (hasPrevMoveTime)                          packet.ReadUInt32("PrevMoveTime"' index);                        if (hasVehicleRecID)                          packet.ReadUInt32("VehicleRecID"' index);                  }                    if (hasFall)                  {                      packet.ResetBitReader();                      packet.ReadUInt32("Fall Time"' index);                      packet.ReadSingle("JumpVelocity"' index);                        var hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                      if (hasFallDirection)                      {                          packet.ReadVector2("Fall"' index);                          packet.ReadSingle("Horizontal Speed"' index);                      }                  }                    moveInfo.WalkSpeed = packet.ReadSingle("WalkSpeed"' index) / 2.5f;                  moveInfo.RunSpeed = packet.ReadSingle("RunSpeed"' index) / 7.0f;                  packet.ReadSingle("RunBackSpeed"' index);                  packet.ReadSingle("SwimSpeed"' index);                  packet.ReadSingle("SwimBackSpeed"' index);                  packet.ReadSingle("FlightSpeed"' index);                  packet.ReadSingle("FlightBackSpeed"' index);                  packet.ReadSingle("TurnRate"' index);                  packet.ReadSingle("PitchRate"' index);                    var movementForceCount = packet.ReadInt32("MovementForceCount"' index);                    packet.ResetBitReader();                    moveInfo.HasSplineData = packet.ReadBit("HasMovementSpline"' index);                    for (var i = 0; i < movementForceCount; ++i)                  {                      packet.ResetBitReader();                      packet.ReadPackedGuid128("Id"' index);                      packet.ReadVector3("Origin"' index);                      packet.ReadVector3("Direction"' index);                      packet.ReadInt32("TransportID"' index);                      packet.ReadSingle("Magnitude"' index);                      packet.ReadBits("Type"' 2' index);                  }                    if (moveInfo.HasSplineData)                  {                      packet.ResetBitReader();                      packet.ReadInt32("ID"' index);                      packet.ReadVector3("Destination"' index);                        var hasMovementSplineMove = packet.ReadBit("MovementSplineMove"' index);                      if (hasMovementSplineMove)                      {                          packet.ResetBitReader();                            packet.ReadUInt32E<SplineFlag>("SplineFlags"' index);                          packet.ReadUInt32("Elapsed"' index);                          packet.ReadUInt32("Duration"' index);                          packet.ReadSingle("DurationModifier"' index);                          packet.ReadSingle("NextDurationModifier"' index);                            var face = packet.ReadBits("Face"' 2' index);                            var hasJumpGravity = packet.ReadBit("HasJumpGravity"' index);                          var hasSpecialTime = packet.ReadBit("HasSpecialTime"' index);                            var pointsCount = packet.ReadBits("PointsCount"' 16' index);                            packet.ReadBitsE<SplineMode>("Mode"' 2' index);                            var hasSplineFilterKey = packet.ReadBit("HasSplineFilterKey"' index);                          var hasSpellEffectExtraData = packet.ReadBit("HasSpellEffectExtraData"' index);                            if (hasSplineFilterKey)                          {                              packet.ResetBitReader();                              var filterKeysCount = packet.ReadUInt32("FilterKeysCount"' index);                              for (var i = 0; i < filterKeysCount; ++i)                              {                                  packet.ReadSingle("In"' index' i);                                  packet.ReadSingle("Out"' index' i);                              }                                packet.ReadBits("FilterFlags"' 2' index);                          }                            if (face == 3)                              packet.ReadSingle("FaceDirection"' index);                            if (face == 2)                              packet.ReadPackedGuid128("FaceGUID"' index);                            if (face == 1)                              packet.ReadVector3("FaceSpot"' index);                            if (hasJumpGravity)                              packet.ReadSingle("JumpGravity"' index);                            if (hasSpecialTime)                              packet.ReadInt32("SpecialTime"' index);                            for (var i = 0; i < pointsCount; ++i)                              packet.ReadVector3("Points"' index' i);                            if (hasSpellEffectExtraData)                          {                              packet.ReadPackedGuid128("TargetGUID"' index);                              packet.ReadUInt32("SpellVisualID"' index);                              packet.ReadUInt32("ProgressCurveID"' index);                              packet.ReadUInt32("ParabolicCurveID"' index);                          }                      }                  }              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasMovementUpdate)              {                  packet.ResetBitReader();                  packet.ReadPackedGuid128("MoverGUID"' index);                    packet.ReadUInt32("MoveTime"' index);                  moveInfo.Position = packet.ReadVector3("Position"' index);                  moveInfo.Orientation = packet.ReadSingle("Orientation"' index);                    packet.ReadSingle("Pitch"' index);                  packet.ReadSingle("StepUpStartElevation"' index);                    var removeForcesIDsCount = packet.ReadInt32();                  packet.ReadInt32("MoveIndex"' index);                    for (var i = 0; i < removeForcesIDsCount; i++)                      packet.ReadPackedGuid128("RemoveForcesIDs"' index' i);                    moveInfo.Flags = (MovementFlag)packet.ReadBitsE<V6_0_2_19033.Enums.MovementFlag>("Movement Flags"' 30' index);                  moveInfo.FlagsExtra = (MovementFlagExtra)packet.ReadBitsE<Enums.MovementFlags2>("Extra Movement Flags"' 18' index);                    var hasTransport = packet.ReadBit("Has Transport Data"' index);                  var hasFall = packet.ReadBit("Has Fall Data"' index);                  packet.ReadBit("HasSpline"' index);                  packet.ReadBit("HeightChangeFailed"' index);                  packet.ReadBit("RemoteTimeValid"' index);                    if (hasTransport)                  {                      packet.ResetBitReader();                      moveInfo.TransportGuid = packet.ReadPackedGuid128("Transport Guid"' index);                      moveInfo.TransportOffset = packet.ReadVector4("Transport Position"' index);                      packet.ReadSByte("Transport Seat"' index);                      packet.ReadInt32("Transport Time"' index);                        var hasPrevMoveTime = packet.ReadBit("HasPrevMoveTime"' index);                      var hasVehicleRecID = packet.ReadBit("HasVehicleRecID"' index);                        if (hasPrevMoveTime)                          packet.ReadUInt32("PrevMoveTime"' index);                        if (hasVehicleRecID)                          packet.ReadUInt32("VehicleRecID"' index);                  }                    if (hasFall)                  {                      packet.ResetBitReader();                      packet.ReadUInt32("Fall Time"' index);                      packet.ReadSingle("JumpVelocity"' index);                        var hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                      if (hasFallDirection)                      {                          packet.ReadVector2("Fall"' index);                          packet.ReadSingle("Horizontal Speed"' index);                      }                  }                    moveInfo.WalkSpeed = packet.ReadSingle("WalkSpeed"' index) / 2.5f;                  moveInfo.RunSpeed = packet.ReadSingle("RunSpeed"' index) / 7.0f;                  packet.ReadSingle("RunBackSpeed"' index);                  packet.ReadSingle("SwimSpeed"' index);                  packet.ReadSingle("SwimBackSpeed"' index);                  packet.ReadSingle("FlightSpeed"' index);                  packet.ReadSingle("FlightBackSpeed"' index);                  packet.ReadSingle("TurnRate"' index);                  packet.ReadSingle("PitchRate"' index);                    var movementForceCount = packet.ReadInt32("MovementForceCount"' index);                    packet.ResetBitReader();                    moveInfo.HasSplineData = packet.ReadBit("HasMovementSpline"' index);                    for (var i = 0; i < movementForceCount; ++i)                  {                      packet.ResetBitReader();                      packet.ReadPackedGuid128("Id"' index);                      packet.ReadVector3("Origin"' index);                      packet.ReadVector3("Direction"' index);                      packet.ReadInt32("TransportID"' index);                      packet.ReadSingle("Magnitude"' index);                      packet.ReadBits("Type"' 2' index);                  }                    if (moveInfo.HasSplineData)                  {                      packet.ResetBitReader();                      packet.ReadInt32("ID"' index);                      packet.ReadVector3("Destination"' index);                        var hasMovementSplineMove = packet.ReadBit("MovementSplineMove"' index);                      if (hasMovementSplineMove)                      {                          packet.ResetBitReader();                            packet.ReadUInt32E<SplineFlag>("SplineFlags"' index);                          packet.ReadUInt32("Elapsed"' index);                          packet.ReadUInt32("Duration"' index);                          packet.ReadSingle("DurationModifier"' index);                          packet.ReadSingle("NextDurationModifier"' index);                            var face = packet.ReadBits("Face"' 2' index);                            var hasJumpGravity = packet.ReadBit("HasJumpGravity"' index);                          var hasSpecialTime = packet.ReadBit("HasSpecialTime"' index);                            var pointsCount = packet.ReadBits("PointsCount"' 16' index);                            packet.ReadBitsE<SplineMode>("Mode"' 2' index);                            var hasSplineFilterKey = packet.ReadBit("HasSplineFilterKey"' index);                          var hasSpellEffectExtraData = packet.ReadBit("HasSpellEffectExtraData"' index);                            if (hasSplineFilterKey)                          {                              packet.ResetBitReader();                              var filterKeysCount = packet.ReadUInt32("FilterKeysCount"' index);                              for (var i = 0; i < filterKeysCount; ++i)                              {                                  packet.ReadSingle("In"' index' i);                                  packet.ReadSingle("Out"' index' i);                              }                                packet.ReadBits("FilterFlags"' 2' index);                          }                            if (face == 3)                              packet.ReadSingle("FaceDirection"' index);                            if (face == 2)                              packet.ReadPackedGuid128("FaceGUID"' index);                            if (face == 1)                              packet.ReadVector3("FaceSpot"' index);                            if (hasJumpGravity)                              packet.ReadSingle("JumpGravity"' index);                            if (hasSpecialTime)                              packet.ReadInt32("SpecialTime"' index);                            for (var i = 0; i < pointsCount; ++i)                              packet.ReadVector3("Points"' index' i);                            if (hasSpellEffectExtraData)                          {                              packet.ReadPackedGuid128("TargetGUID"' index);                              packet.ReadUInt32("SpellVisualID"' index);                              packet.ReadUInt32("ProgressCurveID"' index);                              packet.ReadUInt32("ParabolicCurveID"' index);                          }                      }                  }              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAreaTrigger && obj is SpellAreaTrigger)              {                  AreaTriggerTemplate areaTriggerTemplate = new AreaTriggerTemplate                  {                      Id = guid.GetEntry()                  };                    SpellAreaTrigger spellAreaTrigger = (SpellAreaTrigger)obj;                  spellAreaTrigger.AreaTriggerId = guid.GetEntry();                    packet.ResetBitReader();                    // CliAreaTrigger                  packet.ReadInt32("ElapsedMs"' index);                    packet.ReadVector3("RollPitchYaw1"' index);                    areaTriggerTemplate.Flags   = 0;                    if (packet.ReadBit("HasAbsoluteOrientation"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasAbsoluteOrientation;                    if (packet.ReadBit("HasDynamicShape"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasDynamicShape;                    if (packet.ReadBit("HasAttached"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasAttached;                    if (packet.ReadBit("HasFaceMovementDir"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.FaceMovementDirection;                    if (packet.ReadBit("HasFollowsTerrain"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.FollowsTerrain;                    if (packet.ReadBit("Unk bit WoD62x"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk1;                    if (packet.ReadBit("HasTargetRollPitchYaw"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasTargetRollPitchYaw;                    bool hasScaleCurveID = packet.ReadBit("HasScaleCurveID"' index);                  bool hasMorphCurveID = packet.ReadBit("HasMorphCurveID"' index);                  bool hasFacingCurveID = packet.ReadBit("HasFacingCurveID"' index);                  bool hasMoveCurveID = packet.ReadBit("HasMoveCurveID"' index);                    if (packet.ReadBit("unkbit4C"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk2;                    if (packet.ReadBit("unkbit50"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk3;                    if (packet.ReadBit("unkbit58"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk4;                    if (packet.ReadBit("HasAreaTriggerSphere"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Sphere;                    if (packet.ReadBit("HasAreaTriggerBox"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Box;                    if (packet.ReadBit("HasAreaTriggerPolygon"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Polygon;                    if (packet.ReadBit("HasAreaTriggerCylinder"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Cylinder;                    bool hasAreaTriggerSpline = packet.ReadBit("HasAreaTriggerSpline"' index);                    if (packet.ReadBit("HasAreaTriggerUnkType"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk5;                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.Unk3) != 0)                      packet.ReadBit();                    if (hasAreaTriggerSpline)                      AreaTriggerHandler.ReadAreaTriggerSpline(packet' index);                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.HasTargetRollPitchYaw) != 0)                      packet.ReadVector3("TargetRollPitchYaw"' index);                    if (hasScaleCurveID)                      spellAreaTrigger.ScaleCurveId = packet.ReadInt32("ScaleCurveID"' index);                    if (hasMorphCurveID)                      spellAreaTrigger.MorphCurveId = packet.ReadInt32("MorphCurveID"' index);                    if (hasFacingCurveID)                      spellAreaTrigger.FacingCurveId = packet.ReadInt32("FacingCurveID"' index);                    if (hasMoveCurveID)                      spellAreaTrigger.MoveCurveId = packet.ReadInt32("MoveCurveID"' index);                    if ((areaTriggerTemplate.Flags & (int)AreaTriggerFlags.Unk2) != 0)                      packet.ReadInt32();                    if ((areaTriggerTemplate.Flags & (int)AreaTriggerFlags.Unk4) != 0)                      packet.ReadUInt32();                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Sphere)                  {                      areaTriggerTemplate.Data[0] = packet.ReadSingle("Radius"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("RadiusTarget"' index);                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Box)                  {                      Vector3 Extents = packet.ReadVector3("Extents"' index);                      Vector3 ExtentsTarget = packet.ReadVector3("ExtentsTarget"' index);                        areaTriggerTemplate.Data[0] = Extents.X;                      areaTriggerTemplate.Data[1] = Extents.Y;                      areaTriggerTemplate.Data[2] = Extents.Z;                        areaTriggerTemplate.Data[3] = ExtentsTarget.X;                      areaTriggerTemplate.Data[4] = ExtentsTarget.Y;                      areaTriggerTemplate.Data[5] = ExtentsTarget.Z;                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Polygon)                  {                      var verticesCount = packet.ReadInt32("VerticesCount"' index);                      var verticesTargetCount = packet.ReadInt32("VerticesTargetCount"' index);                        List<AreaTriggerTemplateVertices> verticesList = new List<AreaTriggerTemplateVertices>();                        areaTriggerTemplate.Data[0] = packet.ReadSingle("Height"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("HeightTarget"' index);                        for (uint i = 0; i < verticesCount; ++i)                      {                          AreaTriggerTemplateVertices areaTriggerTemplateVertices = new AreaTriggerTemplateVertices                          {                              AreaTriggerId = guid.GetEntry()'                              Idx = i                          };                            Vector2 vertices = packet.ReadVector2("Vertices"' index' i);                            areaTriggerTemplateVertices.VerticeX = vertices.X;                          areaTriggerTemplateVertices.VerticeY = vertices.Y;                            verticesList.Add(areaTriggerTemplateVertices);                      }                        for (var i = 0; i < verticesTargetCount; ++i)                      {                          Vector2 verticesTarget = packet.ReadVector2("VerticesTarget"' index' i);                            verticesList[i].VerticeTargetX = verticesTarget.X;                          verticesList[i].VerticeTargetY = verticesTarget.Y;                      }                        foreach (AreaTriggerTemplateVertices vertice in verticesList)                          Storage.AreaTriggerTemplatesVertices.Add(vertice);                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Cylinder)                  {                      areaTriggerTemplate.Data[0] = packet.ReadSingle("Radius"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("RadiusTarget"' index);                      areaTriggerTemplate.Data[2] = packet.ReadSingle("Height"' index);                      areaTriggerTemplate.Data[3] = packet.ReadSingle("HeightTarget"' index);                      areaTriggerTemplate.Data[4] = packet.ReadSingle("LocationZOffset"' index);                      areaTriggerTemplate.Data[5] = packet.ReadSingle("LocationZOffsetTarget"' index);                  }                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.Unk5) != 0)                  {                      packet.ResetBitReader();                      var unk1 = packet.ReadBit("AreaTriggerUnk1");                      var hasCenter = packet.ReadBit("HasCenter"' index);                      packet.ReadBit("Unk bit 703 1"' index);                      packet.ReadBit("Unk bit 703 2"' index);                        packet.ReadUInt32();                      packet.ReadInt32();                      packet.ReadUInt32();                      packet.ReadSingle("Radius"' index);                      packet.ReadSingle("BlendFromRadius"' index);                      packet.ReadSingle("InitialAngel"' index);                      packet.ReadSingle("ZOffset"' index);                        if (unk1)                          packet.ReadPackedGuid128("AreaTriggerUnkGUID"' index);                        if (hasCenter)                          packet.ReadVector3("Center"' index);                  }                    Storage.AreaTriggerTemplates.Add(areaTriggerTemplate);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAreaTrigger && obj is SpellAreaTrigger)              {                  AreaTriggerTemplate areaTriggerTemplate = new AreaTriggerTemplate                  {                      Id = guid.GetEntry()                  };                    SpellAreaTrigger spellAreaTrigger = (SpellAreaTrigger)obj;                  spellAreaTrigger.AreaTriggerId = guid.GetEntry();                    packet.ResetBitReader();                    // CliAreaTrigger                  packet.ReadInt32("ElapsedMs"' index);                    packet.ReadVector3("RollPitchYaw1"' index);                    areaTriggerTemplate.Flags   = 0;                    if (packet.ReadBit("HasAbsoluteOrientation"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasAbsoluteOrientation;                    if (packet.ReadBit("HasDynamicShape"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasDynamicShape;                    if (packet.ReadBit("HasAttached"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasAttached;                    if (packet.ReadBit("HasFaceMovementDir"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.FaceMovementDirection;                    if (packet.ReadBit("HasFollowsTerrain"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.FollowsTerrain;                    if (packet.ReadBit("Unk bit WoD62x"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk1;                    if (packet.ReadBit("HasTargetRollPitchYaw"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasTargetRollPitchYaw;                    bool hasScaleCurveID = packet.ReadBit("HasScaleCurveID"' index);                  bool hasMorphCurveID = packet.ReadBit("HasMorphCurveID"' index);                  bool hasFacingCurveID = packet.ReadBit("HasFacingCurveID"' index);                  bool hasMoveCurveID = packet.ReadBit("HasMoveCurveID"' index);                    if (packet.ReadBit("unkbit4C"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk2;                    if (packet.ReadBit("unkbit50"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk3;                    if (packet.ReadBit("unkbit58"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk4;                    if (packet.ReadBit("HasAreaTriggerSphere"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Sphere;                    if (packet.ReadBit("HasAreaTriggerBox"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Box;                    if (packet.ReadBit("HasAreaTriggerPolygon"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Polygon;                    if (packet.ReadBit("HasAreaTriggerCylinder"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Cylinder;                    bool hasAreaTriggerSpline = packet.ReadBit("HasAreaTriggerSpline"' index);                    if (packet.ReadBit("HasAreaTriggerUnkType"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk5;                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.Unk3) != 0)                      packet.ReadBit();                    if (hasAreaTriggerSpline)                      AreaTriggerHandler.ReadAreaTriggerSpline(packet' index);                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.HasTargetRollPitchYaw) != 0)                      packet.ReadVector3("TargetRollPitchYaw"' index);                    if (hasScaleCurveID)                      spellAreaTrigger.ScaleCurveId = packet.ReadInt32("ScaleCurveID"' index);                    if (hasMorphCurveID)                      spellAreaTrigger.MorphCurveId = packet.ReadInt32("MorphCurveID"' index);                    if (hasFacingCurveID)                      spellAreaTrigger.FacingCurveId = packet.ReadInt32("FacingCurveID"' index);                    if (hasMoveCurveID)                      spellAreaTrigger.MoveCurveId = packet.ReadInt32("MoveCurveID"' index);                    if ((areaTriggerTemplate.Flags & (int)AreaTriggerFlags.Unk2) != 0)                      packet.ReadInt32();                    if ((areaTriggerTemplate.Flags & (int)AreaTriggerFlags.Unk4) != 0)                      packet.ReadUInt32();                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Sphere)                  {                      areaTriggerTemplate.Data[0] = packet.ReadSingle("Radius"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("RadiusTarget"' index);                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Box)                  {                      Vector3 Extents = packet.ReadVector3("Extents"' index);                      Vector3 ExtentsTarget = packet.ReadVector3("ExtentsTarget"' index);                        areaTriggerTemplate.Data[0] = Extents.X;                      areaTriggerTemplate.Data[1] = Extents.Y;                      areaTriggerTemplate.Data[2] = Extents.Z;                        areaTriggerTemplate.Data[3] = ExtentsTarget.X;                      areaTriggerTemplate.Data[4] = ExtentsTarget.Y;                      areaTriggerTemplate.Data[5] = ExtentsTarget.Z;                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Polygon)                  {                      var verticesCount = packet.ReadInt32("VerticesCount"' index);                      var verticesTargetCount = packet.ReadInt32("VerticesTargetCount"' index);                        List<AreaTriggerTemplateVertices> verticesList = new List<AreaTriggerTemplateVertices>();                        areaTriggerTemplate.Data[0] = packet.ReadSingle("Height"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("HeightTarget"' index);                        for (uint i = 0; i < verticesCount; ++i)                      {                          AreaTriggerTemplateVertices areaTriggerTemplateVertices = new AreaTriggerTemplateVertices                          {                              AreaTriggerId = guid.GetEntry()'                              Idx = i                          };                            Vector2 vertices = packet.ReadVector2("Vertices"' index' i);                            areaTriggerTemplateVertices.VerticeX = vertices.X;                          areaTriggerTemplateVertices.VerticeY = vertices.Y;                            verticesList.Add(areaTriggerTemplateVertices);                      }                        for (var i = 0; i < verticesTargetCount; ++i)                      {                          Vector2 verticesTarget = packet.ReadVector2("VerticesTarget"' index' i);                            verticesList[i].VerticeTargetX = verticesTarget.X;                          verticesList[i].VerticeTargetY = verticesTarget.Y;                      }                        foreach (AreaTriggerTemplateVertices vertice in verticesList)                          Storage.AreaTriggerTemplatesVertices.Add(vertice);                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Cylinder)                  {                      areaTriggerTemplate.Data[0] = packet.ReadSingle("Radius"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("RadiusTarget"' index);                      areaTriggerTemplate.Data[2] = packet.ReadSingle("Height"' index);                      areaTriggerTemplate.Data[3] = packet.ReadSingle("HeightTarget"' index);                      areaTriggerTemplate.Data[4] = packet.ReadSingle("LocationZOffset"' index);                      areaTriggerTemplate.Data[5] = packet.ReadSingle("LocationZOffsetTarget"' index);                  }                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.Unk5) != 0)                  {                      packet.ResetBitReader();                      var unk1 = packet.ReadBit("AreaTriggerUnk1");                      var hasCenter = packet.ReadBit("HasCenter"' index);                      packet.ReadBit("Unk bit 703 1"' index);                      packet.ReadBit("Unk bit 703 2"' index);                        packet.ReadUInt32();                      packet.ReadInt32();                      packet.ReadUInt32();                      packet.ReadSingle("Radius"' index);                      packet.ReadSingle("BlendFromRadius"' index);                      packet.ReadSingle("InitialAngel"' index);                      packet.ReadSingle("ZOffset"' index);                        if (unk1)                          packet.ReadPackedGuid128("AreaTriggerUnkGUID"' index);                        if (hasCenter)                          packet.ReadVector3("Center"' index);                  }                    Storage.AreaTriggerTemplates.Add(areaTriggerTemplate);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAreaTrigger && obj is SpellAreaTrigger)              {                  AreaTriggerTemplate areaTriggerTemplate = new AreaTriggerTemplate                  {                      Id = guid.GetEntry()                  };                    SpellAreaTrigger spellAreaTrigger = (SpellAreaTrigger)obj;                  spellAreaTrigger.AreaTriggerId = guid.GetEntry();                    packet.ResetBitReader();                    // CliAreaTrigger                  packet.ReadInt32("ElapsedMs"' index);                    packet.ReadVector3("RollPitchYaw1"' index);                    areaTriggerTemplate.Flags   = 0;                    if (packet.ReadBit("HasAbsoluteOrientation"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasAbsoluteOrientation;                    if (packet.ReadBit("HasDynamicShape"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasDynamicShape;                    if (packet.ReadBit("HasAttached"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasAttached;                    if (packet.ReadBit("HasFaceMovementDir"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.FaceMovementDirection;                    if (packet.ReadBit("HasFollowsTerrain"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.FollowsTerrain;                    if (packet.ReadBit("Unk bit WoD62x"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk1;                    if (packet.ReadBit("HasTargetRollPitchYaw"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasTargetRollPitchYaw;                    bool hasScaleCurveID = packet.ReadBit("HasScaleCurveID"' index);                  bool hasMorphCurveID = packet.ReadBit("HasMorphCurveID"' index);                  bool hasFacingCurveID = packet.ReadBit("HasFacingCurveID"' index);                  bool hasMoveCurveID = packet.ReadBit("HasMoveCurveID"' index);                    if (packet.ReadBit("unkbit4C"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk2;                    if (packet.ReadBit("unkbit50"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk3;                    if (packet.ReadBit("unkbit58"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk4;                    if (packet.ReadBit("HasAreaTriggerSphere"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Sphere;                    if (packet.ReadBit("HasAreaTriggerBox"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Box;                    if (packet.ReadBit("HasAreaTriggerPolygon"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Polygon;                    if (packet.ReadBit("HasAreaTriggerCylinder"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Cylinder;                    bool hasAreaTriggerSpline = packet.ReadBit("HasAreaTriggerSpline"' index);                    if (packet.ReadBit("HasAreaTriggerUnkType"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk5;                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.Unk3) != 0)                      packet.ReadBit();                    if (hasAreaTriggerSpline)                      AreaTriggerHandler.ReadAreaTriggerSpline(packet' index);                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.HasTargetRollPitchYaw) != 0)                      packet.ReadVector3("TargetRollPitchYaw"' index);                    if (hasScaleCurveID)                      spellAreaTrigger.ScaleCurveId = packet.ReadInt32("ScaleCurveID"' index);                    if (hasMorphCurveID)                      spellAreaTrigger.MorphCurveId = packet.ReadInt32("MorphCurveID"' index);                    if (hasFacingCurveID)                      spellAreaTrigger.FacingCurveId = packet.ReadInt32("FacingCurveID"' index);                    if (hasMoveCurveID)                      spellAreaTrigger.MoveCurveId = packet.ReadInt32("MoveCurveID"' index);                    if ((areaTriggerTemplate.Flags & (int)AreaTriggerFlags.Unk2) != 0)                      packet.ReadInt32();                    if ((areaTriggerTemplate.Flags & (int)AreaTriggerFlags.Unk4) != 0)                      packet.ReadUInt32();                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Sphere)                  {                      areaTriggerTemplate.Data[0] = packet.ReadSingle("Radius"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("RadiusTarget"' index);                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Box)                  {                      Vector3 Extents = packet.ReadVector3("Extents"' index);                      Vector3 ExtentsTarget = packet.ReadVector3("ExtentsTarget"' index);                        areaTriggerTemplate.Data[0] = Extents.X;                      areaTriggerTemplate.Data[1] = Extents.Y;                      areaTriggerTemplate.Data[2] = Extents.Z;                        areaTriggerTemplate.Data[3] = ExtentsTarget.X;                      areaTriggerTemplate.Data[4] = ExtentsTarget.Y;                      areaTriggerTemplate.Data[5] = ExtentsTarget.Z;                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Polygon)                  {                      var verticesCount = packet.ReadInt32("VerticesCount"' index);                      var verticesTargetCount = packet.ReadInt32("VerticesTargetCount"' index);                        List<AreaTriggerTemplateVertices> verticesList = new List<AreaTriggerTemplateVertices>();                        areaTriggerTemplate.Data[0] = packet.ReadSingle("Height"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("HeightTarget"' index);                        for (uint i = 0; i < verticesCount; ++i)                      {                          AreaTriggerTemplateVertices areaTriggerTemplateVertices = new AreaTriggerTemplateVertices                          {                              AreaTriggerId = guid.GetEntry()'                              Idx = i                          };                            Vector2 vertices = packet.ReadVector2("Vertices"' index' i);                            areaTriggerTemplateVertices.VerticeX = vertices.X;                          areaTriggerTemplateVertices.VerticeY = vertices.Y;                            verticesList.Add(areaTriggerTemplateVertices);                      }                        for (var i = 0; i < verticesTargetCount; ++i)                      {                          Vector2 verticesTarget = packet.ReadVector2("VerticesTarget"' index' i);                            verticesList[i].VerticeTargetX = verticesTarget.X;                          verticesList[i].VerticeTargetY = verticesTarget.Y;                      }                        foreach (AreaTriggerTemplateVertices vertice in verticesList)                          Storage.AreaTriggerTemplatesVertices.Add(vertice);                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Cylinder)                  {                      areaTriggerTemplate.Data[0] = packet.ReadSingle("Radius"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("RadiusTarget"' index);                      areaTriggerTemplate.Data[2] = packet.ReadSingle("Height"' index);                      areaTriggerTemplate.Data[3] = packet.ReadSingle("HeightTarget"' index);                      areaTriggerTemplate.Data[4] = packet.ReadSingle("LocationZOffset"' index);                      areaTriggerTemplate.Data[5] = packet.ReadSingle("LocationZOffsetTarget"' index);                  }                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.Unk5) != 0)                  {                      packet.ResetBitReader();                      var unk1 = packet.ReadBit("AreaTriggerUnk1");                      var hasCenter = packet.ReadBit("HasCenter"' index);                      packet.ReadBit("Unk bit 703 1"' index);                      packet.ReadBit("Unk bit 703 2"' index);                        packet.ReadUInt32();                      packet.ReadInt32();                      packet.ReadUInt32();                      packet.ReadSingle("Radius"' index);                      packet.ReadSingle("BlendFromRadius"' index);                      packet.ReadSingle("InitialAngel"' index);                      packet.ReadSingle("ZOffset"' index);                        if (unk1)                          packet.ReadPackedGuid128("AreaTriggerUnkGUID"' index);                        if (hasCenter)                          packet.ReadVector3("Center"' index);                  }                    Storage.AreaTriggerTemplates.Add(areaTriggerTemplate);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAreaTrigger && obj is SpellAreaTrigger)              {                  AreaTriggerTemplate areaTriggerTemplate = new AreaTriggerTemplate                  {                      Id = guid.GetEntry()                  };                    SpellAreaTrigger spellAreaTrigger = (SpellAreaTrigger)obj;                  spellAreaTrigger.AreaTriggerId = guid.GetEntry();                    packet.ResetBitReader();                    // CliAreaTrigger                  packet.ReadInt32("ElapsedMs"' index);                    packet.ReadVector3("RollPitchYaw1"' index);                    areaTriggerTemplate.Flags   = 0;                    if (packet.ReadBit("HasAbsoluteOrientation"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasAbsoluteOrientation;                    if (packet.ReadBit("HasDynamicShape"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasDynamicShape;                    if (packet.ReadBit("HasAttached"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasAttached;                    if (packet.ReadBit("HasFaceMovementDir"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.FaceMovementDirection;                    if (packet.ReadBit("HasFollowsTerrain"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.FollowsTerrain;                    if (packet.ReadBit("Unk bit WoD62x"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk1;                    if (packet.ReadBit("HasTargetRollPitchYaw"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasTargetRollPitchYaw;                    bool hasScaleCurveID = packet.ReadBit("HasScaleCurveID"' index);                  bool hasMorphCurveID = packet.ReadBit("HasMorphCurveID"' index);                  bool hasFacingCurveID = packet.ReadBit("HasFacingCurveID"' index);                  bool hasMoveCurveID = packet.ReadBit("HasMoveCurveID"' index);                    if (packet.ReadBit("unkbit4C"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk2;                    if (packet.ReadBit("unkbit50"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk3;                    if (packet.ReadBit("unkbit58"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk4;                    if (packet.ReadBit("HasAreaTriggerSphere"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Sphere;                    if (packet.ReadBit("HasAreaTriggerBox"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Box;                    if (packet.ReadBit("HasAreaTriggerPolygon"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Polygon;                    if (packet.ReadBit("HasAreaTriggerCylinder"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Cylinder;                    bool hasAreaTriggerSpline = packet.ReadBit("HasAreaTriggerSpline"' index);                    if (packet.ReadBit("HasAreaTriggerUnkType"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk5;                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.Unk3) != 0)                      packet.ReadBit();                    if (hasAreaTriggerSpline)                      AreaTriggerHandler.ReadAreaTriggerSpline(packet' index);                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.HasTargetRollPitchYaw) != 0)                      packet.ReadVector3("TargetRollPitchYaw"' index);                    if (hasScaleCurveID)                      spellAreaTrigger.ScaleCurveId = packet.ReadInt32("ScaleCurveID"' index);                    if (hasMorphCurveID)                      spellAreaTrigger.MorphCurveId = packet.ReadInt32("MorphCurveID"' index);                    if (hasFacingCurveID)                      spellAreaTrigger.FacingCurveId = packet.ReadInt32("FacingCurveID"' index);                    if (hasMoveCurveID)                      spellAreaTrigger.MoveCurveId = packet.ReadInt32("MoveCurveID"' index);                    if ((areaTriggerTemplate.Flags & (int)AreaTriggerFlags.Unk2) != 0)                      packet.ReadInt32();                    if ((areaTriggerTemplate.Flags & (int)AreaTriggerFlags.Unk4) != 0)                      packet.ReadUInt32();                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Sphere)                  {                      areaTriggerTemplate.Data[0] = packet.ReadSingle("Radius"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("RadiusTarget"' index);                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Box)                  {                      Vector3 Extents = packet.ReadVector3("Extents"' index);                      Vector3 ExtentsTarget = packet.ReadVector3("ExtentsTarget"' index);                        areaTriggerTemplate.Data[0] = Extents.X;                      areaTriggerTemplate.Data[1] = Extents.Y;                      areaTriggerTemplate.Data[2] = Extents.Z;                        areaTriggerTemplate.Data[3] = ExtentsTarget.X;                      areaTriggerTemplate.Data[4] = ExtentsTarget.Y;                      areaTriggerTemplate.Data[5] = ExtentsTarget.Z;                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Polygon)                  {                      var verticesCount = packet.ReadInt32("VerticesCount"' index);                      var verticesTargetCount = packet.ReadInt32("VerticesTargetCount"' index);                        List<AreaTriggerTemplateVertices> verticesList = new List<AreaTriggerTemplateVertices>();                        areaTriggerTemplate.Data[0] = packet.ReadSingle("Height"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("HeightTarget"' index);                        for (uint i = 0; i < verticesCount; ++i)                      {                          AreaTriggerTemplateVertices areaTriggerTemplateVertices = new AreaTriggerTemplateVertices                          {                              AreaTriggerId = guid.GetEntry()'                              Idx = i                          };                            Vector2 vertices = packet.ReadVector2("Vertices"' index' i);                            areaTriggerTemplateVertices.VerticeX = vertices.X;                          areaTriggerTemplateVertices.VerticeY = vertices.Y;                            verticesList.Add(areaTriggerTemplateVertices);                      }                        for (var i = 0; i < verticesTargetCount; ++i)                      {                          Vector2 verticesTarget = packet.ReadVector2("VerticesTarget"' index' i);                            verticesList[i].VerticeTargetX = verticesTarget.X;                          verticesList[i].VerticeTargetY = verticesTarget.Y;                      }                        foreach (AreaTriggerTemplateVertices vertice in verticesList)                          Storage.AreaTriggerTemplatesVertices.Add(vertice);                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Cylinder)                  {                      areaTriggerTemplate.Data[0] = packet.ReadSingle("Radius"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("RadiusTarget"' index);                      areaTriggerTemplate.Data[2] = packet.ReadSingle("Height"' index);                      areaTriggerTemplate.Data[3] = packet.ReadSingle("HeightTarget"' index);                      areaTriggerTemplate.Data[4] = packet.ReadSingle("LocationZOffset"' index);                      areaTriggerTemplate.Data[5] = packet.ReadSingle("LocationZOffsetTarget"' index);                  }                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.Unk5) != 0)                  {                      packet.ResetBitReader();                      var unk1 = packet.ReadBit("AreaTriggerUnk1");                      var hasCenter = packet.ReadBit("HasCenter"' index);                      packet.ReadBit("Unk bit 703 1"' index);                      packet.ReadBit("Unk bit 703 2"' index);                        packet.ReadUInt32();                      packet.ReadInt32();                      packet.ReadUInt32();                      packet.ReadSingle("Radius"' index);                      packet.ReadSingle("BlendFromRadius"' index);                      packet.ReadSingle("InitialAngel"' index);                      packet.ReadSingle("ZOffset"' index);                        if (unk1)                          packet.ReadPackedGuid128("AreaTriggerUnkGUID"' index);                        if (hasCenter)                          packet.ReadVector3("Center"' index);                  }                    Storage.AreaTriggerTemplates.Add(areaTriggerTemplate);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAreaTrigger && obj is SpellAreaTrigger)              {                  AreaTriggerTemplate areaTriggerTemplate = new AreaTriggerTemplate                  {                      Id = guid.GetEntry()                  };                    SpellAreaTrigger spellAreaTrigger = (SpellAreaTrigger)obj;                  spellAreaTrigger.AreaTriggerId = guid.GetEntry();                    packet.ResetBitReader();                    // CliAreaTrigger                  packet.ReadInt32("ElapsedMs"' index);                    packet.ReadVector3("RollPitchYaw1"' index);                    areaTriggerTemplate.Flags   = 0;                    if (packet.ReadBit("HasAbsoluteOrientation"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasAbsoluteOrientation;                    if (packet.ReadBit("HasDynamicShape"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasDynamicShape;                    if (packet.ReadBit("HasAttached"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasAttached;                    if (packet.ReadBit("HasFaceMovementDir"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.FaceMovementDirection;                    if (packet.ReadBit("HasFollowsTerrain"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.FollowsTerrain;                    if (packet.ReadBit("Unk bit WoD62x"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk1;                    if (packet.ReadBit("HasTargetRollPitchYaw"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasTargetRollPitchYaw;                    bool hasScaleCurveID = packet.ReadBit("HasScaleCurveID"' index);                  bool hasMorphCurveID = packet.ReadBit("HasMorphCurveID"' index);                  bool hasFacingCurveID = packet.ReadBit("HasFacingCurveID"' index);                  bool hasMoveCurveID = packet.ReadBit("HasMoveCurveID"' index);                    if (packet.ReadBit("unkbit4C"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk2;                    if (packet.ReadBit("unkbit50"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk3;                    if (packet.ReadBit("unkbit58"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk4;                    if (packet.ReadBit("HasAreaTriggerSphere"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Sphere;                    if (packet.ReadBit("HasAreaTriggerBox"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Box;                    if (packet.ReadBit("HasAreaTriggerPolygon"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Polygon;                    if (packet.ReadBit("HasAreaTriggerCylinder"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Cylinder;                    bool hasAreaTriggerSpline = packet.ReadBit("HasAreaTriggerSpline"' index);                    if (packet.ReadBit("HasAreaTriggerUnkType"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk5;                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.Unk3) != 0)                      packet.ReadBit();                    if (hasAreaTriggerSpline)                      AreaTriggerHandler.ReadAreaTriggerSpline(packet' index);                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.HasTargetRollPitchYaw) != 0)                      packet.ReadVector3("TargetRollPitchYaw"' index);                    if (hasScaleCurveID)                      spellAreaTrigger.ScaleCurveId = packet.ReadInt32("ScaleCurveID"' index);                    if (hasMorphCurveID)                      spellAreaTrigger.MorphCurveId = packet.ReadInt32("MorphCurveID"' index);                    if (hasFacingCurveID)                      spellAreaTrigger.FacingCurveId = packet.ReadInt32("FacingCurveID"' index);                    if (hasMoveCurveID)                      spellAreaTrigger.MoveCurveId = packet.ReadInt32("MoveCurveID"' index);                    if ((areaTriggerTemplate.Flags & (int)AreaTriggerFlags.Unk2) != 0)                      packet.ReadInt32();                    if ((areaTriggerTemplate.Flags & (int)AreaTriggerFlags.Unk4) != 0)                      packet.ReadUInt32();                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Sphere)                  {                      areaTriggerTemplate.Data[0] = packet.ReadSingle("Radius"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("RadiusTarget"' index);                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Box)                  {                      Vector3 Extents = packet.ReadVector3("Extents"' index);                      Vector3 ExtentsTarget = packet.ReadVector3("ExtentsTarget"' index);                        areaTriggerTemplate.Data[0] = Extents.X;                      areaTriggerTemplate.Data[1] = Extents.Y;                      areaTriggerTemplate.Data[2] = Extents.Z;                        areaTriggerTemplate.Data[3] = ExtentsTarget.X;                      areaTriggerTemplate.Data[4] = ExtentsTarget.Y;                      areaTriggerTemplate.Data[5] = ExtentsTarget.Z;                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Polygon)                  {                      var verticesCount = packet.ReadInt32("VerticesCount"' index);                      var verticesTargetCount = packet.ReadInt32("VerticesTargetCount"' index);                        List<AreaTriggerTemplateVertices> verticesList = new List<AreaTriggerTemplateVertices>();                        areaTriggerTemplate.Data[0] = packet.ReadSingle("Height"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("HeightTarget"' index);                        for (uint i = 0; i < verticesCount; ++i)                      {                          AreaTriggerTemplateVertices areaTriggerTemplateVertices = new AreaTriggerTemplateVertices                          {                              AreaTriggerId = guid.GetEntry()'                              Idx = i                          };                            Vector2 vertices = packet.ReadVector2("Vertices"' index' i);                            areaTriggerTemplateVertices.VerticeX = vertices.X;                          areaTriggerTemplateVertices.VerticeY = vertices.Y;                            verticesList.Add(areaTriggerTemplateVertices);                      }                        for (var i = 0; i < verticesTargetCount; ++i)                      {                          Vector2 verticesTarget = packet.ReadVector2("VerticesTarget"' index' i);                            verticesList[i].VerticeTargetX = verticesTarget.X;                          verticesList[i].VerticeTargetY = verticesTarget.Y;                      }                        foreach (AreaTriggerTemplateVertices vertice in verticesList)                          Storage.AreaTriggerTemplatesVertices.Add(vertice);                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Cylinder)                  {                      areaTriggerTemplate.Data[0] = packet.ReadSingle("Radius"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("RadiusTarget"' index);                      areaTriggerTemplate.Data[2] = packet.ReadSingle("Height"' index);                      areaTriggerTemplate.Data[3] = packet.ReadSingle("HeightTarget"' index);                      areaTriggerTemplate.Data[4] = packet.ReadSingle("LocationZOffset"' index);                      areaTriggerTemplate.Data[5] = packet.ReadSingle("LocationZOffsetTarget"' index);                  }                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.Unk5) != 0)                  {                      packet.ResetBitReader();                      var unk1 = packet.ReadBit("AreaTriggerUnk1");                      var hasCenter = packet.ReadBit("HasCenter"' index);                      packet.ReadBit("Unk bit 703 1"' index);                      packet.ReadBit("Unk bit 703 2"' index);                        packet.ReadUInt32();                      packet.ReadInt32();                      packet.ReadUInt32();                      packet.ReadSingle("Radius"' index);                      packet.ReadSingle("BlendFromRadius"' index);                      packet.ReadSingle("InitialAngel"' index);                      packet.ReadSingle("ZOffset"' index);                        if (unk1)                          packet.ReadPackedGuid128("AreaTriggerUnkGUID"' index);                        if (hasCenter)                          packet.ReadVector3("Center"' index);                  }                    Storage.AreaTriggerTemplates.Add(areaTriggerTemplate);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAreaTrigger && obj is SpellAreaTrigger)              {                  AreaTriggerTemplate areaTriggerTemplate = new AreaTriggerTemplate                  {                      Id = guid.GetEntry()                  };                    SpellAreaTrigger spellAreaTrigger = (SpellAreaTrigger)obj;                  spellAreaTrigger.AreaTriggerId = guid.GetEntry();                    packet.ResetBitReader();                    // CliAreaTrigger                  packet.ReadInt32("ElapsedMs"' index);                    packet.ReadVector3("RollPitchYaw1"' index);                    areaTriggerTemplate.Flags   = 0;                    if (packet.ReadBit("HasAbsoluteOrientation"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasAbsoluteOrientation;                    if (packet.ReadBit("HasDynamicShape"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasDynamicShape;                    if (packet.ReadBit("HasAttached"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasAttached;                    if (packet.ReadBit("HasFaceMovementDir"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.FaceMovementDirection;                    if (packet.ReadBit("HasFollowsTerrain"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.FollowsTerrain;                    if (packet.ReadBit("Unk bit WoD62x"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk1;                    if (packet.ReadBit("HasTargetRollPitchYaw"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasTargetRollPitchYaw;                    bool hasScaleCurveID = packet.ReadBit("HasScaleCurveID"' index);                  bool hasMorphCurveID = packet.ReadBit("HasMorphCurveID"' index);                  bool hasFacingCurveID = packet.ReadBit("HasFacingCurveID"' index);                  bool hasMoveCurveID = packet.ReadBit("HasMoveCurveID"' index);                    if (packet.ReadBit("unkbit4C"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk2;                    if (packet.ReadBit("unkbit50"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk3;                    if (packet.ReadBit("unkbit58"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk4;                    if (packet.ReadBit("HasAreaTriggerSphere"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Sphere;                    if (packet.ReadBit("HasAreaTriggerBox"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Box;                    if (packet.ReadBit("HasAreaTriggerPolygon"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Polygon;                    if (packet.ReadBit("HasAreaTriggerCylinder"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Cylinder;                    bool hasAreaTriggerSpline = packet.ReadBit("HasAreaTriggerSpline"' index);                    if (packet.ReadBit("HasAreaTriggerUnkType"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk5;                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.Unk3) != 0)                      packet.ReadBit();                    if (hasAreaTriggerSpline)                      AreaTriggerHandler.ReadAreaTriggerSpline(packet' index);                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.HasTargetRollPitchYaw) != 0)                      packet.ReadVector3("TargetRollPitchYaw"' index);                    if (hasScaleCurveID)                      spellAreaTrigger.ScaleCurveId = packet.ReadInt32("ScaleCurveID"' index);                    if (hasMorphCurveID)                      spellAreaTrigger.MorphCurveId = packet.ReadInt32("MorphCurveID"' index);                    if (hasFacingCurveID)                      spellAreaTrigger.FacingCurveId = packet.ReadInt32("FacingCurveID"' index);                    if (hasMoveCurveID)                      spellAreaTrigger.MoveCurveId = packet.ReadInt32("MoveCurveID"' index);                    if ((areaTriggerTemplate.Flags & (int)AreaTriggerFlags.Unk2) != 0)                      packet.ReadInt32();                    if ((areaTriggerTemplate.Flags & (int)AreaTriggerFlags.Unk4) != 0)                      packet.ReadUInt32();                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Sphere)                  {                      areaTriggerTemplate.Data[0] = packet.ReadSingle("Radius"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("RadiusTarget"' index);                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Box)                  {                      Vector3 Extents = packet.ReadVector3("Extents"' index);                      Vector3 ExtentsTarget = packet.ReadVector3("ExtentsTarget"' index);                        areaTriggerTemplate.Data[0] = Extents.X;                      areaTriggerTemplate.Data[1] = Extents.Y;                      areaTriggerTemplate.Data[2] = Extents.Z;                        areaTriggerTemplate.Data[3] = ExtentsTarget.X;                      areaTriggerTemplate.Data[4] = ExtentsTarget.Y;                      areaTriggerTemplate.Data[5] = ExtentsTarget.Z;                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Polygon)                  {                      var verticesCount = packet.ReadInt32("VerticesCount"' index);                      var verticesTargetCount = packet.ReadInt32("VerticesTargetCount"' index);                        List<AreaTriggerTemplateVertices> verticesList = new List<AreaTriggerTemplateVertices>();                        areaTriggerTemplate.Data[0] = packet.ReadSingle("Height"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("HeightTarget"' index);                        for (uint i = 0; i < verticesCount; ++i)                      {                          AreaTriggerTemplateVertices areaTriggerTemplateVertices = new AreaTriggerTemplateVertices                          {                              AreaTriggerId = guid.GetEntry()'                              Idx = i                          };                            Vector2 vertices = packet.ReadVector2("Vertices"' index' i);                            areaTriggerTemplateVertices.VerticeX = vertices.X;                          areaTriggerTemplateVertices.VerticeY = vertices.Y;                            verticesList.Add(areaTriggerTemplateVertices);                      }                        for (var i = 0; i < verticesTargetCount; ++i)                      {                          Vector2 verticesTarget = packet.ReadVector2("VerticesTarget"' index' i);                            verticesList[i].VerticeTargetX = verticesTarget.X;                          verticesList[i].VerticeTargetY = verticesTarget.Y;                      }                        foreach (AreaTriggerTemplateVertices vertice in verticesList)                          Storage.AreaTriggerTemplatesVertices.Add(vertice);                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Cylinder)                  {                      areaTriggerTemplate.Data[0] = packet.ReadSingle("Radius"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("RadiusTarget"' index);                      areaTriggerTemplate.Data[2] = packet.ReadSingle("Height"' index);                      areaTriggerTemplate.Data[3] = packet.ReadSingle("HeightTarget"' index);                      areaTriggerTemplate.Data[4] = packet.ReadSingle("LocationZOffset"' index);                      areaTriggerTemplate.Data[5] = packet.ReadSingle("LocationZOffsetTarget"' index);                  }                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.Unk5) != 0)                  {                      packet.ResetBitReader();                      var unk1 = packet.ReadBit("AreaTriggerUnk1");                      var hasCenter = packet.ReadBit("HasCenter"' index);                      packet.ReadBit("Unk bit 703 1"' index);                      packet.ReadBit("Unk bit 703 2"' index);                        packet.ReadUInt32();                      packet.ReadInt32();                      packet.ReadUInt32();                      packet.ReadSingle("Radius"' index);                      packet.ReadSingle("BlendFromRadius"' index);                      packet.ReadSingle("InitialAngel"' index);                      packet.ReadSingle("ZOffset"' index);                        if (unk1)                          packet.ReadPackedGuid128("AreaTriggerUnkGUID"' index);                        if (hasCenter)                          packet.ReadVector3("Center"' index);                  }                    Storage.AreaTriggerTemplates.Add(areaTriggerTemplate);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAreaTrigger && obj is SpellAreaTrigger)              {                  AreaTriggerTemplate areaTriggerTemplate = new AreaTriggerTemplate                  {                      Id = guid.GetEntry()                  };                    SpellAreaTrigger spellAreaTrigger = (SpellAreaTrigger)obj;                  spellAreaTrigger.AreaTriggerId = guid.GetEntry();                    packet.ResetBitReader();                    // CliAreaTrigger                  packet.ReadInt32("ElapsedMs"' index);                    packet.ReadVector3("RollPitchYaw1"' index);                    areaTriggerTemplate.Flags   = 0;                    if (packet.ReadBit("HasAbsoluteOrientation"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasAbsoluteOrientation;                    if (packet.ReadBit("HasDynamicShape"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasDynamicShape;                    if (packet.ReadBit("HasAttached"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasAttached;                    if (packet.ReadBit("HasFaceMovementDir"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.FaceMovementDirection;                    if (packet.ReadBit("HasFollowsTerrain"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.FollowsTerrain;                    if (packet.ReadBit("Unk bit WoD62x"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk1;                    if (packet.ReadBit("HasTargetRollPitchYaw"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasTargetRollPitchYaw;                    bool hasScaleCurveID = packet.ReadBit("HasScaleCurveID"' index);                  bool hasMorphCurveID = packet.ReadBit("HasMorphCurveID"' index);                  bool hasFacingCurveID = packet.ReadBit("HasFacingCurveID"' index);                  bool hasMoveCurveID = packet.ReadBit("HasMoveCurveID"' index);                    if (packet.ReadBit("unkbit4C"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk2;                    if (packet.ReadBit("unkbit50"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk3;                    if (packet.ReadBit("unkbit58"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk4;                    if (packet.ReadBit("HasAreaTriggerSphere"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Sphere;                    if (packet.ReadBit("HasAreaTriggerBox"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Box;                    if (packet.ReadBit("HasAreaTriggerPolygon"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Polygon;                    if (packet.ReadBit("HasAreaTriggerCylinder"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Cylinder;                    bool hasAreaTriggerSpline = packet.ReadBit("HasAreaTriggerSpline"' index);                    if (packet.ReadBit("HasAreaTriggerUnkType"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk5;                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.Unk3) != 0)                      packet.ReadBit();                    if (hasAreaTriggerSpline)                      AreaTriggerHandler.ReadAreaTriggerSpline(packet' index);                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.HasTargetRollPitchYaw) != 0)                      packet.ReadVector3("TargetRollPitchYaw"' index);                    if (hasScaleCurveID)                      spellAreaTrigger.ScaleCurveId = packet.ReadInt32("ScaleCurveID"' index);                    if (hasMorphCurveID)                      spellAreaTrigger.MorphCurveId = packet.ReadInt32("MorphCurveID"' index);                    if (hasFacingCurveID)                      spellAreaTrigger.FacingCurveId = packet.ReadInt32("FacingCurveID"' index);                    if (hasMoveCurveID)                      spellAreaTrigger.MoveCurveId = packet.ReadInt32("MoveCurveID"' index);                    if ((areaTriggerTemplate.Flags & (int)AreaTriggerFlags.Unk2) != 0)                      packet.ReadInt32();                    if ((areaTriggerTemplate.Flags & (int)AreaTriggerFlags.Unk4) != 0)                      packet.ReadUInt32();                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Sphere)                  {                      areaTriggerTemplate.Data[0] = packet.ReadSingle("Radius"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("RadiusTarget"' index);                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Box)                  {                      Vector3 Extents = packet.ReadVector3("Extents"' index);                      Vector3 ExtentsTarget = packet.ReadVector3("ExtentsTarget"' index);                        areaTriggerTemplate.Data[0] = Extents.X;                      areaTriggerTemplate.Data[1] = Extents.Y;                      areaTriggerTemplate.Data[2] = Extents.Z;                        areaTriggerTemplate.Data[3] = ExtentsTarget.X;                      areaTriggerTemplate.Data[4] = ExtentsTarget.Y;                      areaTriggerTemplate.Data[5] = ExtentsTarget.Z;                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Polygon)                  {                      var verticesCount = packet.ReadInt32("VerticesCount"' index);                      var verticesTargetCount = packet.ReadInt32("VerticesTargetCount"' index);                        List<AreaTriggerTemplateVertices> verticesList = new List<AreaTriggerTemplateVertices>();                        areaTriggerTemplate.Data[0] = packet.ReadSingle("Height"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("HeightTarget"' index);                        for (uint i = 0; i < verticesCount; ++i)                      {                          AreaTriggerTemplateVertices areaTriggerTemplateVertices = new AreaTriggerTemplateVertices                          {                              AreaTriggerId = guid.GetEntry()'                              Idx = i                          };                            Vector2 vertices = packet.ReadVector2("Vertices"' index' i);                            areaTriggerTemplateVertices.VerticeX = vertices.X;                          areaTriggerTemplateVertices.VerticeY = vertices.Y;                            verticesList.Add(areaTriggerTemplateVertices);                      }                        for (var i = 0; i < verticesTargetCount; ++i)                      {                          Vector2 verticesTarget = packet.ReadVector2("VerticesTarget"' index' i);                            verticesList[i].VerticeTargetX = verticesTarget.X;                          verticesList[i].VerticeTargetY = verticesTarget.Y;                      }                        foreach (AreaTriggerTemplateVertices vertice in verticesList)                          Storage.AreaTriggerTemplatesVertices.Add(vertice);                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Cylinder)                  {                      areaTriggerTemplate.Data[0] = packet.ReadSingle("Radius"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("RadiusTarget"' index);                      areaTriggerTemplate.Data[2] = packet.ReadSingle("Height"' index);                      areaTriggerTemplate.Data[3] = packet.ReadSingle("HeightTarget"' index);                      areaTriggerTemplate.Data[4] = packet.ReadSingle("LocationZOffset"' index);                      areaTriggerTemplate.Data[5] = packet.ReadSingle("LocationZOffsetTarget"' index);                  }                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.Unk5) != 0)                  {                      packet.ResetBitReader();                      var unk1 = packet.ReadBit("AreaTriggerUnk1");                      var hasCenter = packet.ReadBit("HasCenter"' index);                      packet.ReadBit("Unk bit 703 1"' index);                      packet.ReadBit("Unk bit 703 2"' index);                        packet.ReadUInt32();                      packet.ReadInt32();                      packet.ReadUInt32();                      packet.ReadSingle("Radius"' index);                      packet.ReadSingle("BlendFromRadius"' index);                      packet.ReadSingle("InitialAngel"' index);                      packet.ReadSingle("ZOffset"' index);                        if (unk1)                          packet.ReadPackedGuid128("AreaTriggerUnkGUID"' index);                        if (hasCenter)                          packet.ReadVector3("Center"' index);                  }                    Storage.AreaTriggerTemplates.Add(areaTriggerTemplate);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAreaTrigger && obj is SpellAreaTrigger)              {                  AreaTriggerTemplate areaTriggerTemplate = new AreaTriggerTemplate                  {                      Id = guid.GetEntry()                  };                    SpellAreaTrigger spellAreaTrigger = (SpellAreaTrigger)obj;                  spellAreaTrigger.AreaTriggerId = guid.GetEntry();                    packet.ResetBitReader();                    // CliAreaTrigger                  packet.ReadInt32("ElapsedMs"' index);                    packet.ReadVector3("RollPitchYaw1"' index);                    areaTriggerTemplate.Flags   = 0;                    if (packet.ReadBit("HasAbsoluteOrientation"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasAbsoluteOrientation;                    if (packet.ReadBit("HasDynamicShape"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasDynamicShape;                    if (packet.ReadBit("HasAttached"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasAttached;                    if (packet.ReadBit("HasFaceMovementDir"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.FaceMovementDirection;                    if (packet.ReadBit("HasFollowsTerrain"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.FollowsTerrain;                    if (packet.ReadBit("Unk bit WoD62x"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk1;                    if (packet.ReadBit("HasTargetRollPitchYaw"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.HasTargetRollPitchYaw;                    bool hasScaleCurveID = packet.ReadBit("HasScaleCurveID"' index);                  bool hasMorphCurveID = packet.ReadBit("HasMorphCurveID"' index);                  bool hasFacingCurveID = packet.ReadBit("HasFacingCurveID"' index);                  bool hasMoveCurveID = packet.ReadBit("HasMoveCurveID"' index);                    if (packet.ReadBit("unkbit4C"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk2;                    if (packet.ReadBit("unkbit50"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk3;                    if (packet.ReadBit("unkbit58"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk4;                    if (packet.ReadBit("HasAreaTriggerSphere"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Sphere;                    if (packet.ReadBit("HasAreaTriggerBox"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Box;                    if (packet.ReadBit("HasAreaTriggerPolygon"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Polygon;                    if (packet.ReadBit("HasAreaTriggerCylinder"' index))                      areaTriggerTemplate.Type = (byte)AreaTriggerType.Cylinder;                    bool hasAreaTriggerSpline = packet.ReadBit("HasAreaTriggerSpline"' index);                    if (packet.ReadBit("HasAreaTriggerUnkType"' index))                      areaTriggerTemplate.Flags |= (uint)AreaTriggerFlags.Unk5;                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.Unk3) != 0)                      packet.ReadBit();                    if (hasAreaTriggerSpline)                      AreaTriggerHandler.ReadAreaTriggerSpline(packet' index);                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.HasTargetRollPitchYaw) != 0)                      packet.ReadVector3("TargetRollPitchYaw"' index);                    if (hasScaleCurveID)                      spellAreaTrigger.ScaleCurveId = packet.ReadInt32("ScaleCurveID"' index);                    if (hasMorphCurveID)                      spellAreaTrigger.MorphCurveId = packet.ReadInt32("MorphCurveID"' index);                    if (hasFacingCurveID)                      spellAreaTrigger.FacingCurveId = packet.ReadInt32("FacingCurveID"' index);                    if (hasMoveCurveID)                      spellAreaTrigger.MoveCurveId = packet.ReadInt32("MoveCurveID"' index);                    if ((areaTriggerTemplate.Flags & (int)AreaTriggerFlags.Unk2) != 0)                      packet.ReadInt32();                    if ((areaTriggerTemplate.Flags & (int)AreaTriggerFlags.Unk4) != 0)                      packet.ReadUInt32();                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Sphere)                  {                      areaTriggerTemplate.Data[0] = packet.ReadSingle("Radius"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("RadiusTarget"' index);                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Box)                  {                      Vector3 Extents = packet.ReadVector3("Extents"' index);                      Vector3 ExtentsTarget = packet.ReadVector3("ExtentsTarget"' index);                        areaTriggerTemplate.Data[0] = Extents.X;                      areaTriggerTemplate.Data[1] = Extents.Y;                      areaTriggerTemplate.Data[2] = Extents.Z;                        areaTriggerTemplate.Data[3] = ExtentsTarget.X;                      areaTriggerTemplate.Data[4] = ExtentsTarget.Y;                      areaTriggerTemplate.Data[5] = ExtentsTarget.Z;                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Polygon)                  {                      var verticesCount = packet.ReadInt32("VerticesCount"' index);                      var verticesTargetCount = packet.ReadInt32("VerticesTargetCount"' index);                        List<AreaTriggerTemplateVertices> verticesList = new List<AreaTriggerTemplateVertices>();                        areaTriggerTemplate.Data[0] = packet.ReadSingle("Height"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("HeightTarget"' index);                        for (uint i = 0; i < verticesCount; ++i)                      {                          AreaTriggerTemplateVertices areaTriggerTemplateVertices = new AreaTriggerTemplateVertices                          {                              AreaTriggerId = guid.GetEntry()'                              Idx = i                          };                            Vector2 vertices = packet.ReadVector2("Vertices"' index' i);                            areaTriggerTemplateVertices.VerticeX = vertices.X;                          areaTriggerTemplateVertices.VerticeY = vertices.Y;                            verticesList.Add(areaTriggerTemplateVertices);                      }                        for (var i = 0; i < verticesTargetCount; ++i)                      {                          Vector2 verticesTarget = packet.ReadVector2("VerticesTarget"' index' i);                            verticesList[i].VerticeTargetX = verticesTarget.X;                          verticesList[i].VerticeTargetY = verticesTarget.Y;                      }                        foreach (AreaTriggerTemplateVertices vertice in verticesList)                          Storage.AreaTriggerTemplatesVertices.Add(vertice);                  }                    if (areaTriggerTemplate.Type == (byte)AreaTriggerType.Cylinder)                  {                      areaTriggerTemplate.Data[0] = packet.ReadSingle("Radius"' index);                      areaTriggerTemplate.Data[1] = packet.ReadSingle("RadiusTarget"' index);                      areaTriggerTemplate.Data[2] = packet.ReadSingle("Height"' index);                      areaTriggerTemplate.Data[3] = packet.ReadSingle("HeightTarget"' index);                      areaTriggerTemplate.Data[4] = packet.ReadSingle("LocationZOffset"' index);                      areaTriggerTemplate.Data[5] = packet.ReadSingle("LocationZOffsetTarget"' index);                  }                    if ((areaTriggerTemplate.Flags & (uint)AreaTriggerFlags.Unk5) != 0)                  {                      packet.ResetBitReader();                      var unk1 = packet.ReadBit("AreaTriggerUnk1");                      var hasCenter = packet.ReadBit("HasCenter"' index);                      packet.ReadBit("Unk bit 703 1"' index);                      packet.ReadBit("Unk bit 703 2"' index);                        packet.ReadUInt32();                      packet.ReadInt32();                      packet.ReadUInt32();                      packet.ReadSingle("Radius"' index);                      packet.ReadSingle("BlendFromRadius"' index);                      packet.ReadSingle("InitialAngel"' index);                      packet.ReadSingle("ZOffset"' index);                        if (unk1)                          packet.ReadPackedGuid128("AreaTriggerUnkGUID"' index);                        if (hasCenter)                          packet.ReadVector3("Center"' index);                  }                    Storage.AreaTriggerTemplates.Add(areaTriggerTemplate);              }
Magic Number,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (sceneObjCreate)              {                  packet.ResetBitReader();                    var hasSceneLocalScriptData = packet.ReadBit("HasSceneLocalScriptData"' index);                  var petBattleFullUpdate = packet.ReadBit("HasPetBattleFullUpdate"' index);                    if (hasSceneLocalScriptData)                  {                      packet.ResetBitReader();                      var dataLength = packet.ReadBits(7);                      packet.ReadWoWString("Data"' dataLength' index);                  }                    if (petBattleFullUpdate)                      V6_0_2_19033.Parsers.BattlePetHandler.ReadPetBattleFullUpdate(packet' index);              }
Magic Number,WowPacketParserModule.V6_0_2_19033.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GroupHandler.cs,HandlePartyMemberState,The following statement contains a magic number: for (var i = 0; i < 2; i++)                  packet.ReadByte("PartyType"' i);
Magic Number,WowPacketParserModule.V6_0_2_19033.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GroupHandler.cs,HandlePartyMemberState,The following statement contains a magic number: if (hasPet) // Pet              {                  packet.ReadPackedGuid128("PetGuid");                  packet.ReadInt16("PetDisplayID");                  packet.ReadInt32("PetMaxHealth");                  packet.ReadInt32("PetHealth");                    var petAuraCount = packet.ReadInt32("PetAuraCount");                  for (int i = 0; i < petAuraCount; i++)                  {                      packet.ReadInt32<SpellId>("PetAura"' i);                      packet.ReadByte("PetFlags"' i);                      packet.ReadInt32("PetActiveFlags"' i);                      var byte3 = packet.ReadInt32("PetPointsCount"' i);                        for (int j = 0; j < byte3; j++)                          packet.ReadSingle("PetPoints"' i' j);                  }                    packet.ResetBitReader();                    var len = packet.ReadBits(8);                  packet.ReadWoWString("PetName"' len);              }
Magic Number,WowPacketParserModule.V6_0_2_19033.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GroupHandler.cs,HandleClientPartyInvite,The following statement contains a magic number: var lenTargetName = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V6_0_2_19033.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GroupHandler.cs,HandleClientPartyInvite,The following statement contains a magic number: var lenTargetRealm = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V6_0_2_19033.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GroupHandler.cs,HandlePartyInvite,The following statement contains a magic number: var len = packet.ReadBits(6);
Magic Number,WowPacketParserModule.V6_0_2_19033.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GroupHandler.cs,HandlePartyInvite,The following statement contains a magic number: var bits2 = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V6_0_2_19033.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GroupHandler.cs,HandlePartyInvite,The following statement contains a magic number: var bits258 = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V6_0_2_19033.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\GroupHandler.cs,HandlePartyUpdate,The following statement contains a magic number: for (int i = 0; i < playerCount; i++)              {                  packet.ResetBitReader();                  var playerNameLength = packet.ReadBits(6);                  packet.ReadBit("FromSocialQueue"' i);                    packet.ReadPackedGuid128("Guid"' i);                    packet.ReadByte("Status"' i);                  packet.ReadByte("Subgroup"' i);                  packet.ReadByte("Flags"' i);                  packet.ReadByte("RolesAssigned"' i);                  packet.ReadByteE<Class>("Class"' i);                    packet.ReadWoWString("Name"' playerNameLength' i);              }
Missing Default,WowPacketParserModule.V7_0_3_22248.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\MovementHandler.cs,ReadMovementSpline,The following switch statement is missing a default case: switch (type)              {                  case 1:                      packet.ReadVector3("FaceSpot"' indexes);                      break;                  case 2:                      packet.ReadSingle("FaceDirection"' indexes);                      packet.ReadPackedGuid128("FacingGUID"' indexes);                      break;                  case 3:                      packet.ReadSingle("FaceDirection"' indexes);                      break;              }
Missing Default,WowPacketParserModule.V7_0_3_22248.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\QuestHandler.cs,HandleQuestgiverQuestList,The following switch statement is missing a default case: switch (guid.GetObjectType())              {                  case ObjectType.Unit:                      questGreeting.Type = 0;                      break;                  case ObjectType.GameObject:                      questGreeting.Type = 1;                      break;              }
Missing Default,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,HandleUpdateObject,The following switch statement is missing a default case: switch (typeString)                  {                      case "Values":                      {                          var guid = packet.ReadPackedGuid128("Object Guid"' i);                            WoWObject obj;                          var updates = ReadValuesUpdateBlock(packet' guid.GetObjectType()' i' false);                          var dynamicUpdates = ReadDynamicValuesUpdateBlock(packet' guid.GetObjectType()' i' false);                            if (Storage.Objects.TryGetValue(guid' out obj))                          {                              if (obj.ChangedUpdateFieldsList == null)                                  obj.ChangedUpdateFieldsList = new List<Dictionary<int' UpdateField>>();                              obj.ChangedUpdateFieldsList.Add(updates);                          }                            break;                      }                      case "CreateObject1":                      case "CreateObject2":                      {                          var guid = packet.ReadPackedGuid128("Object Guid"' i);                          ReadCreateObjectBlock(packet' guid' map' i);                          break;                      }                  }
Missing Default,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadValuesUpdateBlock,The following switch statement is missing a default case: switch (type)                      {                          case ObjectType.Container:                          {                              if (i < UpdateFields.GetUpdateField(ItemField.ITEM_END))                                  goto case ObjectType.Item;                                key = UpdateFields.GetUpdateFieldName<ContainerField>(i);                              break;                          }                          case ObjectType.Item:                          {                              key = UpdateFields.GetUpdateFieldName<ItemField>(i);                              break;                          }                          case ObjectType.Player:                          {                              if (i < UpdateFields.GetUpdateField(UnitField.UNIT_END) || i < UpdateFields.GetUpdateField(UnitField.UNIT_FIELD_END))                                  goto case ObjectType.Unit;                                key = UpdateFields.GetUpdateFieldName<PlayerField>(i);                              break;                          }                          case ObjectType.Unit:                          {                              key = UpdateFields.GetUpdateFieldName<UnitField>(i);                              break;                          }                          case ObjectType.GameObject:                          {                              key = UpdateFields.GetUpdateFieldName<GameObjectField>(i);                              break;                          }                          case ObjectType.DynamicObject:                          {                              key = UpdateFields.GetUpdateFieldName<DynamicObjectField>(i);                              break;                          }                          case ObjectType.Corpse:                          {                              key = UpdateFields.GetUpdateFieldName<CorpseField>(i);                              break;                          }                          case ObjectType.AreaTrigger:                          {                              key = UpdateFields.GetUpdateFieldName<AreaTriggerField>(i);                              break;                          }                          case ObjectType.SceneObject:                          {                              key = UpdateFields.GetUpdateFieldName<SceneObjectField>(i);                              break;                          }                          case ObjectType.Conversation:                          {                              key = UpdateFields.GetUpdateFieldName<ConversationField>(i);                              break;                          }                      }
Missing Default,WowPacketParserModule.V7_0_3_22248.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V7_0_3_22248\Parsers\UpdateHandler.cs,ReadDynamicValuesUpdateBlock,The following switch statement is missing a default case: switch (type)                      {                          case ObjectType.Container:                          {                              if (i < UpdateFields.GetUpdateField(ItemDynamicField.ITEM_DYNAMIC_END))                                  goto case ObjectType.Item;                                key = UpdateFields.GetUpdateFieldName<ContainerDynamicField>(i);                              break;                          }                          case ObjectType.Item:                          {                              key = UpdateFields.GetUpdateFieldName<ItemDynamicField>(i);                              break;                          }                          case ObjectType.Player:                          {                              if (i < UpdateFields.GetUpdateField(UnitDynamicField.UNIT_DYNAMIC_END))                                  goto case ObjectType.Unit;                                key = UpdateFields.GetUpdateFieldName<PlayerDynamicField>(i);                              break;                          }                          case ObjectType.Unit:                          {                              key = UpdateFields.GetUpdateFieldName<UnitDynamicField>(i);                              break;                          }                          case ObjectType.GameObject:                          {                              key = UpdateFields.GetUpdateFieldName<GameObjectDynamicField>(i);                              break;                          }                          case ObjectType.DynamicObject:                          {                              key = UpdateFields.GetUpdateFieldName<DynamicObjectDynamicField>(i);                              break;                          }                          case ObjectType.Corpse:                          {                              key = UpdateFields.GetUpdateFieldName<CorpseDynamicField>(i);                              break;                          }                          case ObjectType.AreaTrigger:                          {                              key = UpdateFields.GetUpdateFieldName<AreaTriggerDynamicField>(i);                              break;                          }                          case ObjectType.SceneObject:                          {                              key = UpdateFields.GetUpdateFieldName<SceneObjectDynamicField>(i);                              break;                          }                          case ObjectType.Conversation:                          {                              key = UpdateFields.GetUpdateFieldName<ConversationDynamicField>(i);                              break;                          }                      }
