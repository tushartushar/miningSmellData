Implementation smell,Namespace,Class,File,Method,Description
Long Method,WowPacketParserModule.V5_3_0_16981.Hotfix,HotfixSerializer<T>,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Hotfix\HotfixSerializer.cs,GenerateDeserializer,The method has 129 lines of code.
Long Method,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The method has 119 lines of code.
Long Method,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleQuestQueryResponse510,The method has 128 lines of code.
Long Method,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The method has 122 lines of code.
Long Method,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The method has 102 lines of code.
Long Method,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The method has 219 lines of code.
Long Method,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The method has 219 lines of code.
Long Method,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The method has 652 lines of code.
Complex Method,WowPacketParserModule.V5_3_0_16981.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ActionBarHandler.cs,HandleActionButtons,Cyclomatic complexity of the method is 21
Complex Method,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,Cyclomatic complexity of the method is 18
Complex Method,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackerStateUpdate,Cyclomatic complexity of the method is 12
Complex Method,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,Cyclomatic complexity of the method is 10
Complex Method,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,Cyclomatic complexity of the method is 16
Complex Method,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,Cyclomatic complexity of the method is 21
Complex Method,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,Cyclomatic complexity of the method is 16
Complex Method,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossip,Cyclomatic complexity of the method is 9
Complex Method,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,Cyclomatic complexity of the method is 11
Complex Method,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,Cyclomatic complexity of the method is 9
Complex Method,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,Cyclomatic complexity of the method is 14
Complex Method,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,Cyclomatic complexity of the method is 17
Complex Method,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,Cyclomatic complexity of the method is 32
Complex Method,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,Cyclomatic complexity of the method is 32
Complex Method,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,Cyclomatic complexity of the method is 102
Long Statement,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The length of the statement  "                    PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 }; " is 145.
Long Statement,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossip,The length of the statement  "                Storage.GossipMenuOptionActions.Add(new GossipMenuOptionAction { MenuId = lastGossipOption.MenuId' OptionIndex = lastGossipOption.OptionIndex' ActionMenuId = gossip.Entry }' packet.TimeSpan); " is 191.
Long Statement,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleServerTrainerList,The length of the statement  "                Storage.GossipMenuOptionTrainers.Add(new GossipMenuOptionTrainer { MenuId = lastGossipOption.MenuId' OptionIndex = lastGossipOption.OptionIndex' TrainerId = trainer.Id }' packet.TimeSpan); " is 188.
Long Statement,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleServerTrainerList,The length of the statement  "                Storage.CreatureDefaultTrainers.Add(new CreatureDefaultTrainer { CreatureId = lastGossipOption.Guid.GetEntry()' TrainerId = trainer.Id }' packet.TimeSpan); " is 155.
Long Statement,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleDBReply,The length of the statement  "            var db2File = new Packet(data' packet.Opcode' packet.Time' packet.Direction' packet.Number' packet.Writer' packet.FileName); " is 124.
Long Statement,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNpcTextUpdate,The length of the statement  "            var pkt = new Packet(data' packet.Opcode' packet.Time' packet.Direction' packet.Number' packet.Writer' packet.FileName); " is 120.
Long Statement,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadCreateObjectBlock,The length of the statement  "                CoreParsers.UpdateHandler.ProcessExistingObject(ref existObj' obj' guid); // can't do "ref Storage.Objects[guid].Item1 directly " is 127.
Complex Conditional,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The conditional expression  "moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature"  is complex.
Complex Conditional,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The conditional expression  "living && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget"  is complex.
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AccountDataHandler.cs,HandleAccountDataTimes,The following statement contains a magic number: for (var i = 0; i < 8; ++i)              {                  packet.ReadTime("[" + (AccountDataType)i + "]" + " Time");              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AccountDataHandler.cs,HandleClientUpdateAccountData,The following statement contains a magic number: packet.ReadBitsE<AccountDataType>("Data Type"' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.ReadBitsE<AccountDataType>("Data Type"' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.StartBitStream(guid' 3' 6' 1' 5' 0' 4' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.StartBitStream(guid' 3' 6' 1' 5' 0' 4' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.StartBitStream(guid' 3' 6' 1' 5' 0' 4' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.StartBitStream(guid' 3' 6' 1' 5' 0' 4' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.StartBitStream(guid' 3' 6' 1' 5' 0' 4' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 7' 4' 1' 5' 0' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 7' 4' 1' 5' 0' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 7' 4' 1' 5' 0' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 7' 4' 1' 5' 0' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 7' 4' 1' 5' 0' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 7' 4' 1' 5' 0' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: var counter = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadBits("Flags"' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 0' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 0' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: counter[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.StartBitStream(counter' 0' 2' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.StartBitStream(counter' 0' 2' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.StartBitStream(guid2' 3' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.StartBitStream(guid2' 3' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.StartBitStream(counter' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.StartBitStream(counter' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: counter[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORByte(counter' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORByte(counter' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORBytes(guid2' 0' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORBytes(counter' 7' 3' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORBytes(counter' 7' 3' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORBytes(counter' 7' 3' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORBytes(counter' 0' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\AchievementHandler.cs,HandleCriteriaUpdate,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: const int buttonCount = 132;
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)              {                  buttons[i] = new byte[8];                  buttons[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: var count = packet.ReadBits("Char count"' 16);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: packet.ReadBits("RIDBIT21"' 21);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadXORByte(charGuids[c]' 4);                  var race = packet.ReadByteE<Race>("Race"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByte("List Order"' c);                  packet.ReadByte("Hair Style"' c);                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 3);                  pos.X = packet.ReadSingle("Position X"' c);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadInt32("Pet Level"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  pos.Y = packet.ReadSingle("Position Y"' c);                  packet.ReadInt32("Pet Family"' c);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c);                  packet.ReadInt32("Pet Display ID"' c);                  packet.ReadXORByte(guildGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  var level = packet.ReadByte("Level"' c);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 2);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    pos.Z = packet.ReadSingle("Position Z"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadByte("Facial Hair"' c);                  var klass = packet.ReadByteE<Class>("Class"' c);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadByte("Skin"' c);                  packet.ReadByteE<Gender>("Gender"' c);                  packet.ReadByte("Face"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Color"' c);                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadXORByte(charGuids[c]' 4);                  var race = packet.ReadByteE<Race>("Race"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByte("List Order"' c);                  packet.ReadByte("Hair Style"' c);                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 3);                  pos.X = packet.ReadSingle("Position X"' c);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadInt32("Pet Level"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  pos.Y = packet.ReadSingle("Position Y"' c);                  packet.ReadInt32("Pet Family"' c);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c);                  packet.ReadInt32("Pet Display ID"' c);                  packet.ReadXORByte(guildGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  var level = packet.ReadByte("Level"' c);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 2);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    pos.Z = packet.ReadSingle("Position Z"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadByte("Facial Hair"' c);                  var klass = packet.ReadByteE<Class>("Class"' c);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadByte("Skin"' c);                  packet.ReadByteE<Gender>("Gender"' c);                  packet.ReadByte("Face"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Color"' c);                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadXORByte(charGuids[c]' 4);                  var race = packet.ReadByteE<Race>("Race"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByte("List Order"' c);                  packet.ReadByte("Hair Style"' c);                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 3);                  pos.X = packet.ReadSingle("Position X"' c);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadInt32("Pet Level"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  pos.Y = packet.ReadSingle("Position Y"' c);                  packet.ReadInt32("Pet Family"' c);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c);                  packet.ReadInt32("Pet Display ID"' c);                  packet.ReadXORByte(guildGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  var level = packet.ReadByte("Level"' c);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 2);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    pos.Z = packet.ReadSingle("Position Z"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadByte("Facial Hair"' c);                  var klass = packet.ReadByteE<Class>("Class"' c);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadByte("Skin"' c);                  packet.ReadByteE<Gender>("Gender"' c);                  packet.ReadByte("Face"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Color"' c);                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadXORByte(charGuids[c]' 4);                  var race = packet.ReadByteE<Race>("Race"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByte("List Order"' c);                  packet.ReadByte("Hair Style"' c);                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 3);                  pos.X = packet.ReadSingle("Position X"' c);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadInt32("Pet Level"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  pos.Y = packet.ReadSingle("Position Y"' c);                  packet.ReadInt32("Pet Family"' c);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c);                  packet.ReadInt32("Pet Display ID"' c);                  packet.ReadXORByte(guildGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  var level = packet.ReadByte("Level"' c);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 2);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    pos.Z = packet.ReadSingle("Position Z"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadByte("Facial Hair"' c);                  var klass = packet.ReadByteE<Class>("Class"' c);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadByte("Skin"' c);                  packet.ReadByteE<Gender>("Gender"' c);                  packet.ReadByte("Face"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Color"' c);                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadXORByte(charGuids[c]' 4);                  var race = packet.ReadByteE<Race>("Race"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByte("List Order"' c);                  packet.ReadByte("Hair Style"' c);                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 3);                  pos.X = packet.ReadSingle("Position X"' c);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadInt32("Pet Level"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  pos.Y = packet.ReadSingle("Position Y"' c);                  packet.ReadInt32("Pet Family"' c);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c);                  packet.ReadInt32("Pet Display ID"' c);                  packet.ReadXORByte(guildGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  var level = packet.ReadByte("Level"' c);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 2);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    pos.Z = packet.ReadSingle("Position Z"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadByte("Facial Hair"' c);                  var klass = packet.ReadByteE<Class>("Class"' c);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadByte("Skin"' c);                  packet.ReadByteE<Gender>("Gender"' c);                  packet.ReadByte("Face"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Color"' c);                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadXORByte(charGuids[c]' 4);                  var race = packet.ReadByteE<Race>("Race"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByte("List Order"' c);                  packet.ReadByte("Hair Style"' c);                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 3);                  pos.X = packet.ReadSingle("Position X"' c);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadInt32("Pet Level"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  pos.Y = packet.ReadSingle("Position Y"' c);                  packet.ReadInt32("Pet Family"' c);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c);                  packet.ReadInt32("Pet Display ID"' c);                  packet.ReadXORByte(guildGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  var level = packet.ReadByte("Level"' c);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 2);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    pos.Z = packet.ReadSingle("Position Z"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadByte("Facial Hair"' c);                  var klass = packet.ReadByteE<Class>("Class"' c);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadByte("Skin"' c);                  packet.ReadByteE<Gender>("Gender"' c);                  packet.ReadByte("Face"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Color"' c);                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadXORByte(charGuids[c]' 4);                  var race = packet.ReadByteE<Race>("Race"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByte("List Order"' c);                  packet.ReadByte("Hair Style"' c);                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 3);                  pos.X = packet.ReadSingle("Position X"' c);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadInt32("Pet Level"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  pos.Y = packet.ReadSingle("Position Y"' c);                  packet.ReadInt32("Pet Family"' c);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c);                  packet.ReadInt32("Pet Display ID"' c);                  packet.ReadXORByte(guildGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  var level = packet.ReadByte("Level"' c);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 2);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    pos.Z = packet.ReadSingle("Position Z"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadByte("Facial Hair"' c);                  var klass = packet.ReadByteE<Class>("Class"' c);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadByte("Skin"' c);                  packet.ReadByteE<Gender>("Gender"' c);                  packet.ReadByte("Face"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Color"' c);                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadXORByte(charGuids[c]' 4);                  var race = packet.ReadByteE<Race>("Race"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByte("List Order"' c);                  packet.ReadByte("Hair Style"' c);                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 3);                  pos.X = packet.ReadSingle("Position X"' c);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadInt32("Pet Level"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  pos.Y = packet.ReadSingle("Position Y"' c);                  packet.ReadInt32("Pet Family"' c);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c);                  packet.ReadInt32("Pet Display ID"' c);                  packet.ReadXORByte(guildGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  var level = packet.ReadByte("Level"' c);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 2);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    pos.Z = packet.ReadSingle("Position Z"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadByte("Facial Hair"' c);                  var klass = packet.ReadByteE<Class>("Class"' c);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadByte("Skin"' c);                  packet.ReadByteE<Gender>("Gender"' c);                  packet.ReadByte("Face"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Color"' c);                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadXORByte(charGuids[c]' 4);                  var race = packet.ReadByteE<Race>("Race"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByte("List Order"' c);                  packet.ReadByte("Hair Style"' c);                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 3);                  pos.X = packet.ReadSingle("Position X"' c);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadInt32("Pet Level"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  pos.Y = packet.ReadSingle("Position Y"' c);                  packet.ReadInt32("Pet Family"' c);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c);                  packet.ReadInt32("Pet Display ID"' c);                  packet.ReadXORByte(guildGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  var level = packet.ReadByte("Level"' c);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 2);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    pos.Z = packet.ReadSingle("Position Z"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadByte("Facial Hair"' c);                  var klass = packet.ReadByteE<Class>("Class"' c);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadByte("Skin"' c);                  packet.ReadByteE<Gender>("Gender"' c);                  packet.ReadByte("Face"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Color"' c);                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadXORByte(charGuids[c]' 4);                  var race = packet.ReadByteE<Race>("Race"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByte("List Order"' c);                  packet.ReadByte("Hair Style"' c);                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 3);                  pos.X = packet.ReadSingle("Position X"' c);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadInt32("Pet Level"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  pos.Y = packet.ReadSingle("Position Y"' c);                  packet.ReadInt32("Pet Family"' c);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c);                  packet.ReadInt32("Pet Display ID"' c);                  packet.ReadXORByte(guildGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  var level = packet.ReadByte("Level"' c);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 2);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    pos.Z = packet.ReadSingle("Position Z"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadByte("Facial Hair"' c);                  var klass = packet.ReadByteE<Class>("Class"' c);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadByte("Skin"' c);                  packet.ReadByteE<Gender>("Gender"' c);                  packet.ReadByte("Face"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Color"' c);                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadXORByte(charGuids[c]' 4);                  var race = packet.ReadByteE<Race>("Race"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByte("List Order"' c);                  packet.ReadByte("Hair Style"' c);                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 3);                  pos.X = packet.ReadSingle("Position X"' c);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadInt32("Pet Level"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  pos.Y = packet.ReadSingle("Position Y"' c);                  packet.ReadInt32("Pet Family"' c);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c);                  packet.ReadInt32("Pet Display ID"' c);                  packet.ReadXORByte(guildGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  var level = packet.ReadByte("Level"' c);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 2);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    pos.Z = packet.ReadSingle("Position Z"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadByte("Facial Hair"' c);                  var klass = packet.ReadByteE<Class>("Class"' c);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadByte("Skin"' c);                  packet.ReadByteE<Gender>("Gender"' c);                  packet.ReadByte("Face"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Color"' c);                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadXORByte(charGuids[c]' 4);                  var race = packet.ReadByteE<Race>("Race"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByte("List Order"' c);                  packet.ReadByte("Hair Style"' c);                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 3);                  pos.X = packet.ReadSingle("Position X"' c);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadInt32("Pet Level"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  pos.Y = packet.ReadSingle("Position Y"' c);                  packet.ReadInt32("Pet Family"' c);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c);                  packet.ReadInt32("Pet Display ID"' c);                  packet.ReadXORByte(guildGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  var level = packet.ReadByte("Level"' c);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 2);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    pos.Z = packet.ReadSingle("Position Z"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadByte("Facial Hair"' c);                  var klass = packet.ReadByteE<Class>("Class"' c);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadByte("Skin"' c);                  packet.ReadByteE<Gender>("Gender"' c);                  packet.ReadByte("Face"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Color"' c);                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadXORByte(charGuids[c]' 4);                  var race = packet.ReadByteE<Race>("Race"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByte("List Order"' c);                  packet.ReadByte("Hair Style"' c);                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 3);                  pos.X = packet.ReadSingle("Position X"' c);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadInt32("Pet Level"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c);                  packet.ReadXORByte(guildGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 5);                  pos.Y = packet.ReadSingle("Position Y"' c);                  packet.ReadInt32("Pet Family"' c);                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c);                  packet.ReadInt32("Pet Display ID"' c);                  packet.ReadXORByte(guildGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  var level = packet.ReadByte("Level"' c);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadXORByte(guildGuids[c]' 2);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    pos.Z = packet.ReadSingle("Position Z"' c);                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadByte("Facial Hair"' c);                  var klass = packet.ReadByteE<Class>("Class"' c);                  packet.ReadXORByte(guildGuids[c]' 5);                  packet.ReadByte("Skin"' c);                  packet.ReadByteE<Gender>("Gender"' c);                  packet.ReadByte("Face"' c);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Color"' c);                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleClientCharCreate,The following statement contains a magic number: var nameLength = packet.ReadBits(6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: var playerGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: playerGuid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: playerGuid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: playerGuid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: playerGuid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: playerGuid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: playerGuid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.ReadXORByte(playerGuid' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.ReadXORByte(playerGuid' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.ReadXORByte(playerGuid' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.ReadXORByte(playerGuid' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.ReadXORByte(playerGuid' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.ReadXORByte(playerGuid' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: packet.StartBitStream(guid' 1' 0' 3' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: packet.StartBitStream(guid' 1' 0' 3' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 6' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 6' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 6' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 6' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: packet.ReadXORBytes(guid' 5' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: packet.ReadXORBytes(guid' 5' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 0' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 0' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: packet.ReadXORBytes(guid' 1' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: var groupGUIDBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: var guildGUIDBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: var receiverGUIDBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: var senderGUIDBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 6' 1' 7' 5' 4' 3' 2' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 6' 1' 7' 5' 4' 3' 2' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 6' 1' 7' 5' 4' 3' 2' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 6' 1' 7' 5' 4' 3' 2' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 6' 1' 7' 5' 4' 3' 2' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 6' 1' 7' 5' 4' 3' 2' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 1' 5' 7' 4' 2' 0' 6' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 1' 5' 7' 4' 2' 0' 6' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 1' 5' 7' 4' 2' 0' 6' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 1' 5' 7' 4' 2' 0' 6' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 1' 5' 7' 4' 2' 0' 6' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 1' 5' 7' 4' 2' 0' 6' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasReceiver)                  receiverLen = (int)packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 0' 6' 1' 5' 7' 3' 4' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 0' 6' 1' 5' 7' 3' 4' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 0' 6' 1' 5' 7' 3' 4' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 0' 6' 1' 5' 7' 3' 4' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 0' 6' 1' 5' 7' 3' 4' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 0' 6' 1' 5' 7' 3' 4' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasSender)                  senderName = (int)packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasText)                  textLen = (int)packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 5' 4' 1' 0' 6' 2' 7' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 5' 4' 1' 0' 6' 2' 7' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 5' 4' 1' 0' 6' 2' 7' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 5' 4' 1' 0' 6' 2' 7' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 5' 4' 1' 0' 6' 2' 7' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 5' 4' 1' 0' 6' 2' 7' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasChannel)                  channelLen = (int)packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (bit2630)                  packet.ReadBitsE<ChatTag>("Chat Tag"' 9);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasPrefix)                  prefixLen = (int)packet.ReadBits(5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 3' 1' 5' 4' 6' 2' 0' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 3' 1' 5' 4' 6' 2' 0' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 3' 1' 5' 4' 6' 2' 0' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 3' 1' 5' 4' 6' 2' 0' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 3' 1' 5' 4' 6' 2' 0' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 3' 1' 5' 4' 6' 2' 0' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 7' 4' 2' 3' 1' 5' 6' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 7' 4' 2' 3' 1' 5' 6' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 7' 4' 2' 3' 1' 5' 6' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 7' 4' 2' 3' 1' 5' 6' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 7' 4' 2' 3' 1' 5' 6' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 7' 4' 2' 3' 1' 5' 6' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 5' 0' 7' 4' 3' 2' 1' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 5' 0' 7' 4' 3' 2' 1' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 5' 0' 7' 4' 3' 2' 1' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 5' 0' 7' 4' 3' 2' 1' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 5' 0' 7' 4' 3' 2' 1' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 5' 0' 7' 4' 3' 2' 1' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 3' 5' 2' 6' 4' 0' 1' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 3' 5' 2' 6' 4' 0' 1' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 3' 5' 2' 6' 4' 0' 1' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 3' 5' 2' 6' 4' 0' 1' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 3' 5' 2' 6' 4' 0' 1' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 3' 5' 2' 6' 4' 0' 1' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.StartBitStream(guid' 3' 4' 5' 1' 6' 2' 0' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.StartBitStream(guid' 3' 4' 5' 1' 6' 2' 0' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.StartBitStream(guid' 3' 4' 5' 1' 6' 2' 0' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.StartBitStream(guid' 3' 4' 5' 1' 6' 2' 0' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.StartBitStream(guid' 3' 4' 5' 1' 6' 2' 0' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.StartBitStream(guid' 3' 4' 5' 1' 6' 2' 0' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 4' 5' 2' 1' 3' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 4' 5' 2' 1' 3' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 4' 5' 2' 1' 3' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 4' 5' 2' 1' 3' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 4' 5' 2' 1' 3' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 4' 5' 2' 1' 3' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: var bits7 = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleChannelList,The following statement contains a magic number: var password = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleChannelList,The following statement contains a magic number: var length = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleClientChatMessage,The following statement contains a magic number: var len = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleClientChatMessage2,The following statement contains a magic number: var len = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleClientChatMessageChannel,The following statement contains a magic number: var msgLen = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleClientChatMessageChannel,The following statement contains a magic number: var channelNameLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleClientChatMessageWhisper,The following statement contains a magic number: var recvName = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleClientChatMessageWhisper,The following statement contains a magic number: var msgLen = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ChatHandler.cs,HandleDefenseMessage,The following statement contains a magic number: packet.ReadBits("Message Length?"' 12);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: var victimGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: var attackerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.StartBitStream(victimGUID' 6' 2' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.StartBitStream(victimGUID' 6' 2' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: attackerGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: victimGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.StartBitStream(attackerGUID' 1' 3' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.StartBitStream(victimGUID' 0' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.StartBitStream(attackerGUID' 7' 5' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.StartBitStream(attackerGUID' 7' 5' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.StartBitStream(attackerGUID' 7' 5' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.StartBitStream(victimGUID' 4' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.StartBitStream(victimGUID' 4' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: attackerGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(attackerGUID' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORBytes(attackerGUID' 2' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORBytes(attackerGUID' 2' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORBytes(victimGUID' 2' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORBytes(victimGUID' 2' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(attackerGUID' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(attackerGUID' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(attackerGUID' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: var victimGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: var attackerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: victimGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.StartBitStream(attackerGUID' 1' 3' 0' 6' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.StartBitStream(attackerGUID' 1' 3' 0' 6' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.StartBitStream(attackerGUID' 1' 3' 0' 6' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: attackerGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.StartBitStream(victimGUID' 5' 6' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.StartBitStream(victimGUID' 5' 6' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.StartBitStream(attackerGUID' 2' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.StartBitStream(attackerGUID' 2' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.StartBitStream(victimGUID' 7' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.StartBitStream(victimGUID' 7' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: victimGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORBytes(victimGUID' 2' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORBytes(attackerGUID' 5' 0' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORBytes(attackerGUID' 5' 0' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORBytes(victimGUID' 4' 6' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORBytes(victimGUID' 4' 6' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORBytes(victimGUID' 4' 6' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORBytes(attackerGUID' 2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORBytes(attackerGUID' 2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORBytes(victimGUID' 5' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORBytes(attackerGUID' 1' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(attackerGUID' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: var guid = new Byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    guid[7] = packet.ReadBit();                  guid[6] = packet.ReadBit();                  var counter = packet.ReadBits(21);                  guid[2] = packet.ReadBit();                  guid[0] = packet.ReadBit();                  guid[3] = packet.ReadBit();                  guid[5] = packet.ReadBit();                  guid[1] = packet.ReadBit();                  guid[4] = packet.ReadBit();                    packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 6);                  packet.ReadXORByte(guid' 2);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14");                      packet.ReadUInt32("unk6");                  }                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 4);                  packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 7);                    packet.ReadGuid("GUID");              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    guid[7] = packet.ReadBit();                  guid[6] = packet.ReadBit();                  var counter = packet.ReadBits(21);                  guid[2] = packet.ReadBit();                  guid[0] = packet.ReadBit();                  guid[3] = packet.ReadBit();                  guid[5] = packet.ReadBit();                  guid[1] = packet.ReadBit();                  guid[4] = packet.ReadBit();                    packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 6);                  packet.ReadXORByte(guid' 2);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14");                      packet.ReadUInt32("unk6");                  }                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 4);                  packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 7);                    packet.ReadGuid("GUID");              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    guid[7] = packet.ReadBit();                  guid[6] = packet.ReadBit();                  var counter = packet.ReadBits(21);                  guid[2] = packet.ReadBit();                  guid[0] = packet.ReadBit();                  guid[3] = packet.ReadBit();                  guid[5] = packet.ReadBit();                  guid[1] = packet.ReadBit();                  guid[4] = packet.ReadBit();                    packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 6);                  packet.ReadXORByte(guid' 2);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14");                      packet.ReadUInt32("unk6");                  }                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 4);                  packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 7);                    packet.ReadGuid("GUID");              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    guid[7] = packet.ReadBit();                  guid[6] = packet.ReadBit();                  var counter = packet.ReadBits(21);                  guid[2] = packet.ReadBit();                  guid[0] = packet.ReadBit();                  guid[3] = packet.ReadBit();                  guid[5] = packet.ReadBit();                  guid[1] = packet.ReadBit();                  guid[4] = packet.ReadBit();                    packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 6);                  packet.ReadXORByte(guid' 2);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14");                      packet.ReadUInt32("unk6");                  }                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 4);                  packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 7);                    packet.ReadGuid("GUID");              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    guid[7] = packet.ReadBit();                  guid[6] = packet.ReadBit();                  var counter = packet.ReadBits(21);                  guid[2] = packet.ReadBit();                  guid[0] = packet.ReadBit();                  guid[3] = packet.ReadBit();                  guid[5] = packet.ReadBit();                  guid[1] = packet.ReadBit();                  guid[4] = packet.ReadBit();                    packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 6);                  packet.ReadXORByte(guid' 2);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14");                      packet.ReadUInt32("unk6");                  }                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 4);                  packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 7);                    packet.ReadGuid("GUID");              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    guid[7] = packet.ReadBit();                  guid[6] = packet.ReadBit();                  var counter = packet.ReadBits(21);                  guid[2] = packet.ReadBit();                  guid[0] = packet.ReadBit();                  guid[3] = packet.ReadBit();                  guid[5] = packet.ReadBit();                  guid[1] = packet.ReadBit();                  guid[4] = packet.ReadBit();                    packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 6);                  packet.ReadXORByte(guid' 2);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14");                      packet.ReadUInt32("unk6");                  }                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 4);                  packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 7);                    packet.ReadGuid("GUID");              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    guid[7] = packet.ReadBit();                  guid[6] = packet.ReadBit();                  var counter = packet.ReadBits(21);                  guid[2] = packet.ReadBit();                  guid[0] = packet.ReadBit();                  guid[3] = packet.ReadBit();                  guid[5] = packet.ReadBit();                  guid[1] = packet.ReadBit();                  guid[4] = packet.ReadBit();                    packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 6);                  packet.ReadXORByte(guid' 2);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14");                      packet.ReadUInt32("unk6");                  }                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 4);                  packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 7);                    packet.ReadGuid("GUID");              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    guid[7] = packet.ReadBit();                  guid[6] = packet.ReadBit();                  var counter = packet.ReadBits(21);                  guid[2] = packet.ReadBit();                  guid[0] = packet.ReadBit();                  guid[3] = packet.ReadBit();                  guid[5] = packet.ReadBit();                  guid[1] = packet.ReadBit();                  guid[4] = packet.ReadBit();                    packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 6);                  packet.ReadXORByte(guid' 2);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14");                      packet.ReadUInt32("unk6");                  }                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 4);                  packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 7);                    packet.ReadGuid("GUID");              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    guid[7] = packet.ReadBit();                  guid[6] = packet.ReadBit();                  var counter = packet.ReadBits(21);                  guid[2] = packet.ReadBit();                  guid[0] = packet.ReadBit();                  guid[3] = packet.ReadBit();                  guid[5] = packet.ReadBit();                  guid[1] = packet.ReadBit();                  guid[4] = packet.ReadBit();                    packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 6);                  packet.ReadXORByte(guid' 2);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14");                      packet.ReadUInt32("unk6");                  }                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 4);                  packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 7);                    packet.ReadGuid("GUID");              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    guid[7] = packet.ReadBit();                  guid[6] = packet.ReadBit();                  var counter = packet.ReadBits(21);                  guid[2] = packet.ReadBit();                  guid[0] = packet.ReadBit();                  guid[3] = packet.ReadBit();                  guid[5] = packet.ReadBit();                  guid[1] = packet.ReadBit();                  guid[4] = packet.ReadBit();                    packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 6);                  packet.ReadXORByte(guid' 2);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14");                      packet.ReadUInt32("unk6");                  }                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 4);                  packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 7);                    packet.ReadGuid("GUID");              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    guid[7] = packet.ReadBit();                  guid[6] = packet.ReadBit();                  var counter = packet.ReadBits(21);                  guid[2] = packet.ReadBit();                  guid[0] = packet.ReadBit();                  guid[3] = packet.ReadBit();                  guid[5] = packet.ReadBit();                  guid[1] = packet.ReadBit();                  guid[4] = packet.ReadBit();                    packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 6);                  packet.ReadXORByte(guid' 2);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14");                      packet.ReadUInt32("unk6");                  }                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 4);                  packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 7);                    packet.ReadGuid("GUID");              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    guid[7] = packet.ReadBit();                  guid[6] = packet.ReadBit();                  var counter = packet.ReadBits(21);                  guid[2] = packet.ReadBit();                  guid[0] = packet.ReadBit();                  guid[3] = packet.ReadBit();                  guid[5] = packet.ReadBit();                  guid[1] = packet.ReadBit();                  guid[4] = packet.ReadBit();                    packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 6);                  packet.ReadXORByte(guid' 2);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14");                      packet.ReadUInt32("unk6");                  }                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 4);                  packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 7);                    packet.ReadGuid("GUID");              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (hitInfo.HasAnyFlag(SpellHitInfo.HITINFO_UNK26))              {                  packet.ReadInt32("Unk4");                  packet.ReadInt32("Player current HP");                  packet.ReadInt32("Unk3");                    guid[7] = packet.ReadBit();                  guid[6] = packet.ReadBit();                  var counter = packet.ReadBits(21);                  guid[2] = packet.ReadBit();                  guid[0] = packet.ReadBit();                  guid[3] = packet.ReadBit();                  guid[5] = packet.ReadBit();                  guid[1] = packet.ReadBit();                  guid[4] = packet.ReadBit();                    packet.ReadXORByte(guid' 0);                  packet.ReadXORByte(guid' 5);                  packet.ReadXORByte(guid' 6);                  packet.ReadXORByte(guid' 2);                    for (var i = 0; i < counter; ++i)                  {                      packet.ReadUInt32("unk14");                      packet.ReadUInt32("unk6");                  }                  packet.ReadXORByte(guid' 3);                  packet.ReadXORByte(guid' 4);                  packet.ReadXORByte(guid' 1);                  packet.ReadXORByte(guid' 7);                    packet.ReadGuid("GUID");              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: var casterGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: var targetGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: var powerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.StartBitStream(casterGUID' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.StartBitStream(targetGUID' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.StartBitStream(casterGUID' 4' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.StartBitStream(targetGUID' 2' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.StartBitStream(targetGUID' 2' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 2' 0);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 1' 5' 7' 3' 6);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 2' 0);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 1' 5' 7' 3' 6);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 2' 0);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 1' 5' 7' 3' 6);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 2' 0);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 1' 5' 7' 3' 6);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 2' 0);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 1' 5' 7' 3' 6);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 2' 0);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 1' 5' 7' 3' 6);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerGUID' 2' 0);                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 4' 1' 5' 7' 3' 6);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: var periodicAuraLogEffectCount = (int)packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.StartBitStream(targetGUID' 5' 4' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.StartBitStream(targetGUID' 5' 4' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.StartBitStream(targetGUID' 5' 4' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.StartBitStream(casterGUID' 5' 2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.StartBitStream(casterGUID' 5' 2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.StartBitStream(casterGUID' 5' 2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.StartBitStream(casterGUID' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORBytes(powerGUID' 7' 5);                  packet.ReadInt32("Spell Power");                  for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Power Amount"' i);                      packet.ReadInt32E<PowerType>("Power Type"' i);                  }                    packet.ReadInt32("Attack Power");                  packet.ReadXORBytes(powerGUID' 4' 6' 3);                  packet.ReadInt32("Current Health");                  packet.ReadXORBytes(powerGUID' 0' 1' 2);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORBytes(powerGUID' 7' 5);                  packet.ReadInt32("Spell Power");                  for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Power Amount"' i);                      packet.ReadInt32E<PowerType>("Power Type"' i);                  }                    packet.ReadInt32("Attack Power");                  packet.ReadXORBytes(powerGUID' 4' 6' 3);                  packet.ReadInt32("Current Health");                  packet.ReadXORBytes(powerGUID' 0' 1' 2);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORBytes(powerGUID' 7' 5);                  packet.ReadInt32("Spell Power");                  for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Power Amount"' i);                      packet.ReadInt32E<PowerType>("Power Type"' i);                  }                    packet.ReadInt32("Attack Power");                  packet.ReadXORBytes(powerGUID' 4' 6' 3);                  packet.ReadInt32("Current Health");                  packet.ReadXORBytes(powerGUID' 0' 1' 2);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORBytes(powerGUID' 7' 5);                  packet.ReadInt32("Spell Power");                  for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Power Amount"' i);                      packet.ReadInt32E<PowerType>("Power Type"' i);                  }                    packet.ReadInt32("Attack Power");                  packet.ReadXORBytes(powerGUID' 4' 6' 3);                  packet.ReadInt32("Current Health");                  packet.ReadXORBytes(powerGUID' 0' 1' 2);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORBytes(powerGUID' 7' 5);                  packet.ReadInt32("Spell Power");                  for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Power Amount"' i);                      packet.ReadInt32E<PowerType>("Power Type"' i);                  }                    packet.ReadInt32("Attack Power");                  packet.ReadXORBytes(powerGUID' 4' 6' 3);                  packet.ReadInt32("Current Health");                  packet.ReadXORBytes(powerGUID' 0' 1' 2);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORBytes(powerGUID' 7' 5);                  packet.ReadInt32("Spell Power");                  for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32("Power Amount"' i);                      packet.ReadInt32E<PowerType>("Power Type"' i);                  }                    packet.ReadInt32("Attack Power");                  packet.ReadXORBytes(powerGUID' 4' 6' 3);                  packet.ReadInt32("Current Health");                  packet.ReadXORBytes(powerGUID' 0' 1' 2);                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORBytes(casterGUID' 7' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORBytes(casterGUID' 7' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORBytes(targetGUID' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORBytes(targetGUID' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORBytes(casterGUID' 0' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORBytes(targetGUID' 5' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: var powerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.StartBitStream(guid1' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 6' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 6' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.StartBitStream(guid2' 4' 6' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.StartBitStream(guid1' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 7' 0' 2' 6' 1' 4' 3' 5);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 7' 0' 2' 6' 1' 4' 3' 5);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 7' 0' 2' 6' 1' 4' 3' 5);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 7' 0' 2' 6' 1' 4' 3' 5);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 7' 0' 2' 6' 1' 4' 3' 5);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 7' 0' 2' 6' 1' 4' 3' 5);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  powerCount = packet.ReadBits(21);                  packet.StartBitStream(powerGUID' 7' 0' 2' 6' 1' 4' 3' 5);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.StartBitStream(guid2' 1' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.StartBitStream(guid1' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.StartBitStream(guid2' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.StartBitStream(guid1' 3' 2' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.StartBitStream(guid1' 3' 2' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.StartBitStream(guid2' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORBytes(powerGUID' 0' 1' 7);                    packet.ReadInt32("Current Health");                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Amount"' i);                  }                    packet.ReadXORByte(powerGUID' 4);                    packet.ReadInt32("Attack Power");                  packet.ReadXORBytes(powerGUID' 2' 5' 3' 6);                  packet.ReadInt32("Spell Power");                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORBytes(powerGUID' 0' 1' 7);                    packet.ReadInt32("Current Health");                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Amount"' i);                  }                    packet.ReadXORByte(powerGUID' 4);                    packet.ReadInt32("Attack Power");                  packet.ReadXORBytes(powerGUID' 2' 5' 3' 6);                  packet.ReadInt32("Spell Power");                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORBytes(powerGUID' 0' 1' 7);                    packet.ReadInt32("Current Health");                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Amount"' i);                  }                    packet.ReadXORByte(powerGUID' 4);                    packet.ReadInt32("Attack Power");                  packet.ReadXORBytes(powerGUID' 2' 5' 3' 6);                  packet.ReadInt32("Spell Power");                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORBytes(powerGUID' 0' 1' 7);                    packet.ReadInt32("Current Health");                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Amount"' i);                  }                    packet.ReadXORByte(powerGUID' 4);                    packet.ReadInt32("Attack Power");                  packet.ReadXORBytes(powerGUID' 2' 5' 3' 6);                  packet.ReadInt32("Spell Power");                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORBytes(powerGUID' 0' 1' 7);                    packet.ReadInt32("Current Health");                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Amount"' i);                  }                    packet.ReadXORByte(powerGUID' 4);                    packet.ReadInt32("Attack Power");                  packet.ReadXORBytes(powerGUID' 2' 5' 3' 6);                  packet.ReadInt32("Spell Power");                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORBytes(powerGUID' 0' 1' 7);                    packet.ReadInt32("Current Health");                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Amount"' i);                  }                    packet.ReadXORByte(powerGUID' 4);                    packet.ReadInt32("Attack Power");                  packet.ReadXORBytes(powerGUID' 2' 5' 3' 6);                  packet.ReadInt32("Spell Power");                    packet.WriteGuid("Power GUID"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORBytes(guid2' 7' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORBytes(guid2' 7' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORBytes(guid1' 3' 7' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORBytes(guid1' 3' 7' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORBytes(guid1' 3' 7' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORBytes(guid1' 6' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORBytes(guid1' 6' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORBytes(guid2' 0' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: var guid = packet.StartBitStream(1' 2' 7' 6' 4' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: var guid = packet.StartBitStream(1' 2' 7' 6' 4' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: var guid = packet.StartBitStream(1' 2' 7' 6' 4' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: var guid = packet.StartBitStream(1' 2' 7' 6' 4' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: var guid = packet.StartBitStream(1' 2' 7' 6' 4' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: var guid = packet.StartBitStream(1' 2' 7' 6' 4' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 3' 4' 0' 2' 5' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 3' 4' 0' 2' 5' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 3' 4' 0' 2' 5' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 3' 4' 0' 2' 5' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 3' 4' 0' 2' 5' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 3' 4' 0' 2' 5' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGameObjectQueryResponse,The following statement contains a magic number: var name = new string[4];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGameObjectQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)                  name[i] = packet.ReadCString("Name"' i);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGameObjectQueryResponse,The following statement contains a magic number: gameObject.Data = new int?[32];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGOCustomAnim,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGOCustomAnim,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGOCustomAnim,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGOCustomAnim,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGOCustomAnim,The following statement contains a magic number: packet.StartBitStream(guid' 5' 1' 2' 0' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGOCustomAnim,The following statement contains a magic number: packet.StartBitStream(guid' 5' 1' 2' 0' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGOCustomAnim,The following statement contains a magic number: packet.StartBitStream(guid' 5' 1' 2' 0' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGOCustomAnim,The following statement contains a magic number: packet.ReadXORBytes(guid' 0' 2' 5' 7' 4' 3' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGOCustomAnim,The following statement contains a magic number: packet.ReadXORBytes(guid' 0' 2' 5' 7' 4' 3' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGOCustomAnim,The following statement contains a magic number: packet.ReadXORBytes(guid' 0' 2' 5' 7' 4' 3' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGOCustomAnim,The following statement contains a magic number: packet.ReadXORBytes(guid' 0' 2' 5' 7' 4' 3' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGOCustomAnim,The following statement contains a magic number: packet.ReadXORBytes(guid' 0' 2' 5' 7' 4' 3' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GameObjectHandler.cs,HandleGOCustomAnim,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.StartBitStream(guid2' 1' 7);                  nameLen = (int)packet.ReadBits(7);                  packet.StartBitStream(guid2' 5' 0' 6' 3' 4' 2);                  rankCount = (int)packet.ReadBits(21);                  rankName = new int[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = (int)packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.StartBitStream(guid2' 1' 7);                  nameLen = (int)packet.ReadBits(7);                  packet.StartBitStream(guid2' 5' 0' 6' 3' 4' 2);                  rankCount = (int)packet.ReadBits(21);                  rankName = new int[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = (int)packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.StartBitStream(guid2' 1' 7);                  nameLen = (int)packet.ReadBits(7);                  packet.StartBitStream(guid2' 5' 0' 6' 3' 4' 2);                  rankCount = (int)packet.ReadBits(21);                  rankName = new int[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = (int)packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.StartBitStream(guid2' 1' 7);                  nameLen = (int)packet.ReadBits(7);                  packet.StartBitStream(guid2' 5' 0' 6' 3' 4' 2);                  rankCount = (int)packet.ReadBits(21);                  rankName = new int[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = (int)packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.StartBitStream(guid2' 1' 7);                  nameLen = (int)packet.ReadBits(7);                  packet.StartBitStream(guid2' 5' 0' 6' 3' 4' 2);                  rankCount = (int)packet.ReadBits(21);                  rankName = new int[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = (int)packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.StartBitStream(guid2' 1' 7);                  nameLen = (int)packet.ReadBits(7);                  packet.StartBitStream(guid2' 5' 0' 6' 3' 4' 2);                  rankCount = (int)packet.ReadBits(21);                  rankName = new int[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = (int)packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.StartBitStream(guid2' 1' 7);                  nameLen = (int)packet.ReadBits(7);                  packet.StartBitStream(guid2' 5' 0' 6' 3' 4' 2);                  rankCount = (int)packet.ReadBits(21);                  rankName = new int[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = (int)packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.StartBitStream(guid2' 1' 7);                  nameLen = (int)packet.ReadBits(7);                  packet.StartBitStream(guid2' 5' 0' 6' 3' 4' 2);                  rankCount = (int)packet.ReadBits(21);                  rankName = new int[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = (int)packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.StartBitStream(guid2' 1' 7);                  nameLen = (int)packet.ReadBits(7);                  packet.StartBitStream(guid2' 5' 0' 6' 3' 4' 2);                  rankCount = (int)packet.ReadBits(21);                  rankName = new int[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = (int)packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 6' 7' 5' 4' 3' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 6' 7' 5' 4' 3' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 6' 7' 5' 4' 3' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 6' 7' 5' 4' 3' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 6' 7' 5' 4' 3' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 6' 7' 5' 4' 3' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadWoWString("Guild Name"' nameLen);                  packet.ReadXORByte(guid2' 5);                  for (var i = 0; i < rankCount; ++i)                  {                      packet.ReadUInt32("Rights Order"' i);                      packet.ReadUInt32("Creation Order"' i);                      packet.ReadWoWString("Rank Name"' rankName[i]' i);                  }                    packet.ReadInt32("Emblem Border Color");                  packet.ReadXORBytes(guid2' 6' 0);                  packet.ReadInt32("Emblem Border Style");                  packet.ReadInt32("Emblem Style");                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Emblem Color");                  packet.ReadXORBytes(guid2' 7' 2' 3' 1);                  packet.ReadInt32("Emblem Background Color");                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadWoWString("Guild Name"' nameLen);                  packet.ReadXORByte(guid2' 5);                  for (var i = 0; i < rankCount; ++i)                  {                      packet.ReadUInt32("Rights Order"' i);                      packet.ReadUInt32("Creation Order"' i);                      packet.ReadWoWString("Rank Name"' rankName[i]' i);                  }                    packet.ReadInt32("Emblem Border Color");                  packet.ReadXORBytes(guid2' 6' 0);                  packet.ReadInt32("Emblem Border Style");                  packet.ReadInt32("Emblem Style");                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Emblem Color");                  packet.ReadXORBytes(guid2' 7' 2' 3' 1);                  packet.ReadInt32("Emblem Background Color");                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadWoWString("Guild Name"' nameLen);                  packet.ReadXORByte(guid2' 5);                  for (var i = 0; i < rankCount; ++i)                  {                      packet.ReadUInt32("Rights Order"' i);                      packet.ReadUInt32("Creation Order"' i);                      packet.ReadWoWString("Rank Name"' rankName[i]' i);                  }                    packet.ReadInt32("Emblem Border Color");                  packet.ReadXORBytes(guid2' 6' 0);                  packet.ReadInt32("Emblem Border Style");                  packet.ReadInt32("Emblem Style");                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Emblem Color");                  packet.ReadXORBytes(guid2' 7' 2' 3' 1);                  packet.ReadInt32("Emblem Background Color");                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadWoWString("Guild Name"' nameLen);                  packet.ReadXORByte(guid2' 5);                  for (var i = 0; i < rankCount; ++i)                  {                      packet.ReadUInt32("Rights Order"' i);                      packet.ReadUInt32("Creation Order"' i);                      packet.ReadWoWString("Rank Name"' rankName[i]' i);                  }                    packet.ReadInt32("Emblem Border Color");                  packet.ReadXORBytes(guid2' 6' 0);                  packet.ReadInt32("Emblem Border Style");                  packet.ReadInt32("Emblem Style");                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Emblem Color");                  packet.ReadXORBytes(guid2' 7' 2' 3' 1);                  packet.ReadInt32("Emblem Background Color");                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadWoWString("Guild Name"' nameLen);                  packet.ReadXORByte(guid2' 5);                  for (var i = 0; i < rankCount; ++i)                  {                      packet.ReadUInt32("Rights Order"' i);                      packet.ReadUInt32("Creation Order"' i);                      packet.ReadWoWString("Rank Name"' rankName[i]' i);                  }                    packet.ReadInt32("Emblem Border Color");                  packet.ReadXORBytes(guid2' 6' 0);                  packet.ReadInt32("Emblem Border Style");                  packet.ReadInt32("Emblem Style");                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Emblem Color");                  packet.ReadXORBytes(guid2' 7' 2' 3' 1);                  packet.ReadInt32("Emblem Background Color");                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadWoWString("Guild Name"' nameLen);                  packet.ReadXORByte(guid2' 5);                  for (var i = 0; i < rankCount; ++i)                  {                      packet.ReadUInt32("Rights Order"' i);                      packet.ReadUInt32("Creation Order"' i);                      packet.ReadWoWString("Rank Name"' rankName[i]' i);                  }                    packet.ReadInt32("Emblem Border Color");                  packet.ReadXORBytes(guid2' 6' 0);                  packet.ReadInt32("Emblem Border Style");                  packet.ReadInt32("Emblem Style");                  packet.ReadXORByte(guid2' 4);                  packet.ReadInt32("Emblem Color");                  packet.ReadXORBytes(guid2' 7' 2' 3' 1);                  packet.ReadInt32("Emblem Background Color");                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ParseBitStream(guid1' 1' 6' 3' 5' 4' 0' 2' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ParseBitStream(guid1' 1' 6' 3' 5' 4' 0' 2' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ParseBitStream(guid1' 1' 6' 3' 5' 4' 0' 2' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ParseBitStream(guid1' 1' 6' 3' 5' 4' 0' 2' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ParseBitStream(guid1' 1' 6' 3' 5' 4' 0' 2' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ParseBitStream(guid1' 1' 6' 3' 5' 4' 0' 2' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,InstanceHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\InstanceHandler.cs,HandleSaveCufProfiles,The following statement contains a magic number: var count = packet.ReadBits("Count"' 19);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,InstanceHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\InstanceHandler.cs,HandleSaveCufProfiles,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadBit("10 player group"' i);                  packet.ReadBit("25 player group"' i);                  packet.ReadBit("Pets"' i);                  packet.ReadBit("Border"' i);                  packet.ReadBit("Dispellable debuffs"' i);                  packet.ReadBit("15 player group"' i);                  packet.ReadBit("Incoming heals"' i);                  packet.ReadBit("Unk 156"' i);                  strlen[i] = packet.ReadBits("String length"' 7' i);                  packet.ReadBit("Talent spec 1"' i);                  packet.ReadBit("Keep groups together"' i);                  packet.ReadBit("Unk 157"' i);                  packet.ReadBit("2 player group"' i);                  packet.ReadBit("Main tank and assist"' i);                  packet.ReadBit("40 player group"' i);                  packet.ReadBit("Unk 145"' i);                  packet.ReadBit("Display power bars"' i);                  packet.ReadBit("PvE"' i);                  packet.ReadBit("3 player group"' i);                  packet.ReadBit("Class colors"' i);                  packet.ReadBit("Aggro highlight"' i);                  packet.ReadBit("PvP"' i);                  packet.ReadBit("Talent spec 2"' i);                  packet.ReadBit("Debuffs"' i);                  packet.ReadBit("Horizontal Groups"' i);                  packet.ReadBit("5 player group"' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,InstanceHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\InstanceHandler.cs,HandleLoadCUFProfiles,The following statement contains a magic number: var count = packet.ReadBits("Count"' 19);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,InstanceHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\InstanceHandler.cs,HandleLoadCUFProfiles,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadBit("Aggro highlight"' i);                  packet.ReadBit("Unk 145"' i);                  packet.ReadBit("25 player group"' i);                  packet.ReadBit("2 player group"' i);                  packet.ReadBit("Keep groups together"' i);                  packet.ReadBit("Dispellable debuffs"' i);                  packet.ReadBit("Talent spec 1"' i);                  packet.ReadBit("3 player group"' i);                  packet.ReadBit("5 player group"' i);                  packet.ReadBit("40 player group"' i);                  packet.ReadBit("Unk 157"' i);                  strlen[i] = packet.ReadBits("String length"' 7' i);                  packet.ReadBit("Main tank and assist"' i);                  packet.ReadBit("10 player group"' i);                  packet.ReadBit("Debuffs"' i);                  packet.ReadBit("PvP"' i);                  packet.ReadBit("Unk 156"' i);                  packet.ReadBit("Talent spec 2"' i);                  packet.ReadBit("Border"' i);                  packet.ReadBit("Incoming heals"' i);                  packet.ReadBit("Horizontal groups"' i);                  packet.ReadBit("PvE"' i);                  packet.ReadBit("15 player group"' i);                  packet.ReadBit("Class colors"' i);                  packet.ReadBit("Display power bars"' i);                  packet.ReadBit("Pets"' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: var itemGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: var playerGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.StartBitStream(itemGuid' 2' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.StartBitStream(itemGuid' 2' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: playerGuid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: itemGuid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.StartBitStream(playerGuid' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.StartBitStream(playerGuid' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.StartBitStream(itemGuid' 7' 0' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.StartBitStream(itemGuid' 7' 0' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.StartBitStream(playerGuid' 6' 2' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.StartBitStream(playerGuid' 6' 2' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: playerGuid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: itemGuid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORBytes(playerGuid' 1' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORBytes(itemGuid' 4' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORBytes(itemGuid' 4' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(playerGuid' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORBytes(itemGuid' 1' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORBytes(playerGuid' 4' 2' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORBytes(playerGuid' 4' 2' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORBytes(itemGuid' 0' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(playerGuid' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORBytes(itemGuid' 3' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORBytes(itemGuid' 3' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(playerGuid' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetActionButton,The following statement contains a magic number: var actionId = packet.StartBitStream(0' 4' 7' 2' 5' 3' 1' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetActionButton,The following statement contains a magic number: var actionId = packet.StartBitStream(0' 4' 7' 2' 5' 3' 1' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetActionButton,The following statement contains a magic number: var actionId = packet.StartBitStream(0' 4' 7' 2' 5' 3' 1' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetActionButton,The following statement contains a magic number: var actionId = packet.StartBitStream(0' 4' 7' 2' 5' 3' 1' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetActionButton,The following statement contains a magic number: var actionId = packet.StartBitStream(0' 4' 7' 2' 5' 3' 1' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetActionButton,The following statement contains a magic number: var actionId = packet.StartBitStream(0' 4' 7' 2' 5' 3' 1' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetActionButton,The following statement contains a magic number: packet.ParseBitStream(actionId' 7' 3' 0' 2' 1' 4' 5' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetActionButton,The following statement contains a magic number: packet.ParseBitStream(actionId' 7' 3' 0' 2' 1' 4' 5' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetActionButton,The following statement contains a magic number: packet.ParseBitStream(actionId' 7' 3' 0' 2' 1' 4' 5' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetActionButton,The following statement contains a magic number: packet.ParseBitStream(actionId' 7' 3' 0' 2' 1' 4' 5' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetActionButton,The following statement contains a magic number: packet.ParseBitStream(actionId' 7' 3' 0' 2' 1' 4' 5' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetActionButton,The following statement contains a magic number: packet.ParseBitStream(actionId' 7' 3' 0' 2' 1' 4' 5' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(3' 5' 6' 4' 2' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(3' 5' 6' 4' 2' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(3' 5' 6' 4' 2' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(3' 5' 6' 4' 2' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(3' 5' 6' 4' 2' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(3' 5' 6' 4' 2' 7' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 4' 0' 3' 1' 2' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 4' 0' 3' 1' 2' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 4' 0' 3' 1' 2' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 4' 0' 3' 1' 2' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 4' 0' 3' 1' 2' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 4' 0' 3' 1' 2' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleServerRealmSplit,The following statement contains a magic number: var len = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleClientInspect,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleClientInspect,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleClientInspect,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleClientInspect,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleClientInspect,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleClientInspect,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleClientInspect,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleClientInspect,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleClientInspect,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleClientInspect,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleClientInspect,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleClientInspect,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleClientInspect,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleRequestHonorStats,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleRequestHonorStats,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 6' 0' 1' 5' 4' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleRequestHonorStats,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 6' 0' 1' 5' 4' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleRequestHonorStats,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 6' 0' 1' 5' 4' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleRequestHonorStats,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 6' 0' 1' 5' 4' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleRequestHonorStats,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 6' 0' 1' 5' 4' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleRequestHonorStats,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 6' 0' 1' 5' 4' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleRequestHonorStats,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 2' 6' 4' 7' 0' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleRequestHonorStats,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 2' 6' 4' 7' 0' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleRequestHonorStats,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 2' 6' 4' 7' 0' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleRequestHonorStats,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 2' 6' 4' 7' 0' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleRequestHonorStats,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 2' 6' 4' 7' 0' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleRequestHonorStats,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 2' 6' 4' 7' 0' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleHotfixInfo,The following statement contains a magic number: var count = packet.ReadBits("Count"' 20);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleSetTimeZoneInformation,The following statement contains a magic number: packet.ReadBits("Unk Bits"' 9);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MiscellaneousHandler.cs,HandleUnknow2979,The following statement contains a magic number: packet.ReadBits("String length"' 9);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: var transportGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: var counter2 = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: if (hasTransportData)              {                  packet.StartBitStream(transportGUID' 6' 3' 5);                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 4' 7' 0' 1);                  hasTransportTime3 = packet.ReadBit();                  transportGUID[2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: if (hasTransportData)              {                  packet.StartBitStream(transportGUID' 6' 3' 5);                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 4' 7' 0' 1);                  hasTransportTime3 = packet.ReadBit();                  transportGUID[2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: if (hasTransportData)              {                  packet.StartBitStream(transportGUID' 6' 3' 5);                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 4' 7' 0' 1);                  hasTransportTime3 = packet.ReadBit();                  transportGUID[2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: if (hasTransportData)              {                  packet.StartBitStream(transportGUID' 6' 3' 5);                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 4' 7' 0' 1);                  hasTransportTime3 = packet.ReadBit();                  transportGUID[2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: if (hasTransportData)              {                  packet.StartBitStream(transportGUID' 6' 3' 5);                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 4' 7' 0' 1);                  hasTransportTime3 = packet.ReadBit();                  transportGUID[2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: if (hasTransportData)              {                  packet.StartBitStream(transportGUID' 6' 3' 5);                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 4' 7' 0' 1);                  hasTransportTime3 = packet.ReadBit();                  transportGUID[2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: if (hasMovementFlags)                  packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: if (hasExtraMovementFlags)                  packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: packet.ReadXORBytes(guid' 4' 1' 5' 6' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: packet.ReadXORBytes(guid' 4' 1' 5' 6' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: packet.ReadXORBytes(guid' 4' 1' 5' 6' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: packet.ReadXORBytes(guid' 4' 1' 5' 6' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: packet.ReadXORBytes(guid' 4' 1' 5' 6' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: packet.ReadXORBytes(guid' 4' 1' 5' 6' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                  transPos.Y = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 1' 4' 7);                  packet.ReadByte("Seat");                  packet.ReadInt32("Transport Time");                  transPos.X = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 0' 6' 2);                  transPos.O = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 3);                  if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                    packet.ReadXORBytes(transportGUID' 5);                  if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                    transPos.Z = packet.ReadSingle();                  packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                  transPos.Y = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 1' 4' 7);                  packet.ReadByte("Seat");                  packet.ReadInt32("Transport Time");                  transPos.X = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 0' 6' 2);                  transPos.O = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 3);                  if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                    packet.ReadXORBytes(transportGUID' 5);                  if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                    transPos.Z = packet.ReadSingle();                  packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                  transPos.Y = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 1' 4' 7);                  packet.ReadByte("Seat");                  packet.ReadInt32("Transport Time");                  transPos.X = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 0' 6' 2);                  transPos.O = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 3);                  if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                    packet.ReadXORBytes(transportGUID' 5);                  if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                    transPos.Z = packet.ReadSingle();                  packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                  transPos.Y = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 1' 4' 7);                  packet.ReadByte("Seat");                  packet.ReadInt32("Transport Time");                  transPos.X = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 0' 6' 2);                  transPos.O = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 3);                  if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                    packet.ReadXORBytes(transportGUID' 5);                  if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                    transPos.Z = packet.ReadSingle();                  packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                  transPos.Y = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 1' 4' 7);                  packet.ReadByte("Seat");                  packet.ReadInt32("Transport Time");                  transPos.X = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 0' 6' 2);                  transPos.O = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 3);                  if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                    packet.ReadXORBytes(transportGUID' 5);                  if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                    transPos.Z = packet.ReadSingle();                  packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,ReadClientMovementBlock,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                  transPos.Y = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 1' 4' 7);                  packet.ReadByte("Seat");                  packet.ReadInt32("Transport Time");                  transPos.X = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 0' 6' 2);                  transPos.O = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 3);                  if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                    packet.ReadXORBytes(transportGUID' 5);                  if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                    transPos.Z = packet.ReadSingle();                  packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleSetActiveMover,The following statement contains a magic number: var guid = packet.StartBitStream(6' 2' 3' 0' 4' 1' 7' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleSetActiveMover,The following statement contains a magic number: var guid = packet.StartBitStream(6' 2' 3' 0' 4' 1' 7' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleSetActiveMover,The following statement contains a magic number: var guid = packet.StartBitStream(6' 2' 3' 0' 4' 1' 7' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleSetActiveMover,The following statement contains a magic number: var guid = packet.StartBitStream(6' 2' 3' 0' 4' 1' 7' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleSetActiveMover,The following statement contains a magic number: var guid = packet.StartBitStream(6' 2' 3' 0' 4' 1' 7' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleSetActiveMover,The following statement contains a magic number: var guid = packet.StartBitStream(6' 2' 3' 0' 4' 1' 7' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleSetActiveMover,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 0' 2' 6' 3' 7' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleSetActiveMover,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 0' 2' 6' 3' 7' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleSetActiveMover,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 0' 2' 6' 3' 7' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleSetActiveMover,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 0' 2' 6' 3' 7' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleSetActiveMover,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 0' 2' 6' 3' 7' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleSetActiveMover,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 0' 2' 6' 3' 7' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var ownerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var factingTargetGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: ownerGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: ownerGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 1' 3' 5' 2' 7' 4' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 1' 3' 5' 2' 7' 4' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 1' 3' 5' 2' 7' 4' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 1' 3' 5' 2' 7' 4' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 1' 3' 5' 2' 7' 4' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 1' 3' 5' 2' 7' 4' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: ownerGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var waypointCount = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(ownerGUID' 5' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: ownerGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (bit8C)              {                  bits90 = packet.ReadBits(22);                  packet.ReadBits("bitsA0"' 2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (bit8C)              {                  bits90 = packet.ReadBits(22);                  packet.ReadBits("bitsA0"' 2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var splineType = packet.ReadBits(3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var splineCount = packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 5' 3' 6' 2' 1' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 5' 3' 6' 2' 1' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 5' 3' 6' 2' 1' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 5' 3' 6' 2' 1' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 5' 3' 6' 2' 1' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 5' 3' 6' 2' 1' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 5' 3' 6' 2' 1' 4' 7' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: ownerGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORByte(ownerGUID' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 1' 0' 6' 5' 3' 4' 7' 2);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 1' 0' 6' 5' 3' 4' 7' 2);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 1' 0' 6' 5' 3' 4' 7' 2);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 1' 0' 6' 5' 3' 4' 7' 2);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 1' 0' 6' 5' 3' 4' 7' 2);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 1' 0' 6' 5' 3' 4' 7' 2);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 1' 0' 6' 5' 3' 4' 7' 2);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORBytes(ownerGUID' 7' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 2)                  packet.ReadVector3("Facing Spot");
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORBytes(guid2' 4' 1' 0' 7' 5' 6' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORBytes(guid2' 4' 1' 0' 7' 5' 6' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORBytes(guid2' 4' 1' 0' 7' 5' 6' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORBytes(guid2' 4' 1' 0' 7' 5' 6' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORBytes(guid2' 4' 1' 0' 7' 5' 6' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORBytes(guid2' 4' 1' 0' 7' 5' 6' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORBytes(ownerGUID' 6' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORBytes(ownerGUID' 6' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORBytes(ownerGUID' 6' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 4)                  packet.ReadSingle("Facing Angle");
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORByte(ownerGUID' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: var transportGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasExtraMovementFlags)                  packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: var counter2 = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  transportGUID[6] = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 0' 3);                  hasTransportTime3 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 7' 4' 1' 5' 2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  transportGUID[6] = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 0' 3);                  hasTransportTime3 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 7' 4' 1' 5' 2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  transportGUID[6] = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 0' 3);                  hasTransportTime3 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 7' 4' 1' 5' 2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  transportGUID[6] = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 0' 3);                  hasTransportTime3 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 7' 4' 1' 5' 2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  transportGUID[6] = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 0' 3);                  hasTransportTime3 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 7' 4' 1' 5' 2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  transportGUID[6] = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 0' 3);                  hasTransportTime3 = packet.ReadBit();                  packet.StartBitStream(transportGUID' 7' 4' 1' 5' 2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasMovementFlags)                  packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                    packet.ReadXORBytes(transportGUID' 4' 3' 1);                  if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                  transPos.X = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 0);                  transPos.Z = packet.ReadSingle();                  transPos.Y = packet.ReadSingle();                  transPos.O = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 2' 6);                  if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                  packet.ReadInt32("Transport Time");                  packet.ReadXORBytes(transportGUID' 7);                  packet.ReadByte("Seat");                  packet.ReadXORBytes(transportGUID' 5);                    packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                    packet.ReadXORBytes(transportGUID' 4' 3' 1);                  if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                  transPos.X = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 0);                  transPos.Z = packet.ReadSingle();                  transPos.Y = packet.ReadSingle();                  transPos.O = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 2' 6);                  if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                  packet.ReadInt32("Transport Time");                  packet.ReadXORBytes(transportGUID' 7);                  packet.ReadByte("Seat");                  packet.ReadXORBytes(transportGUID' 5);                    packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                    packet.ReadXORBytes(transportGUID' 4' 3' 1);                  if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                  transPos.X = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 0);                  transPos.Z = packet.ReadSingle();                  transPos.Y = packet.ReadSingle();                  transPos.O = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 2' 6);                  if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                  packet.ReadInt32("Transport Time");                  packet.ReadXORBytes(transportGUID' 7);                  packet.ReadByte("Seat");                  packet.ReadXORBytes(transportGUID' 5);                    packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                    packet.ReadXORBytes(transportGUID' 4' 3' 1);                  if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                  transPos.X = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 0);                  transPos.Z = packet.ReadSingle();                  transPos.Y = packet.ReadSingle();                  transPos.O = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 2' 6);                  if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                  packet.ReadInt32("Transport Time");                  packet.ReadXORBytes(transportGUID' 7);                  packet.ReadByte("Seat");                  packet.ReadXORBytes(transportGUID' 5);                    packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                    packet.ReadXORBytes(transportGUID' 4' 3' 1);                  if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                  transPos.X = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 0);                  transPos.Z = packet.ReadSingle();                  transPos.Y = packet.ReadSingle();                  transPos.O = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 2' 6);                  if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                  packet.ReadInt32("Transport Time");                  packet.ReadXORBytes(transportGUID' 7);                  packet.ReadByte("Seat");                  packet.ReadXORBytes(transportGUID' 5);                    packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                    packet.ReadXORBytes(transportGUID' 4' 3' 1);                  if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                  transPos.X = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 0);                  transPos.Z = packet.ReadSingle();                  transPos.Y = packet.ReadSingle();                  transPos.O = packet.ReadSingle();                  packet.ReadXORBytes(transportGUID' 2' 6);                  if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                  packet.ReadInt32("Transport Time");                  packet.ReadXORBytes(transportGUID' 7);                  packet.ReadByte("Seat");                  packet.ReadXORBytes(transportGUID' 5);                    packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: packet.ReadXORBytes(guid' 2' 7' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: packet.ReadXORBytes(guid' 2' 7' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: packet.ReadXORBytes(guid' 2' 7' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: packet.ReadXORBytes(guid' 0' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(2' 6' 3' 1' 5' 7' 0' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(2' 6' 3' 1' 5' 7' 0' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(2' 6' 3' 1' 5' 7' 0' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(2' 6' 3' 1' 5' 7' 0' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(2' 6' 3' 1' 5' 7' 0' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(2' 6' 3' 1' 5' 7' 0' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ReadXORBytes(guid' 5' 3' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ReadXORBytes(guid' 5' 3' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var count = packet.ReadUInt32() / 2;
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: count = packet.ReadUInt32() / 2;
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: count = packet.ReadUInt32() / 2;
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: count = packet.ReadUInt32() / 2;
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 2' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 2' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.StartBitStream(guid' 2' 0' 6' 4' 1' 5' 3' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.StartBitStream(guid' 2' 0' 6' 4' 1' 5' 3' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.StartBitStream(guid' 2' 0' 6' 4' 1' 5' 3' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.StartBitStream(guid' 2' 0' 6' 4' 1' 5' 3' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.StartBitStream(guid' 2' 0' 6' 4' 1' 5' 3' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.StartBitStream(guid' 2' 0' 6' 4' 1' 5' 3' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: var bits8 = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 5' 7' 4' 3' 2' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 5' 7' 4' 3' 2' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 5' 7' 4' 3' 2' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 5' 7' 4' 3' 2' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 5' 7' 4' 3' 2' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 5' 7' 4' 3' 2' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: var guidBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: uint questgossips = packet.ReadBits("Amount of Quest gossips"' 19);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: guidBytes[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: uint amountOfOptions = packet.ReadBits("Amount of Options"' 20);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: for (int i = 0; i < questgossips; ++i)              {                  packet.ReadBit("Change Icon"' i);                  titleLen[i] = packet.ReadBits(9);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: guidBytes[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: for (int i = 0; i < amountOfOptions; ++i)              {                  boxTextLen[i] = packet.ReadBits(12);                  optionTextLen[i] = packet.ReadBits(12);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: for (int i = 0; i < amountOfOptions; ++i)              {                  boxTextLen[i] = packet.ReadBits(12);                  optionTextLen[i] = packet.ReadBits(12);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.StartBitStream(guidBytes' 5' 4' 6' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.StartBitStream(guidBytes' 5' 4' 6' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.StartBitStream(guidBytes' 5' 4' 6' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.StartBitStream(guidBytes' 5' 4' 6' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORBytes(guidBytes' 4' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORBytes(guidBytes' 4' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORBytes(guidBytes' 7' 1' 5' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORBytes(guidBytes' 7' 1' 5' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORBytes(guidBytes' 7' 1' 5' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: var guidBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: uint count = packet.ReadBits("Spells"' 19);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.StartBitStream(guidBytes' 2' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.StartBitStream(guidBytes' 2' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: uint titleLen = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.StartBitStream(guidBytes' 3' 7' 1' 4' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.StartBitStream(guidBytes' 3' 7' 1' 4' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.StartBitStream(guidBytes' 3' 7' 1' 4' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.StartBitStream(guidBytes' 3' 7' 1' 4' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  TrainerSpell trainerSpell = new TrainerSpell                  {                      ReqSkillLine = packet.ReadUInt32("ReqSkillLine"' i)'                      ReqSkillRank = packet.ReadUInt32("ReqSkillRank"' i)'                      MoneyCost = packet.ReadUInt32("MoneyCost"' i)'                      ReqLevel = packet.ReadByte("ReqLevel"' i)'                      ReqAbility = new uint[3]                  };                  for (var j = 0; j < 3; ++j)                      trainerSpell.ReqAbility[j] = packet.ReadUInt32<SpellId>("ReqAbility"' i);                    trainerSpell.SpellId = packet.ReadUInt32<SpellId>("SpellID"' i);                  packet.ReadByteE<TrainerSpellState>("Usable"' i);                    tempList.Add(trainerSpell);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  TrainerSpell trainerSpell = new TrainerSpell                  {                      ReqSkillLine = packet.ReadUInt32("ReqSkillLine"' i)'                      ReqSkillRank = packet.ReadUInt32("ReqSkillRank"' i)'                      MoneyCost = packet.ReadUInt32("MoneyCost"' i)'                      ReqLevel = packet.ReadByte("ReqLevel"' i)'                      ReqAbility = new uint[3]                  };                  for (var j = 0; j < 3; ++j)                      trainerSpell.ReqAbility[j] = packet.ReadUInt32<SpellId>("ReqAbility"' i);                    trainerSpell.SpellId = packet.ReadUInt32<SpellId>("SpellID"' i);                  packet.ReadByteE<TrainerSpellState>("Usable"' i);                    tempList.Add(trainerSpell);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORBytes(guidBytes' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORBytes(guidBytes' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORBytes(guidBytes' 7' 6' 4' 1' 0' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORBytes(guidBytes' 7' 6' 4' 1' 0' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORBytes(guidBytes' 7' 6' 4' 1' 0' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORBytes(guidBytes' 7' 6' 4' 1' 0' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.StartBitStream(guid' 5' 4' 7' 1' 2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.StartBitStream(guid' 5' 4' 7' 1' 2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.StartBitStream(guid' 5' 4' 7' 1' 2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.StartBitStream(guid' 5' 4' 7' 1' 2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.StartBitStream(guid' 5' 4' 7' 1' 2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: uint itemCount = packet.ReadBits("Item Count"' 18);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.StartBitStream(guid' 6' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ReadXORBytes(guid' 3' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ReadXORBytes(guid' 3' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: for (int i = 0; i < itemCount; ++i)              {                  NpcVendor vendor = new NpcVendor                  {                      Item = packet.ReadInt32<ItemId>("Item ID"' i)'                      Slot = packet.ReadInt32("Item Position"' i)                  };                    packet.ReadInt32("Item Upgrade ID"' i);                  packet.ReadInt32("Display ID"' i);                  int maxCount = packet.ReadInt32("Max Count"' i);                  uint buyCount = packet.ReadUInt32("Buy Count"' i);                  packet.ReadInt32("Price"' i);                    if (hasCondition[i])                      packet.ReadInt32("Condition ID"' i);                    vendor.Type = packet.ReadUInt32("Type"' i); // 1 - item' 2 - currency                  packet.ReadInt32("Max Durability"' i);                  if (hasExtendedCost[i])                      vendor.ExtendedCost = packet.ReadUInt32("Extended Cost"' i);                    vendor.MaxCount = maxCount == -1 ? 0 : (uint)maxCount; // TDB                  if (vendor.Type == 2)                      vendor.MaxCount = buyCount;                    tempList.Add(vendor);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ReadXORBytes(guid' 1' 2' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ReadXORBytes(guid' 1' 2' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 0' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 0' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: var lenS3 = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: var stringLens = new int[4][];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (var i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][0] = (int)packet.ReadBits(11);                  stringLens[i][1] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (var i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][0] = (int)packet.ReadBits(11);                  stringLens[i][1] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (var i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][0] = (int)packet.ReadBits(11);                  stringLens[i][1] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (var i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][0] = (int)packet.ReadBits(11);                  stringLens[i][1] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: var lenS4 = packet.ReadBits(6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: var lenS5 = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: var qItemCount = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: var name = new string[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (var i = 0; i < 4; ++i)              {                  if (stringLens[i][0] > 1)                      packet.ReadCString("Female Name"' i);                  if (stringLens[i][1] > 1)                      name[i] = packet.ReadCString("Name"' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.KillCredits = new uint?[2];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (var i = 0; i < 2; ++i)                  creature.KillCredits[i] = packet.ReadUInt32("Kill Credit"' i);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.ModelIDs = new uint?[4];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.ModelIDs[3] = packet.ReadUInt32("CreatureDisplayID"' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.ModelIDs[3] = packet.ReadUInt32("CreatureDisplayID"' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.ModelIDs[2] = packet.ReadUInt32("CreatureDisplayID"' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.ModelIDs[2] = packet.ReadUInt32("CreatureDisplayID"' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: var guid = packet.StartBitStream(7' 1' 4' 3' 0' 2' 6' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: var guid = packet.StartBitStream(7' 1' 4' 3' 0' 2' 6' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: var guid = packet.StartBitStream(7' 1' 4' 3' 0' 2' 6' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: var guid = packet.StartBitStream(7' 1' 4' 3' 0' 2' 6' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: var guid = packet.StartBitStream(7' 1' 4' 3' 0' 2' 6' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: var guid = packet.StartBitStream(7' 1' 4' 3' 0' 2' 6' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 5' 6' 7' 1' 0' 2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 5' 6' 7' 1' 0' 2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 5' 6' 7' 1' 0' 2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 5' 6' 7' 1' 0' 2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 5' 6' 7' 1' 0' 2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 5' 6' 7' 1' 0' 2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 0' 2' 3' 4' 5' 7' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 0' 2' 3' 4' 5' 7' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 0' 2' 3' 4' 5' 7' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 0' 2' 3' 4' 5' 7' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 0' 2' 3' 4' 5' 7' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 0' 2' 3' 4' 5' 7' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleRealmQueryResponse,The following statement contains a magic number: var bits22 = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleRealmQueryResponse,The following statement contains a magic number: var bits278 = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.StartBitStream(guid' 1' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.StartBitStream(guid' 1' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (bit16)                  for (var i = 0; i < 5; ++i)                      packet.ReadBits("bits"' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (bit16)                  for (var i = 0; i < 5; ++i)                      packet.ReadBits("bits"' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: var bits32 = packet.ReadBits(6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORBytes(guid' 0' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (bit16)                  for (var i = 0; i < 5; ++i)                      packet.ReadCString("Declined Name");
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORBytes(guid' 4' 6' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORBytes(guid' 4' 6' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORBytes(guid' 4' 6' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORBytes(guid' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORBytes(guid' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandlePageTextResponse,The following statement contains a magic number: var textLen = (int)packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleQuestQueryResponse510,The following statement contains a magic number: var questTurnTextWindow = (int)packet.ReadBits(10);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleQuestQueryResponse510,The following statement contains a magic number: var details = (int)packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleQuestQueryResponse510,The following statement contains a magic number: var questGiverTextWindow = (int)packet.ReadBits(10);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleQuestQueryResponse510,The following statement contains a magic number: var len1658 = (int)packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleQuestQueryResponse510,The following statement contains a magic number: var completedText = (int)packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleQuestQueryResponse510,The following statement contains a magic number: var len158 = (int)packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleQuestQueryResponse510,The following statement contains a magic number: var questGiverTargetName = (int)packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleQuestQueryResponse510,The following statement contains a magic number: var title = (int)packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleQuestQueryResponse510,The following statement contains a magic number: var questTurnTargetName = (int)packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleQuestQueryResponse510,The following statement contains a magic number: var count = (int)packet.ReadBits("Requirement Count"' 19);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleQuestQueryResponse510,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  len294920[i] = (int)packet.ReadBits(8);                  counter[i] = (int)packet.ReadBits(22);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleQuestQueryResponse510,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  len294920[i] = (int)packet.ReadBits(8);                  counter[i] = (int)packet.ReadBits(22);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleQuestQueryResponse510,The following statement contains a magic number: for (var i = 0; i < 5; ++i)              {                  packet.ReadInt32("int2986+40");                  packet.ReadInt32("int2986+0");                  packet.ReadInt32("int2986+20");              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleQuestQueryResponse510,The following statement contains a magic number: for (var i = 0; i < 4; ++i)              {                  packet.ReadInt32("int3001+16");                  packet.ReadInt32("int3001+0");              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNpcTextUpdate,The following statement contains a magic number: npcText.Probabilities = new float[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNpcTextUpdate,The following statement contains a magic number: npcText.BroadcastTextId = new uint[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNpcTextUpdate,The following statement contains a magic number: for (var i = 0; i < 8; ++i)                  npcText.Probabilities[i] = pkt.ReadSingle("Probability"' i);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QueryHandler.cs,HandleNpcTextUpdate,The following statement contains a magic number: for (var i = 0; i < 8; ++i)                  npcText.BroadcastTextId[i] = pkt.ReadUInt32("Broadcast Text Id"' i);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestPoiQuery,The following statement contains a magic number: var count = packet.ReadBits("Count"' 22);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestPoiQueryResponse,The following statement contains a magic number: uint count = packet.ReadBits("Count"' 20);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestPoiQueryResponse,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  poiCounter[i] = packet.ReadBits("POI Counter"' 18' i);                  pointsSize[i] = new uint[poiCounter[i]];                  for (int j = 0; j < poiCounter[i]; ++j)                      pointsSize[i][j] = packet.ReadBits("Points Counter"' 21' i' j);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestPoiQueryResponse,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  poiCounter[i] = packet.ReadBits("POI Counter"' 18' i);                  pointsSize[i] = new uint[poiCounter[i]];                  for (int j = 0; j < poiCounter[i]; ++j)                      pointsSize[i][j] = packet.ReadBits("Points Counter"' 21' i' j);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: for (var i = 0; i < 5; i++)                  packet.ReadUInt32("Reputation Value Id"' i);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: for (var i = 0; i < 5; i++)                  packet.ReadUInt32("Reputation Faction"' i);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: for (var i = 0; i < 5; i++)                  packet.ReadInt32("Reputation Value"' i);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: for (var i = 0; i < 4; i++)                  packet.ReadUInt32("Currency Id"' i);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: for (var i = 0; i < 4; i++)                  packet.ReadUInt32("Currency Count"' i);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var questTurnTargetName = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var bits1602 = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.StartBitStream(guid2' 6' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.StartBitStream(guid1' 1' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var questTurnTextWindow = packet.ReadBits(10);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var questGiverTargetName = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var bits75 = packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var details = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var questGiverTextWindow = packet.ReadBits(10);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var bits4 = packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var title = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: var objectives = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORBytes(guid1' 5' 1' 4' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORBytes(guid1' 5' 1' 4' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORBytes(guid1' 5' 1' 4' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORBytes(guid2' 0' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORBytes(guid2' 1' 3' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORBytes(guid2' 1' 3' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestgiverDetails,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: var count = packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 5' 7' 6' 1' 4' 3' 2' 1);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 5' 7' 6' 1' 4' 3' 2' 1);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 5' 7' 6' 1' 4' 3' 2' 1);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 5' 7' 6' 1' 4' 3' 2' 1);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 5' 7' 6' 1' 4' 3' 2' 1);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 5' 7' 6' 1' 4' 3' 2' 1);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 5' 7' 6' 1' 4' 3' 2' 1);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 3' 7' 1' 6' 4' 0' 5);                  packet.ReadInt32("Unk int"' i);                  packet.ReadXORByte(guids[i]' 2);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 3' 7' 1' 6' 4' 0' 5);                  packet.ReadInt32("Unk int"' i);                  packet.ReadXORByte(guids[i]' 2);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 3' 7' 1' 6' 4' 0' 5);                  packet.ReadInt32("Unk int"' i);                  packet.ReadXORByte(guids[i]' 2);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 3' 7' 1' 6' 4' 0' 5);                  packet.ReadInt32("Unk int"' i);                  packet.ReadXORByte(guids[i]' 2);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 3' 7' 1' 6' 4' 0' 5);                  packet.ReadInt32("Unk int"' i);                  packet.ReadXORByte(guids[i]' 2);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 3' 7' 1' 6' 4' 0' 5);                  packet.ReadInt32("Unk int"' i);                  packet.ReadXORByte(guids[i]' 2);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: var countItems = packet.ReadBits("Number of Required Items"' 20);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: var countCurrencies = packet.ReadBits("Number of Required Currencies"' 21);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.StartBitStream(guid' 2' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.StartBitStream(guid' 2' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: var titleLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: var textLen = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.StartBitStream(guid' 4' 3' 1' 5' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.StartBitStream(guid' 4' 3' 1' 5' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.StartBitStream(guid' 4' 3' 1' 5' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.StartBitStream(guid' 4' 3' 1' 5' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ReputationHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ReputationHandler.cs,HandleInitializeFactions,The following statement contains a magic number: for (var i = 0; i < 256; i++)              {                  packet.ReadUInt32E<ReputationRank>("Faction Standing"' i);                  packet.ReadByteE<FactionFlag>("Faction Flags"' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,ReputationHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\ReputationHandler.cs,HandleInitializeFactions,The following statement contains a magic number: for (var i = 0; i < 256; i++)              {                  var bit1296 = packet.ReadBit("Count");              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: var sha = new byte[20];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[8] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[13] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[3] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[6] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[2] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[7] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[11] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[5] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[15] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[14] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[12] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[9] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[4] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[17] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[16] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[19] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[18] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[10] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: var size = (int)packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  packet.ReadBit("Unk 1");                  packet.ReadBit("Unk 2");                  count1 = packet.ReadBits("Race Activation Count"' 23);                  packet.ReadBit("Unk 3");                  packet.ReadBits("Unkbits"' 21);                  count = packet.ReadBits("Class Activation Count"' 23);                  packet.ReadBits("Unkbits"' 22);                  packet.ReadBit("Unk 4");                }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  packet.ReadBit("Unk 1");                  packet.ReadBit("Unk 2");                  count1 = packet.ReadBits("Race Activation Count"' 23);                  packet.ReadBit("Unk 3");                  packet.ReadBits("Unkbits"' 21);                  count = packet.ReadBits("Class Activation Count"' 23);                  packet.ReadBits("Unkbits"' 22);                  packet.ReadBit("Unk 4");                }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  packet.ReadBit("Unk 1");                  packet.ReadBit("Unk 2");                  count1 = packet.ReadBits("Race Activation Count"' 23);                  packet.ReadBit("Unk 3");                  packet.ReadBits("Unkbits"' 21);                  count = packet.ReadBits("Class Activation Count"' 23);                  packet.ReadBits("Unkbits"' 22);                  packet.ReadBit("Unk 4");                }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  packet.ReadBit("Unk 1");                  packet.ReadBit("Unk 2");                  count1 = packet.ReadBits("Race Activation Count"' 23);                  packet.ReadBit("Unk 3");                  packet.ReadBits("Unkbits"' 21);                  count = packet.ReadBits("Class Activation Count"' 23);                  packet.ReadBits("Unkbits"' 22);                  packet.ReadBit("Unk 4");                }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleMessageOfTheDay,The following statement contains a magic number: var lineCount = packet.ReadBits("Line Count"' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandleMessageOfTheDay,The following statement contains a magic number: for (var i = 0; i < lineCount; i++)                  lineLength[i] = (int)packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: var guid = packet.StartBitStream(3' 4' 0' 6' 7' 1' 2' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: var guid = packet.StartBitStream(3' 4' 0' 6' 7' 1' 2' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: var guid = packet.StartBitStream(3' 4' 0' 6' 7' 1' 2' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: var guid = packet.StartBitStream(3' 4' 0' 6' 7' 1' 2' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: var guid = packet.StartBitStream(3' 4' 0' 6' 7' 1' 2' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: var guid = packet.StartBitStream(3' 4' 0' 6' 7' 1' 2' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 3' 7' 6' 1' 2' 4' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 3' 7' 6' 1' 2' 4' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 3' 7' 6' 1' 2' 4' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 3' 7' 6' 1' 2' 4' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 3' 7' 6' 1' 2' 4' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 3' 7' 6' 1' 2' 4' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(guid2' 1' 5' 6);                  bits3C = packet.ReadBits(21);                  packet.StartBitStream(guid2' 2' 3' 7' 0' 4);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(guid2' 1' 5' 6);                  bits3C = packet.ReadBits(21);                  packet.StartBitStream(guid2' 2' 3' 7' 0' 4);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(guid2' 1' 5' 6);                  bits3C = packet.ReadBits(21);                  packet.StartBitStream(guid2' 2' 3' 7' 0' 4);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(guid2' 1' 5' 6);                  bits3C = packet.ReadBits(21);                  packet.StartBitStream(guid2' 2' 3' 7' 0' 4);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(guid2' 1' 5' 6);                  bits3C = packet.ReadBits(21);                  packet.StartBitStream(guid2' 2' 3' 7' 0' 4);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(guid2' 1' 5' 6);                  bits3C = packet.ReadBits(21);                  packet.StartBitStream(guid2' 2' 3' 7' 0' 4);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(guid2' 1' 5' 6);                  bits3C = packet.ReadBits(21);                  packet.StartBitStream(guid2' 2' 3' 7' 0' 4);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: var bits4 = packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  hasAura[i] = packet.ReadBit();                  if (hasAura[i])                  {                      hasMaxDuration[i] = packet.ReadBit();                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 5' 7' 4' 1' 6' 0' 3' 2);                      }                      hasDuration[i] = packet.ReadBit();                  }              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  hasAura[i] = packet.ReadBit();                  if (hasAura[i])                  {                      hasMaxDuration[i] = packet.ReadBit();                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 5' 7' 4' 1' 6' 0' 3' 2);                      }                      hasDuration[i] = packet.ReadBit();                  }              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  hasAura[i] = packet.ReadBit();                  if (hasAura[i])                  {                      hasMaxDuration[i] = packet.ReadBit();                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 5' 7' 4' 1' 6' 0' 3' 2);                      }                      hasDuration[i] = packet.ReadBit();                  }              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  hasAura[i] = packet.ReadBit();                  if (hasAura[i])                  {                      hasMaxDuration[i] = packet.ReadBit();                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 5' 7' 4' 1' 6' 0' 3' 2);                      }                      hasDuration[i] = packet.ReadBit();                  }              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  hasAura[i] = packet.ReadBit();                  if (hasAura[i])                  {                      hasMaxDuration[i] = packet.ReadBit();                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 5' 7' 4' 1' 6' 0' 3' 2);                      }                      hasDuration[i] = packet.ReadBit();                  }              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  hasAura[i] = packet.ReadBit();                  if (hasAura[i])                  {                      hasMaxDuration[i] = packet.ReadBit();                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 5' 7' 4' 1' 6' 0' 3' 2);                      }                      hasDuration[i] = packet.ReadBit();                  }              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  hasAura[i] = packet.ReadBit();                  if (hasAura[i])                  {                      hasMaxDuration[i] = packet.ReadBit();                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 5' 7' 4' 1' 6' 0' 3' 2);                      }                      hasDuration[i] = packet.ReadBit();                  }              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  hasAura[i] = packet.ReadBit();                  if (hasAura[i])                  {                      hasMaxDuration[i] = packet.ReadBit();                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 5' 7' 4' 1' 6' 0' 3' 2);                      }                      hasDuration[i] = packet.ReadBit();                  }              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 7' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 7' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 7' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 7' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                      if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 2' 7' 6' 1' 4' 0' 5' 3);                          packet.WriteGuid("Caster GUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                      else                          aura.CasterGuid = new WowGuid64();                        aura.Charges = packet.ReadByte("Charges"' i);                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        aura.SpellId = packet.ReadUInt32("Spell Id"' i);                      aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                      packet.ReadInt32("Effect Mask"' i);                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        aura.Level = packet.ReadUInt16("Caster Level"' i);                      auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                  packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                      if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 2' 7' 6' 1' 4' 0' 5' 3);                          packet.WriteGuid("Caster GUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                      else                          aura.CasterGuid = new WowGuid64();                        aura.Charges = packet.ReadByte("Charges"' i);                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        aura.SpellId = packet.ReadUInt32("Spell Id"' i);                      aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                      packet.ReadInt32("Effect Mask"' i);                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        aura.Level = packet.ReadUInt16("Caster Level"' i);                      auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                  packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                      if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 2' 7' 6' 1' 4' 0' 5' 3);                          packet.WriteGuid("Caster GUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                      else                          aura.CasterGuid = new WowGuid64();                        aura.Charges = packet.ReadByte("Charges"' i);                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        aura.SpellId = packet.ReadUInt32("Spell Id"' i);                      aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                      packet.ReadInt32("Effect Mask"' i);                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        aura.Level = packet.ReadUInt16("Caster Level"' i);                      auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                  packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                      if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 2' 7' 6' 1' 4' 0' 5' 3);                          packet.WriteGuid("Caster GUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                      else                          aura.CasterGuid = new WowGuid64();                        aura.Charges = packet.ReadByte("Charges"' i);                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        aura.SpellId = packet.ReadUInt32("Spell Id"' i);                      aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                      packet.ReadInt32("Effect Mask"' i);                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        aura.Level = packet.ReadUInt16("Caster Level"' i);                      auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                  packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                      if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 2' 7' 6' 1' 4' 0' 5' 3);                          packet.WriteGuid("Caster GUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                      else                          aura.CasterGuid = new WowGuid64();                        aura.Charges = packet.ReadByte("Charges"' i);                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        aura.SpellId = packet.ReadUInt32("Spell Id"' i);                      aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                      packet.ReadInt32("Effect Mask"' i);                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        aura.Level = packet.ReadUInt16("Caster Level"' i);                      auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                  packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits4; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                      if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 2' 7' 6' 1' 4' 0' 5' 3);                          packet.WriteGuid("Caster GUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                      else                          aura.CasterGuid = new WowGuid64();                        aura.Charges = packet.ReadByte("Charges"' i);                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        aura.SpellId = packet.ReadUInt32("Spell Id"' i);                      aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                      packet.ReadInt32("Effect Mask"' i);                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        aura.Level = packet.ReadUInt16("Caster Level"' i);                      auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                  packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORBytes(guid2' 7' 0);                  for (var i = 0; i < bits3C; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                  packet.ReadXORBytes(guid2' 2' 5);                  packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORBytes(guid2' 6' 4' 3' 1);                  packet.ReadInt32("Current Health");                  packet.WriteGuid("PowerUnitGUID"' guid2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORBytes(guid2' 7' 0);                  for (var i = 0; i < bits3C; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                  packet.ReadXORBytes(guid2' 2' 5);                  packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORBytes(guid2' 6' 4' 3' 1);                  packet.ReadInt32("Current Health");                  packet.WriteGuid("PowerUnitGUID"' guid2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORBytes(guid2' 7' 0);                  for (var i = 0; i < bits3C; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                  packet.ReadXORBytes(guid2' 2' 5);                  packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORBytes(guid2' 6' 4' 3' 1);                  packet.ReadInt32("Current Health");                  packet.WriteGuid("PowerUnitGUID"' guid2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORBytes(guid2' 7' 0);                  for (var i = 0; i < bits3C; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                  packet.ReadXORBytes(guid2' 2' 5);                  packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORBytes(guid2' 6' 4' 3' 1);                  packet.ReadInt32("Current Health");                  packet.WriteGuid("PowerUnitGUID"' guid2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORBytes(guid2' 7' 0);                  for (var i = 0; i < bits3C; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                  packet.ReadXORBytes(guid2' 2' 5);                  packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORBytes(guid2' 6' 4' 3' 1);                  packet.ReadInt32("Current Health");                  packet.WriteGuid("PowerUnitGUID"' guid2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORBytes(guid2' 7' 0);                  for (var i = 0; i < bits3C; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                  packet.ReadXORBytes(guid2' 2' 5);                  packet.ReadInt32("Attack power");                  packet.ReadInt32("Spell power");                  packet.ReadXORBytes(guid2' 6' 4' 3' 1);                  packet.ReadInt32("Current Health");                  packet.WriteGuid("PowerUnitGUID"' guid2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 7' 2' 1' 4' 3' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 7' 2' 1' 4' 3' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 7' 2' 1' 4' 3' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 7' 2' 1' 4' 3' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 7' 2' 1' 4' 3' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 7' 2' 1' 4' 3' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var counter = packet.ReadBits(2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: for (var i = 0; i < counter; ++i)                  packet.ReadBits("unk value0"' 2' i);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid3 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid0 = packet.StartBitStream(0' 5' 1' 7' 4' 3' 6' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid0 = packet.StartBitStream(0' 5' 1' 7' 4' 3' 6' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid0 = packet.StartBitStream(0' 5' 1' 7' 4' 3' 6' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid0 = packet.StartBitStream(0' 5' 1' 7' 4' 3' 6' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid0 = packet.StartBitStream(0' 5' 1' 7' 4' 3' 6' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid0 = packet.StartBitStream(0' 5' 1' 7' 4' 3' 6' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID3)                  guid3 = packet.StartBitStream(2' 5' 3' 7' 4' 1' 0' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID3)                  guid3 = packet.StartBitStream(2' 5' 3' 7' 4' 1' 0' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID3)                  guid3 = packet.StartBitStream(2' 5' 3' 7' 4' 1' 0' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID3)                  guid3 = packet.StartBitStream(2' 5' 3' 7' 4' 1' 0' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID3)                  guid3 = packet.StartBitStream(2' 5' 3' 7' 4' 1' 0' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID3)                  guid3 = packet.StartBitStream(2' 5' 3' 7' 4' 1' 0' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID2)                  guid2 = packet.StartBitStream(6' 2' 4' 7' 3' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID2)                  guid2 = packet.StartBitStream(6' 2' 4' 7' 3' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID2)                  guid2 = packet.StartBitStream(6' 2' 4' 7' 3' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID2)                  guid2 = packet.StartBitStream(6' 2' 4' 7' 3' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID2)                  guid2 = packet.StartBitStream(6' 2' 4' 7' 3' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID2)                  guid2 = packet.StartBitStream(6' 2' 4' 7' 3' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var targetGUID = packet.StartBitStream(3' 0' 2' 7' 6' 4' 1' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var targetGUID = packet.StartBitStream(3' 0' 2' 7' 6' 4' 1' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var targetGUID = packet.StartBitStream(3' 0' 2' 7' 6' 4' 1' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var targetGUID = packet.StartBitStream(3' 0' 2' 7' 6' 4' 1' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var targetGUID = packet.StartBitStream(3' 0' 2' 7' 6' 4' 1' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var targetGUID = packet.StartBitStream(3' 0' 2' 7' 6' 4' 1' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (unkBit)                  packet.ReadBitsE<CastFlag>("Cast Flags"' 20);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasbit1C)                  packet.ReadBits("hasbit1C"' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasbit78)                  len78 = packet.ReadBits("hasbit78"' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID3)              {                  var pos = new Vector3();                  packet.ReadXORBytes(guid3' 7' 5' 3);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(guid3' 0' 2' 1' 4' 6);                  pos.Z = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.WriteGuid("GUID3"' guid3);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID3)              {                  var pos = new Vector3();                  packet.ReadXORBytes(guid3' 7' 5' 3);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(guid3' 0' 2' 1' 4' 6);                  pos.Z = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.WriteGuid("GUID3"' guid3);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID3)              {                  var pos = new Vector3();                  packet.ReadXORBytes(guid3' 7' 5' 3);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(guid3' 0' 2' 1' 4' 6);                  pos.Z = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.WriteGuid("GUID3"' guid3);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID3)              {                  var pos = new Vector3();                  packet.ReadXORBytes(guid3' 7' 5' 3);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(guid3' 0' 2' 1' 4' 6);                  pos.Z = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.WriteGuid("GUID3"' guid3);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID3)              {                  var pos = new Vector3();                  packet.ReadXORBytes(guid3' 7' 5' 3);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(guid3' 0' 2' 1' 4' 6);                  pos.Z = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.WriteGuid("GUID3"' guid3);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID3)              {                  var pos = new Vector3();                  packet.ReadXORBytes(guid3' 7' 5' 3);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(guid3' 0' 2' 1' 4' 6);                  pos.Z = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.WriteGuid("GUID3"' guid3);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 2' 0' 5' 6' 7' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 2' 0' 5' 6' 7' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 2' 0' 5' 6' 7' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 2' 0' 5' 6' 7' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 2' 0' 5' 6' 7' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 2' 0' 5' 6' 7' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID2)              {                  var pos = new Vector3();                  packet.ReadXORBytes(guid2' 5' 7);                  pos.Y = packet.ReadSingle();                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(guid2' 3' 1);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(guid2' 2' 6' 4' 0);                  packet.WriteGuid("GUID2"' guid2);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID2)              {                  var pos = new Vector3();                  packet.ReadXORBytes(guid2' 5' 7);                  pos.Y = packet.ReadSingle();                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(guid2' 3' 1);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(guid2' 2' 6' 4' 0);                  packet.WriteGuid("GUID2"' guid2);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID2)              {                  var pos = new Vector3();                  packet.ReadXORBytes(guid2' 5' 7);                  pos.Y = packet.ReadSingle();                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(guid2' 3' 1);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(guid2' 2' 6' 4' 0);                  packet.WriteGuid("GUID2"' guid2);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID2)              {                  var pos = new Vector3();                  packet.ReadXORBytes(guid2' 5' 7);                  pos.Y = packet.ReadSingle();                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(guid2' 3' 1);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(guid2' 2' 6' 4' 0);                  packet.WriteGuid("GUID2"' guid2);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID2)              {                  var pos = new Vector3();                  packet.ReadXORBytes(guid2' 5' 7);                  pos.Y = packet.ReadSingle();                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(guid2' 3' 1);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(guid2' 2' 6' 4' 0);                  packet.WriteGuid("GUID2"' guid2);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasGUID2)              {                  var pos = new Vector3();                  packet.ReadXORBytes(guid2' 5' 7);                  pos.Y = packet.ReadSingle();                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(guid2' 3' 1);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(guid2' 2' 6' 4' 0);                  packet.WriteGuid("GUID2"' guid2);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid0' 7' 2' 6' 4' 1' 0' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid0' 7' 2' 6' 4' 1' 0' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid0' 7' 2' 6' 4' 1' 0' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid0' 7' 2' 6' 4' 1' 0' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid0' 7' 2' 6' 4' 1' 0' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid0' 7' 2' 6' 4' 1' 0' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var casterGUID2 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid3 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid4 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid6 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var destinationTransportGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var sourceTransportGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var targetGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var powerUnitGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var bits52 = packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits52; ++i)              {                  casterGUID1[i] = new byte[8];                  packet.StartBitStream(casterGUID1[i]' 2' 5' 4' 7' 6' 0' 3' 1);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits52; ++i)              {                  casterGUID1[i] = new byte[8];                  packet.StartBitStream(casterGUID1[i]' 2' 5' 4' 7' 6' 0' 3' 1);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits52; ++i)              {                  casterGUID1[i] = new byte[8];                  packet.StartBitStream(casterGUID1[i]' 2' 5' 4' 7' 6' 0' 3' 1);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits52; ++i)              {                  casterGUID1[i] = new byte[8];                  packet.StartBitStream(casterGUID1[i]' 2' 5' 4' 7' 6' 0' 3' 1);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits52; ++i)              {                  casterGUID1[i] = new byte[8];                  packet.StartBitStream(casterGUID1[i]' 2' 5' 4' 7' 6' 0' 3' 1);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits52; ++i)              {                  casterGUID1[i] = new byte[8];                  packet.StartBitStream(casterGUID1[i]' 2' 5' 4' 7' 6' 0' 3' 1);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits52; ++i)              {                  casterGUID1[i] = new byte[8];                  packet.StartBitStream(casterGUID1[i]' 2' 5' 4' 7' 6' 0' 3' 1);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(casterGUID2' 5' 4' 7' 1' 0' 6' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(casterGUID2' 5' 4' 7' 1' 0' 6' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(casterGUID2' 5' 4' 7' 1' 0' 6' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(casterGUID2' 5' 4' 7' 1' 0' 6' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(casterGUID2' 5' 4' 7' 1' 0' 6' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(casterGUID2' 5' 4' 7' 1' 0' 6' 3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid4' 5' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid4' 5' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid3[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(targetGUID' 0' 3' 1' 5' 6' 2' 7' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(targetGUID' 0' 3' 1' 5' 6' 2' 7' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(targetGUID' 0' 3' 1' 5' 6' 2' 7' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(targetGUID' 0' 3' 1' 5' 6' 2' 7' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(targetGUID' 0' 3' 1' 5' 6' 2' 7' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(targetGUID' 0' 3' 1' 5' 6' 2' 7' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerUnitGUID' 6' 7' 3' 5' 0' 4' 2' 1);                  powerTypeCount = packet.ReadBits("Power Type Count"' 21);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerUnitGUID' 6' 7' 3' 5' 0' 4' 2' 1);                  powerTypeCount = packet.ReadBits("Power Type Count"' 21);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerUnitGUID' 6' 7' 3' 5' 0' 4' 2' 1);                  powerTypeCount = packet.ReadBits("Power Type Count"' 21);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerUnitGUID' 6' 7' 3' 5' 0' 4' 2' 1);                  powerTypeCount = packet.ReadBits("Power Type Count"' 21);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerUnitGUID' 6' 7' 3' 5' 0' 4' 2' 1);                  powerTypeCount = packet.ReadBits("Power Type Count"' 21);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerUnitGUID' 6' 7' 3' 5' 0' 4' 2' 1);                  powerTypeCount = packet.ReadBits("Power Type Count"' 21);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(powerUnitGUID' 6' 7' 3' 5' 0' 4' 2' 1);                  powerTypeCount = packet.ReadBits("Power Type Count"' 21);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid3' 6' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var bits84 = packet.ReadBits(25);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid3[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid4[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid3[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var ExtraTargetsCount = packet.ReadBits("Extra Targets Count"' 20);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < ExtraTargetsCount; i++)              {                  ExtraTargetsGUID[i] = new byte[8];                  packet.StartBitStream(ExtraTargetsGUID[i]' 0' 5' 2' 7' 6' 4' 3' 1);                }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < ExtraTargetsCount; i++)              {                  ExtraTargetsGUID[i] = new byte[8];                  packet.StartBitStream(ExtraTargetsGUID[i]' 0' 5' 2' 7' 6' 4' 3' 1);                }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < ExtraTargetsCount; i++)              {                  ExtraTargetsGUID[i] = new byte[8];                  packet.StartBitStream(ExtraTargetsGUID[i]' 0' 5' 2' 7' 6' 4' 3' 1);                }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < ExtraTargetsCount; i++)              {                  ExtraTargetsGUID[i] = new byte[8];                  packet.StartBitStream(ExtraTargetsGUID[i]' 0' 5' 2' 7' 6' 4' 3' 1);                }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < ExtraTargetsCount; i++)              {                  ExtraTargetsGUID[i] = new byte[8];                  packet.StartBitStream(ExtraTargetsGUID[i]' 0' 5' 2' 7' 6' 4' 3' 1);                }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < ExtraTargetsCount; i++)              {                  ExtraTargetsGUID[i] = new byte[8];                  packet.StartBitStream(ExtraTargetsGUID[i]' 0' 5' 2' 7' 6' 4' 3' 1);                }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < ExtraTargetsCount; i++)              {                  ExtraTargetsGUID[i] = new byte[8];                  packet.StartBitStream(ExtraTargetsGUID[i]' 0' 5' 2' 7' 6' 4' 3' 1);                }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits84; ++i)              {                  if (packet.ReadBits("bits22[0]"' 4' i) == 11)                      packet.ReadBits("bits22[1]"' 4' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits84; ++i)              {                  if (packet.ReadBits("bits22[0]"' 4' i) == 11)                      packet.ReadBits("bits22[1]"' 4' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits84; ++i)              {                  if (packet.ReadBits("bits22[0]"' 4' i) == 11)                      packet.ReadBits("bits22[1]"' 4' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid6' 2' 1' 7' 0' 6' 3' 5' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid6' 2' 1' 7' 0' 6' 3' 5' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid6' 2' 1' 7' 0' 6' 3' 5' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid6' 2' 1' 7' 0' 6' 3' 5' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid6' 2' 1' 7' 0' 6' 3' 5' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(guid6' 2' 1' 7' 0' 6' 3' 5' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid4[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid4[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (HasDestinationData)                  packet.StartBitStream(destinationTransportGUID' 3' 7' 1' 0' 5' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (HasDestinationData)                  packet.StartBitStream(destinationTransportGUID' 3' 7' 1' 0' 5' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (HasDestinationData)                  packet.StartBitStream(destinationTransportGUID' 3' 7' 1' 0' 5' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (HasDestinationData)                  packet.StartBitStream(destinationTransportGUID' 3' 7' 1' 0' 5' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (HasDestinationData)                  packet.StartBitStream(destinationTransportGUID' 3' 7' 1' 0' 5' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (HasDestinationData)                  packet.StartBitStream(destinationTransportGUID' 3' 7' 1' 0' 5' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid4[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceData)                  packet.StartBitStream(sourceTransportGUID' 5' 4' 3' 2' 0' 6' 7' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceData)                  packet.StartBitStream(sourceTransportGUID' 5' 4' 3' 2' 0' 6' 7' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceData)                  packet.StartBitStream(sourceTransportGUID' 5' 4' 3' 2' 0' 6' 7' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceData)                  packet.StartBitStream(sourceTransportGUID' 5' 4' 3' 2' 0' 6' 7' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceData)                  packet.StartBitStream(sourceTransportGUID' 5' 4' 3' 2' 0' 6' 7' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceData)                  packet.StartBitStream(sourceTransportGUID' 5' 4' 3' 2' 0' 6' 7' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasTargetFlags)                  packet.ReadBitsE<TargetFlag>("Target Flags"' 20);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (!bit48)                  bits48 = (int)packet.ReadBits("bits48"' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid3[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var bits68 = packet.ReadBits("bits68"' 24);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits68; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 3' 1' 2' 7' 5' 6' 4' 0);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits68; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 3' 1' 2' 7' 5' 6' 4' 0);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits68; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 3' 1' 2' 7' 5' 6' 4' 0);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits68; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 3' 1' 2' 7' 5' 6' 4' 0);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits68; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 3' 1' 2' 7' 5' 6' 4' 0);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits68; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 3' 1' 2' 7' 5' 6' 4' 0);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits68; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 3' 1' 2' 7' 5' 6' 4' 0);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid3[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var bits320 = packet.ReadBits("bits320"' 21);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var RuneCooldownCount = packet.ReadBits("Rune Cooldown Count"' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadBits("bits11"' 12);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (HasDestinationData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(destinationTransportGUID' 0' 1);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(destinationTransportGUID' 5' 3);                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(destinationTransportGUID' 2);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(destinationTransportGUID' 6' 7' 4);                  packet.WriteGuid("Destination Transport GUID"' destinationTransportGUID);                  packet.AddValue("Destination Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (HasDestinationData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(destinationTransportGUID' 0' 1);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(destinationTransportGUID' 5' 3);                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(destinationTransportGUID' 2);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(destinationTransportGUID' 6' 7' 4);                  packet.WriteGuid("Destination Transport GUID"' destinationTransportGUID);                  packet.AddValue("Destination Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (HasDestinationData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(destinationTransportGUID' 0' 1);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(destinationTransportGUID' 5' 3);                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(destinationTransportGUID' 2);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(destinationTransportGUID' 6' 7' 4);                  packet.WriteGuid("Destination Transport GUID"' destinationTransportGUID);                  packet.AddValue("Destination Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (HasDestinationData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(destinationTransportGUID' 0' 1);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(destinationTransportGUID' 5' 3);                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(destinationTransportGUID' 2);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(destinationTransportGUID' 6' 7' 4);                  packet.WriteGuid("Destination Transport GUID"' destinationTransportGUID);                  packet.AddValue("Destination Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (HasDestinationData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(destinationTransportGUID' 0' 1);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(destinationTransportGUID' 5' 3);                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(destinationTransportGUID' 2);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(destinationTransportGUID' 6' 7' 4);                  packet.WriteGuid("Destination Transport GUID"' destinationTransportGUID);                  packet.AddValue("Destination Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (HasDestinationData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(destinationTransportGUID' 0' 1);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(destinationTransportGUID' 5' 3);                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(destinationTransportGUID' 2);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(destinationTransportGUID' 6' 7' 4);                  packet.WriteGuid("Destination Transport GUID"' destinationTransportGUID);                  packet.AddValue("Destination Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 1' 0' 5' 2' 3' 4' 7' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 1' 0' 5' 2' 3' 4' 7' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 1' 0' 5' 2' 3' 4' 7' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 1' 0' 5' 2' 3' 4' 7' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 1' 0' 5' 2' 3' 4' 7' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 1' 0' 5' 2' 3' 4' 7' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid4' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits68; ++i)              {                  packet.ParseBitStream(guid9[i]' 1' 4' 5' 6' 2' 7' 3' 0);                  packet.WriteGuid("GUID9"' guid9[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits68; ++i)              {                  packet.ParseBitStream(guid9[i]' 1' 4' 5' 6' 2' 7' 3' 0);                  packet.WriteGuid("GUID9"' guid9[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits68; ++i)              {                  packet.ParseBitStream(guid9[i]' 1' 4' 5' 6' 2' 7' 3' 0);                  packet.WriteGuid("GUID9"' guid9[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits68; ++i)              {                  packet.ParseBitStream(guid9[i]' 1' 4' 5' 6' 2' 7' 3' 0);                  packet.WriteGuid("GUID9"' guid9[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits68; ++i)              {                  packet.ParseBitStream(guid9[i]' 1' 4' 5' 6' 2' 7' 3' 0);                  packet.WriteGuid("GUID9"' guid9[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits68; ++i)              {                  packet.ParseBitStream(guid9[i]' 1' 4' 5' 6' 2' 7' 3' 0);                  packet.WriteGuid("GUID9"' guid9[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits52; ++i)              {                  packet.ParseBitStream(casterGUID1[i]' 0' 4' 3' 2' 7' 1' 5' 6);                  packet.WriteGuid("CasterGUID1"' casterGUID1[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits52; ++i)              {                  packet.ParseBitStream(casterGUID1[i]' 0' 4' 3' 2' 7' 1' 5' 6);                  packet.WriteGuid("CasterGUID1"' casterGUID1[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits52; ++i)              {                  packet.ParseBitStream(casterGUID1[i]' 0' 4' 3' 2' 7' 1' 5' 6);                  packet.WriteGuid("CasterGUID1"' casterGUID1[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits52; ++i)              {                  packet.ParseBitStream(casterGUID1[i]' 0' 4' 3' 2' 7' 1' 5' 6);                  packet.WriteGuid("CasterGUID1"' casterGUID1[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits52; ++i)              {                  packet.ParseBitStream(casterGUID1[i]' 0' 4' 3' 2' 7' 1' 5' 6);                  packet.WriteGuid("CasterGUID1"' casterGUID1[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits52; ++i)              {                  packet.ParseBitStream(casterGUID1[i]' 0' 4' 3' 2' 7' 1' 5' 6);                  packet.WriteGuid("CasterGUID1"' casterGUID1[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(casterGUID2' 4' 5' 7' 0' 1' 3' 2' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(casterGUID2' 4' 5' 7' 0' 1' 3' 2' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(casterGUID2' 4' 5' 7' 0' 1' 3' 2' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(casterGUID2' 4' 5' 7' 0' 1' 3' 2' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(casterGUID2' 4' 5' 7' 0' 1' 3' 2' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(casterGUID2' 4' 5' 7' 0' 1' 3' 2' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerUnitGUID' 0);                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerUnitGUID' 2);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerUnitGUID' 5);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerUnitGUID' 1);                    for (var i = 0; i < powerTypeCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                  packet.ReadXORBytes(powerUnitGUID' 6' 7' 4' 3);                  packet.WriteGuid("PowerUnitGUID"' powerUnitGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerUnitGUID' 0);                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerUnitGUID' 2);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerUnitGUID' 5);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerUnitGUID' 1);                    for (var i = 0; i < powerTypeCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                  packet.ReadXORBytes(powerUnitGUID' 6' 7' 4' 3);                  packet.WriteGuid("PowerUnitGUID"' powerUnitGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerUnitGUID' 0);                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerUnitGUID' 2);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerUnitGUID' 5);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerUnitGUID' 1);                    for (var i = 0; i < powerTypeCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                  packet.ReadXORBytes(powerUnitGUID' 6' 7' 4' 3);                  packet.WriteGuid("PowerUnitGUID"' powerUnitGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerUnitGUID' 0);                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerUnitGUID' 2);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerUnitGUID' 5);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerUnitGUID' 1);                    for (var i = 0; i < powerTypeCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                  packet.ReadXORBytes(powerUnitGUID' 6' 7' 4' 3);                  packet.WriteGuid("PowerUnitGUID"' powerUnitGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerUnitGUID' 0);                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerUnitGUID' 2);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerUnitGUID' 5);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerUnitGUID' 1);                    for (var i = 0; i < powerTypeCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                  packet.ReadXORBytes(powerUnitGUID' 6' 7' 4' 3);                  packet.WriteGuid("PowerUnitGUID"' powerUnitGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(powerUnitGUID' 0);                  packet.ReadInt32("Current Health");                  packet.ReadXORByte(powerUnitGUID' 2);                  packet.ReadInt32("Spell power");                  packet.ReadXORByte(powerUnitGUID' 5);                  packet.ReadInt32("Attack power");                  packet.ReadXORByte(powerUnitGUID' 1);                    for (var i = 0; i < powerTypeCount; ++i)                  {                      packet.ReadUInt32E<PowerType>("Power Type"' i);                      packet.ReadInt32("Power Value"' i);                  }                  packet.ReadXORBytes(powerUnitGUID' 6' 7' 4' 3);                  packet.WriteGuid("PowerUnitGUID"' powerUnitGUID);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid6' 1' 7' 4' 3' 5' 2' 0' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid6' 1' 7' 4' 3' 5' 2' 0' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid6' 1' 7' 4' 3' 5' 2' 0' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid6' 1' 7' 4' 3' 5' 2' 0' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid6' 1' 7' 4' 3' 5' 2' 0' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(guid6' 1' 7' 4' 3' 5' 2' 0' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORBytes(guid3' 3' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORBytes(guid3' 3' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(sourceTransportGUID' 2' 4' 1);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(sourceTransportGUID' 0' 5' 3);                  pos.X = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORBytes(sourceTransportGUID' 7' 6);                  packet.WriteGuid("Source Transport GUID"' sourceTransportGUID);                  packet.AddValue("Source Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(sourceTransportGUID' 2' 4' 1);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(sourceTransportGUID' 0' 5' 3);                  pos.X = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORBytes(sourceTransportGUID' 7' 6);                  packet.WriteGuid("Source Transport GUID"' sourceTransportGUID);                  packet.AddValue("Source Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(sourceTransportGUID' 2' 4' 1);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(sourceTransportGUID' 0' 5' 3);                  pos.X = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORBytes(sourceTransportGUID' 7' 6);                  packet.WriteGuid("Source Transport GUID"' sourceTransportGUID);                  packet.AddValue("Source Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(sourceTransportGUID' 2' 4' 1);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(sourceTransportGUID' 0' 5' 3);                  pos.X = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORBytes(sourceTransportGUID' 7' 6);                  packet.WriteGuid("Source Transport GUID"' sourceTransportGUID);                  packet.AddValue("Source Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(sourceTransportGUID' 2' 4' 1);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(sourceTransportGUID' 0' 5' 3);                  pos.X = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORBytes(sourceTransportGUID' 7' 6);                  packet.WriteGuid("Source Transport GUID"' sourceTransportGUID);                  packet.AddValue("Source Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(sourceTransportGUID' 2' 4' 1);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(sourceTransportGUID' 0' 5' 3);                  pos.X = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORBytes(sourceTransportGUID' 7' 6);                  packet.WriteGuid("Source Transport GUID"' sourceTransportGUID);                  packet.AddValue("Source Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < ExtraTargetsCount; ++i)              {                  var pos = new Vector3();                  packet.ReadXORBytes(ExtraTargetsGUID[i]' 4' 2);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(ExtraTargetsGUID[i]' 5' 7' 0);                  pos.Y = packet.ReadSingle();                  packet.ReadXORBytes(ExtraTargetsGUID[i]' 1' 3' 6);                  pos.Z = packet.ReadSingle();                  packet.WriteGuid("Extra Target GUID"' ExtraTargetsGUID[i]' i);                  packet.AddValue("Position"' pos' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < ExtraTargetsCount; ++i)              {                  var pos = new Vector3();                  packet.ReadXORBytes(ExtraTargetsGUID[i]' 4' 2);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(ExtraTargetsGUID[i]' 5' 7' 0);                  pos.Y = packet.ReadSingle();                  packet.ReadXORBytes(ExtraTargetsGUID[i]' 1' 3' 6);                  pos.Z = packet.ReadSingle();                  packet.WriteGuid("Extra Target GUID"' ExtraTargetsGUID[i]' i);                  packet.AddValue("Position"' pos' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < ExtraTargetsCount; ++i)              {                  var pos = new Vector3();                  packet.ReadXORBytes(ExtraTargetsGUID[i]' 4' 2);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(ExtraTargetsGUID[i]' 5' 7' 0);                  pos.Y = packet.ReadSingle();                  packet.ReadXORBytes(ExtraTargetsGUID[i]' 1' 3' 6);                  pos.Z = packet.ReadSingle();                  packet.WriteGuid("Extra Target GUID"' ExtraTargetsGUID[i]' i);                  packet.AddValue("Position"' pos' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < ExtraTargetsCount; ++i)              {                  var pos = new Vector3();                  packet.ReadXORBytes(ExtraTargetsGUID[i]' 4' 2);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(ExtraTargetsGUID[i]' 5' 7' 0);                  pos.Y = packet.ReadSingle();                  packet.ReadXORBytes(ExtraTargetsGUID[i]' 1' 3' 6);                  pos.Z = packet.ReadSingle();                  packet.WriteGuid("Extra Target GUID"' ExtraTargetsGUID[i]' i);                  packet.AddValue("Position"' pos' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < ExtraTargetsCount; ++i)              {                  var pos = new Vector3();                  packet.ReadXORBytes(ExtraTargetsGUID[i]' 4' 2);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(ExtraTargetsGUID[i]' 5' 7' 0);                  pos.Y = packet.ReadSingle();                  packet.ReadXORBytes(ExtraTargetsGUID[i]' 1' 3' 6);                  pos.Z = packet.ReadSingle();                  packet.WriteGuid("Extra Target GUID"' ExtraTargetsGUID[i]' i);                  packet.AddValue("Position"' pos' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < ExtraTargetsCount; ++i)              {                  var pos = new Vector3();                  packet.ReadXORBytes(ExtraTargetsGUID[i]' 4' 2);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(ExtraTargetsGUID[i]' 5' 7' 0);                  pos.Y = packet.ReadSingle();                  packet.ReadXORBytes(ExtraTargetsGUID[i]' 1' 3' 6);                  pos.Z = packet.ReadSingle();                  packet.WriteGuid("Extra Target GUID"' ExtraTargetsGUID[i]' i);                  packet.AddValue("Position"' pos' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid4' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid3' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORBytes(guid3' 0' 6' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid4' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid4' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid4' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid4' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid3' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleInitialSpells,The following statement contains a magic number: var count = packet.ReadBits("Spell Count"' 22);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var SourceTransportGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var DestinationTransportGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var guid8 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var guid9 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var guid10 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var guid11 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid10[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var counter = packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid11[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var counter3 = packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 0' 4' 5' 6' 3' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 0' 4' 5' 6' 3' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 0' 4' 5' 6' 3' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 0' 4' 5' 6' 3' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 0' 4' 5' 6' 3' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 0' 4' 5' 6' 3' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid10' 0' 1' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 5' 6' 4' 7' 1' 2' 3' 0);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 5' 6' 4' 7' 1' 2' 3' 0);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 5' 6' 4' 7' 1' 2' 3' 0);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 5' 6' 4' 7' 1' 2' 3' 0);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 5' 6' 4' 7' 1' 2' 3' 0);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 5' 6' 4' 7' 1' 2' 3' 0);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 5' 6' 4' 7' 1' 2' 3' 0);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid11[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var powerLeftSelf = packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var counter2 = packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid10' 6' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid10' 6' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid11[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var RuneCooldownCount = packet.ReadBits(3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(guid2' 7' 4' 5' 0' 2' 6' 3' 1);                  powerCount = packet.ReadBits(21);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(guid2' 7' 4' 5' 0' 2' 6' 3' 1);                  powerCount = packet.ReadBits(21);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(guid2' 7' 4' 5' 0' 2' 6' 3' 1);                  powerCount = packet.ReadBits(21);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(guid2' 7' 4' 5' 0' 2' 6' 3' 1);                  powerCount = packet.ReadBits(21);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(guid2' 7' 4' 5' 0' 2' 6' 3' 1);                  powerCount = packet.ReadBits(21);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(guid2' 7' 4' 5' 0' 2' 6' 3' 1);                  powerCount = packet.ReadBits(21);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  packet.StartBitStream(guid2' 7' 4' 5' 0' 2' 6' 3' 1);                  powerCount = packet.ReadBits(21);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceData)                  packet.StartBitStream(SourceTransportGUID' 6' 3' 0' 1' 4' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceData)                  packet.StartBitStream(SourceTransportGUID' 6' 3' 0' 1' 4' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceData)                  packet.StartBitStream(SourceTransportGUID' 6' 3' 0' 1' 4' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceData)                  packet.StartBitStream(SourceTransportGUID' 6' 3' 0' 1' 4' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceData)                  packet.StartBitStream(SourceTransportGUID' 6' 3' 0' 1' 4' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceData)                  packet.StartBitStream(SourceTransportGUID' 6' 3' 0' 1' 4' 5' 2' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  guid4[i] = new byte[8];                  packet.StartBitStream(guid4[i]' 6' 4' 1' 7' 5' 2' 3' 0);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  guid4[i] = new byte[8];                  packet.StartBitStream(guid4[i]' 6' 4' 1' 7' 5' 2' 3' 0);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  guid4[i] = new byte[8];                  packet.StartBitStream(guid4[i]' 6' 4' 1' 7' 5' 2' 3' 0);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  guid4[i] = new byte[8];                  packet.StartBitStream(guid4[i]' 6' 4' 1' 7' 5' 2' 3' 0);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  guid4[i] = new byte[8];                  packet.StartBitStream(guid4[i]' 6' 4' 1' 7' 5' 2' 3' 0);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  guid4[i] = new byte[8];                  packet.StartBitStream(guid4[i]' 6' 4' 1' 7' 5' 2' 3' 0);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  guid4[i] = new byte[8];                  packet.StartBitStream(guid4[i]' 6' 4' 1' 7' 5' 2' 3' 0);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  guid5[i] = new byte[8];                  packet.StartBitStream(guid5[i]' 7' 6' 5' 0' 4' 3' 1' 2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  guid5[i] = new byte[8];                  packet.StartBitStream(guid5[i]' 7' 6' 5' 0' 4' 3' 1' 2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  guid5[i] = new byte[8];                  packet.StartBitStream(guid5[i]' 7' 6' 5' 0' 4' 3' 1' 2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  guid5[i] = new byte[8];                  packet.StartBitStream(guid5[i]' 7' 6' 5' 0' 4' 3' 1' 2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  guid5[i] = new byte[8];                  packet.StartBitStream(guid5[i]' 7' 6' 5' 0' 4' 3' 1' 2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  guid5[i] = new byte[8];                  packet.StartBitStream(guid5[i]' 7' 6' 5' 0' 4' 3' 1' 2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  guid5[i] = new byte[8];                  packet.StartBitStream(guid5[i]' 7' 6' 5' 0' 4' 3' 1' 2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadBits("int5C"' 12);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid10' 7' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid10' 7' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestinationData)                  packet.StartBitStream(DestinationTransportGUID' 0' 2' 7' 6' 1' 4' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestinationData)                  packet.StartBitStream(DestinationTransportGUID' 0' 2' 7' 6' 1' 4' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestinationData)                  packet.StartBitStream(DestinationTransportGUID' 0' 2' 7' 6' 1' 4' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestinationData)                  packet.StartBitStream(DestinationTransportGUID' 0' 2' 7' 6' 1' 4' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestinationData)                  packet.StartBitStream(DestinationTransportGUID' 0' 2' 7' 6' 1' 4' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestinationData)                  packet.StartBitStream(DestinationTransportGUID' 0' 2' 7' 6' 1' 4' 3' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid11[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid11[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (!unkflag27)                  bits7 = (int)packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var counter4 = packet.ReadBits(25);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid11[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter4; ++i)              {                  var bits136 = packet.ReadBits("bits136"' 4);                    if (bits136 == 11)                      packet.ReadBits("bits140"' 4);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter4; ++i)              {                  var bits136 = packet.ReadBits("bits136"' 4);                    if (bits136 == 11)                      packet.ReadBits("bits140"' 4);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter4; ++i)              {                  var bits136 = packet.ReadBits("bits136"' 4);                    if (bits136 == 11)                      packet.ReadBits("bits140"' 4);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid8' 7' 3' 6' 4' 2' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid8' 7' 3' 6' 4' 2' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid8' 7' 3' 6' 4' 2' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid8' 7' 3' 6' 4' 2' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid8' 7' 3' 6' 4' 2' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid8' 7' 3' 6' 4' 2' 5' 0' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid9' 3' 5' 2' 1' 4' 0' 6' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid9' 3' 5' 2' 1' 4' 0' 6' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid9' 3' 5' 2' 1' 4' 0' 6' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid9' 3' 5' 2' 1' 4' 0' 6' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid9' 3' 5' 2' 1' 4' 0' 6' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(guid9' 3' 5' 2' 1' 4' 0' 6' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasTargetFlags)                  packet.ReadBitsE<TargetFlag>("Target Flags"' 20);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(SourceTransportGUID' 3' 7' 4);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(SourceTransportGUID' 6' 5' 2);                  pos.Z = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORBytes(SourceTransportGUID' 0' 1);                  packet.WriteGuid("Source Transport GUID"' SourceTransportGUID);                  packet.AddValue("Source Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(SourceTransportGUID' 3' 7' 4);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(SourceTransportGUID' 6' 5' 2);                  pos.Z = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORBytes(SourceTransportGUID' 0' 1);                  packet.WriteGuid("Source Transport GUID"' SourceTransportGUID);                  packet.AddValue("Source Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(SourceTransportGUID' 3' 7' 4);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(SourceTransportGUID' 6' 5' 2);                  pos.Z = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORBytes(SourceTransportGUID' 0' 1);                  packet.WriteGuid("Source Transport GUID"' SourceTransportGUID);                  packet.AddValue("Source Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(SourceTransportGUID' 3' 7' 4);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(SourceTransportGUID' 6' 5' 2);                  pos.Z = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORBytes(SourceTransportGUID' 0' 1);                  packet.WriteGuid("Source Transport GUID"' SourceTransportGUID);                  packet.AddValue("Source Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(SourceTransportGUID' 3' 7' 4);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(SourceTransportGUID' 6' 5' 2);                  pos.Z = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORBytes(SourceTransportGUID' 0' 1);                  packet.WriteGuid("Source Transport GUID"' SourceTransportGUID);                  packet.AddValue("Source Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(SourceTransportGUID' 3' 7' 4);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(SourceTransportGUID' 6' 5' 2);                  pos.Z = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORBytes(SourceTransportGUID' 0' 1);                  packet.WriteGuid("Source Transport GUID"' SourceTransportGUID);                  packet.AddValue("Source Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  var pos = new Vector3();                  packet.ReadXORBytes(guid5[i]' 4' 0' 7' 6' 2' 1);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(guid5[i]' 5' 3);                  pos.Y = packet.ReadSingle();                  pos.Z = packet.ReadSingle();                  packet.WriteGuid("GUID5"' guid5[i]' i);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  var pos = new Vector3();                  packet.ReadXORBytes(guid5[i]' 4' 0' 7' 6' 2' 1);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(guid5[i]' 5' 3);                  pos.Y = packet.ReadSingle();                  pos.Z = packet.ReadSingle();                  packet.WriteGuid("GUID5"' guid5[i]' i);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  var pos = new Vector3();                  packet.ReadXORBytes(guid5[i]' 4' 0' 7' 6' 2' 1);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(guid5[i]' 5' 3);                  pos.Y = packet.ReadSingle();                  pos.Z = packet.ReadSingle();                  packet.WriteGuid("GUID5"' guid5[i]' i);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  var pos = new Vector3();                  packet.ReadXORBytes(guid5[i]' 4' 0' 7' 6' 2' 1);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(guid5[i]' 5' 3);                  pos.Y = packet.ReadSingle();                  pos.Z = packet.ReadSingle();                  packet.WriteGuid("GUID5"' guid5[i]' i);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  var pos = new Vector3();                  packet.ReadXORBytes(guid5[i]' 4' 0' 7' 6' 2' 1);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(guid5[i]' 5' 3);                  pos.Y = packet.ReadSingle();                  pos.Z = packet.ReadSingle();                  packet.WriteGuid("GUID5"' guid5[i]' i);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter3; ++i)              {                  var pos = new Vector3();                  packet.ReadXORBytes(guid5[i]' 4' 0' 7' 6' 2' 1);                  pos.X = packet.ReadSingle();                  packet.ReadXORBytes(guid5[i]' 5' 3);                  pos.Y = packet.ReadSingle();                  pos.Z = packet.ReadSingle();                  packet.WriteGuid("GUID5"' guid5[i]' i);                  packet.AddValue("Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ParseBitStream(guid7[i]' 2' 1' 5' 3' 7' 0' 4' 6);                  packet.WriteGuid("GUID7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ParseBitStream(guid7[i]' 2' 1' 5' 3' 7' 0' 4' 6);                  packet.WriteGuid("GUID7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ParseBitStream(guid7[i]' 2' 1' 5' 3' 7' 0' 4' 6);                  packet.WriteGuid("GUID7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ParseBitStream(guid7[i]' 2' 1' 5' 3' 7' 0' 4' 6);                  packet.WriteGuid("GUID7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ParseBitStream(guid7[i]' 2' 1' 5' 3' 7' 0' 4' 6);                  packet.WriteGuid("GUID7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ParseBitStream(guid7[i]' 2' 1' 5' 3' 7' 0' 4' 6);                  packet.WriteGuid("GUID7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestinationData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(DestinationTransportGUID' 1' 4);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(DestinationTransportGUID' 0' 7' 3' 5);                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(DestinationTransportGUID' 6);                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(DestinationTransportGUID' 2);                  packet.WriteGuid("Destination Transport GUID"' DestinationTransportGUID);                  packet.AddValue("Destination Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestinationData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(DestinationTransportGUID' 1' 4);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(DestinationTransportGUID' 0' 7' 3' 5);                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(DestinationTransportGUID' 6);                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(DestinationTransportGUID' 2);                  packet.WriteGuid("Destination Transport GUID"' DestinationTransportGUID);                  packet.AddValue("Destination Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestinationData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(DestinationTransportGUID' 1' 4);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(DestinationTransportGUID' 0' 7' 3' 5);                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(DestinationTransportGUID' 6);                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(DestinationTransportGUID' 2);                  packet.WriteGuid("Destination Transport GUID"' DestinationTransportGUID);                  packet.AddValue("Destination Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestinationData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(DestinationTransportGUID' 1' 4);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(DestinationTransportGUID' 0' 7' 3' 5);                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(DestinationTransportGUID' 6);                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(DestinationTransportGUID' 2);                  packet.WriteGuid("Destination Transport GUID"' DestinationTransportGUID);                  packet.AddValue("Destination Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestinationData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(DestinationTransportGUID' 1' 4);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(DestinationTransportGUID' 0' 7' 3' 5);                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(DestinationTransportGUID' 6);                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(DestinationTransportGUID' 2);                  packet.WriteGuid("Destination Transport GUID"' DestinationTransportGUID);                  packet.AddValue("Destination Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestinationData)              {                  var pos = new Vector3();                  packet.ReadXORBytes(DestinationTransportGUID' 1' 4);                  pos.Z = packet.ReadSingle();                  packet.ReadXORBytes(DestinationTransportGUID' 0' 7' 3' 5);                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(DestinationTransportGUID' 6);                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(DestinationTransportGUID' 2);                  packet.WriteGuid("Destination Transport GUID"' DestinationTransportGUID);                  packet.AddValue("Destination Position"' pos);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid8' 5' 0' 2' 7' 6' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid8' 5' 0' 2' 7' 6' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid8' 5' 0' 2' 7' 6' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid8' 5' 0' 2' 7' 6' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid8' 5' 0' 2' 7' 6' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid8' 5' 0' 2' 7' 6' 3' 4' 1);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  packet.ParseBitStream(guid4[i]' 6' 3' 1' 0' 2' 4' 7' 5);                  packet.WriteGuid("GUID4"' guid4[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  packet.ParseBitStream(guid4[i]' 6' 3' 1' 0' 2' 4' 7' 5);                  packet.WriteGuid("GUID4"' guid4[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  packet.ParseBitStream(guid4[i]' 6' 3' 1' 0' 2' 4' 7' 5);                  packet.WriteGuid("GUID4"' guid4[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  packet.ParseBitStream(guid4[i]' 6' 3' 1' 0' 2' 4' 7' 5);                  packet.WriteGuid("GUID4"' guid4[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  packet.ParseBitStream(guid4[i]' 6' 3' 1' 0' 2' 4' 7' 5);                  packet.WriteGuid("GUID4"' guid4[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < counter2; ++i)              {                  packet.ParseBitStream(guid4[i]' 6' 3' 1' 0' 2' 4' 7' 5);                  packet.WriteGuid("GUID4"' guid4[i]' i);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(guid2' 3);                  packet.ReadUInt32("Spell Power");                  packet.ReadXORBytes(guid2' 6' 4' 7' 0);                  packet.ReadUInt32("Attack Power");                  packet.ReadXORByte(guid2' 2);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadUInt32("uint32 60");                      packet.ReadUInt32("uint32 48");                  }                    packet.ReadUInt32("Current Health");                  packet.ReadXORBytes(guid2' 1' 5);                  packet.WriteGuid("GUID2"' guid2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(guid2' 3);                  packet.ReadUInt32("Spell Power");                  packet.ReadXORBytes(guid2' 6' 4' 7' 0);                  packet.ReadUInt32("Attack Power");                  packet.ReadXORByte(guid2' 2);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadUInt32("uint32 60");                      packet.ReadUInt32("uint32 48");                  }                    packet.ReadUInt32("Current Health");                  packet.ReadXORBytes(guid2' 1' 5);                  packet.WriteGuid("GUID2"' guid2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(guid2' 3);                  packet.ReadUInt32("Spell Power");                  packet.ReadXORBytes(guid2' 6' 4' 7' 0);                  packet.ReadUInt32("Attack Power");                  packet.ReadXORByte(guid2' 2);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadUInt32("uint32 60");                      packet.ReadUInt32("uint32 48");                  }                    packet.ReadUInt32("Current Health");                  packet.ReadXORBytes(guid2' 1' 5);                  packet.WriteGuid("GUID2"' guid2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(guid2' 3);                  packet.ReadUInt32("Spell Power");                  packet.ReadXORBytes(guid2' 6' 4' 7' 0);                  packet.ReadUInt32("Attack Power");                  packet.ReadXORByte(guid2' 2);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadUInt32("uint32 60");                      packet.ReadUInt32("uint32 48");                  }                    packet.ReadUInt32("Current Health");                  packet.ReadXORBytes(guid2' 1' 5);                  packet.WriteGuid("GUID2"' guid2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(guid2' 3);                  packet.ReadUInt32("Spell Power");                  packet.ReadXORBytes(guid2' 6' 4' 7' 0);                  packet.ReadUInt32("Attack Power");                  packet.ReadXORByte(guid2' 2);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadUInt32("uint32 60");                      packet.ReadUInt32("uint32 48");                  }                    packet.ReadUInt32("Current Health");                  packet.ReadXORBytes(guid2' 1' 5);                  packet.WriteGuid("GUID2"' guid2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadXORByte(guid2' 3);                  packet.ReadUInt32("Spell Power");                  packet.ReadXORBytes(guid2' 6' 4' 7' 0);                  packet.ReadUInt32("Attack Power");                  packet.ReadXORByte(guid2' 2);                    for (var i = 0; i < powerCount; ++i)                  {                      packet.ReadUInt32("uint32 60");                      packet.ReadUInt32("uint32 48");                  }                    packet.ReadUInt32("Current Health");                  packet.ReadXORBytes(guid2' 1' 5);                  packet.WriteGuid("GUID2"' guid2);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid9' 2' 3' 4' 7' 5' 1' 6' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid9' 2' 3' 4' 7' 5' 1' 6' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid9' 2' 3' 4' 7' 5' 1' 6' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid9' 2' 3' 4' 7' 5' 1' 6' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid9' 2' 3' 4' 7' 5' 1' 6' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid9' 2' 3' 4' 7' 5' 1' 6' 0);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 4' 5' 7' 6' 2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 4' 5' 7' 6' 2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 4' 5' 7' 6' 2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 4' 5' 7' 6' 2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 4' 5' 7' 6' 2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 1' 4' 5' 7' 6' 2' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid10' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid10' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid10' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid11' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid11' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid10' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid10' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid11' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid11' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid10' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid11' 6);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid11' 7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\SpellHandler.cs,HandleRemovedSpell2,The following statement contains a magic number: var count = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,TradeHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\TradeHandler.cs,HandleTradeStatus,The following statement contains a magic number: var status = packet.ReadBitsE<TradeStatus530>("Status"' 5);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,TradeHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\TradeHandler.cs,HandleTradeStatus,The following statement contains a magic number: switch (status)              {                  case TradeStatus530.BeginTrade:                      var guid = packet.StartBitStream(0' 3' 2' 4' 1' 6' 7' 5);                      packet.ParseBitStream(guid' 5' 7' 3' 6' 4' 2' 0' 1);                      packet.WriteGuid("GUID"' guid);                      break;                  case TradeStatus530.CloseWindow:                      packet.ReadBit("Unk Bit");                      packet.ReadInt32("Unk Int32");                      packet.ReadInt32("Unk Int32");                      break;                  case TradeStatus530.TradeCurrency:                  case TradeStatus530.CurrencyNotTradable:                      packet.ReadInt32("Unk Int32 1");                      packet.ReadInt32("Unk Int32 2");                      break;                  case TradeStatus530.NotEligible:                  case TradeStatus530.OnlyConjured:                      packet.ReadByte("Unk Byte");                      break;                  case TradeStatus530.OpenWindow:                      packet.ReadInt32("Trade Id");                      break;              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,TradeHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\TradeHandler.cs,HandleTradeStatus,The following statement contains a magic number: switch (status)              {                  case TradeStatus530.BeginTrade:                      var guid = packet.StartBitStream(0' 3' 2' 4' 1' 6' 7' 5);                      packet.ParseBitStream(guid' 5' 7' 3' 6' 4' 2' 0' 1);                      packet.WriteGuid("GUID"' guid);                      break;                  case TradeStatus530.CloseWindow:                      packet.ReadBit("Unk Bit");                      packet.ReadInt32("Unk Int32");                      packet.ReadInt32("Unk Int32");                      break;                  case TradeStatus530.TradeCurrency:                  case TradeStatus530.CurrencyNotTradable:                      packet.ReadInt32("Unk Int32 1");                      packet.ReadInt32("Unk Int32 2");                      break;                  case TradeStatus530.NotEligible:                  case TradeStatus530.OnlyConjured:                      packet.ReadByte("Unk Byte");                      break;                  case TradeStatus530.OpenWindow:                      packet.ReadInt32("Trade Id");                      break;              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,TradeHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\TradeHandler.cs,HandleTradeStatus,The following statement contains a magic number: switch (status)              {                  case TradeStatus530.BeginTrade:                      var guid = packet.StartBitStream(0' 3' 2' 4' 1' 6' 7' 5);                      packet.ParseBitStream(guid' 5' 7' 3' 6' 4' 2' 0' 1);                      packet.WriteGuid("GUID"' guid);                      break;                  case TradeStatus530.CloseWindow:                      packet.ReadBit("Unk Bit");                      packet.ReadInt32("Unk Int32");                      packet.ReadInt32("Unk Int32");                      break;                  case TradeStatus530.TradeCurrency:                  case TradeStatus530.CurrencyNotTradable:                      packet.ReadInt32("Unk Int32 1");                      packet.ReadInt32("Unk Int32 2");                      break;                  case TradeStatus530.NotEligible:                  case TradeStatus530.OnlyConjured:                      packet.ReadByte("Unk Byte");                      break;                  case TradeStatus530.OpenWindow:                      packet.ReadInt32("Trade Id");                      break;              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,TradeHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\TradeHandler.cs,HandleTradeStatus,The following statement contains a magic number: switch (status)              {                  case TradeStatus530.BeginTrade:                      var guid = packet.StartBitStream(0' 3' 2' 4' 1' 6' 7' 5);                      packet.ParseBitStream(guid' 5' 7' 3' 6' 4' 2' 0' 1);                      packet.WriteGuid("GUID"' guid);                      break;                  case TradeStatus530.CloseWindow:                      packet.ReadBit("Unk Bit");                      packet.ReadInt32("Unk Int32");                      packet.ReadInt32("Unk Int32");                      break;                  case TradeStatus530.TradeCurrency:                  case TradeStatus530.CurrencyNotTradable:                      packet.ReadInt32("Unk Int32 1");                      packet.ReadInt32("Unk Int32 2");                      break;                  case TradeStatus530.NotEligible:                  case TradeStatus530.OnlyConjured:                      packet.ReadByte("Unk Byte");                      break;                  case TradeStatus530.OpenWindow:                      packet.ReadInt32("Trade Id");                      break;              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,TradeHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\TradeHandler.cs,HandleTradeStatus,The following statement contains a magic number: switch (status)              {                  case TradeStatus530.BeginTrade:                      var guid = packet.StartBitStream(0' 3' 2' 4' 1' 6' 7' 5);                      packet.ParseBitStream(guid' 5' 7' 3' 6' 4' 2' 0' 1);                      packet.WriteGuid("GUID"' guid);                      break;                  case TradeStatus530.CloseWindow:                      packet.ReadBit("Unk Bit");                      packet.ReadInt32("Unk Int32");                      packet.ReadInt32("Unk Int32");                      break;                  case TradeStatus530.TradeCurrency:                  case TradeStatus530.CurrencyNotTradable:                      packet.ReadInt32("Unk Int32 1");                      packet.ReadInt32("Unk Int32 2");                      break;                  case TradeStatus530.NotEligible:                  case TradeStatus530.OnlyConjured:                      packet.ReadByte("Unk Byte");                      break;                  case TradeStatus530.OpenWindow:                      packet.ReadInt32("Trade Id");                      break;              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,TradeHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\TradeHandler.cs,HandleTradeStatus,The following statement contains a magic number: switch (status)              {                  case TradeStatus530.BeginTrade:                      var guid = packet.StartBitStream(0' 3' 2' 4' 1' 6' 7' 5);                      packet.ParseBitStream(guid' 5' 7' 3' 6' 4' 2' 0' 1);                      packet.WriteGuid("GUID"' guid);                      break;                  case TradeStatus530.CloseWindow:                      packet.ReadBit("Unk Bit");                      packet.ReadInt32("Unk Int32");                      packet.ReadInt32("Unk Int32");                      break;                  case TradeStatus530.TradeCurrency:                  case TradeStatus530.CurrencyNotTradable:                      packet.ReadInt32("Unk Int32 1");                      packet.ReadInt32("Unk Int32 2");                      break;                  case TradeStatus530.NotEligible:                  case TradeStatus530.OnlyConjured:                      packet.ReadByte("Unk Byte");                      break;                  case TradeStatus530.OpenWindow:                      packet.ReadInt32("Trade Id");                      break;              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,TradeHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\TradeHandler.cs,HandleTradeStatus,The following statement contains a magic number: switch (status)              {                  case TradeStatus530.BeginTrade:                      var guid = packet.StartBitStream(0' 3' 2' 4' 1' 6' 7' 5);                      packet.ParseBitStream(guid' 5' 7' 3' 6' 4' 2' 0' 1);                      packet.WriteGuid("GUID"' guid);                      break;                  case TradeStatus530.CloseWindow:                      packet.ReadBit("Unk Bit");                      packet.ReadInt32("Unk Int32");                      packet.ReadInt32("Unk Int32");                      break;                  case TradeStatus530.TradeCurrency:                  case TradeStatus530.CurrencyNotTradable:                      packet.ReadInt32("Unk Int32 1");                      packet.ReadInt32("Unk Int32 2");                      break;                  case TradeStatus530.NotEligible:                  case TradeStatus530.OnlyConjured:                      packet.ReadByte("Unk Byte");                      break;                  case TradeStatus530.OpenWindow:                      packet.ReadInt32("Trade Id");                      break;              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,TradeHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\TradeHandler.cs,HandleTradeStatus,The following statement contains a magic number: switch (status)              {                  case TradeStatus530.BeginTrade:                      var guid = packet.StartBitStream(0' 3' 2' 4' 1' 6' 7' 5);                      packet.ParseBitStream(guid' 5' 7' 3' 6' 4' 2' 0' 1);                      packet.WriteGuid("GUID"' guid);                      break;                  case TradeStatus530.CloseWindow:                      packet.ReadBit("Unk Bit");                      packet.ReadInt32("Unk Int32");                      packet.ReadInt32("Unk Int32");                      break;                  case TradeStatus530.TradeCurrency:                  case TradeStatus530.CurrencyNotTradable:                      packet.ReadInt32("Unk Int32 1");                      packet.ReadInt32("Unk Int32 2");                      break;                  case TradeStatus530.NotEligible:                  case TradeStatus530.OnlyConjured:                      packet.ReadByte("Unk Byte");                      break;                  case TradeStatus530.OpenWindow:                      packet.ReadInt32("Trade Id");                      break;              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,TradeHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\TradeHandler.cs,HandleTradeStatus,The following statement contains a magic number: switch (status)              {                  case TradeStatus530.BeginTrade:                      var guid = packet.StartBitStream(0' 3' 2' 4' 1' 6' 7' 5);                      packet.ParseBitStream(guid' 5' 7' 3' 6' 4' 2' 0' 1);                      packet.WriteGuid("GUID"' guid);                      break;                  case TradeStatus530.CloseWindow:                      packet.ReadBit("Unk Bit");                      packet.ReadInt32("Unk Int32");                      packet.ReadInt32("Unk Int32");                      break;                  case TradeStatus530.TradeCurrency:                  case TradeStatus530.CurrencyNotTradable:                      packet.ReadInt32("Unk Int32 1");                      packet.ReadInt32("Unk Int32 2");                      break;                  case TradeStatus530.NotEligible:                  case TradeStatus530.OnlyConjured:                      packet.ReadByte("Unk Byte");                      break;                  case TradeStatus530.OpenWindow:                      packet.ReadInt32("Trade Id");                      break;              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,TradeHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\TradeHandler.cs,HandleTradeStatus,The following statement contains a magic number: switch (status)              {                  case TradeStatus530.BeginTrade:                      var guid = packet.StartBitStream(0' 3' 2' 4' 1' 6' 7' 5);                      packet.ParseBitStream(guid' 5' 7' 3' 6' 4' 2' 0' 1);                      packet.WriteGuid("GUID"' guid);                      break;                  case TradeStatus530.CloseWindow:                      packet.ReadBit("Unk Bit");                      packet.ReadInt32("Unk Int32");                      packet.ReadInt32("Unk Int32");                      break;                  case TradeStatus530.TradeCurrency:                  case TradeStatus530.CurrencyNotTradable:                      packet.ReadInt32("Unk Int32 1");                      packet.ReadInt32("Unk Int32 2");                      break;                  case TradeStatus530.NotEligible:                  case TradeStatus530.OnlyConjured:                      packet.ReadByte("Unk Byte");                      break;                  case TradeStatus530.OpenWindow:                      packet.ReadInt32("Trade Id");                      break;              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,TradeHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\TradeHandler.cs,HandleTradeStatus,The following statement contains a magic number: switch (status)              {                  case TradeStatus530.BeginTrade:                      var guid = packet.StartBitStream(0' 3' 2' 4' 1' 6' 7' 5);                      packet.ParseBitStream(guid' 5' 7' 3' 6' 4' 2' 0' 1);                      packet.WriteGuid("GUID"' guid);                      break;                  case TradeStatus530.CloseWindow:                      packet.ReadBit("Unk Bit");                      packet.ReadInt32("Unk Int32");                      packet.ReadInt32("Unk Int32");                      break;                  case TradeStatus530.TradeCurrency:                  case TradeStatus530.CurrencyNotTradable:                      packet.ReadInt32("Unk Int32 1");                      packet.ReadInt32("Unk Int32 2");                      break;                  case TradeStatus530.NotEligible:                  case TradeStatus530.OnlyConjured:                      packet.ReadByte("Unk Byte");                      break;                  case TradeStatus530.OpenWindow:                      packet.ReadInt32("Trade Id");                      break;              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,TradeHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\TradeHandler.cs,HandleTradeStatus,The following statement contains a magic number: switch (status)              {                  case TradeStatus530.BeginTrade:                      var guid = packet.StartBitStream(0' 3' 2' 4' 1' 6' 7' 5);                      packet.ParseBitStream(guid' 5' 7' 3' 6' 4' 2' 0' 1);                      packet.WriteGuid("GUID"' guid);                      break;                  case TradeStatus530.CloseWindow:                      packet.ReadBit("Unk Bit");                      packet.ReadInt32("Unk Int32");                      packet.ReadInt32("Unk Int32");                      break;                  case TradeStatus530.TradeCurrency:                  case TradeStatus530.CurrencyNotTradable:                      packet.ReadInt32("Unk Int32 1");                      packet.ReadInt32("Unk Int32 2");                      break;                  case TradeStatus530.NotEligible:                  case TradeStatus530.OnlyConjured:                      packet.ReadByte("Unk Byte");                      break;                  case TradeStatus530.OpenWindow:                      packet.ReadInt32("Trade Id");                      break;              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var transportGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var goTransportGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var attackingTargetGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var guid5 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var guid6 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var guid7 = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var transportFrames = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  guid1[0] = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  packet.StartBitStream(guid1' 4' 7);                  hasMoveFlagsExtra = !packet.ReadBit();                  packet.StartBitStream(guid1' 5' 2);                  moveInfo.HasSplineData = packet.ReadBit("Has spline data"' index);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit("Lacks timestamp"' index);                  bit95 = packet.ReadBit();                  bit94 = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasTransportData = packet.ReadBit("Has Transport Data"' index);                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 1' 0' 6);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 7' 4' 3);                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                    hasPitch = !packet.ReadBit("Lacks pitch"' index);                  guid1[6] = packet.ReadBit();                  bits168 = packet.ReadBits(19);                  for (var i = 0; i < bits168; ++i)                      packet.ReadBits("bits168"' 2' index);                    guid1[1] = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit();                          bit134 = packet.ReadBit();                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("Has Spline Vertical Acceleration"' index);                          if (bit134)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits("bits148"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                      }                  }                    bitA8 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bits98 = packet.ReadBits(22);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    hasFallData = packet.ReadBit("Has Fall Data"' index);                  if (hasFallData)                      hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                    packet.ReadBit("bitAC"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  guid1[0] = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  packet.StartBitStream(guid1' 4' 7);                  hasMoveFlagsExtra = !packet.ReadBit();                  packet.StartBitStream(guid1' 5' 2);                  moveInfo.HasSplineData = packet.ReadBit("Has spline data"' index);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit("Lacks timestamp"' index);                  bit95 = packet.ReadBit();                  bit94 = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasTransportData = packet.ReadBit("Has Transport Data"' index);                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 1' 0' 6);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 7' 4' 3);                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                    hasPitch = !packet.ReadBit("Lacks pitch"' index);                  guid1[6] = packet.ReadBit();                  bits168 = packet.ReadBits(19);                  for (var i = 0; i < bits168; ++i)                      packet.ReadBits("bits168"' 2' index);                    guid1[1] = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit();                          bit134 = packet.ReadBit();                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("Has Spline Vertical Acceleration"' index);                          if (bit134)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits("bits148"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                      }                  }                    bitA8 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bits98 = packet.ReadBits(22);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    hasFallData = packet.ReadBit("Has Fall Data"' index);                  if (hasFallData)                      hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                    packet.ReadBit("bitAC"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  guid1[0] = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  packet.StartBitStream(guid1' 4' 7);                  hasMoveFlagsExtra = !packet.ReadBit();                  packet.StartBitStream(guid1' 5' 2);                  moveInfo.HasSplineData = packet.ReadBit("Has spline data"' index);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit("Lacks timestamp"' index);                  bit95 = packet.ReadBit();                  bit94 = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasTransportData = packet.ReadBit("Has Transport Data"' index);                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 1' 0' 6);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 7' 4' 3);                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                    hasPitch = !packet.ReadBit("Lacks pitch"' index);                  guid1[6] = packet.ReadBit();                  bits168 = packet.ReadBits(19);                  for (var i = 0; i < bits168; ++i)                      packet.ReadBits("bits168"' 2' index);                    guid1[1] = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit();                          bit134 = packet.ReadBit();                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("Has Spline Vertical Acceleration"' index);                          if (bit134)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits("bits148"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                      }                  }                    bitA8 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bits98 = packet.ReadBits(22);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    hasFallData = packet.ReadBit("Has Fall Data"' index);                  if (hasFallData)                      hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                    packet.ReadBit("bitAC"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  guid1[0] = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  packet.StartBitStream(guid1' 4' 7);                  hasMoveFlagsExtra = !packet.ReadBit();                  packet.StartBitStream(guid1' 5' 2);                  moveInfo.HasSplineData = packet.ReadBit("Has spline data"' index);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit("Lacks timestamp"' index);                  bit95 = packet.ReadBit();                  bit94 = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasTransportData = packet.ReadBit("Has Transport Data"' index);                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 1' 0' 6);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 7' 4' 3);                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                    hasPitch = !packet.ReadBit("Lacks pitch"' index);                  guid1[6] = packet.ReadBit();                  bits168 = packet.ReadBits(19);                  for (var i = 0; i < bits168; ++i)                      packet.ReadBits("bits168"' 2' index);                    guid1[1] = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit();                          bit134 = packet.ReadBit();                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("Has Spline Vertical Acceleration"' index);                          if (bit134)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits("bits148"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                      }                  }                    bitA8 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bits98 = packet.ReadBits(22);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    hasFallData = packet.ReadBit("Has Fall Data"' index);                  if (hasFallData)                      hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                    packet.ReadBit("bitAC"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  guid1[0] = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  packet.StartBitStream(guid1' 4' 7);                  hasMoveFlagsExtra = !packet.ReadBit();                  packet.StartBitStream(guid1' 5' 2);                  moveInfo.HasSplineData = packet.ReadBit("Has spline data"' index);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit("Lacks timestamp"' index);                  bit95 = packet.ReadBit();                  bit94 = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasTransportData = packet.ReadBit("Has Transport Data"' index);                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 1' 0' 6);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 7' 4' 3);                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                    hasPitch = !packet.ReadBit("Lacks pitch"' index);                  guid1[6] = packet.ReadBit();                  bits168 = packet.ReadBits(19);                  for (var i = 0; i < bits168; ++i)                      packet.ReadBits("bits168"' 2' index);                    guid1[1] = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit();                          bit134 = packet.ReadBit();                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("Has Spline Vertical Acceleration"' index);                          if (bit134)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits("bits148"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                      }                  }                    bitA8 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bits98 = packet.ReadBits(22);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    hasFallData = packet.ReadBit("Has Fall Data"' index);                  if (hasFallData)                      hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                    packet.ReadBit("bitAC"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  guid1[0] = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  packet.StartBitStream(guid1' 4' 7);                  hasMoveFlagsExtra = !packet.ReadBit();                  packet.StartBitStream(guid1' 5' 2);                  moveInfo.HasSplineData = packet.ReadBit("Has spline data"' index);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit("Lacks timestamp"' index);                  bit95 = packet.ReadBit();                  bit94 = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasTransportData = packet.ReadBit("Has Transport Data"' index);                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 1' 0' 6);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 7' 4' 3);                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                    hasPitch = !packet.ReadBit("Lacks pitch"' index);                  guid1[6] = packet.ReadBit();                  bits168 = packet.ReadBits(19);                  for (var i = 0; i < bits168; ++i)                      packet.ReadBits("bits168"' 2' index);                    guid1[1] = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit();                          bit134 = packet.ReadBit();                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("Has Spline Vertical Acceleration"' index);                          if (bit134)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits("bits148"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                      }                  }                    bitA8 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bits98 = packet.ReadBits(22);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    hasFallData = packet.ReadBit("Has Fall Data"' index);                  if (hasFallData)                      hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                    packet.ReadBit("bitAC"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  guid1[0] = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  packet.StartBitStream(guid1' 4' 7);                  hasMoveFlagsExtra = !packet.ReadBit();                  packet.StartBitStream(guid1' 5' 2);                  moveInfo.HasSplineData = packet.ReadBit("Has spline data"' index);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit("Lacks timestamp"' index);                  bit95 = packet.ReadBit();                  bit94 = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasTransportData = packet.ReadBit("Has Transport Data"' index);                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 1' 0' 6);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 7' 4' 3);                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                    hasPitch = !packet.ReadBit("Lacks pitch"' index);                  guid1[6] = packet.ReadBit();                  bits168 = packet.ReadBits(19);                  for (var i = 0; i < bits168; ++i)                      packet.ReadBits("bits168"' 2' index);                    guid1[1] = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit();                          bit134 = packet.ReadBit();                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("Has Spline Vertical Acceleration"' index);                          if (bit134)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits("bits148"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                      }                  }                    bitA8 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bits98 = packet.ReadBits(22);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    hasFallData = packet.ReadBit("Has Fall Data"' index);                  if (hasFallData)                      hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                    packet.ReadBit("bitAC"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  guid1[0] = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  packet.StartBitStream(guid1' 4' 7);                  hasMoveFlagsExtra = !packet.ReadBit();                  packet.StartBitStream(guid1' 5' 2);                  moveInfo.HasSplineData = packet.ReadBit("Has spline data"' index);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit("Lacks timestamp"' index);                  bit95 = packet.ReadBit();                  bit94 = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasTransportData = packet.ReadBit("Has Transport Data"' index);                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 1' 0' 6);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 7' 4' 3);                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                    hasPitch = !packet.ReadBit("Lacks pitch"' index);                  guid1[6] = packet.ReadBit();                  bits168 = packet.ReadBits(19);                  for (var i = 0; i < bits168; ++i)                      packet.ReadBits("bits168"' 2' index);                    guid1[1] = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit();                          bit134 = packet.ReadBit();                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("Has Spline Vertical Acceleration"' index);                          if (bit134)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits("bits148"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                      }                  }                    bitA8 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bits98 = packet.ReadBits(22);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    hasFallData = packet.ReadBit("Has Fall Data"' index);                  if (hasFallData)                      hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                    packet.ReadBit("bitAC"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  guid1[0] = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  packet.StartBitStream(guid1' 4' 7);                  hasMoveFlagsExtra = !packet.ReadBit();                  packet.StartBitStream(guid1' 5' 2);                  moveInfo.HasSplineData = packet.ReadBit("Has spline data"' index);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit("Lacks timestamp"' index);                  bit95 = packet.ReadBit();                  bit94 = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasTransportData = packet.ReadBit("Has Transport Data"' index);                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 1' 0' 6);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 7' 4' 3);                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                    hasPitch = !packet.ReadBit("Lacks pitch"' index);                  guid1[6] = packet.ReadBit();                  bits168 = packet.ReadBits(19);                  for (var i = 0; i < bits168; ++i)                      packet.ReadBits("bits168"' 2' index);                    guid1[1] = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit();                          bit134 = packet.ReadBit();                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("Has Spline Vertical Acceleration"' index);                          if (bit134)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits("bits148"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                      }                  }                    bitA8 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bits98 = packet.ReadBits(22);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    hasFallData = packet.ReadBit("Has Fall Data"' index);                  if (hasFallData)                      hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                    packet.ReadBit("bitAC"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  guid1[0] = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  packet.StartBitStream(guid1' 4' 7);                  hasMoveFlagsExtra = !packet.ReadBit();                  packet.StartBitStream(guid1' 5' 2);                  moveInfo.HasSplineData = packet.ReadBit("Has spline data"' index);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit("Lacks timestamp"' index);                  bit95 = packet.ReadBit();                  bit94 = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasTransportData = packet.ReadBit("Has Transport Data"' index);                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 1' 0' 6);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 7' 4' 3);                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                    hasPitch = !packet.ReadBit("Lacks pitch"' index);                  guid1[6] = packet.ReadBit();                  bits168 = packet.ReadBits(19);                  for (var i = 0; i < bits168; ++i)                      packet.ReadBits("bits168"' 2' index);                    guid1[1] = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit();                          bit134 = packet.ReadBit();                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("Has Spline Vertical Acceleration"' index);                          if (bit134)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits("bits148"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                      }                  }                    bitA8 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bits98 = packet.ReadBits(22);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    hasFallData = packet.ReadBit("Has Fall Data"' index);                  if (hasFallData)                      hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                    packet.ReadBit("bitAC"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  guid1[0] = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  packet.StartBitStream(guid1' 4' 7);                  hasMoveFlagsExtra = !packet.ReadBit();                  packet.StartBitStream(guid1' 5' 2);                  moveInfo.HasSplineData = packet.ReadBit("Has spline data"' index);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit("Lacks timestamp"' index);                  bit95 = packet.ReadBit();                  bit94 = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasTransportData = packet.ReadBit("Has Transport Data"' index);                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 1' 0' 6);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 7' 4' 3);                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                    hasPitch = !packet.ReadBit("Lacks pitch"' index);                  guid1[6] = packet.ReadBit();                  bits168 = packet.ReadBits(19);                  for (var i = 0; i < bits168; ++i)                      packet.ReadBits("bits168"' 2' index);                    guid1[1] = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit();                          bit134 = packet.ReadBit();                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("Has Spline Vertical Acceleration"' index);                          if (bit134)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits("bits148"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                      }                  }                    bitA8 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bits98 = packet.ReadBits(22);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    hasFallData = packet.ReadBit("Has Fall Data"' index);                  if (hasFallData)                      hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                    packet.ReadBit("bitAC"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  guid1[0] = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  packet.StartBitStream(guid1' 4' 7);                  hasMoveFlagsExtra = !packet.ReadBit();                  packet.StartBitStream(guid1' 5' 2);                  moveInfo.HasSplineData = packet.ReadBit("Has spline data"' index);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit("Lacks timestamp"' index);                  bit95 = packet.ReadBit();                  bit94 = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasTransportData = packet.ReadBit("Has Transport Data"' index);                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 1' 0' 6);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 7' 4' 3);                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                    hasPitch = !packet.ReadBit("Lacks pitch"' index);                  guid1[6] = packet.ReadBit();                  bits168 = packet.ReadBits(19);                  for (var i = 0; i < bits168; ++i)                      packet.ReadBits("bits168"' 2' index);                    guid1[1] = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit();                          bit134 = packet.ReadBit();                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("Has Spline Vertical Acceleration"' index);                          if (bit134)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits("bits148"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                      }                  }                    bitA8 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bits98 = packet.ReadBits(22);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    hasFallData = packet.ReadBit("Has Fall Data"' index);                  if (hasFallData)                      hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                    packet.ReadBit("bitAC"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  guid1[0] = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  packet.StartBitStream(guid1' 4' 7);                  hasMoveFlagsExtra = !packet.ReadBit();                  packet.StartBitStream(guid1' 5' 2);                  moveInfo.HasSplineData = packet.ReadBit("Has spline data"' index);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit("Lacks timestamp"' index);                  bit95 = packet.ReadBit();                  bit94 = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasTransportData = packet.ReadBit("Has Transport Data"' index);                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 1' 0' 6);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 7' 4' 3);                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                    hasPitch = !packet.ReadBit("Lacks pitch"' index);                  guid1[6] = packet.ReadBit();                  bits168 = packet.ReadBits(19);                  for (var i = 0; i < bits168; ++i)                      packet.ReadBits("bits168"' 2' index);                    guid1[1] = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit();                          bit134 = packet.ReadBit();                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("Has Spline Vertical Acceleration"' index);                          if (bit134)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits("bits148"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                      }                  }                    bitA8 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bits98 = packet.ReadBits(22);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    hasFallData = packet.ReadBit("Has Fall Data"' index);                  if (hasFallData)                      hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                    packet.ReadBit("bitAC"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  guid1[0] = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  packet.StartBitStream(guid1' 4' 7);                  hasMoveFlagsExtra = !packet.ReadBit();                  packet.StartBitStream(guid1' 5' 2);                  moveInfo.HasSplineData = packet.ReadBit("Has spline data"' index);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit("Lacks timestamp"' index);                  bit95 = packet.ReadBit();                  bit94 = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasTransportData = packet.ReadBit("Has Transport Data"' index);                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 1' 0' 6);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 7' 4' 3);                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                    hasPitch = !packet.ReadBit("Lacks pitch"' index);                  guid1[6] = packet.ReadBit();                  bits168 = packet.ReadBits(19);                  for (var i = 0; i < bits168; ++i)                      packet.ReadBits("bits168"' 2' index);                    guid1[1] = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit();                          bit134 = packet.ReadBit();                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("Has Spline Vertical Acceleration"' index);                          if (bit134)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits("bits148"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                      }                  }                    bitA8 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bits98 = packet.ReadBits(22);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    hasFallData = packet.ReadBit("Has Fall Data"' index);                  if (hasFallData)                      hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                    packet.ReadBit("bitAC"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  guid1[0] = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  packet.StartBitStream(guid1' 4' 7);                  hasMoveFlagsExtra = !packet.ReadBit();                  packet.StartBitStream(guid1' 5' 2);                  moveInfo.HasSplineData = packet.ReadBit("Has spline data"' index);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit("Lacks timestamp"' index);                  bit95 = packet.ReadBit();                  bit94 = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasTransportData = packet.ReadBit("Has Transport Data"' index);                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 1' 0' 6);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 7' 4' 3);                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                    hasPitch = !packet.ReadBit("Lacks pitch"' index);                  guid1[6] = packet.ReadBit();                  bits168 = packet.ReadBits(19);                  for (var i = 0; i < bits168; ++i)                      packet.ReadBits("bits168"' 2' index);                    guid1[1] = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit();                          bit134 = packet.ReadBit();                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("Has Spline Vertical Acceleration"' index);                          if (bit134)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits("bits148"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                      }                  }                    bitA8 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bits98 = packet.ReadBits(22);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    hasFallData = packet.ReadBit("Has Fall Data"' index);                  if (hasFallData)                      hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                    packet.ReadBit("bitAC"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  guid1[0] = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  packet.StartBitStream(guid1' 4' 7);                  hasMoveFlagsExtra = !packet.ReadBit();                  packet.StartBitStream(guid1' 5' 2);                  moveInfo.HasSplineData = packet.ReadBit("Has spline data"' index);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit("Lacks timestamp"' index);                  bit95 = packet.ReadBit();                  bit94 = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasTransportData = packet.ReadBit("Has Transport Data"' index);                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 1' 0' 6);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 7' 4' 3);                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                    hasPitch = !packet.ReadBit("Lacks pitch"' index);                  guid1[6] = packet.ReadBit();                  bits168 = packet.ReadBits(19);                  for (var i = 0; i < bits168; ++i)                      packet.ReadBits("bits168"' 2' index);                    guid1[1] = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit();                          bit134 = packet.ReadBit();                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("Has Spline Vertical Acceleration"' index);                          if (bit134)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits("bits148"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                      }                  }                    bitA8 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bits98 = packet.ReadBits(22);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    hasFallData = packet.ReadBit("Has Fall Data"' index);                  if (hasFallData)                      hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                    packet.ReadBit("bitAC"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  guid1[0] = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  packet.StartBitStream(guid1' 4' 7);                  hasMoveFlagsExtra = !packet.ReadBit();                  packet.StartBitStream(guid1' 5' 2);                  moveInfo.HasSplineData = packet.ReadBit("Has spline data"' index);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit("Lacks timestamp"' index);                  bit95 = packet.ReadBit();                  bit94 = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasTransportData = packet.ReadBit("Has Transport Data"' index);                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 1' 0' 6);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 7' 4' 3);                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                    hasPitch = !packet.ReadBit("Lacks pitch"' index);                  guid1[6] = packet.ReadBit();                  bits168 = packet.ReadBits(19);                  for (var i = 0; i < bits168; ++i)                      packet.ReadBits("bits168"' 2' index);                    guid1[1] = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit();                          bit134 = packet.ReadBit();                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("Has Spline Vertical Acceleration"' index);                          if (bit134)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits("bits148"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                      }                  }                    bitA8 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bits98 = packet.ReadBits(22);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    hasFallData = packet.ReadBit("Has Fall Data"' index);                  if (hasFallData)                      hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                    packet.ReadBit("bitAC"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  guid1[0] = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  packet.StartBitStream(guid1' 4' 7);                  hasMoveFlagsExtra = !packet.ReadBit();                  packet.StartBitStream(guid1' 5' 2);                  moveInfo.HasSplineData = packet.ReadBit("Has spline data"' index);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit("Lacks timestamp"' index);                  bit95 = packet.ReadBit();                  bit94 = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasTransportData = packet.ReadBit("Has Transport Data"' index);                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 1' 0' 6);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 7' 4' 3);                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                    hasPitch = !packet.ReadBit("Lacks pitch"' index);                  guid1[6] = packet.ReadBit();                  bits168 = packet.ReadBits(19);                  for (var i = 0; i < bits168; ++i)                      packet.ReadBits("bits168"' 2' index);                    guid1[1] = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit();                          bit134 = packet.ReadBit();                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("Has Spline Vertical Acceleration"' index);                          if (bit134)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits("bits148"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                      }                  }                    bitA8 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bits98 = packet.ReadBits(22);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    hasFallData = packet.ReadBit("Has Fall Data"' index);                  if (hasFallData)                      hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                    packet.ReadBit("bitAC"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  guid1[0] = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  packet.StartBitStream(guid1' 4' 7);                  hasMoveFlagsExtra = !packet.ReadBit();                  packet.StartBitStream(guid1' 5' 2);                  moveInfo.HasSplineData = packet.ReadBit("Has spline data"' index);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit("Lacks timestamp"' index);                  bit95 = packet.ReadBit();                  bit94 = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasTransportData = packet.ReadBit("Has Transport Data"' index);                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 1' 0' 6);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 7' 4' 3);                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                    hasPitch = !packet.ReadBit("Lacks pitch"' index);                  guid1[6] = packet.ReadBit();                  bits168 = packet.ReadBits(19);                  for (var i = 0; i < bits168; ++i)                      packet.ReadBits("bits168"' 2' index);                    guid1[1] = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit();                          bit134 = packet.ReadBit();                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("Has Spline Vertical Acceleration"' index);                          if (bit134)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits("bits148"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                      }                  }                    bitA8 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bits98 = packet.ReadBits(22);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    hasFallData = packet.ReadBit("Has Fall Data"' index);                  if (hasFallData)                      hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                    packet.ReadBit("bitAC"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  guid1[0] = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  packet.StartBitStream(guid1' 4' 7);                  hasMoveFlagsExtra = !packet.ReadBit();                  packet.StartBitStream(guid1' 5' 2);                  moveInfo.HasSplineData = packet.ReadBit("Has spline data"' index);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit("Lacks timestamp"' index);                  bit95 = packet.ReadBit();                  bit94 = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasTransportData = packet.ReadBit("Has Transport Data"' index);                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 1' 0' 6);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 7' 4' 3);                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                    hasPitch = !packet.ReadBit("Lacks pitch"' index);                  guid1[6] = packet.ReadBit();                  bits168 = packet.ReadBits(19);                  for (var i = 0; i < bits168; ++i)                      packet.ReadBits("bits168"' 2' index);                    guid1[1] = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit();                          bit134 = packet.ReadBit();                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("Has Spline Vertical Acceleration"' index);                          if (bit134)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits("bits148"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                      }                  }                    bitA8 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bits98 = packet.ReadBits(22);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    hasFallData = packet.ReadBit("Has Fall Data"' index);                  if (hasFallData)                      hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                    packet.ReadBit("bitAC"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  guid1[0] = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  packet.StartBitStream(guid1' 4' 7);                  hasMoveFlagsExtra = !packet.ReadBit();                  packet.StartBitStream(guid1' 5' 2);                  moveInfo.HasSplineData = packet.ReadBit("Has spline data"' index);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit("Lacks timestamp"' index);                  bit95 = packet.ReadBit();                  bit94 = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasTransportData = packet.ReadBit("Has Transport Data"' index);                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 1' 0' 6);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 7' 4' 3);                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                    hasPitch = !packet.ReadBit("Lacks pitch"' index);                  guid1[6] = packet.ReadBit();                  bits168 = packet.ReadBits(19);                  for (var i = 0; i < bits168; ++i)                      packet.ReadBits("bits168"' 2' index);                    guid1[1] = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit();                          bit134 = packet.ReadBit();                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("Has Spline Vertical Acceleration"' index);                          if (bit134)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits("bits148"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                      }                  }                    bitA8 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bits98 = packet.ReadBits(22);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    hasFallData = packet.ReadBit("Has Fall Data"' index);                  if (hasFallData)                      hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                    packet.ReadBit("bitAC"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  guid1[0] = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  packet.StartBitStream(guid1' 4' 7);                  hasMoveFlagsExtra = !packet.ReadBit();                  packet.StartBitStream(guid1' 5' 2);                  moveInfo.HasSplineData = packet.ReadBit("Has spline data"' index);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit("Lacks timestamp"' index);                  bit95 = packet.ReadBit();                  bit94 = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasTransportData = packet.ReadBit("Has Transport Data"' index);                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 1' 0' 6);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 7' 4' 3);                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                    hasPitch = !packet.ReadBit("Lacks pitch"' index);                  guid1[6] = packet.ReadBit();                  bits168 = packet.ReadBits(19);                  for (var i = 0; i < bits168; ++i)                      packet.ReadBits("bits168"' 2' index);                    guid1[1] = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineStartTime = packet.ReadBit();                          bit134 = packet.ReadBit();                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          hasSplineVerticalAcceleration = packet.ReadBit("Has Spline Vertical Acceleration"' index);                          if (bit134)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits("bits148"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                      }                  }                    bitA8 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  bits98 = packet.ReadBits(22);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    hasFallData = packet.ReadBit("Has Fall Data"' index);                  if (hasFallData)                      hasFallDirection = packet.ReadBit("Has Fall Direction"' index);                    packet.ReadBit("bitAC"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.StartBitStream(goTransportGuid' 7' 3);                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 1' 4' 0' 2' 6);                  hasGOTransportTime3 = packet.ReadBit();                  goTransportGuid[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.StartBitStream(goTransportGuid' 7' 3);                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 1' 4' 0' 2' 6);                  hasGOTransportTime3 = packet.ReadBit();                  goTransportGuid[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.StartBitStream(goTransportGuid' 7' 3);                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 1' 4' 0' 2' 6);                  hasGOTransportTime3 = packet.ReadBit();                  goTransportGuid[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.StartBitStream(goTransportGuid' 7' 3);                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 1' 4' 0' 2' 6);                  hasGOTransportTime3 = packet.ReadBit();                  goTransportGuid[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.StartBitStream(goTransportGuid' 7' 3);                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 1' 4' 0' 2' 6);                  hasGOTransportTime3 = packet.ReadBit();                  goTransportGuid[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.StartBitStream(goTransportGuid' 7' 3);                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 1' 4' 0' 2' 6);                  hasGOTransportTime3 = packet.ReadBit();                  goTransportGuid[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  attackingTargetGuid = packet.StartBitStream(7' 3' 6' 1' 5' 4' 0' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  attackingTargetGuid = packet.StartBitStream(7' 3' 6' 1' 5' 4' 0' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  attackingTargetGuid = packet.StartBitStream(7' 3' 6' 1' 5' 4' 0' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  attackingTargetGuid = packet.StartBitStream(7' 3' 6' 1' 5' 4' 0' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  attackingTargetGuid = packet.StartBitStream(7' 3' 6' 1' 5' 4' 0' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  attackingTargetGuid = packet.StartBitStream(7' 3' 6' 1' 5' 4' 0' 2);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit208)              {                  packet.ReadBit("bit21A"' index);                  bit228 = packet.ReadBit();                  bit270 = packet.ReadBit();                  packet.ReadBit("bit219"' index);                  packet.ReadBit("bit218"' index);                  bit21C = packet.ReadBit();                  bit244 = packet.ReadBit();                    if (bit244)                  {                      bits248 = packet.ReadBits(21);                      bits258 = packet.ReadBits(21);                  }                    if (bit270)                      bits274 = packet.ReadBits(20);                    packet.ReadBit("bit21B"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit208)              {                  packet.ReadBit("bit21A"' index);                  bit228 = packet.ReadBit();                  bit270 = packet.ReadBit();                  packet.ReadBit("bit219"' index);                  packet.ReadBit("bit218"' index);                  bit21C = packet.ReadBit();                  bit244 = packet.ReadBit();                    if (bit244)                  {                      bits248 = packet.ReadBits(21);                      bits258 = packet.ReadBits(21);                  }                    if (bit270)                      bits274 = packet.ReadBits(20);                    packet.ReadBit("bit21B"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit208)              {                  packet.ReadBit("bit21A"' index);                  bit228 = packet.ReadBit();                  bit270 = packet.ReadBit();                  packet.ReadBit("bit219"' index);                  packet.ReadBit("bit218"' index);                  bit21C = packet.ReadBit();                  bit244 = packet.ReadBit();                    if (bit244)                  {                      bits248 = packet.ReadBits(21);                      bits258 = packet.ReadBits(21);                  }                    if (bit270)                      bits274 = packet.ReadBits(20);                    packet.ReadBit("bit21B"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var CreatorGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  guid310 = new byte[2][];                  guid34C_4 = new byte[2][][];                  bits34C_0 = new uint[2];                  bits34C_4_84 = new uint[2][];                  bits34C_4_94 = new uint[2][];                  bits34C_4_31 = new uint[2][];                  bits34C_4_74 = new uint[2][];                  bit34C_4_78_9 = new byte[2][][];                  bit34C_4_88_10 = new byte[2][][];                  bit34C_4_88_C = new bool[2][][];                  bit34C_4_88_8 = new bool[2][][];                  bit34C_4_2E = new bool[2][];                  bit34C_4_30 = new bool[2][];                  bit34C_4 = new bool[2];                  bit34C_8 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid310[i] = new byte[8];                      packet.StartBitStream(guid310[i]' 7' 6);                      bits34C_0[i] = packet.ReadBits(2);                        guid34C_4[i] = new byte[bits34C_0[i]][];                      bits34C_4_84[i] = new uint[bits34C_0[i]];                      bits34C_4_94[i] = new uint[bits34C_0[i]];                      bits34C_4_31[i] = new uint[bits34C_0[i]];                      bits34C_4_74[i] = new uint[bits34C_0[i]];                      bit34C_4_78_9[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_10[i] = new byte[bits34C_0[i]][];                      bit34C_4_88_C[i] = new bool[bits34C_0[i]][];                      bit34C_4_88_8[i] = new bool[bits34C_0[i]][];                      bit34C_4_2E[i] = new bool[bits34C_0[i]];                      bit34C_4_30[i] = new bool[bits34C_0[i]];                        for (var j = 0; j < bits34C_0[i]; ++j)                      {                          guid34C_4[i][j] = new byte[8];                          bit34C_4_2E[i][j] = !packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 7' 0' 6' 3);                            bits34C_4_84[i][j] = packet.ReadBits(21);                          bit34C_4_88_8[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_C[i][j] = new bool[bits34C_4_84[i][j]];                          bit34C_4_88_10[i][j] = new byte[bits34C_4_84[i][j]];                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              bit34C_4_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit34C_4_88_C[i][j][k] = !packet.ReadBit();                              bit34C_4_88_8[i][j][k] = !packet.ReadBit();                          }                            bits34C_4_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid34C_4[i][j]' 2);                          bit34C_4_30[i][j] = packet.ReadBit();                          packet.StartBitStream(guid34C_4[i][j]' 5' 4' 1);                            bits34C_4_74[i][j] = packet.ReadBits(20);                          bit34C_4_78_9[i][j] = new byte[bits34C_4_74[i][j]];                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                              bit34C_4_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bits34C_4_31[i][j] = packet.ReadBits(7);                      }                        bit34C_8[i] = !packet.ReadBit();                      packet.StartBitStream(guid310[i]' 3' 5' 2);                      bit34C_4[i] = packet.ReadBit();                      packet.StartBitStream(guid310[i]' 1' 0' 4);                  }                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = packet.ReadBit();                          bit388_1_8[i][j] = packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    bit31A = !packet.ReadBit();                  bit329 = !packet.ReadBit();                  bit320 = !packet.ReadBit();                  bit328 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 1' 0' 2' 3' 6' 4' 5);                  bit324 = !packet.ReadBit();                  bit318 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit3F0)                  bits3F4 = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit28E)                  bits28F = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits168; ++i)                  {                      packet.ReadSingle("Float16C+5"' index);                      packet.ReadInt32("Int16C+4"' index);                      packet.ReadSingle("Float16C+1"' index);                      packet.ReadInt32("Int16C+0"' index);                      packet.ReadSingle("Float16C+2"' index);                      packet.ReadSingle("Float16C+3"' index);                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index);                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadInt32("Spline Time"' index);                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit134)                          {                              for (var i = 0; i < bits138; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  X = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.X = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 4);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadUInt32("Transport Time"' index);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORBytes(transportGuid' 3' 1' 6);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 2' 0' 7);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORBytes(guid1' 2' 1);                  packet.ReadSingle("RunBack Speed"' index);                  packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORBytes(guid1' 0' 3);                  packet.ReadSingle("SwimBack Speed"' index);                  if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    packet.ReadSingle("Turn Speed"' index);                  packet.ReadXORByte(guid1' 5);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadXORByte(guid1' 6);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadSingle("Pitch Speed"' index);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("Int9C"' index' i);                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  if (bitA8)                      packet.ReadInt32("IntA8"' index);                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadXORByte(guid1' 7);                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 4);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits168; ++i)                  {                      packet.ReadSingle("Float16C+5"' index);                      packet.ReadInt32("Int16C+4"' index);                      packet.ReadSingle("Float16C+1"' index);                      packet.ReadInt32("Int16C+0"' index);                      packet.ReadSingle("Float16C+2"' index);                      packet.ReadSingle("Float16C+3"' index);                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index);                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadInt32("Spline Time"' index);                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit134)                          {                              for (var i = 0; i < bits138; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  X = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.X = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 4);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadUInt32("Transport Time"' index);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORBytes(transportGuid' 3' 1' 6);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 2' 0' 7);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORBytes(guid1' 2' 1);                  packet.ReadSingle("RunBack Speed"' index);                  packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORBytes(guid1' 0' 3);                  packet.ReadSingle("SwimBack Speed"' index);                  if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    packet.ReadSingle("Turn Speed"' index);                  packet.ReadXORByte(guid1' 5);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadXORByte(guid1' 6);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadSingle("Pitch Speed"' index);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("Int9C"' index' i);                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  if (bitA8)                      packet.ReadInt32("IntA8"' index);                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadXORByte(guid1' 7);                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 4);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits168; ++i)                  {                      packet.ReadSingle("Float16C+5"' index);                      packet.ReadInt32("Int16C+4"' index);                      packet.ReadSingle("Float16C+1"' index);                      packet.ReadInt32("Int16C+0"' index);                      packet.ReadSingle("Float16C+2"' index);                      packet.ReadSingle("Float16C+3"' index);                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index);                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadInt32("Spline Time"' index);                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit134)                          {                              for (var i = 0; i < bits138; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  X = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.X = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 4);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadUInt32("Transport Time"' index);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORBytes(transportGuid' 3' 1' 6);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 2' 0' 7);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORBytes(guid1' 2' 1);                  packet.ReadSingle("RunBack Speed"' index);                  packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORBytes(guid1' 0' 3);                  packet.ReadSingle("SwimBack Speed"' index);                  if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    packet.ReadSingle("Turn Speed"' index);                  packet.ReadXORByte(guid1' 5);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadXORByte(guid1' 6);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadSingle("Pitch Speed"' index);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("Int9C"' index' i);                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  if (bitA8)                      packet.ReadInt32("IntA8"' index);                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadXORByte(guid1' 7);                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 4);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits168; ++i)                  {                      packet.ReadSingle("Float16C+5"' index);                      packet.ReadInt32("Int16C+4"' index);                      packet.ReadSingle("Float16C+1"' index);                      packet.ReadInt32("Int16C+0"' index);                      packet.ReadSingle("Float16C+2"' index);                      packet.ReadSingle("Float16C+3"' index);                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index);                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadInt32("Spline Time"' index);                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit134)                          {                              for (var i = 0; i < bits138; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  X = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.X = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 4);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadUInt32("Transport Time"' index);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORBytes(transportGuid' 3' 1' 6);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 2' 0' 7);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORBytes(guid1' 2' 1);                  packet.ReadSingle("RunBack Speed"' index);                  packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORBytes(guid1' 0' 3);                  packet.ReadSingle("SwimBack Speed"' index);                  if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    packet.ReadSingle("Turn Speed"' index);                  packet.ReadXORByte(guid1' 5);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadXORByte(guid1' 6);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadSingle("Pitch Speed"' index);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("Int9C"' index' i);                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  if (bitA8)                      packet.ReadInt32("IntA8"' index);                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadXORByte(guid1' 7);                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 4);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits168; ++i)                  {                      packet.ReadSingle("Float16C+5"' index);                      packet.ReadInt32("Int16C+4"' index);                      packet.ReadSingle("Float16C+1"' index);                      packet.ReadInt32("Int16C+0"' index);                      packet.ReadSingle("Float16C+2"' index);                      packet.ReadSingle("Float16C+3"' index);                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index);                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadInt32("Spline Time"' index);                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit134)                          {                              for (var i = 0; i < bits138; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  X = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.X = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 4);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadUInt32("Transport Time"' index);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORBytes(transportGuid' 3' 1' 6);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 2' 0' 7);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORBytes(guid1' 2' 1);                  packet.ReadSingle("RunBack Speed"' index);                  packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORBytes(guid1' 0' 3);                  packet.ReadSingle("SwimBack Speed"' index);                  if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    packet.ReadSingle("Turn Speed"' index);                  packet.ReadXORByte(guid1' 5);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadXORByte(guid1' 6);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadSingle("Pitch Speed"' index);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("Int9C"' index' i);                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  if (bitA8)                      packet.ReadInt32("IntA8"' index);                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadXORByte(guid1' 7);                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 4);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits168; ++i)                  {                      packet.ReadSingle("Float16C+5"' index);                      packet.ReadInt32("Int16C+4"' index);                      packet.ReadSingle("Float16C+1"' index);                      packet.ReadInt32("Int16C+0"' index);                      packet.ReadSingle("Float16C+2"' index);                      packet.ReadSingle("Float16C+3"' index);                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index);                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadInt32("Spline Time"' index);                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit134)                          {                              for (var i = 0; i < bits138; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  X = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.X = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 4);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadUInt32("Transport Time"' index);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORBytes(transportGuid' 3' 1' 6);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 2' 0' 7);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORBytes(guid1' 2' 1);                  packet.ReadSingle("RunBack Speed"' index);                  packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORBytes(guid1' 0' 3);                  packet.ReadSingle("SwimBack Speed"' index);                  if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    packet.ReadSingle("Turn Speed"' index);                  packet.ReadXORByte(guid1' 5);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadXORByte(guid1' 6);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadSingle("Pitch Speed"' index);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("Int9C"' index' i);                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  if (bitA8)                      packet.ReadInt32("IntA8"' index);                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadXORByte(guid1' 7);                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 4);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits168; ++i)                  {                      packet.ReadSingle("Float16C+5"' index);                      packet.ReadInt32("Int16C+4"' index);                      packet.ReadSingle("Float16C+1"' index);                      packet.ReadInt32("Int16C+0"' index);                      packet.ReadSingle("Float16C+2"' index);                      packet.ReadSingle("Float16C+3"' index);                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index);                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadInt32("Spline Time"' index);                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit134)                          {                              for (var i = 0; i < bits138; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  X = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.X = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 4);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadUInt32("Transport Time"' index);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORBytes(transportGuid' 3' 1' 6);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 2' 0' 7);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORBytes(guid1' 2' 1);                  packet.ReadSingle("RunBack Speed"' index);                  packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORBytes(guid1' 0' 3);                  packet.ReadSingle("SwimBack Speed"' index);                  if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    packet.ReadSingle("Turn Speed"' index);                  packet.ReadXORByte(guid1' 5);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadXORByte(guid1' 6);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadSingle("Pitch Speed"' index);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("Int9C"' index' i);                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  if (bitA8)                      packet.ReadInt32("IntA8"' index);                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadXORByte(guid1' 7);                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 4);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits168; ++i)                  {                      packet.ReadSingle("Float16C+5"' index);                      packet.ReadInt32("Int16C+4"' index);                      packet.ReadSingle("Float16C+1"' index);                      packet.ReadInt32("Int16C+0"' index);                      packet.ReadSingle("Float16C+2"' index);                      packet.ReadSingle("Float16C+3"' index);                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index);                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadInt32("Spline Time"' index);                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit134)                          {                              for (var i = 0; i < bits138; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  X = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.X = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 4);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadUInt32("Transport Time"' index);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORBytes(transportGuid' 3' 1' 6);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 2' 0' 7);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORBytes(guid1' 2' 1);                  packet.ReadSingle("RunBack Speed"' index);                  packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORBytes(guid1' 0' 3);                  packet.ReadSingle("SwimBack Speed"' index);                  if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    packet.ReadSingle("Turn Speed"' index);                  packet.ReadXORByte(guid1' 5);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadXORByte(guid1' 6);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadSingle("Pitch Speed"' index);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("Int9C"' index' i);                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  if (bitA8)                      packet.ReadInt32("IntA8"' index);                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadXORByte(guid1' 7);                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 4);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits168; ++i)                  {                      packet.ReadSingle("Float16C+5"' index);                      packet.ReadInt32("Int16C+4"' index);                      packet.ReadSingle("Float16C+1"' index);                      packet.ReadInt32("Int16C+0"' index);                      packet.ReadSingle("Float16C+2"' index);                      packet.ReadSingle("Float16C+3"' index);                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index);                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadInt32("Spline Time"' index);                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit134)                          {                              for (var i = 0; i < bits138; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  X = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.X = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 4);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadUInt32("Transport Time"' index);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORBytes(transportGuid' 3' 1' 6);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 2' 0' 7);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORBytes(guid1' 2' 1);                  packet.ReadSingle("RunBack Speed"' index);                  packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORBytes(guid1' 0' 3);                  packet.ReadSingle("SwimBack Speed"' index);                  if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    packet.ReadSingle("Turn Speed"' index);                  packet.ReadXORByte(guid1' 5);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadXORByte(guid1' 6);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadSingle("Pitch Speed"' index);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("Int9C"' index' i);                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  if (bitA8)                      packet.ReadInt32("IntA8"' index);                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadXORByte(guid1' 7);                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 4);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits168; ++i)                  {                      packet.ReadSingle("Float16C+5"' index);                      packet.ReadInt32("Int16C+4"' index);                      packet.ReadSingle("Float16C+1"' index);                      packet.ReadInt32("Int16C+0"' index);                      packet.ReadSingle("Float16C+2"' index);                      packet.ReadSingle("Float16C+3"' index);                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index);                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadInt32("Spline Time"' index);                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit134)                          {                              for (var i = 0; i < bits138; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  X = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.X = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 4);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadUInt32("Transport Time"' index);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORBytes(transportGuid' 3' 1' 6);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 2' 0' 7);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORBytes(guid1' 2' 1);                  packet.ReadSingle("RunBack Speed"' index);                  packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORBytes(guid1' 0' 3);                  packet.ReadSingle("SwimBack Speed"' index);                  if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    packet.ReadSingle("Turn Speed"' index);                  packet.ReadXORByte(guid1' 5);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadXORByte(guid1' 6);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadSingle("Pitch Speed"' index);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("Int9C"' index' i);                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  if (bitA8)                      packet.ReadInt32("IntA8"' index);                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadXORByte(guid1' 7);                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 4);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits168; ++i)                  {                      packet.ReadSingle("Float16C+5"' index);                      packet.ReadInt32("Int16C+4"' index);                      packet.ReadSingle("Float16C+1"' index);                      packet.ReadInt32("Int16C+0"' index);                      packet.ReadSingle("Float16C+2"' index);                      packet.ReadSingle("Float16C+3"' index);                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index);                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadInt32("Spline Time"' index);                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit134)                          {                              for (var i = 0; i < bits138; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  X = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.X = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 4);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadUInt32("Transport Time"' index);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORBytes(transportGuid' 3' 1' 6);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 2' 0' 7);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORBytes(guid1' 2' 1);                  packet.ReadSingle("RunBack Speed"' index);                  packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORBytes(guid1' 0' 3);                  packet.ReadSingle("SwimBack Speed"' index);                  if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    packet.ReadSingle("Turn Speed"' index);                  packet.ReadXORByte(guid1' 5);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadXORByte(guid1' 6);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadSingle("Pitch Speed"' index);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("Int9C"' index' i);                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  if (bitA8)                      packet.ReadInt32("IntA8"' index);                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadXORByte(guid1' 7);                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 4);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits168; ++i)                  {                      packet.ReadSingle("Float16C+5"' index);                      packet.ReadInt32("Int16C+4"' index);                      packet.ReadSingle("Float16C+1"' index);                      packet.ReadInt32("Int16C+0"' index);                      packet.ReadSingle("Float16C+2"' index);                      packet.ReadSingle("Float16C+3"' index);                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index);                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadInt32("Spline Time"' index);                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit134)                          {                              for (var i = 0; i < bits138; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  X = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.X = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 4);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadUInt32("Transport Time"' index);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORBytes(transportGuid' 3' 1' 6);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 2' 0' 7);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORBytes(guid1' 2' 1);                  packet.ReadSingle("RunBack Speed"' index);                  packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORBytes(guid1' 0' 3);                  packet.ReadSingle("SwimBack Speed"' index);                  if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    packet.ReadSingle("Turn Speed"' index);                  packet.ReadXORByte(guid1' 5);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadXORByte(guid1' 6);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadSingle("Pitch Speed"' index);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("Int9C"' index' i);                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  if (bitA8)                      packet.ReadInt32("IntA8"' index);                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadXORByte(guid1' 7);                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 4);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits168; ++i)                  {                      packet.ReadSingle("Float16C+5"' index);                      packet.ReadInt32("Int16C+4"' index);                      packet.ReadSingle("Float16C+1"' index);                      packet.ReadInt32("Int16C+0"' index);                      packet.ReadSingle("Float16C+2"' index);                      packet.ReadSingle("Float16C+3"' index);                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index);                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadInt32("Spline Time"' index);                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit134)                          {                              for (var i = 0; i < bits138; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  X = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.X = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 4);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadUInt32("Transport Time"' index);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORBytes(transportGuid' 3' 1' 6);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 2' 0' 7);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORBytes(guid1' 2' 1);                  packet.ReadSingle("RunBack Speed"' index);                  packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORBytes(guid1' 0' 3);                  packet.ReadSingle("SwimBack Speed"' index);                  if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    packet.ReadSingle("Turn Speed"' index);                  packet.ReadXORByte(guid1' 5);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadXORByte(guid1' 6);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadSingle("Pitch Speed"' index);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("Int9C"' index' i);                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  if (bitA8)                      packet.ReadInt32("IntA8"' index);                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadXORByte(guid1' 7);                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 4);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits168; ++i)                  {                      packet.ReadSingle("Float16C+5"' index);                      packet.ReadInt32("Int16C+4"' index);                      packet.ReadSingle("Float16C+1"' index);                      packet.ReadInt32("Int16C+0"' index);                      packet.ReadSingle("Float16C+2"' index);                      packet.ReadSingle("Float16C+3"' index);                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index);                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadInt32("Spline Time"' index);                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit134)                          {                              for (var i = 0; i < bits138; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  X = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.X = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 4);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadUInt32("Transport Time"' index);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORBytes(transportGuid' 3' 1' 6);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 2' 0' 7);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORBytes(guid1' 2' 1);                  packet.ReadSingle("RunBack Speed"' index);                  packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORBytes(guid1' 0' 3);                  packet.ReadSingle("SwimBack Speed"' index);                  if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    packet.ReadSingle("Turn Speed"' index);                  packet.ReadXORByte(guid1' 5);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadXORByte(guid1' 6);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadSingle("Pitch Speed"' index);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("Int9C"' index' i);                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  if (bitA8)                      packet.ReadInt32("IntA8"' index);                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadXORByte(guid1' 7);                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 4);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living)              {                  if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits168; ++i)                  {                      packet.ReadSingle("Float16C+5"' index);                      packet.ReadInt32("Int16C+4"' index);                      packet.ReadSingle("Float16C+1"' index);                      packet.ReadInt32("Int16C+0"' index);                      packet.ReadSingle("Float16C+2"' index);                      packet.ReadSingle("Float16C+3"' index);                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index);                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadInt32("Spline Time"' index);                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            if (bit134)                          {                              for (var i = 0; i < bits138; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  X = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.X = packet.ReadSingle();                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 4);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadUInt32("Transport Time"' index);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORBytes(transportGuid' 3' 1' 6);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 2' 0' 7);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORBytes(guid1' 2' 1);                  packet.ReadSingle("RunBack Speed"' index);                  packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORBytes(guid1' 0' 3);                  packet.ReadSingle("SwimBack Speed"' index);                  if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                      packet.ReadSingle("Fall Start Velocity"' index);                      packet.ReadUInt32("Time Fallen"' index);                  }                    packet.ReadSingle("Turn Speed"' index);                  packet.ReadXORByte(guid1' 5);                  moveInfo.Position.Z = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadXORByte(guid1' 6);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadSingle("Pitch Speed"' index);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("Int9C"' index' i);                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  if (bitA8)                      packet.ReadInt32("IntA8"' index);                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadXORByte(guid1' 7);                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 4);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isSceneObject)              {                  if (bit318)                      packet.ReadInt16("Short318"' index);                    for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits34C_0[i]; ++j)                      {                          packet.ReadXORBytes(guid34C_4[i][j]' 0' 2);                          packet.ReadInt32("Int34C+4+8"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 5' 7);                          packet.ReadInt32("Int34C+4+18"' index' i' j);                            for (var k = 0; k < bits34C_4_84[i][j]; ++k)                          {                              if (bit34C_4_88_C[i][j][k])                                  packet.ReadInt32("int34C+4+88+C"' index' i' j' k);                                if (bit34C_4_88_8[i][j][k])                                  packet.ReadInt32("int34C+4+88+8"' index' i' j' k);                                if (bit34C_4_88_10[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+88+10"' index' i' j' k);                                packet.ReadInt32("int34C+4+88+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+88+4"' index' i' j' k);                          }                            packet.ReadInt32("int34C+4+28"' index' i' j);                            for (var k = 0; k < bits34C_4_94[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+98+0"' index' i' j' k);                              packet.ReadInt32("int34C+4+98+4"' index' i' j' k);                          }                            packet.ReadBytes("Bytes34C+4+31"' (int)bits34C_4_31[i][j]' index' i' j);                          packet.ReadXORByte(guid34C_4[i][j]' 6);                            for (var k = 0; k < bits34C_4_74[i][j]; ++k)                          {                              packet.ReadInt32("int34C+4+78+0"' index' i' j' k);                              packet.ReadByte("byte34C+4+78+8"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+3"' index' i' j' k);                              packet.ReadInt16("short34C+4+78+2"' index' i' j' k);                              if (bit34C_4_78_9[i][j][k] != 9)                                  packet.ReadByte("byte34C+4+78+9"' index' i' j' k);                          }                            if (bit34C_4_2E[i][j])                              packet.ReadInt16("short34C+4+2E"' index' i' j);                            packet.ReadXORByte(guid34C_4[i][j]' 4);                          packet.ReadInt32("int34C+4+24"' index' i' j);                          packet.ReadXORBytes(guid34C_4[i][j]' 1' 3);                          packet.ReadInt16("short34C+4+16"' index' i' j);                          packet.ReadInt32("int34C+4+C"' index' i' j);                          packet.ReadInt32("int34C+4+10"' index' i' j);                            if (!bit34C_4_30[i][j])                              packet.ReadByte("byte34C+4+30"' index' i' j);                            packet.ReadInt32("int34C+4+20"' index' i' j);                          packet.ReadInt32("int34C+4+1C"' index' i' j);                          packet.ReadInt16("short34C+4+14"' index' i' j);                          packet.ReadInt16("short34C+4+2C"' index' i' j);                          packet.WriteGuid("Guid 34C_4"' guid34C_4[i][j]);                      }                        if (!bit34C_4[i])                          packet.ReadByte("byte34C-4"' index' i);                        packet.ReadXORBytes(guid310[i]' 6' 3' 7);                      packet.ReadInt32("int34C-12"' index' i);                      packet.ReadXORBytes(guid310[i]' 5' 1' 4' 0);                      packet.ReadByte("byte34C+16"' index' i);                        if (bit34C_8[i])                          packet.ReadInt32("int34C-8"' index' i);                        packet.ReadXORByte(guid310[i]' 2);                      packet.WriteGuid("Guid34C-20"' guid310[i]' index' i);                  }                    packet.ParseBitStream(CreatorGUID' 2' 5' 4' 7' 3' 1' 0' 6);                  packet.WriteGuid("Creator GUID"' CreatorGUID);                    if (bit329)                      packet.ReadByte("byte329"' index);                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadByte("byte388+4+4"' index' i' j);                          packet.ReadByte("byte388+4+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                  }                    if (bit320)                      packet.ReadInt32("int320"' index);                  if (bit31A)                      packet.ReadInt16("short31A"' index);                    packet.ReadInt32("int31C"' index);                  if (bit324)                      packet.ReadInt32("int324"' index);                  if (bit328)                      packet.ReadByte("byte328"' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.ReadUInt32("GO Transport Time"' index);                  packet.ReadXORByte(goTransportGuid' 7);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 0);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORByte(goTransportGuid' 3);                  packet.ReadSByte("GO Transport Seat"' index);                  packet.ReadXORByte(goTransportGuid' 1);                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  moveInfo.TransportOffset.O = packet.ReadSingle();                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    moveInfo.TransportOffset.X = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 2' 4' 5' 6);                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.ReadUInt32("GO Transport Time"' index);                  packet.ReadXORByte(goTransportGuid' 7);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 0);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORByte(goTransportGuid' 3);                  packet.ReadSByte("GO Transport Seat"' index);                  packet.ReadXORByte(goTransportGuid' 1);                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  moveInfo.TransportOffset.O = packet.ReadSingle();                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    moveInfo.TransportOffset.X = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 2' 4' 5' 6);                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.ReadUInt32("GO Transport Time"' index);                  packet.ReadXORByte(goTransportGuid' 7);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 0);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORByte(goTransportGuid' 3);                  packet.ReadSByte("GO Transport Seat"' index);                  packet.ReadXORByte(goTransportGuid' 1);                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  moveInfo.TransportOffset.O = packet.ReadSingle();                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    moveInfo.TransportOffset.X = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 2' 4' 5' 6);                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.ReadUInt32("GO Transport Time"' index);                  packet.ReadXORByte(goTransportGuid' 7);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 0);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORByte(goTransportGuid' 3);                  packet.ReadSByte("GO Transport Seat"' index);                  packet.ReadXORByte(goTransportGuid' 1);                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  moveInfo.TransportOffset.O = packet.ReadSingle();                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    moveInfo.TransportOffset.X = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 2' 4' 5' 6);                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.ReadUInt32("GO Transport Time"' index);                  packet.ReadXORByte(goTransportGuid' 7);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 0);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORByte(goTransportGuid' 3);                  packet.ReadSByte("GO Transport Seat"' index);                  packet.ReadXORByte(goTransportGuid' 1);                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  moveInfo.TransportOffset.O = packet.ReadSingle();                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    moveInfo.TransportOffset.X = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 2' 4' 5' 6);                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.ReadUInt32("GO Transport Time"' index);                  packet.ReadXORByte(goTransportGuid' 7);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 0);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORByte(goTransportGuid' 3);                  packet.ReadSByte("GO Transport Seat"' index);                  packet.ReadXORByte(goTransportGuid' 1);                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  moveInfo.TransportOffset.O = packet.ReadSingle();                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    moveInfo.TransportOffset.X = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 2' 4' 5' 6);                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 7' 1' 4' 6' 0' 2' 5' 3);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 7' 1' 4' 6' 0' 2' 5' 3);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 7' 1' 4' 6' 0' 2' 5' 3);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 7' 1' 4' 6' 0' 2' 5' 3);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 7' 1' 4' 6' 0' 2' 5' 3);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 7' 1' 4' 6' 0' 2' 5' 3);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(2' 4' 6' 3' 1' 5' 7' 0);                  packet.ParseBitStream(facingTargetGuid' 1' 3' 6' 7' 2' 4' 5' 0);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(2' 4' 6' 3' 1' 5' 7' 0);                  packet.ParseBitStream(facingTargetGuid' 1' 3' 6' 7' 2' 4' 5' 0);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(2' 4' 6' 3' 1' 5' 7' 0);                  packet.ParseBitStream(facingTargetGuid' 1' 3' 6' 7' 2' 4' 5' 0);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(2' 4' 6' 3' 1' 5' 7' 0);                  packet.ParseBitStream(facingTargetGuid' 1' 3' 6' 7' 2' 4' 5' 0);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(2' 4' 6' 3' 1' 5' 7' 0);                  packet.ParseBitStream(facingTargetGuid' 1' 3' 6' 7' 2' 4' 5' 0);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(2' 4' 6' 3' 1' 5' 7' 0);                  packet.ParseBitStream(facingTargetGuid' 1' 3' 6' 7' 2' 4' 5' 0);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(2' 4' 6' 3' 1' 5' 7' 0);                  packet.ParseBitStream(facingTargetGuid' 1' 3' 6' 7' 2' 4' 5' 0);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(2' 4' 6' 3' 1' 5' 7' 0);                  packet.ParseBitStream(facingTargetGuid' 1' 3' 6' 7' 2' 4' 5' 0);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(2' 4' 6' 3' 1' 5' 7' 0);                  packet.ParseBitStream(facingTargetGuid' 1' 3' 6' 7' 2' 4' 5' 0);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(2' 4' 6' 3' 1' 5' 7' 0);                  packet.ParseBitStream(facingTargetGuid' 1' 3' 6' 7' 2' 4' 5' 0);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(2' 4' 6' 3' 1' 5' 7' 0);                  packet.ParseBitStream(facingTargetGuid' 1' 3' 6' 7' 2' 4' 5' 0);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(2' 4' 6' 3' 1' 5' 7' 0);                  packet.ParseBitStream(facingTargetGuid' 1' 3' 6' 7' 2' 4' 5' 0);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (living && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(2' 4' 6' 3' 1' 5' 7' 0);                  packet.ParseBitStream(facingTargetGuid' 1' 3' 6' 7' 2' 4' 5' 0);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.StartBitStream(guid' 0' 1' 6' 2' 5' 7' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.StartBitStream(guid' 0' 1' 6' 2' 5' 7' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.StartBitStream(guid' 0' 1' 6' 2' 5' 7' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.StartBitStream(guid' 0' 1' 6' 2' 5' 7' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.StartBitStream(guid' 0' 1' 6' 2' 5' 7' 3);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 2' 5' 0' 3' 6' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 2' 5' 0' 3' 6' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 2' 5' 0' 3' 6' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 2' 5' 0' 3' 6' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 2' 5' 0' 3' 6' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 2' 5' 0' 3' 6' 4);
Magic Number,WowPacketParserModule.V5_3_0_16981.Parsers,WorldStateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\WorldStateHandler.cs,HandleInitWorldStates,The following statement contains a magic number: var numFields = packet.ReadBits("Field Count"' 21);
Missing Default,WowPacketParserModule.V5_3_0_16981.Parsers,TradeHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\TradeHandler.cs,HandleTradeStatus,The following switch statement is missing a default case: switch (status)              {                  case TradeStatus530.BeginTrade:                      var guid = packet.StartBitStream(0' 3' 2' 4' 1' 6' 7' 5);                      packet.ParseBitStream(guid' 5' 7' 3' 6' 4' 2' 0' 1);                      packet.WriteGuid("GUID"' guid);                      break;                  case TradeStatus530.CloseWindow:                      packet.ReadBit("Unk Bit");                      packet.ReadInt32("Unk Int32");                      packet.ReadInt32("Unk Int32");                      break;                  case TradeStatus530.TradeCurrency:                  case TradeStatus530.CurrencyNotTradable:                      packet.ReadInt32("Unk Int32 1");                      packet.ReadInt32("Unk Int32 2");                      break;                  case TradeStatus530.NotEligible:                  case TradeStatus530.OnlyConjured:                      packet.ReadByte("Unk Byte");                      break;                  case TradeStatus530.OpenWindow:                      packet.ReadInt32("Trade Id");                      break;              }
Missing Default,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,HandleUpdateObject,The following switch statement is missing a default case: switch (typeString)                  {                      case "Values":                      {                          var guid = packet.ReadPackedGuid("GUID"' i);                            WoWObject obj;                          var updates = CoreParsers.UpdateHandler.ReadValuesUpdateBlock(packet' guid.GetObjectType()' i' false);                            if (Storage.Objects.TryGetValue(guid' out obj))                          {                              if (obj.ChangedUpdateFieldsList == null)                                  obj.ChangedUpdateFieldsList = new List<Dictionary<int' UpdateField>>();                              obj.ChangedUpdateFieldsList.Add(updates);                          }                            break;                      }                      case "CreateObject1":                      case "CreateObject2": // Might != CreateObject1 on Cata                      {                          var guid = packet.ReadPackedGuid("GUID"' i);                          ReadCreateObjectBlock(packet' guid' map' i);                          break;                      }                      case "DestroyObjects":                      {                          CoreParsers.UpdateHandler.ReadObjectsBlock(packet' i);                          break;                      }                  }
Missing Default,WowPacketParserModule.V5_3_0_16981.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_3_0_16981\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following switch statement is missing a default case: switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }
