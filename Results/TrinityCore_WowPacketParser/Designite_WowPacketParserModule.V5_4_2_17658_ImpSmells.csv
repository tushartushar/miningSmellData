Implementation smell,Namespace,Class,File,Method,Description
Long Method,WowPacketParserModule.V5_4_2_17658.Hotfix,HotfixSerializer<T>,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Hotfix\HotfixSerializer.cs,GenerateDeserializer,The method has 129 lines of code.
Long Method,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The method has 103 lines of code.
Long Method,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The method has 117 lines of code.
Long Method,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The method has 108 lines of code.
Long Method,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The method has 142 lines of code.
Long Method,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The method has 101 lines of code.
Long Method,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The method has 108 lines of code.
Long Method,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The method has 129 lines of code.
Long Method,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The method has 196 lines of code.
Long Method,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The method has 250 lines of code.
Long Method,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The method has 287 lines of code.
Long Method,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The method has 668 lines of code.
Long Method,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The method has 111 lines of code.
Complex Method,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleActionButtons,Cyclomatic complexity of the method is 21
Complex Method,WowPacketParserModule.V5_4_2_17658.Parsers,AddonHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AddonHandler.cs,HandleServerAddonsList,Cyclomatic complexity of the method is 9
Complex Method,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,Cyclomatic complexity of the method is 12
Complex Method,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,Cyclomatic complexity of the method is 18
Complex Method,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,Cyclomatic complexity of the method is 8
Complex Method,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,Cyclomatic complexity of the method is 16
Complex Method,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,Cyclomatic complexity of the method is 22
Complex Method,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,Cyclomatic complexity of the method is 17
Complex Method,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,Cyclomatic complexity of the method is 16
Complex Method,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossip,Cyclomatic complexity of the method is 9
Complex Method,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,Cyclomatic complexity of the method is 10
Complex Method,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleAuthResponse,Cyclomatic complexity of the method is 14
Complex Method,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,Cyclomatic complexity of the method is 12
Complex Method,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,Cyclomatic complexity of the method is 30
Complex Method,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,Cyclomatic complexity of the method is 29
Complex Method,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,Cyclomatic complexity of the method is 32
Complex Method,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,Cyclomatic complexity of the method is 107
Complex Method,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,Cyclomatic complexity of the method is 16
Complex Method,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,Cyclomatic complexity of the method is 10
Complex Method,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MailHandler.cs,HandleMailListResult,Cyclomatic complexity of the method is 11
Long Statement,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The length of the statement  "                    PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 }; " is 145.
Long Statement,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossip,The length of the statement  "                Storage.GossipMenuOptionActions.Add(new GossipMenuOptionAction { MenuId = lastGossipOption.MenuId' OptionIndex = lastGossipOption.OptionIndex' ActionMenuId = gossip.Entry }' packet.TimeSpan); " is 191.
Long Statement,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleGossipPoi,The length of the statement  "                Storage.GossipMenuOptionActions.Add(new GossipMenuOptionAction { MenuId = lastGossipOption.MenuId' OptionIndex = lastGossipOption.OptionIndex' ActionPoiId = gossipPOI.ID }' packet.TimeSpan); " is 190.
Long Statement,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcTextUpdate,The length of the statement  "            Packet pkt = new Packet(data' packet.Opcode' packet.Time' packet.Direction' packet.Number' packet.Writer' packet.FileName); " is 123.
Long Statement,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleServerTrainerList,The length of the statement  "                Storage.GossipMenuOptionTrainers.Add(new GossipMenuOptionTrainer { MenuId = lastGossipOption.MenuId' OptionIndex = lastGossipOption.OptionIndex' TrainerId = trainer.Id }' packet.TimeSpan); " is 188.
Long Statement,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleServerTrainerList,The length of the statement  "                Storage.CreatureDefaultTrainers.Add(new CreatureDefaultTrainer { CreatureId = lastGossipOption.Guid.GetEntry()' TrainerId = trainer.Id }' packet.TimeSpan); " is 155.
Long Statement,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleDBReply,The length of the statement  "            var db2File = new Packet(data' packet.Opcode' packet.Time' packet.Direction' packet.Number' packet.Writer' packet.FileName); " is 124.
Long Statement,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadCreateObjectBlock,The length of the statement  "                CoreParsers.UpdateHandler.ProcessExistingObject(ref existObj' obj' guid); // can't do "ref Storage.Objects[guid].Item1 directly " is 127.
Complex Conditional,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The conditional expression  "moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature"  is complex.
Complex Conditional,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The conditional expression  "isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget"  is complex.
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: var counter = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: var accountId = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: accountId[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: counter[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: accountId[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadBits("Flags"' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: accountId[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: counter[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: counter[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: counter[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: counter[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: counter[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: accountId[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: accountId[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: accountId[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(accountId' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(counter' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(counter' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(counter' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(counter' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(accountId' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(accountId' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(accountId' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(counter' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(accountId' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(counter' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(accountId' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 3' 6' 1' 5' 4' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 3' 6' 1' 5' 4' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 3' 6' 1' 5' 4' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 3' 6' 1' 5' 4' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 3' 6' 1' 5' 4' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 3' 6' 1' 5' 4' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: var bits10 = packet.ReadBits("Achievement count"' 20);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 1' 6' 4' 7' 2' 5' 3' 0);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 1' 6' 4' 7' 2' 5' 3' 0);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 1' 6' 4' 7' 2' 5' 3' 0);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 1' 6' 4' 7' 2' 5' 3' 0);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 1' 6' 4' 7' 2' 5' 3' 0);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 1' 6' 4' 7' 2' 5' 3' 0);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 1' 6' 4' 7' 2' 5' 3' 0);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: var bits20 = packet.ReadBits(19);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][1] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][4] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  guid2[i][3] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][1] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][4] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  guid2[i][3] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][1] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][4] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  guid2[i][3] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][1] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][4] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  guid2[i][3] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][1] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][4] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  guid2[i][3] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][1] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][4] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  guid2[i][3] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][1] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][4] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  guid2[i][3] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][1] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][4] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  guid2[i][3] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][1] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][4] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  guid2[i][3] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][1] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][4] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  guid2[i][3] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][1] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][4] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  guid2[i][3] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][1] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][4] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  guid2[i][3] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][1] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][4] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  guid2[i][3] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][1] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][4] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  guid2[i][3] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    counter[i][1] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][4] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  guid2[i][3] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 6);                    packet.ReadUInt32("Criteria Id"' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 6);                    packet.ReadUInt32("Criteria Id"' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 6);                    packet.ReadUInt32("Criteria Id"' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 6);                    packet.ReadUInt32("Criteria Id"' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 6);                    packet.ReadUInt32("Criteria Id"' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 6);                    packet.ReadUInt32("Criteria Id"' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 6);                    packet.ReadUInt32("Criteria Id"' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 6);                    packet.ReadUInt32("Criteria Id"' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 6);                    packet.ReadUInt32("Criteria Id"' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 6);                    packet.ReadUInt32("Criteria Id"' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 6);                    packet.ReadUInt32("Criteria Id"' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(counter[i]' 1);                    packet.ReadUInt32("Criteria Timer 1"' i);                    packet.ReadXORByte(guid2[i]' 3);                    packet.ReadUInt32("Criteria Timer 2"' i);                    packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 6);                    packet.ReadUInt32("Criteria Id"' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.WriteGuid("Criteria GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadInt32<AchievementId>("Achievement Id");                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 3);                    packet.ReadPackedTime("Time"' i);                    packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 4);                    packet.WriteGuid("Criteria GUID"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadInt32<AchievementId>("Achievement Id");                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 3);                    packet.ReadPackedTime("Time"' i);                    packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 4);                    packet.WriteGuid("Criteria GUID"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadInt32<AchievementId>("Achievement Id");                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 3);                    packet.ReadPackedTime("Time"' i);                    packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 4);                    packet.WriteGuid("Criteria GUID"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadInt32<AchievementId>("Achievement Id");                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 3);                    packet.ReadPackedTime("Time"' i);                    packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 4);                    packet.WriteGuid("Criteria GUID"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadInt32<AchievementId>("Achievement Id");                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 3);                    packet.ReadPackedTime("Time"' i);                    packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 4);                    packet.WriteGuid("Criteria GUID"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadInt32<AchievementId>("Achievement Id");                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 3);                    packet.ReadPackedTime("Time"' i);                    packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 4);                    packet.WriteGuid("Criteria GUID"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: var count = packet.ReadBits("Criteria count"' 19);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  counter[i] = new byte[8];                  accountId[i] = new byte[8];                    accountId[i][6] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][1] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  accountId[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  counter[i] = new byte[8];                  accountId[i] = new byte[8];                    accountId[i][6] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][1] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  accountId[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  counter[i] = new byte[8];                  accountId[i] = new byte[8];                    accountId[i][6] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][1] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  accountId[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  counter[i] = new byte[8];                  accountId[i] = new byte[8];                    accountId[i][6] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][1] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  accountId[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  counter[i] = new byte[8];                  accountId[i] = new byte[8];                    accountId[i][6] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][1] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  accountId[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  counter[i] = new byte[8];                  accountId[i] = new byte[8];                    accountId[i][6] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][1] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  accountId[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  counter[i] = new byte[8];                  accountId[i] = new byte[8];                    accountId[i][6] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][1] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  accountId[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  counter[i] = new byte[8];                  accountId[i] = new byte[8];                    accountId[i][6] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][1] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  accountId[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  counter[i] = new byte[8];                  accountId[i] = new byte[8];                    accountId[i][6] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][1] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  accountId[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  counter[i] = new byte[8];                  accountId[i] = new byte[8];                    accountId[i][6] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][1] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  accountId[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  counter[i] = new byte[8];                  accountId[i] = new byte[8];                    accountId[i][6] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][1] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  accountId[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  counter[i] = new byte[8];                  accountId[i] = new byte[8];                    accountId[i][6] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][1] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  accountId[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  counter[i] = new byte[8];                  accountId[i] = new byte[8];                    accountId[i][6] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][1] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  accountId[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  counter[i] = new byte[8];                  accountId[i] = new byte[8];                    accountId[i][6] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][1] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  accountId[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  counter[i] = new byte[8];                  accountId[i] = new byte[8];                    accountId[i][6] = packet.ReadBit();                    flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                    counter[i][1] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  accountId[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 3);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Criteria ID"' i);                  packet.ReadUInt32("Timer 1"' i);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 0);                    packet.ReadUInt32("Timer 2"' i);                    packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(accountId[i]' 3);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.AddValue("Account"' i' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 3);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Criteria ID"' i);                  packet.ReadUInt32("Timer 1"' i);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 0);                    packet.ReadUInt32("Timer 2"' i);                    packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(accountId[i]' 3);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.AddValue("Account"' i' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 3);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Criteria ID"' i);                  packet.ReadUInt32("Timer 1"' i);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 0);                    packet.ReadUInt32("Timer 2"' i);                    packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(accountId[i]' 3);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.AddValue("Account"' i' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 3);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Criteria ID"' i);                  packet.ReadUInt32("Timer 1"' i);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 0);                    packet.ReadUInt32("Timer 2"' i);                    packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(accountId[i]' 3);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.AddValue("Account"' i' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 3);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Criteria ID"' i);                  packet.ReadUInt32("Timer 1"' i);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 0);                    packet.ReadUInt32("Timer 2"' i);                    packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(accountId[i]' 3);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.AddValue("Account"' i' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 3);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Criteria ID"' i);                  packet.ReadUInt32("Timer 1"' i);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 0);                    packet.ReadUInt32("Timer 2"' i);                    packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(accountId[i]' 3);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.AddValue("Account"' i' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 3);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Criteria ID"' i);                  packet.ReadUInt32("Timer 1"' i);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 0);                    packet.ReadUInt32("Timer 2"' i);                    packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(accountId[i]' 3);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.AddValue("Account"' i' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 3);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Criteria ID"' i);                  packet.ReadUInt32("Timer 1"' i);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 0);                    packet.ReadUInt32("Timer 2"' i);                    packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(accountId[i]' 3);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.AddValue("Account"' i' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 3);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Criteria ID"' i);                  packet.ReadUInt32("Timer 1"' i);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 0);                    packet.ReadUInt32("Timer 2"' i);                    packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(accountId[i]' 3);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.AddValue("Account"' i' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 3);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Criteria ID"' i);                  packet.ReadUInt32("Timer 1"' i);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 0);                    packet.ReadUInt32("Timer 2"' i);                    packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(accountId[i]' 3);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.AddValue("Account"' i' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 3);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Criteria ID"' i);                  packet.ReadUInt32("Timer 1"' i);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 0);                    packet.ReadUInt32("Timer 2"' i);                    packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(accountId[i]' 3);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.AddValue("Account"' i' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AchievementHandler.cs,HandleAllAchievementCriteriaDataAccount,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 3);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Criteria ID"' i);                  packet.ReadUInt32("Timer 1"' i);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 0);                    packet.ReadUInt32("Timer 2"' i);                    packet.ReadXORByte(counter[i]' 5);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(accountId[i]' 3);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(counter[i]' 0)' i);                  packet.AddValue("Account"' i' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AccountDataHandler.cs,HandleAccountDataTimes,The following statement contains a magic number: for (var i = 0; i < 8; ++i)              {                  packet.ReadTime("[" + (AccountDataType)i + "]" + " Time");              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: const int buttonCount = 132;
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)              {                  buttons[i] = new byte[8];                  buttons[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)              {                  buttons[i] = new byte[8];                  buttons[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleSetActionButton,The following statement contains a magic number: var actionId = packet.StartBitStream(3' 5' 2' 1' 0' 6' 4' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleSetActionButton,The following statement contains a magic number: var actionId = packet.StartBitStream(3' 5' 2' 1' 0' 6' 4' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleSetActionButton,The following statement contains a magic number: var actionId = packet.StartBitStream(3' 5' 2' 1' 0' 6' 4' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleSetActionButton,The following statement contains a magic number: var actionId = packet.StartBitStream(3' 5' 2' 1' 0' 6' 4' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleSetActionButton,The following statement contains a magic number: var actionId = packet.StartBitStream(3' 5' 2' 1' 0' 6' 4' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleSetActionButton,The following statement contains a magic number: var actionId = packet.StartBitStream(3' 5' 2' 1' 0' 6' 4' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleSetActionButton,The following statement contains a magic number: packet.ParseBitStream(actionId' 4' 0' 7' 2' 1' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleSetActionButton,The following statement contains a magic number: packet.ParseBitStream(actionId' 4' 0' 7' 2' 1' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleSetActionButton,The following statement contains a magic number: packet.ParseBitStream(actionId' 4' 0' 7' 2' 1' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleSetActionButton,The following statement contains a magic number: packet.ParseBitStream(actionId' 4' 0' 7' 2' 1' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleSetActionButton,The following statement contains a magic number: packet.ParseBitStream(actionId' 4' 0' 7' 2' 1' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ActionBarHandler.cs,HandleSetActionButton,The following statement contains a magic number: packet.ParseBitStream(actionId' 4' 0' 7' 2' 1' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AddonHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AddonHandler.cs,HandleServerAddonsList,The following statement contains a magic number: var bits20 = packet.ReadBits(23);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AddonHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AddonHandler.cs,HandleServerAddonsList,The following statement contains a magic number: for (var i = 0; i < bits20; i++)              {                  usePublicKey[i] = packet.ReadBit();                  bit3[i] = packet.ReadBit();                  bit1[i] = packet.ReadBit();                    if (bit3[i])                      bits0[i] = packet.ReadBits(8);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AddonHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AddonHandler.cs,HandleServerAddonsList,The following statement contains a magic number: var bits10 = (int)packet.ReadBits(18);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AddonHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AddonHandler.cs,HandleServerAddonsList,The following statement contains a magic number: for (var i = 0; i < bits20; i++)              {                  if (usePublicKey[i])                  {                      packet.ReadBytes("Name MD5"' 256);                  }                    if (bit1[i])                  {                      packet.ReadByte("Byte24"' i);                      packet.ReadInt32("Int24"' i);                  }                    if (bit3[i])                      packet.ReadWoWString("Addon URL File"' bits0[i]' i);                    packet.ReadByte("Addon State"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,AddonHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\AddonHandler.cs,HandleServerAddonsList,The following statement contains a magic number: for (var i = 0; i < bits10; i++)              {                  packet.ReadInt32("Int14"' i);                    for (var j = 0; j < 4; j++)                  {                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("Int14"' i' j);                  }                    packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: var bits24 = packet.ReadBits(25);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  guid1[i] = new byte[8];                    packet.ReadBit(); // fake bit                    packet.ReadBit("Unk bit");                    packet.StartBitStream(guid1[i]' 7' 5' 3' 0' 4' 1' 6' 2);                    bit8[i] = !packet.ReadBit();                  bit0C[i] = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  guid1[i] = new byte[8];                    packet.ReadBit(); // fake bit                    packet.ReadBit("Unk bit");                    packet.StartBitStream(guid1[i]' 7' 5' 3' 0' 4' 1' 6' 2);                    bit8[i] = !packet.ReadBit();                  bit0C[i] = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  guid1[i] = new byte[8];                    packet.ReadBit(); // fake bit                    packet.ReadBit("Unk bit");                    packet.StartBitStream(guid1[i]' 7' 5' 3' 0' 4' 1' 6' 2);                    bit8[i] = !packet.ReadBit();                  bit0C[i] = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  guid1[i] = new byte[8];                    packet.ReadBit(); // fake bit                    packet.ReadBit("Unk bit");                    packet.StartBitStream(guid1[i]' 7' 5' 3' 0' 4' 1' 6' 2);                    bit8[i] = !packet.ReadBit();                  bit0C[i] = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  guid1[i] = new byte[8];                    packet.ReadBit(); // fake bit                    packet.ReadBit("Unk bit");                    packet.StartBitStream(guid1[i]' 7' 5' 3' 0' 4' 1' 6' 2);                    bit8[i] = !packet.ReadBit();                  bit0C[i] = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  guid1[i] = new byte[8];                    packet.ReadBit(); // fake bit                    packet.ReadBit("Unk bit");                    packet.StartBitStream(guid1[i]' 7' 5' 3' 0' 4' 1' 6' 2);                    bit8[i] = !packet.ReadBit();                  bit0C[i] = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  guid1[i] = new byte[8];                    packet.ReadBit(); // fake bit                    packet.ReadBit("Unk bit");                    packet.StartBitStream(guid1[i]' 7' 5' 3' 0' 4' 1' 6' 2);                    bit8[i] = !packet.ReadBit();                  bit0C[i] = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: var bits10 = packet.ReadBits(19);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bit88[i] = packet.ReadBit();                  bits2C[i] = packet.ReadBits(7);                  bit80[i] = packet.ReadBit();                    if (bit80[i])                  {                      guid2[i] = new byte[8];                      packet.StartBitStream(guid2[i]' 4' 5' 6' 2' 0' 7' 1' 3);                  }                    bit14[i] = !packet.ReadBit();                    guid3[i] = new byte[8];                    guid3[i][7] = packet.ReadBit();                  guid3[i][0] = packet.ReadBit();                  guid3[i][5] = packet.ReadBit();                  guid3[i][4] = packet.ReadBit();                  bit1A[i] = !packet.ReadBit();                  guid3[i][3] = packet.ReadBit();                  bit89[i] = !packet.ReadBit();                  guid3[i][1] = packet.ReadBit();                  guid3[i][6] = packet.ReadBit();                  guid3[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bit88[i] = packet.ReadBit();                  bits2C[i] = packet.ReadBits(7);                  bit80[i] = packet.ReadBit();                    if (bit80[i])                  {                      guid2[i] = new byte[8];                      packet.StartBitStream(guid2[i]' 4' 5' 6' 2' 0' 7' 1' 3);                  }                    bit14[i] = !packet.ReadBit();                    guid3[i] = new byte[8];                    guid3[i][7] = packet.ReadBit();                  guid3[i][0] = packet.ReadBit();                  guid3[i][5] = packet.ReadBit();                  guid3[i][4] = packet.ReadBit();                  bit1A[i] = !packet.ReadBit();                  guid3[i][3] = packet.ReadBit();                  bit89[i] = !packet.ReadBit();                  guid3[i][1] = packet.ReadBit();                  guid3[i][6] = packet.ReadBit();                  guid3[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bit88[i] = packet.ReadBit();                  bits2C[i] = packet.ReadBits(7);                  bit80[i] = packet.ReadBit();                    if (bit80[i])                  {                      guid2[i] = new byte[8];                      packet.StartBitStream(guid2[i]' 4' 5' 6' 2' 0' 7' 1' 3);                  }                    bit14[i] = !packet.ReadBit();                    guid3[i] = new byte[8];                    guid3[i][7] = packet.ReadBit();                  guid3[i][0] = packet.ReadBit();                  guid3[i][5] = packet.ReadBit();                  guid3[i][4] = packet.ReadBit();                  bit1A[i] = !packet.ReadBit();                  guid3[i][3] = packet.ReadBit();                  bit89[i] = !packet.ReadBit();                  guid3[i][1] = packet.ReadBit();                  guid3[i][6] = packet.ReadBit();                  guid3[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bit88[i] = packet.ReadBit();                  bits2C[i] = packet.ReadBits(7);                  bit80[i] = packet.ReadBit();                    if (bit80[i])                  {                      guid2[i] = new byte[8];                      packet.StartBitStream(guid2[i]' 4' 5' 6' 2' 0' 7' 1' 3);                  }                    bit14[i] = !packet.ReadBit();                    guid3[i] = new byte[8];                    guid3[i][7] = packet.ReadBit();                  guid3[i][0] = packet.ReadBit();                  guid3[i][5] = packet.ReadBit();                  guid3[i][4] = packet.ReadBit();                  bit1A[i] = !packet.ReadBit();                  guid3[i][3] = packet.ReadBit();                  bit89[i] = !packet.ReadBit();                  guid3[i][1] = packet.ReadBit();                  guid3[i][6] = packet.ReadBit();                  guid3[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bit88[i] = packet.ReadBit();                  bits2C[i] = packet.ReadBits(7);                  bit80[i] = packet.ReadBit();                    if (bit80[i])                  {                      guid2[i] = new byte[8];                      packet.StartBitStream(guid2[i]' 4' 5' 6' 2' 0' 7' 1' 3);                  }                    bit14[i] = !packet.ReadBit();                    guid3[i] = new byte[8];                    guid3[i][7] = packet.ReadBit();                  guid3[i][0] = packet.ReadBit();                  guid3[i][5] = packet.ReadBit();                  guid3[i][4] = packet.ReadBit();                  bit1A[i] = !packet.ReadBit();                  guid3[i][3] = packet.ReadBit();                  bit89[i] = !packet.ReadBit();                  guid3[i][1] = packet.ReadBit();                  guid3[i][6] = packet.ReadBit();                  guid3[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bit88[i] = packet.ReadBit();                  bits2C[i] = packet.ReadBits(7);                  bit80[i] = packet.ReadBit();                    if (bit80[i])                  {                      guid2[i] = new byte[8];                      packet.StartBitStream(guid2[i]' 4' 5' 6' 2' 0' 7' 1' 3);                  }                    bit14[i] = !packet.ReadBit();                    guid3[i] = new byte[8];                    guid3[i][7] = packet.ReadBit();                  guid3[i][0] = packet.ReadBit();                  guid3[i][5] = packet.ReadBit();                  guid3[i][4] = packet.ReadBit();                  bit1A[i] = !packet.ReadBit();                  guid3[i][3] = packet.ReadBit();                  bit89[i] = !packet.ReadBit();                  guid3[i][1] = packet.ReadBit();                  guid3[i][6] = packet.ReadBit();                  guid3[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bit88[i] = packet.ReadBit();                  bits2C[i] = packet.ReadBits(7);                  bit80[i] = packet.ReadBit();                    if (bit80[i])                  {                      guid2[i] = new byte[8];                      packet.StartBitStream(guid2[i]' 4' 5' 6' 2' 0' 7' 1' 3);                  }                    bit14[i] = !packet.ReadBit();                    guid3[i] = new byte[8];                    guid3[i][7] = packet.ReadBit();                  guid3[i][0] = packet.ReadBit();                  guid3[i][5] = packet.ReadBit();                  guid3[i][4] = packet.ReadBit();                  bit1A[i] = !packet.ReadBit();                  guid3[i][3] = packet.ReadBit();                  bit89[i] = !packet.ReadBit();                  guid3[i][1] = packet.ReadBit();                  guid3[i][6] = packet.ReadBit();                  guid3[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bit88[i] = packet.ReadBit();                  bits2C[i] = packet.ReadBits(7);                  bit80[i] = packet.ReadBit();                    if (bit80[i])                  {                      guid2[i] = new byte[8];                      packet.StartBitStream(guid2[i]' 4' 5' 6' 2' 0' 7' 1' 3);                  }                    bit14[i] = !packet.ReadBit();                    guid3[i] = new byte[8];                    guid3[i][7] = packet.ReadBit();                  guid3[i][0] = packet.ReadBit();                  guid3[i][5] = packet.ReadBit();                  guid3[i][4] = packet.ReadBit();                  bit1A[i] = !packet.ReadBit();                  guid3[i][3] = packet.ReadBit();                  bit89[i] = !packet.ReadBit();                  guid3[i][1] = packet.ReadBit();                  guid3[i][6] = packet.ReadBit();                  guid3[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bit88[i] = packet.ReadBit();                  bits2C[i] = packet.ReadBits(7);                  bit80[i] = packet.ReadBit();                    if (bit80[i])                  {                      guid2[i] = new byte[8];                      packet.StartBitStream(guid2[i]' 4' 5' 6' 2' 0' 7' 1' 3);                  }                    bit14[i] = !packet.ReadBit();                    guid3[i] = new byte[8];                    guid3[i][7] = packet.ReadBit();                  guid3[i][0] = packet.ReadBit();                  guid3[i][5] = packet.ReadBit();                  guid3[i][4] = packet.ReadBit();                  bit1A[i] = !packet.ReadBit();                  guid3[i][3] = packet.ReadBit();                  bit89[i] = !packet.ReadBit();                  guid3[i][1] = packet.ReadBit();                  guid3[i][6] = packet.ReadBit();                  guid3[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bit88[i] = packet.ReadBit();                  bits2C[i] = packet.ReadBits(7);                  bit80[i] = packet.ReadBit();                    if (bit80[i])                  {                      guid2[i] = new byte[8];                      packet.StartBitStream(guid2[i]' 4' 5' 6' 2' 0' 7' 1' 3);                  }                    bit14[i] = !packet.ReadBit();                    guid3[i] = new byte[8];                    guid3[i][7] = packet.ReadBit();                  guid3[i][0] = packet.ReadBit();                  guid3[i][5] = packet.ReadBit();                  guid3[i][4] = packet.ReadBit();                  bit1A[i] = !packet.ReadBit();                  guid3[i][3] = packet.ReadBit();                  bit89[i] = !packet.ReadBit();                  guid3[i][1] = packet.ReadBit();                  guid3[i][6] = packet.ReadBit();                  guid3[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bit88[i] = packet.ReadBit();                  bits2C[i] = packet.ReadBits(7);                  bit80[i] = packet.ReadBit();                    if (bit80[i])                  {                      guid2[i] = new byte[8];                      packet.StartBitStream(guid2[i]' 4' 5' 6' 2' 0' 7' 1' 3);                  }                    bit14[i] = !packet.ReadBit();                    guid3[i] = new byte[8];                    guid3[i][7] = packet.ReadBit();                  guid3[i][0] = packet.ReadBit();                  guid3[i][5] = packet.ReadBit();                  guid3[i][4] = packet.ReadBit();                  bit1A[i] = !packet.ReadBit();                  guid3[i][3] = packet.ReadBit();                  bit89[i] = !packet.ReadBit();                  guid3[i][1] = packet.ReadBit();                  guid3[i][6] = packet.ReadBit();                  guid3[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bit88[i] = packet.ReadBit();                  bits2C[i] = packet.ReadBits(7);                  bit80[i] = packet.ReadBit();                    if (bit80[i])                  {                      guid2[i] = new byte[8];                      packet.StartBitStream(guid2[i]' 4' 5' 6' 2' 0' 7' 1' 3);                  }                    bit14[i] = !packet.ReadBit();                    guid3[i] = new byte[8];                    guid3[i][7] = packet.ReadBit();                  guid3[i][0] = packet.ReadBit();                  guid3[i][5] = packet.ReadBit();                  guid3[i][4] = packet.ReadBit();                  bit1A[i] = !packet.ReadBit();                  guid3[i][3] = packet.ReadBit();                  bit89[i] = !packet.ReadBit();                  guid3[i][1] = packet.ReadBit();                  guid3[i][6] = packet.ReadBit();                  guid3[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bit88[i] = packet.ReadBit();                  bits2C[i] = packet.ReadBits(7);                  bit80[i] = packet.ReadBit();                    if (bit80[i])                  {                      guid2[i] = new byte[8];                      packet.StartBitStream(guid2[i]' 4' 5' 6' 2' 0' 7' 1' 3);                  }                    bit14[i] = !packet.ReadBit();                    guid3[i] = new byte[8];                    guid3[i][7] = packet.ReadBit();                  guid3[i][0] = packet.ReadBit();                  guid3[i][5] = packet.ReadBit();                  guid3[i][4] = packet.ReadBit();                  bit1A[i] = !packet.ReadBit();                  guid3[i][3] = packet.ReadBit();                  bit89[i] = !packet.ReadBit();                  guid3[i][1] = packet.ReadBit();                  guid3[i][6] = packet.ReadBit();                  guid3[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bit88[i] = packet.ReadBit();                  bits2C[i] = packet.ReadBits(7);                  bit80[i] = packet.ReadBit();                    if (bit80[i])                  {                      guid2[i] = new byte[8];                      packet.StartBitStream(guid2[i]' 4' 5' 6' 2' 0' 7' 1' 3);                  }                    bit14[i] = !packet.ReadBit();                    guid3[i] = new byte[8];                    guid3[i][7] = packet.ReadBit();                  guid3[i][0] = packet.ReadBit();                  guid3[i][5] = packet.ReadBit();                  guid3[i][4] = packet.ReadBit();                  bit1A[i] = !packet.ReadBit();                  guid3[i][3] = packet.ReadBit();                  bit89[i] = !packet.ReadBit();                  guid3[i][1] = packet.ReadBit();                  guid3[i][6] = packet.ReadBit();                  guid3[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bit88[i] = packet.ReadBit();                  bits2C[i] = packet.ReadBits(7);                  bit80[i] = packet.ReadBit();                    if (bit80[i])                  {                      guid2[i] = new byte[8];                      packet.StartBitStream(guid2[i]' 4' 5' 6' 2' 0' 7' 1' 3);                  }                    bit14[i] = !packet.ReadBit();                    guid3[i] = new byte[8];                    guid3[i][7] = packet.ReadBit();                  guid3[i][0] = packet.ReadBit();                  guid3[i][5] = packet.ReadBit();                  guid3[i][4] = packet.ReadBit();                  bit1A[i] = !packet.ReadBit();                  guid3[i][3] = packet.ReadBit();                  bit89[i] = !packet.ReadBit();                  guid3[i][1] = packet.ReadBit();                  guid3[i][6] = packet.ReadBit();                  guid3[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid3[i]' 6);                  packet.ReadXORByte(guid3[i]' 1);                    packet.ReadInt32("IntED"' i);                    if (bit80[i])                  {                      packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 2);                      packet.ReadXORByte(guid2[i]' 0);                      packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 3);                      packet.ReadXORByte(guid2[i]' 4);                        packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 5);                      packet.ReadXORByte(guid2[i]' 1);                        packet.WriteGuid("Guid2D"' guid2[i]' i);                  }                    if (bit14[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadInt32("Entry"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                    packet.ReadXORByte(guid3[i]' 0);                    packet.ReadInt16("IntED"' i);                  packet.ReadInt16("IntED"' i);                    packet.ReadWoWString("Custom Name"' bits2C[i]' i);                    packet.ReadXORByte(guid3[i]' 7);                    if (bit89[i])                      packet.ReadByte("ByteED"' i);                    packet.ReadXORByte(guid3[i]' 2);                  packet.ReadXORByte(guid3[i]' 3);                    if (bit1A[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadXORByte(guid3[i]' 5);                  packet.ReadXORByte(guid3[i]' 4);                    packet.WriteGuid("Guid3"' guid3[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid3[i]' 6);                  packet.ReadXORByte(guid3[i]' 1);                    packet.ReadInt32("IntED"' i);                    if (bit80[i])                  {                      packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 2);                      packet.ReadXORByte(guid2[i]' 0);                      packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 3);                      packet.ReadXORByte(guid2[i]' 4);                        packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 5);                      packet.ReadXORByte(guid2[i]' 1);                        packet.WriteGuid("Guid2D"' guid2[i]' i);                  }                    if (bit14[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadInt32("Entry"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                    packet.ReadXORByte(guid3[i]' 0);                    packet.ReadInt16("IntED"' i);                  packet.ReadInt16("IntED"' i);                    packet.ReadWoWString("Custom Name"' bits2C[i]' i);                    packet.ReadXORByte(guid3[i]' 7);                    if (bit89[i])                      packet.ReadByte("ByteED"' i);                    packet.ReadXORByte(guid3[i]' 2);                  packet.ReadXORByte(guid3[i]' 3);                    if (bit1A[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadXORByte(guid3[i]' 5);                  packet.ReadXORByte(guid3[i]' 4);                    packet.WriteGuid("Guid3"' guid3[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid3[i]' 6);                  packet.ReadXORByte(guid3[i]' 1);                    packet.ReadInt32("IntED"' i);                    if (bit80[i])                  {                      packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 2);                      packet.ReadXORByte(guid2[i]' 0);                      packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 3);                      packet.ReadXORByte(guid2[i]' 4);                        packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 5);                      packet.ReadXORByte(guid2[i]' 1);                        packet.WriteGuid("Guid2D"' guid2[i]' i);                  }                    if (bit14[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadInt32("Entry"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                    packet.ReadXORByte(guid3[i]' 0);                    packet.ReadInt16("IntED"' i);                  packet.ReadInt16("IntED"' i);                    packet.ReadWoWString("Custom Name"' bits2C[i]' i);                    packet.ReadXORByte(guid3[i]' 7);                    if (bit89[i])                      packet.ReadByte("ByteED"' i);                    packet.ReadXORByte(guid3[i]' 2);                  packet.ReadXORByte(guid3[i]' 3);                    if (bit1A[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadXORByte(guid3[i]' 5);                  packet.ReadXORByte(guid3[i]' 4);                    packet.WriteGuid("Guid3"' guid3[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid3[i]' 6);                  packet.ReadXORByte(guid3[i]' 1);                    packet.ReadInt32("IntED"' i);                    if (bit80[i])                  {                      packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 2);                      packet.ReadXORByte(guid2[i]' 0);                      packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 3);                      packet.ReadXORByte(guid2[i]' 4);                        packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 5);                      packet.ReadXORByte(guid2[i]' 1);                        packet.WriteGuid("Guid2D"' guid2[i]' i);                  }                    if (bit14[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadInt32("Entry"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                    packet.ReadXORByte(guid3[i]' 0);                    packet.ReadInt16("IntED"' i);                  packet.ReadInt16("IntED"' i);                    packet.ReadWoWString("Custom Name"' bits2C[i]' i);                    packet.ReadXORByte(guid3[i]' 7);                    if (bit89[i])                      packet.ReadByte("ByteED"' i);                    packet.ReadXORByte(guid3[i]' 2);                  packet.ReadXORByte(guid3[i]' 3);                    if (bit1A[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadXORByte(guid3[i]' 5);                  packet.ReadXORByte(guid3[i]' 4);                    packet.WriteGuid("Guid3"' guid3[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid3[i]' 6);                  packet.ReadXORByte(guid3[i]' 1);                    packet.ReadInt32("IntED"' i);                    if (bit80[i])                  {                      packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 2);                      packet.ReadXORByte(guid2[i]' 0);                      packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 3);                      packet.ReadXORByte(guid2[i]' 4);                        packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 5);                      packet.ReadXORByte(guid2[i]' 1);                        packet.WriteGuid("Guid2D"' guid2[i]' i);                  }                    if (bit14[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadInt32("Entry"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                    packet.ReadXORByte(guid3[i]' 0);                    packet.ReadInt16("IntED"' i);                  packet.ReadInt16("IntED"' i);                    packet.ReadWoWString("Custom Name"' bits2C[i]' i);                    packet.ReadXORByte(guid3[i]' 7);                    if (bit89[i])                      packet.ReadByte("ByteED"' i);                    packet.ReadXORByte(guid3[i]' 2);                  packet.ReadXORByte(guid3[i]' 3);                    if (bit1A[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadXORByte(guid3[i]' 5);                  packet.ReadXORByte(guid3[i]' 4);                    packet.WriteGuid("Guid3"' guid3[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid3[i]' 6);                  packet.ReadXORByte(guid3[i]' 1);                    packet.ReadInt32("IntED"' i);                    if (bit80[i])                  {                      packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 2);                      packet.ReadXORByte(guid2[i]' 0);                      packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 3);                      packet.ReadXORByte(guid2[i]' 4);                        packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 5);                      packet.ReadXORByte(guid2[i]' 1);                        packet.WriteGuid("Guid2D"' guid2[i]' i);                  }                    if (bit14[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadInt32("Entry"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                    packet.ReadXORByte(guid3[i]' 0);                    packet.ReadInt16("IntED"' i);                  packet.ReadInt16("IntED"' i);                    packet.ReadWoWString("Custom Name"' bits2C[i]' i);                    packet.ReadXORByte(guid3[i]' 7);                    if (bit89[i])                      packet.ReadByte("ByteED"' i);                    packet.ReadXORByte(guid3[i]' 2);                  packet.ReadXORByte(guid3[i]' 3);                    if (bit1A[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadXORByte(guid3[i]' 5);                  packet.ReadXORByte(guid3[i]' 4);                    packet.WriteGuid("Guid3"' guid3[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid3[i]' 6);                  packet.ReadXORByte(guid3[i]' 1);                    packet.ReadInt32("IntED"' i);                    if (bit80[i])                  {                      packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 2);                      packet.ReadXORByte(guid2[i]' 0);                      packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 3);                      packet.ReadXORByte(guid2[i]' 4);                        packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 5);                      packet.ReadXORByte(guid2[i]' 1);                        packet.WriteGuid("Guid2D"' guid2[i]' i);                  }                    if (bit14[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadInt32("Entry"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                    packet.ReadXORByte(guid3[i]' 0);                    packet.ReadInt16("IntED"' i);                  packet.ReadInt16("IntED"' i);                    packet.ReadWoWString("Custom Name"' bits2C[i]' i);                    packet.ReadXORByte(guid3[i]' 7);                    if (bit89[i])                      packet.ReadByte("ByteED"' i);                    packet.ReadXORByte(guid3[i]' 2);                  packet.ReadXORByte(guid3[i]' 3);                    if (bit1A[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadXORByte(guid3[i]' 5);                  packet.ReadXORByte(guid3[i]' 4);                    packet.WriteGuid("Guid3"' guid3[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid3[i]' 6);                  packet.ReadXORByte(guid3[i]' 1);                    packet.ReadInt32("IntED"' i);                    if (bit80[i])                  {                      packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 2);                      packet.ReadXORByte(guid2[i]' 0);                      packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 3);                      packet.ReadXORByte(guid2[i]' 4);                        packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 5);                      packet.ReadXORByte(guid2[i]' 1);                        packet.WriteGuid("Guid2D"' guid2[i]' i);                  }                    if (bit14[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadInt32("Entry"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                    packet.ReadXORByte(guid3[i]' 0);                    packet.ReadInt16("IntED"' i);                  packet.ReadInt16("IntED"' i);                    packet.ReadWoWString("Custom Name"' bits2C[i]' i);                    packet.ReadXORByte(guid3[i]' 7);                    if (bit89[i])                      packet.ReadByte("ByteED"' i);                    packet.ReadXORByte(guid3[i]' 2);                  packet.ReadXORByte(guid3[i]' 3);                    if (bit1A[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadXORByte(guid3[i]' 5);                  packet.ReadXORByte(guid3[i]' 4);                    packet.WriteGuid("Guid3"' guid3[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid3[i]' 6);                  packet.ReadXORByte(guid3[i]' 1);                    packet.ReadInt32("IntED"' i);                    if (bit80[i])                  {                      packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 2);                      packet.ReadXORByte(guid2[i]' 0);                      packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 3);                      packet.ReadXORByte(guid2[i]' 4);                        packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 5);                      packet.ReadXORByte(guid2[i]' 1);                        packet.WriteGuid("Guid2D"' guid2[i]' i);                  }                    if (bit14[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadInt32("Entry"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                    packet.ReadXORByte(guid3[i]' 0);                    packet.ReadInt16("IntED"' i);                  packet.ReadInt16("IntED"' i);                    packet.ReadWoWString("Custom Name"' bits2C[i]' i);                    packet.ReadXORByte(guid3[i]' 7);                    if (bit89[i])                      packet.ReadByte("ByteED"' i);                    packet.ReadXORByte(guid3[i]' 2);                  packet.ReadXORByte(guid3[i]' 3);                    if (bit1A[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadXORByte(guid3[i]' 5);                  packet.ReadXORByte(guid3[i]' 4);                    packet.WriteGuid("Guid3"' guid3[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid3[i]' 6);                  packet.ReadXORByte(guid3[i]' 1);                    packet.ReadInt32("IntED"' i);                    if (bit80[i])                  {                      packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 2);                      packet.ReadXORByte(guid2[i]' 0);                      packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 3);                      packet.ReadXORByte(guid2[i]' 4);                        packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 5);                      packet.ReadXORByte(guid2[i]' 1);                        packet.WriteGuid("Guid2D"' guid2[i]' i);                  }                    if (bit14[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadInt32("Entry"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                    packet.ReadXORByte(guid3[i]' 0);                    packet.ReadInt16("IntED"' i);                  packet.ReadInt16("IntED"' i);                    packet.ReadWoWString("Custom Name"' bits2C[i]' i);                    packet.ReadXORByte(guid3[i]' 7);                    if (bit89[i])                      packet.ReadByte("ByteED"' i);                    packet.ReadXORByte(guid3[i]' 2);                  packet.ReadXORByte(guid3[i]' 3);                    if (bit1A[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadXORByte(guid3[i]' 5);                  packet.ReadXORByte(guid3[i]' 4);                    packet.WriteGuid("Guid3"' guid3[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid3[i]' 6);                  packet.ReadXORByte(guid3[i]' 1);                    packet.ReadInt32("IntED"' i);                    if (bit80[i])                  {                      packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 2);                      packet.ReadXORByte(guid2[i]' 0);                      packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 3);                      packet.ReadXORByte(guid2[i]' 4);                        packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 5);                      packet.ReadXORByte(guid2[i]' 1);                        packet.WriteGuid("Guid2D"' guid2[i]' i);                  }                    if (bit14[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadInt32("Entry"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                    packet.ReadXORByte(guid3[i]' 0);                    packet.ReadInt16("IntED"' i);                  packet.ReadInt16("IntED"' i);                    packet.ReadWoWString("Custom Name"' bits2C[i]' i);                    packet.ReadXORByte(guid3[i]' 7);                    if (bit89[i])                      packet.ReadByte("ByteED"' i);                    packet.ReadXORByte(guid3[i]' 2);                  packet.ReadXORByte(guid3[i]' 3);                    if (bit1A[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadXORByte(guid3[i]' 5);                  packet.ReadXORByte(guid3[i]' 4);                    packet.WriteGuid("Guid3"' guid3[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadXORByte(guid3[i]' 6);                  packet.ReadXORByte(guid3[i]' 1);                    packet.ReadInt32("IntED"' i);                    if (bit80[i])                  {                      packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 2);                      packet.ReadXORByte(guid2[i]' 0);                      packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 3);                      packet.ReadXORByte(guid2[i]' 4);                        packet.ReadInt32("IntED"' i);                        packet.ReadXORByte(guid2[i]' 7);                      packet.ReadXORByte(guid2[i]' 5);                      packet.ReadXORByte(guid2[i]' 1);                        packet.WriteGuid("Guid2D"' guid2[i]' i);                  }                    if (bit14[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadInt32("Entry"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                    packet.ReadXORByte(guid3[i]' 0);                    packet.ReadInt16("IntED"' i);                  packet.ReadInt16("IntED"' i);                    packet.ReadWoWString("Custom Name"' bits2C[i]' i);                    packet.ReadXORByte(guid3[i]' 7);                    if (bit89[i])                      packet.ReadByte("ByteED"' i);                    packet.ReadXORByte(guid3[i]' 2);                  packet.ReadXORByte(guid3[i]' 3);                    if (bit1A[i])                      packet.ReadInt16("IntED"' i);                    packet.ReadXORByte(guid3[i]' 5);                  packet.ReadXORByte(guid3[i]' 4);                    packet.WriteGuid("Guid3"' guid3[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  packet.ParseBitStream(guid1[i]' 4' 3' 0' 1' 5' 7' 2' 6);                    if (bit8[i])                      packet.ReadInt32("Int28"' i);                    if (bit0C[i])                      packet.ReadByte("Byte28"' i);                    packet.WriteGuid("Guid1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  packet.ParseBitStream(guid1[i]' 4' 3' 0' 1' 5' 7' 2' 6);                    if (bit8[i])                      packet.ReadInt32("Int28"' i);                    if (bit0C[i])                      packet.ReadByte("Byte28"' i);                    packet.WriteGuid("Guid1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  packet.ParseBitStream(guid1[i]' 4' 3' 0' 1' 5' 7' 2' 6);                    if (bit8[i])                      packet.ReadInt32("Int28"' i);                    if (bit0C[i])                      packet.ReadByte("Byte28"' i);                    packet.WriteGuid("Guid1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  packet.ParseBitStream(guid1[i]' 4' 3' 0' 1' 5' 7' 2' 6);                    if (bit8[i])                      packet.ReadInt32("Int28"' i);                    if (bit0C[i])                      packet.ReadByte("Byte28"' i);                    packet.WriteGuid("Guid1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  packet.ParseBitStream(guid1[i]' 4' 3' 0' 1' 5' 7' 2' 6);                    if (bit8[i])                      packet.ReadInt32("Int28"' i);                    if (bit0C[i])                      packet.ReadByte("Byte28"' i);                    packet.WriteGuid("Guid1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,BattlePetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\BattlePetHandler.cs,HandleBattlePetJournal,The following statement contains a magic number: for (var i = 0; i < bits24; ++i)              {                  packet.ParseBitStream(guid1[i]' 4' 3' 0' 1' 5' 7' 2' 6);                    if (bit8[i])                      packet.ReadInt32("Int28"' i);                    if (bit0C[i])                      packet.ReadByte("Byte28"' i);                    packet.WriteGuid("Guid1"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChannelHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChannelHandler.cs,HandleChannelList,The following statement contains a magic number: packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChannelHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChannelHandler.cs,HandleChannelList,The following statement contains a magic number: var length = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: var count2 = (int)packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: var count1 = (int)packet.ReadBits(16);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][0] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][0] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][0] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][0] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][0] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][0] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][0] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][0] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][0] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][0] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][0] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][0] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][0] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][0] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                    charGuids[c][0] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  guildGuids[c][3] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  charGuids[c][4] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadInt32("Pet Level"' c); // v4+112                  var level = packet.ReadByte("Level"' c);                    packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 3);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                    packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                    packet.ReadXORByte(guildGuids[c]' 7);                    packet.ReadXORByte(charGuids[c]' 0);                    packet.ReadInt32("Pet Family"' c); // v4+116                    packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 5);                    packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Facial Hair"' c); // v4+65                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                    packet.ReadXORByte(guildGuids[c]' 4);                    packet.ReadByte("Skin"' c); // v4+63                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                    packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 1);                    pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                    packet.ReadXORByte(charGuids[c]' 5);                    packet.ReadByte("Face"' c); // v4+62                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadInt32("Pet Level"' c); // v4+112                  var level = packet.ReadByte("Level"' c);                    packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 3);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                    packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                    packet.ReadXORByte(guildGuids[c]' 7);                    packet.ReadXORByte(charGuids[c]' 0);                    packet.ReadInt32("Pet Family"' c); // v4+116                    packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 5);                    packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Facial Hair"' c); // v4+65                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                    packet.ReadXORByte(guildGuids[c]' 4);                    packet.ReadByte("Skin"' c); // v4+63                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                    packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 1);                    pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                    packet.ReadXORByte(charGuids[c]' 5);                    packet.ReadByte("Face"' c); // v4+62                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadInt32("Pet Level"' c); // v4+112                  var level = packet.ReadByte("Level"' c);                    packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 3);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                    packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                    packet.ReadXORByte(guildGuids[c]' 7);                    packet.ReadXORByte(charGuids[c]' 0);                    packet.ReadInt32("Pet Family"' c); // v4+116                    packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 5);                    packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Facial Hair"' c); // v4+65                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                    packet.ReadXORByte(guildGuids[c]' 4);                    packet.ReadByte("Skin"' c); // v4+63                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                    packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 1);                    pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                    packet.ReadXORByte(charGuids[c]' 5);                    packet.ReadByte("Face"' c); // v4+62                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadInt32("Pet Level"' c); // v4+112                  var level = packet.ReadByte("Level"' c);                    packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 3);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                    packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                    packet.ReadXORByte(guildGuids[c]' 7);                    packet.ReadXORByte(charGuids[c]' 0);                    packet.ReadInt32("Pet Family"' c); // v4+116                    packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 5);                    packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Facial Hair"' c); // v4+65                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                    packet.ReadXORByte(guildGuids[c]' 4);                    packet.ReadByte("Skin"' c); // v4+63                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                    packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 1);                    pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                    packet.ReadXORByte(charGuids[c]' 5);                    packet.ReadByte("Face"' c); // v4+62                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadInt32("Pet Level"' c); // v4+112                  var level = packet.ReadByte("Level"' c);                    packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 3);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                    packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                    packet.ReadXORByte(guildGuids[c]' 7);                    packet.ReadXORByte(charGuids[c]' 0);                    packet.ReadInt32("Pet Family"' c); // v4+116                    packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 5);                    packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Facial Hair"' c); // v4+65                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                    packet.ReadXORByte(guildGuids[c]' 4);                    packet.ReadByte("Skin"' c); // v4+63                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                    packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 1);                    pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                    packet.ReadXORByte(charGuids[c]' 5);                    packet.ReadByte("Face"' c); // v4+62                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadInt32("Pet Level"' c); // v4+112                  var level = packet.ReadByte("Level"' c);                    packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 3);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                    packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                    packet.ReadXORByte(guildGuids[c]' 7);                    packet.ReadXORByte(charGuids[c]' 0);                    packet.ReadInt32("Pet Family"' c); // v4+116                    packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 5);                    packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Facial Hair"' c); // v4+65                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                    packet.ReadXORByte(guildGuids[c]' 4);                    packet.ReadByte("Skin"' c); // v4+63                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                    packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 1);                    pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                    packet.ReadXORByte(charGuids[c]' 5);                    packet.ReadByte("Face"' c); // v4+62                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadInt32("Pet Level"' c); // v4+112                  var level = packet.ReadByte("Level"' c);                    packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 3);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                    packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                    packet.ReadXORByte(guildGuids[c]' 7);                    packet.ReadXORByte(charGuids[c]' 0);                    packet.ReadInt32("Pet Family"' c); // v4+116                    packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 5);                    packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Facial Hair"' c); // v4+65                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                    packet.ReadXORByte(guildGuids[c]' 4);                    packet.ReadByte("Skin"' c); // v4+63                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                    packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 1);                    pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                    packet.ReadXORByte(charGuids[c]' 5);                    packet.ReadByte("Face"' c); // v4+62                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadInt32("Pet Level"' c); // v4+112                  var level = packet.ReadByte("Level"' c);                    packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 3);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                    packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                    packet.ReadXORByte(guildGuids[c]' 7);                    packet.ReadXORByte(charGuids[c]' 0);                    packet.ReadInt32("Pet Family"' c); // v4+116                    packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 5);                    packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Facial Hair"' c); // v4+65                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                    packet.ReadXORByte(guildGuids[c]' 4);                    packet.ReadByte("Skin"' c); // v4+63                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                    packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 1);                    pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                    packet.ReadXORByte(charGuids[c]' 5);                    packet.ReadByte("Face"' c); // v4+62                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadInt32("Pet Level"' c); // v4+112                  var level = packet.ReadByte("Level"' c);                    packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 3);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                    packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                    packet.ReadXORByte(guildGuids[c]' 7);                    packet.ReadXORByte(charGuids[c]' 0);                    packet.ReadInt32("Pet Family"' c); // v4+116                    packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 5);                    packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Facial Hair"' c); // v4+65                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                    packet.ReadXORByte(guildGuids[c]' 4);                    packet.ReadByte("Skin"' c); // v4+63                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                    packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 1);                    pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                    packet.ReadXORByte(charGuids[c]' 5);                    packet.ReadByte("Face"' c); // v4+62                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadInt32("Pet Level"' c); // v4+112                  var level = packet.ReadByte("Level"' c);                    packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 3);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                    packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                    packet.ReadXORByte(guildGuids[c]' 7);                    packet.ReadXORByte(charGuids[c]' 0);                    packet.ReadInt32("Pet Family"' c); // v4+116                    packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 5);                    packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Facial Hair"' c); // v4+65                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                    packet.ReadXORByte(guildGuids[c]' 4);                    packet.ReadByte("Skin"' c); // v4+63                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                    packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 1);                    pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                    packet.ReadXORByte(charGuids[c]' 5);                    packet.ReadByte("Face"' c); // v4+62                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadInt32("Pet Level"' c); // v4+112                  var level = packet.ReadByte("Level"' c);                    packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 3);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                    packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                    packet.ReadXORByte(guildGuids[c]' 7);                    packet.ReadXORByte(charGuids[c]' 0);                    packet.ReadInt32("Pet Family"' c); // v4+116                    packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 5);                    packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Facial Hair"' c); // v4+65                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                    packet.ReadXORByte(guildGuids[c]' 4);                    packet.ReadByte("Skin"' c); // v4+63                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                    packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 1);                    pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                    packet.ReadXORByte(charGuids[c]' 5);                    packet.ReadByte("Face"' c); // v4+62                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadInt32("Pet Level"' c); // v4+112                  var level = packet.ReadByte("Level"' c);                    packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 3);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                    packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                    packet.ReadXORByte(guildGuids[c]' 7);                    packet.ReadXORByte(charGuids[c]' 0);                    packet.ReadInt32("Pet Family"' c); // v4+116                    packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 5);                    packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Facial Hair"' c); // v4+65                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                    packet.ReadXORByte(guildGuids[c]' 4);                    packet.ReadByte("Skin"' c); // v4+63                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                    packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 1);                    pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                    packet.ReadXORByte(charGuids[c]' 5);                    packet.ReadByte("Face"' c); // v4+62                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count1; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadInt32("Pet Level"' c); // v4+112                  var level = packet.ReadByte("Level"' c);                    packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 3);                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadInt32("Item DisplayID"' c' j);                  }                    packet.ReadXORByte(guildGuids[c]' 6);                    packet.ReadByte("List Order"' c); //v4+57                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                    packet.ReadXORByte(guildGuids[c]' 7);                    packet.ReadXORByte(charGuids[c]' 0);                    packet.ReadInt32("Pet Family"' c); // v4+116                    packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(guildGuids[c]' 5);                    packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(charGuids[c]' 6);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadByte("Facial Hair"' c); // v4+65                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                    packet.ReadXORByte(guildGuids[c]' 4);                    packet.ReadByte("Skin"' c); // v4+63                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                    packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 1);                    pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                    packet.ReadXORByte(charGuids[c]' 5);                    packet.ReadByte("Face"' c); // v4+62                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleClientCharCreate,The following statement contains a magic number: var nameLength = packet.ReadBits(6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: var playerGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.StartBitStream(playerGuid' 7' 0' 1' 3' 5' 2' 4' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.StartBitStream(playerGuid' 7' 0' 1' 3' 5' 2' 4' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.StartBitStream(playerGuid' 7' 0' 1' 3' 5' 2' 4' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.StartBitStream(playerGuid' 7' 0' 1' 3' 5' 2' 4' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.StartBitStream(playerGuid' 7' 0' 1' 3' 5' 2' 4' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.StartBitStream(playerGuid' 7' 0' 1' 3' 5' 2' 4' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.ParseBitStream(playerGuid' 6' 7' 5' 0' 4' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.ParseBitStream(playerGuid' 6' 7' 5' 0' 4' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.ParseBitStream(playerGuid' 6' 7' 5' 0' 4' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.ParseBitStream(playerGuid' 6' 7' 5' 0' 4' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.ParseBitStream(playerGuid' 6' 7' 5' 0' 4' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.ParseBitStream(playerGuid' 6' 7' 5' 0' 4' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleInitCurrency,The following statement contains a magic number: var count = packet.ReadBits("Count"' 21);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CharacterHandler.cs,HandleInitCurrency,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  flags[i] = packet.ReadBits(5);          // 20h                  hasWeekCount[i] = packet.ReadBit();                  hasWeekCap[i] = packet.ReadBit();                  hasSeasonTotal[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: var senderGUIDBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: var guildGUIDBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: var receiverGUIDBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: var groupGUIDBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 1' 0' 6' 7' 3' 4' 2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 1' 0' 6' 7' 3' 4' 2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 1' 0' 6' 7' 3' 4' 2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 1' 0' 6' 7' 3' 4' 2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 1' 0' 6' 7' 3' 4' 2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 1' 0' 6' 7' 3' 4' 2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 0' 7' 6' 4' 1' 3' 2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 0' 7' 6' 4' 1' 3' 2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 0' 7' 6' 4' 1' 3' 2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 0' 7' 6' 4' 1' 3' 2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 0' 7' 6' 4' 1' 3' 2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 0' 7' 6' 4' 1' 3' 2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasSender)                  senderNameLen = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasText)                  textLen = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 4' 2' 7' 5' 1' 3' 0' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 4' 2' 7' 5' 1' 3' 0' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 4' 2' 7' 5' 1' 3' 0' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 4' 2' 7' 5' 1' 3' 0' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 4' 2' 7' 5' 1' 3' 0' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 4' 2' 7' 5' 1' 3' 0' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasPrefix)                  prefixLen = packet.ReadBits(5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasChannel)                  channelLen = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (bit148C)                  bits148C = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 1' 5' 4' 6' 3' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 1' 5' 4' 6' 3' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 1' 5' 4' 6' 3' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 1' 5' 4' 6' 3' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 1' 5' 4' 6' 3' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 1' 5' 4' 6' 3' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasReceiver)                  receiverNameLen = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 2' 3' 1' 4' 0' 5' 6' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 2' 3' 1' 4' 0' 5' 6' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 2' 3' 1' 4' 0' 5' 6' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 2' 3' 1' 4' 0' 5' 6' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 2' 3' 1' 4' 0' 5' 6' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 2' 3' 1' 4' 0' 5' 6' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 2' 7' 5' 0' 3' 4' 1' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 2' 7' 5' 0' 3' 4' 1' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 2' 7' 5' 0' 3' 4' 1' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 2' 7' 5' 0' 3' 4' 1' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 2' 7' 5' 0' 3' 4' 1' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 2' 7' 5' 0' 3' 4' 1' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 5' 7' 3' 1' 6' 2' 4' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 5' 7' 3' 1' 6' 2' 4' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 5' 7' 3' 1' 6' 2' 4' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 5' 7' 3' 1' 6' 2' 4' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 5' 7' 3' 1' 6' 2' 4' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 5' 7' 3' 1' 6' 2' 4' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 5' 7' 4' 1' 2' 0' 6' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 5' 7' 4' 1' 2' 0' 6' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 5' 7' 4' 1' 2' 0' 6' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 5' 7' 4' 1' 2' 0' 6' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 5' 7' 4' 1' 2' 0' 6' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 5' 7' 4' 1' 2' 0' 6' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleClientChatMessage,The following statement contains a magic number: var len = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ChatHandler.cs,HandleDefenseMessage,The following statement contains a magic number: var len = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 5' 4' 6' 0' 7' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 5' 4' 6' 0' 7' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 5' 4' 6' 0' 7' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 5' 4' 6' 0' 7' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 5' 4' 6' 0' 7' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 5' 4' 6' 0' 7' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 4' 6' 1' 5' 2' 3' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 4' 6' 1' 5' 2' 3' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 4' 6' 1' 5' 2' 3' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 4' 6' 1' 5' 2' 3' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 4' 6' 1' 5' 2' 3' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 4' 6' 1' 5' 2' 3' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GameObjectHandler.cs,HandleGameObjectQueryResponse,The following statement contains a magic number: var name = new string[4];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GameObjectHandler.cs,HandleGameObjectQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)                  name[i] = packet.ReadCString("Name"' i);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GameObjectHandler.cs,HandleGameObjectQueryResponse,The following statement contains a magic number: gameObject.Data = new int?[32];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: var leaderGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: var groupGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: var looterGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: leaderGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: leaderGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: leaderGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: leaderGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: groupGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: groupGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: groupGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: leaderGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: var memberCount = packet.ReadBits("Member Count"' 21);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  memberGUID[i] = new byte[8];                  memberGUID[i][0] = packet.ReadBit();                  memberGUID[i][3] = packet.ReadBit();                  memberGUID[i][7] = packet.ReadBit();                  bitsED[i] = packet.ReadBits(6);                  memberGUID[i][2] = packet.ReadBit();                  memberGUID[i][4] = packet.ReadBit();                  memberGUID[i][5] = packet.ReadBit();                  memberGUID[i][6] = packet.ReadBit();                  memberGUID[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  memberGUID[i] = new byte[8];                  memberGUID[i][0] = packet.ReadBit();                  memberGUID[i][3] = packet.ReadBit();                  memberGUID[i][7] = packet.ReadBit();                  bitsED[i] = packet.ReadBits(6);                  memberGUID[i][2] = packet.ReadBit();                  memberGUID[i][4] = packet.ReadBit();                  memberGUID[i][5] = packet.ReadBit();                  memberGUID[i][6] = packet.ReadBit();                  memberGUID[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  memberGUID[i] = new byte[8];                  memberGUID[i][0] = packet.ReadBit();                  memberGUID[i][3] = packet.ReadBit();                  memberGUID[i][7] = packet.ReadBit();                  bitsED[i] = packet.ReadBits(6);                  memberGUID[i][2] = packet.ReadBit();                  memberGUID[i][4] = packet.ReadBit();                  memberGUID[i][5] = packet.ReadBit();                  memberGUID[i][6] = packet.ReadBit();                  memberGUID[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  memberGUID[i] = new byte[8];                  memberGUID[i][0] = packet.ReadBit();                  memberGUID[i][3] = packet.ReadBit();                  memberGUID[i][7] = packet.ReadBit();                  bitsED[i] = packet.ReadBits(6);                  memberGUID[i][2] = packet.ReadBit();                  memberGUID[i][4] = packet.ReadBit();                  memberGUID[i][5] = packet.ReadBit();                  memberGUID[i][6] = packet.ReadBit();                  memberGUID[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  memberGUID[i] = new byte[8];                  memberGUID[i][0] = packet.ReadBit();                  memberGUID[i][3] = packet.ReadBit();                  memberGUID[i][7] = packet.ReadBit();                  bitsED[i] = packet.ReadBits(6);                  memberGUID[i][2] = packet.ReadBit();                  memberGUID[i][4] = packet.ReadBit();                  memberGUID[i][5] = packet.ReadBit();                  memberGUID[i][6] = packet.ReadBit();                  memberGUID[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  memberGUID[i] = new byte[8];                  memberGUID[i][0] = packet.ReadBit();                  memberGUID[i][3] = packet.ReadBit();                  memberGUID[i][7] = packet.ReadBit();                  bitsED[i] = packet.ReadBits(6);                  memberGUID[i][2] = packet.ReadBit();                  memberGUID[i][4] = packet.ReadBit();                  memberGUID[i][5] = packet.ReadBit();                  memberGUID[i][6] = packet.ReadBit();                  memberGUID[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  memberGUID[i] = new byte[8];                  memberGUID[i][0] = packet.ReadBit();                  memberGUID[i][3] = packet.ReadBit();                  memberGUID[i][7] = packet.ReadBit();                  bitsED[i] = packet.ReadBits(6);                  memberGUID[i][2] = packet.ReadBit();                  memberGUID[i][4] = packet.ReadBit();                  memberGUID[i][5] = packet.ReadBit();                  memberGUID[i][6] = packet.ReadBit();                  memberGUID[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  memberGUID[i] = new byte[8];                  memberGUID[i][0] = packet.ReadBit();                  memberGUID[i][3] = packet.ReadBit();                  memberGUID[i][7] = packet.ReadBit();                  bitsED[i] = packet.ReadBits(6);                  memberGUID[i][2] = packet.ReadBit();                  memberGUID[i][4] = packet.ReadBit();                  memberGUID[i][5] = packet.ReadBit();                  memberGUID[i][6] = packet.ReadBit();                  memberGUID[i][1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: groupGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: groupGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit78)                  packet.StartBitStream(looterGUID' 6' 4' 3' 1' 7' 2' 0' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit78)                  packet.StartBitStream(looterGUID' 6' 4' 3' 1' 7' 2' 0' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit78)                  packet.StartBitStream(looterGUID' 6' 4' 3' 1' 7' 2' 0' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit78)                  packet.StartBitStream(looterGUID' 6' 4' 3' 1' 7' 2' 0' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit78)                  packet.StartBitStream(looterGUID' 6' 4' 3' 1' 7' 2' 0' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit78)                  packet.StartBitStream(looterGUID' 6' 4' 3' 1' 7' 2' 0' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: groupGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: leaderGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(groupGUID' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(groupGUID' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit78)              {                  packet.ReadXORByte(looterGUID' 3);                  packet.ReadXORByte(looterGUID' 0);                  packet.ReadByte("Byte71");                  packet.ReadXORByte(looterGUID' 6);                  packet.ReadXORByte(looterGUID' 1);                  packet.ReadXORByte(looterGUID' 5);                  packet.ReadXORByte(looterGUID' 4);                  packet.ReadByte("Byte70");                  packet.ReadXORByte(looterGUID' 7);                  packet.ReadXORByte(looterGUID' 2);                    packet.WriteGuid("Looter GUID"' looterGUID);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit78)              {                  packet.ReadXORByte(looterGUID' 3);                  packet.ReadXORByte(looterGUID' 0);                  packet.ReadByte("Byte71");                  packet.ReadXORByte(looterGUID' 6);                  packet.ReadXORByte(looterGUID' 1);                  packet.ReadXORByte(looterGUID' 5);                  packet.ReadXORByte(looterGUID' 4);                  packet.ReadByte("Byte70");                  packet.ReadXORByte(looterGUID' 7);                  packet.ReadXORByte(looterGUID' 2);                    packet.WriteGuid("Looter GUID"' looterGUID);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit78)              {                  packet.ReadXORByte(looterGUID' 3);                  packet.ReadXORByte(looterGUID' 0);                  packet.ReadByte("Byte71");                  packet.ReadXORByte(looterGUID' 6);                  packet.ReadXORByte(looterGUID' 1);                  packet.ReadXORByte(looterGUID' 5);                  packet.ReadXORByte(looterGUID' 4);                  packet.ReadByte("Byte70");                  packet.ReadXORByte(looterGUID' 7);                  packet.ReadXORByte(looterGUID' 2);                    packet.WriteGuid("Looter GUID"' looterGUID);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit78)              {                  packet.ReadXORByte(looterGUID' 3);                  packet.ReadXORByte(looterGUID' 0);                  packet.ReadByte("Byte71");                  packet.ReadXORByte(looterGUID' 6);                  packet.ReadXORByte(looterGUID' 1);                  packet.ReadXORByte(looterGUID' 5);                  packet.ReadXORByte(looterGUID' 4);                  packet.ReadByte("Byte70");                  packet.ReadXORByte(looterGUID' 7);                  packet.ReadXORByte(looterGUID' 2);                    packet.WriteGuid("Looter GUID"' looterGUID);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit78)              {                  packet.ReadXORByte(looterGUID' 3);                  packet.ReadXORByte(looterGUID' 0);                  packet.ReadByte("Byte71");                  packet.ReadXORByte(looterGUID' 6);                  packet.ReadXORByte(looterGUID' 1);                  packet.ReadXORByte(looterGUID' 5);                  packet.ReadXORByte(looterGUID' 4);                  packet.ReadByte("Byte70");                  packet.ReadXORByte(looterGUID' 7);                  packet.ReadXORByte(looterGUID' 2);                    packet.WriteGuid("Looter GUID"' looterGUID);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit78)              {                  packet.ReadXORByte(looterGUID' 3);                  packet.ReadXORByte(looterGUID' 0);                  packet.ReadByte("Byte71");                  packet.ReadXORByte(looterGUID' 6);                  packet.ReadXORByte(looterGUID' 1);                  packet.ReadXORByte(looterGUID' 5);                  packet.ReadXORByte(looterGUID' 4);                  packet.ReadByte("Byte70");                  packet.ReadXORByte(looterGUID' 7);                  packet.ReadXORByte(looterGUID' 2);                    packet.WriteGuid("Looter GUID"' looterGUID);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  packet.ReadXORByte(memberGUID[i]' 4);                  packet.ReadByte("ByteED"' i);                  packet.ReadXORByte(memberGUID[i]' 1);                  packet.ReadXORByte(memberGUID[i]' 3);                  packet.ReadByte("ByteED"' i);                  packet.ReadXORByte(memberGUID[i]' 6);                  packet.ReadByte("Sub Group"' i);                  packet.ReadXORByte(memberGUID[i]' 7);                  packet.ReadWoWString("Name"' bitsED[i]' i);                  packet.ReadByteE<LfgRoleFlag>("Role"' i);                  packet.ReadXORByte(memberGUID[i]' 2);                  packet.ReadXORByte(memberGUID[i]' 5);                  packet.ReadXORByte(memberGUID[i]' 0);                    packet.WriteGuid("Member GUID"' memberGUID[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  packet.ReadXORByte(memberGUID[i]' 4);                  packet.ReadByte("ByteED"' i);                  packet.ReadXORByte(memberGUID[i]' 1);                  packet.ReadXORByte(memberGUID[i]' 3);                  packet.ReadByte("ByteED"' i);                  packet.ReadXORByte(memberGUID[i]' 6);                  packet.ReadByte("Sub Group"' i);                  packet.ReadXORByte(memberGUID[i]' 7);                  packet.ReadWoWString("Name"' bitsED[i]' i);                  packet.ReadByteE<LfgRoleFlag>("Role"' i);                  packet.ReadXORByte(memberGUID[i]' 2);                  packet.ReadXORByte(memberGUID[i]' 5);                  packet.ReadXORByte(memberGUID[i]' 0);                    packet.WriteGuid("Member GUID"' memberGUID[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  packet.ReadXORByte(memberGUID[i]' 4);                  packet.ReadByte("ByteED"' i);                  packet.ReadXORByte(memberGUID[i]' 1);                  packet.ReadXORByte(memberGUID[i]' 3);                  packet.ReadByte("ByteED"' i);                  packet.ReadXORByte(memberGUID[i]' 6);                  packet.ReadByte("Sub Group"' i);                  packet.ReadXORByte(memberGUID[i]' 7);                  packet.ReadWoWString("Name"' bitsED[i]' i);                  packet.ReadByteE<LfgRoleFlag>("Role"' i);                  packet.ReadXORByte(memberGUID[i]' 2);                  packet.ReadXORByte(memberGUID[i]' 5);                  packet.ReadXORByte(memberGUID[i]' 0);                    packet.WriteGuid("Member GUID"' memberGUID[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  packet.ReadXORByte(memberGUID[i]' 4);                  packet.ReadByte("ByteED"' i);                  packet.ReadXORByte(memberGUID[i]' 1);                  packet.ReadXORByte(memberGUID[i]' 3);                  packet.ReadByte("ByteED"' i);                  packet.ReadXORByte(memberGUID[i]' 6);                  packet.ReadByte("Sub Group"' i);                  packet.ReadXORByte(memberGUID[i]' 7);                  packet.ReadWoWString("Name"' bitsED[i]' i);                  packet.ReadByteE<LfgRoleFlag>("Role"' i);                  packet.ReadXORByte(memberGUID[i]' 2);                  packet.ReadXORByte(memberGUID[i]' 5);                  packet.ReadXORByte(memberGUID[i]' 0);                    packet.WriteGuid("Member GUID"' memberGUID[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  packet.ReadXORByte(memberGUID[i]' 4);                  packet.ReadByte("ByteED"' i);                  packet.ReadXORByte(memberGUID[i]' 1);                  packet.ReadXORByte(memberGUID[i]' 3);                  packet.ReadByte("ByteED"' i);                  packet.ReadXORByte(memberGUID[i]' 6);                  packet.ReadByte("Sub Group"' i);                  packet.ReadXORByte(memberGUID[i]' 7);                  packet.ReadWoWString("Name"' bitsED[i]' i);                  packet.ReadByteE<LfgRoleFlag>("Role"' i);                  packet.ReadXORByte(memberGUID[i]' 2);                  packet.ReadXORByte(memberGUID[i]' 5);                  packet.ReadXORByte(memberGUID[i]' 0);                    packet.WriteGuid("Member GUID"' memberGUID[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; i++)              {                  packet.ReadXORByte(memberGUID[i]' 4);                  packet.ReadByte("ByteED"' i);                  packet.ReadXORByte(memberGUID[i]' 1);                  packet.ReadXORByte(memberGUID[i]' 3);                  packet.ReadByte("ByteED"' i);                  packet.ReadXORByte(memberGUID[i]' 6);                  packet.ReadByte("Sub Group"' i);                  packet.ReadXORByte(memberGUID[i]' 7);                  packet.ReadWoWString("Name"' bitsED[i]' i);                  packet.ReadByteE<LfgRoleFlag>("Role"' i);                  packet.ReadXORByte(memberGUID[i]' 2);                  packet.ReadXORByte(memberGUID[i]' 5);                  packet.ReadXORByte(memberGUID[i]' 0);                    packet.WriteGuid("Member GUID"' memberGUID[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(groupGUID' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(groupGUID' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(leaderGUID' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(leaderGUID' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(leaderGUID' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(groupGUID' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(leaderGUID' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(groupGUID' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(leaderGUID' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(leaderGUID' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 4' 3' 6' 5' 0' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 4' 3' 6' 5' 0' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 4' 3' 6' 5' 0' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 4' 3' 6' 5' 0' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 4' 3' 6' 5' 0' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 7' 1' 4' 3' 6' 5' 0' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 4' 7' 6' 0' 1' 5' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 4' 7' 6' 0' 1' 5' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 4' 7' 6' 0' 1' 5' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 4' 7' 6' 0' 1' 5' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 4' 7' 6' 0' 1' 5' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 4' 7' 6' 0' 1' 5' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: var playerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: var guildGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: guildGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: playerGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: playerGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: guildGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: guildGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: playerGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: playerGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: playerGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: playerGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: guildGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: guildGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: guildGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(guildGUID' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(guildGUID' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(guildGUID' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(guildGUID' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(guildGUID' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(guildGUID' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  guid1[5] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  rankCount = (int)packet.ReadBits(21);                  guid1[0] = packet.ReadBit();                    rankName = new int[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = (int)packet.ReadBits(7);                    guid1[2] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                  nameLen = (int)packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  guid1[5] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  rankCount = (int)packet.ReadBits(21);                  guid1[0] = packet.ReadBit();                    rankName = new int[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = (int)packet.ReadBits(7);                    guid1[2] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                  nameLen = (int)packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  guid1[5] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  rankCount = (int)packet.ReadBits(21);                  guid1[0] = packet.ReadBit();                    rankName = new int[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = (int)packet.ReadBits(7);                    guid1[2] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                  nameLen = (int)packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  guid1[5] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  rankCount = (int)packet.ReadBits(21);                  guid1[0] = packet.ReadBit();                    rankName = new int[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = (int)packet.ReadBits(7);                    guid1[2] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                  nameLen = (int)packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  guid1[5] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  rankCount = (int)packet.ReadBits(21);                  guid1[0] = packet.ReadBit();                    rankName = new int[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = (int)packet.ReadBits(7);                    guid1[2] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                  nameLen = (int)packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  guid1[5] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  rankCount = (int)packet.ReadBits(21);                  guid1[0] = packet.ReadBit();                    rankName = new int[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = (int)packet.ReadBits(7);                    guid1[2] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                  nameLen = (int)packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  guid1[5] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  rankCount = (int)packet.ReadBits(21);                  guid1[0] = packet.ReadBit();                    rankName = new int[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = (int)packet.ReadBits(7);                    guid1[2] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                  nameLen = (int)packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  guid1[5] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  rankCount = (int)packet.ReadBits(21);                  guid1[0] = packet.ReadBit();                    rankName = new int[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = (int)packet.ReadBits(7);                    guid1[2] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                  nameLen = (int)packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  guid1[5] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  rankCount = (int)packet.ReadBits(21);                  guid1[0] = packet.ReadBit();                    rankName = new int[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = (int)packet.ReadBits(7);                    guid1[2] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                  nameLen = (int)packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 5);                  packet.ReadInt32("Emblem Border Color");                  for (var j = 0; j < rankCount; j++)                  {                      packet.ReadInt32("Rights Order"' j);                      packet.ReadInt32("Creation Order"' j);                      packet.ReadWoWString("Rank Name"' rankName[j]' j);                  }                    packet.ReadWoWString("Guild Name"' nameLen);                  packet.ReadInt32("Realm Id");                  packet.ReadInt32("Emblem Background Color");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadInt32("Emblem Style");                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 4);                  packet.ReadInt32("Emblem Border Style");                  packet.ReadInt32("Emblem Color");                  packet.WriteGuid("GuildGUID1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 5);                  packet.ReadInt32("Emblem Border Color");                  for (var j = 0; j < rankCount; j++)                  {                      packet.ReadInt32("Rights Order"' j);                      packet.ReadInt32("Creation Order"' j);                      packet.ReadWoWString("Rank Name"' rankName[j]' j);                  }                    packet.ReadWoWString("Guild Name"' nameLen);                  packet.ReadInt32("Realm Id");                  packet.ReadInt32("Emblem Background Color");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadInt32("Emblem Style");                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 4);                  packet.ReadInt32("Emblem Border Style");                  packet.ReadInt32("Emblem Color");                  packet.WriteGuid("GuildGUID1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 5);                  packet.ReadInt32("Emblem Border Color");                  for (var j = 0; j < rankCount; j++)                  {                      packet.ReadInt32("Rights Order"' j);                      packet.ReadInt32("Creation Order"' j);                      packet.ReadWoWString("Rank Name"' rankName[j]' j);                  }                    packet.ReadWoWString("Guild Name"' nameLen);                  packet.ReadInt32("Realm Id");                  packet.ReadInt32("Emblem Background Color");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadInt32("Emblem Style");                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 4);                  packet.ReadInt32("Emblem Border Style");                  packet.ReadInt32("Emblem Color");                  packet.WriteGuid("GuildGUID1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 5);                  packet.ReadInt32("Emblem Border Color");                  for (var j = 0; j < rankCount; j++)                  {                      packet.ReadInt32("Rights Order"' j);                      packet.ReadInt32("Creation Order"' j);                      packet.ReadWoWString("Rank Name"' rankName[j]' j);                  }                    packet.ReadWoWString("Guild Name"' nameLen);                  packet.ReadInt32("Realm Id");                  packet.ReadInt32("Emblem Background Color");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadInt32("Emblem Style");                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 4);                  packet.ReadInt32("Emblem Border Style");                  packet.ReadInt32("Emblem Color");                  packet.WriteGuid("GuildGUID1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 5);                  packet.ReadInt32("Emblem Border Color");                  for (var j = 0; j < rankCount; j++)                  {                      packet.ReadInt32("Rights Order"' j);                      packet.ReadInt32("Creation Order"' j);                      packet.ReadWoWString("Rank Name"' rankName[j]' j);                  }                    packet.ReadWoWString("Guild Name"' nameLen);                  packet.ReadInt32("Realm Id");                  packet.ReadInt32("Emblem Background Color");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadInt32("Emblem Style");                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 4);                  packet.ReadInt32("Emblem Border Style");                  packet.ReadInt32("Emblem Color");                  packet.WriteGuid("GuildGUID1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 5);                  packet.ReadInt32("Emblem Border Color");                  for (var j = 0; j < rankCount; j++)                  {                      packet.ReadInt32("Rights Order"' j);                      packet.ReadInt32("Creation Order"' j);                      packet.ReadWoWString("Rank Name"' rankName[j]' j);                  }                    packet.ReadWoWString("Guild Name"' nameLen);                  packet.ReadInt32("Realm Id");                  packet.ReadInt32("Emblem Background Color");                  packet.ReadXORByte(guid1' 7);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 2);                  packet.ReadInt32("Emblem Style");                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 4);                  packet.ReadInt32("Emblem Border Style");                  packet.ReadInt32("Emblem Color");                  packet.WriteGuid("GuildGUID1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: var motdLength = packet.ReadBits(10);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: var infoLength = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: var size = packet.ReadBits(17);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  guid[i] = new byte[8];                    guid[i][1] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  officerLength[i] = packet.ReadBits(8);                  packet.ReadBit("Can SoR"' i);                  guid[i][4] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  nameLength[i] = packet.ReadBits(6);                  guid[i][0] = packet.ReadBit();                  publicLength[i] = packet.ReadBits(8);                  packet.ReadBit("Has Authenticator"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  guid[i] = new byte[8];                    guid[i][1] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  officerLength[i] = packet.ReadBits(8);                  packet.ReadBit("Can SoR"' i);                  guid[i][4] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  nameLength[i] = packet.ReadBits(6);                  guid[i][0] = packet.ReadBit();                  publicLength[i] = packet.ReadBits(8);                  packet.ReadBit("Has Authenticator"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  guid[i] = new byte[8];                    guid[i][1] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  officerLength[i] = packet.ReadBits(8);                  packet.ReadBit("Can SoR"' i);                  guid[i][4] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  nameLength[i] = packet.ReadBits(6);                  guid[i][0] = packet.ReadBit();                  publicLength[i] = packet.ReadBits(8);                  packet.ReadBit("Has Authenticator"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  guid[i] = new byte[8];                    guid[i][1] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  officerLength[i] = packet.ReadBits(8);                  packet.ReadBit("Can SoR"' i);                  guid[i][4] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  nameLength[i] = packet.ReadBits(6);                  guid[i][0] = packet.ReadBit();                  publicLength[i] = packet.ReadBits(8);                  packet.ReadBit("Has Authenticator"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  guid[i] = new byte[8];                    guid[i][1] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  officerLength[i] = packet.ReadBits(8);                  packet.ReadBit("Can SoR"' i);                  guid[i][4] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  nameLength[i] = packet.ReadBits(6);                  guid[i][0] = packet.ReadBit();                  publicLength[i] = packet.ReadBits(8);                  packet.ReadBit("Has Authenticator"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  guid[i] = new byte[8];                    guid[i][1] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  officerLength[i] = packet.ReadBits(8);                  packet.ReadBit("Can SoR"' i);                  guid[i][4] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  nameLength[i] = packet.ReadBits(6);                  guid[i][0] = packet.ReadBit();                  publicLength[i] = packet.ReadBits(8);                  packet.ReadBit("Has Authenticator"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  guid[i] = new byte[8];                    guid[i][1] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  officerLength[i] = packet.ReadBits(8);                  packet.ReadBit("Can SoR"' i);                  guid[i][4] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  nameLength[i] = packet.ReadBits(6);                  guid[i][0] = packet.ReadBit();                  publicLength[i] = packet.ReadBits(8);                  packet.ReadBit("Has Authenticator"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  guid[i] = new byte[8];                    guid[i][1] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  officerLength[i] = packet.ReadBits(8);                  packet.ReadBit("Can SoR"' i);                  guid[i][4] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  nameLength[i] = packet.ReadBits(6);                  guid[i][0] = packet.ReadBit();                  publicLength[i] = packet.ReadBits(8);                  packet.ReadBit("Has Authenticator"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  guid[i] = new byte[8];                    guid[i][1] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  officerLength[i] = packet.ReadBits(8);                  packet.ReadBit("Can SoR"' i);                  guid[i][4] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  nameLength[i] = packet.ReadBits(6);                  guid[i][0] = packet.ReadBit();                  publicLength[i] = packet.ReadBits(8);                  packet.ReadBit("Has Authenticator"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  guid[i] = new byte[8];                    guid[i][1] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  officerLength[i] = packet.ReadBits(8);                  packet.ReadBit("Can SoR"' i);                  guid[i][4] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  nameLength[i] = packet.ReadBits(6);                  guid[i][0] = packet.ReadBit();                  publicLength[i] = packet.ReadBits(8);                  packet.ReadBit("Has Authenticator"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadByteE<Class>("Member Class"' i);                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadByte("Member Level"' i);                  packet.ReadXORByte(guid[i]' 0);                    for (var j = 0; j < 2; ++j)                  {                      var value = packet.ReadUInt32();                      var rank = packet.ReadUInt32();                      var id = packet.ReadUInt32();                        packet.AddValue("Profession"' string.Format("Id {0} - Value {1} - Rank {2}"' id' value' rank)' i' j);                  }                    var name = packet.ReadWoWString("Name"' nameLength[i]' i);                  packet.ReadInt32("RealmId"' i);                  packet.ReadSingle("Last online"' i);                  packet.ReadInt64("Unk 2"' i);                  packet.ReadInt64("Week activity"' i);                  packet.ReadInt32("Zone Id"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadWoWString("Officer note"' officerLength[i]' i);                  packet.ReadInt32("Int218"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadInt32("Member Rank"' i);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadByteE<GuildMemberFlag>("Member Flags"' i);                  packet.ReadInt32("Guild Reputation"' i);                  packet.ReadWoWString("Public note"' publicLength[i]' i);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Member Achievement Points"' i);                  packet.WriteGuid("Guid"' guid[i]' i);                  StoreGetters.AddName(new WowGuid64(BitConverter.ToUInt64(guid[i]' 0))' name);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadByteE<Class>("Member Class"' i);                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadByte("Member Level"' i);                  packet.ReadXORByte(guid[i]' 0);                    for (var j = 0; j < 2; ++j)                  {                      var value = packet.ReadUInt32();                      var rank = packet.ReadUInt32();                      var id = packet.ReadUInt32();                        packet.AddValue("Profession"' string.Format("Id {0} - Value {1} - Rank {2}"' id' value' rank)' i' j);                  }                    var name = packet.ReadWoWString("Name"' nameLength[i]' i);                  packet.ReadInt32("RealmId"' i);                  packet.ReadSingle("Last online"' i);                  packet.ReadInt64("Unk 2"' i);                  packet.ReadInt64("Week activity"' i);                  packet.ReadInt32("Zone Id"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadWoWString("Officer note"' officerLength[i]' i);                  packet.ReadInt32("Int218"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadInt32("Member Rank"' i);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadByteE<GuildMemberFlag>("Member Flags"' i);                  packet.ReadInt32("Guild Reputation"' i);                  packet.ReadWoWString("Public note"' publicLength[i]' i);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Member Achievement Points"' i);                  packet.WriteGuid("Guid"' guid[i]' i);                  StoreGetters.AddName(new WowGuid64(BitConverter.ToUInt64(guid[i]' 0))' name);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadByteE<Class>("Member Class"' i);                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadByte("Member Level"' i);                  packet.ReadXORByte(guid[i]' 0);                    for (var j = 0; j < 2; ++j)                  {                      var value = packet.ReadUInt32();                      var rank = packet.ReadUInt32();                      var id = packet.ReadUInt32();                        packet.AddValue("Profession"' string.Format("Id {0} - Value {1} - Rank {2}"' id' value' rank)' i' j);                  }                    var name = packet.ReadWoWString("Name"' nameLength[i]' i);                  packet.ReadInt32("RealmId"' i);                  packet.ReadSingle("Last online"' i);                  packet.ReadInt64("Unk 2"' i);                  packet.ReadInt64("Week activity"' i);                  packet.ReadInt32("Zone Id"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadWoWString("Officer note"' officerLength[i]' i);                  packet.ReadInt32("Int218"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadInt32("Member Rank"' i);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadByteE<GuildMemberFlag>("Member Flags"' i);                  packet.ReadInt32("Guild Reputation"' i);                  packet.ReadWoWString("Public note"' publicLength[i]' i);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Member Achievement Points"' i);                  packet.WriteGuid("Guid"' guid[i]' i);                  StoreGetters.AddName(new WowGuid64(BitConverter.ToUInt64(guid[i]' 0))' name);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadByteE<Class>("Member Class"' i);                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadByte("Member Level"' i);                  packet.ReadXORByte(guid[i]' 0);                    for (var j = 0; j < 2; ++j)                  {                      var value = packet.ReadUInt32();                      var rank = packet.ReadUInt32();                      var id = packet.ReadUInt32();                        packet.AddValue("Profession"' string.Format("Id {0} - Value {1} - Rank {2}"' id' value' rank)' i' j);                  }                    var name = packet.ReadWoWString("Name"' nameLength[i]' i);                  packet.ReadInt32("RealmId"' i);                  packet.ReadSingle("Last online"' i);                  packet.ReadInt64("Unk 2"' i);                  packet.ReadInt64("Week activity"' i);                  packet.ReadInt32("Zone Id"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadWoWString("Officer note"' officerLength[i]' i);                  packet.ReadInt32("Int218"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadInt32("Member Rank"' i);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadByteE<GuildMemberFlag>("Member Flags"' i);                  packet.ReadInt32("Guild Reputation"' i);                  packet.ReadWoWString("Public note"' publicLength[i]' i);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Member Achievement Points"' i);                  packet.WriteGuid("Guid"' guid[i]' i);                  StoreGetters.AddName(new WowGuid64(BitConverter.ToUInt64(guid[i]' 0))' name);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadByteE<Class>("Member Class"' i);                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadByte("Member Level"' i);                  packet.ReadXORByte(guid[i]' 0);                    for (var j = 0; j < 2; ++j)                  {                      var value = packet.ReadUInt32();                      var rank = packet.ReadUInt32();                      var id = packet.ReadUInt32();                        packet.AddValue("Profession"' string.Format("Id {0} - Value {1} - Rank {2}"' id' value' rank)' i' j);                  }                    var name = packet.ReadWoWString("Name"' nameLength[i]' i);                  packet.ReadInt32("RealmId"' i);                  packet.ReadSingle("Last online"' i);                  packet.ReadInt64("Unk 2"' i);                  packet.ReadInt64("Week activity"' i);                  packet.ReadInt32("Zone Id"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadWoWString("Officer note"' officerLength[i]' i);                  packet.ReadInt32("Int218"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadInt32("Member Rank"' i);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadByteE<GuildMemberFlag>("Member Flags"' i);                  packet.ReadInt32("Guild Reputation"' i);                  packet.ReadWoWString("Public note"' publicLength[i]' i);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Member Achievement Points"' i);                  packet.WriteGuid("Guid"' guid[i]' i);                  StoreGetters.AddName(new WowGuid64(BitConverter.ToUInt64(guid[i]' 0))' name);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadByteE<Class>("Member Class"' i);                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadByte("Member Level"' i);                  packet.ReadXORByte(guid[i]' 0);                    for (var j = 0; j < 2; ++j)                  {                      var value = packet.ReadUInt32();                      var rank = packet.ReadUInt32();                      var id = packet.ReadUInt32();                        packet.AddValue("Profession"' string.Format("Id {0} - Value {1} - Rank {2}"' id' value' rank)' i' j);                  }                    var name = packet.ReadWoWString("Name"' nameLength[i]' i);                  packet.ReadInt32("RealmId"' i);                  packet.ReadSingle("Last online"' i);                  packet.ReadInt64("Unk 2"' i);                  packet.ReadInt64("Week activity"' i);                  packet.ReadInt32("Zone Id"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadWoWString("Officer note"' officerLength[i]' i);                  packet.ReadInt32("Int218"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadInt32("Member Rank"' i);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadByteE<GuildMemberFlag>("Member Flags"' i);                  packet.ReadInt32("Guild Reputation"' i);                  packet.ReadWoWString("Public note"' publicLength[i]' i);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Member Achievement Points"' i);                  packet.WriteGuid("Guid"' guid[i]' i);                  StoreGetters.AddName(new WowGuid64(BitConverter.ToUInt64(guid[i]' 0))' name);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRoster,The following statement contains a magic number: for (var i = 0; i < size; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadByteE<Class>("Member Class"' i);                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadByte("Member Level"' i);                  packet.ReadXORByte(guid[i]' 0);                    for (var j = 0; j < 2; ++j)                  {                      var value = packet.ReadUInt32();                      var rank = packet.ReadUInt32();                      var id = packet.ReadUInt32();                        packet.AddValue("Profession"' string.Format("Id {0} - Value {1} - Rank {2}"' id' value' rank)' i' j);                  }                    var name = packet.ReadWoWString("Name"' nameLength[i]' i);                  packet.ReadInt32("RealmId"' i);                  packet.ReadSingle("Last online"' i);                  packet.ReadInt64("Unk 2"' i);                  packet.ReadInt64("Week activity"' i);                  packet.ReadInt32("Zone Id"' i);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadWoWString("Officer note"' officerLength[i]' i);                  packet.ReadInt32("Int218"' i);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadInt32("Member Rank"' i);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadByteE<GuildMemberFlag>("Member Flags"' i);                  packet.ReadInt32("Guild Reputation"' i);                  packet.ReadWoWString("Public note"' publicLength[i]' i);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Member Achievement Points"' i);                  packet.WriteGuid("Guid"' guid[i]' i);                  StoreGetters.AddName(new WowGuid64(BitConverter.ToUInt64(guid[i]' 0))' name);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRankServer,The following statement contains a magic number: const int guildBankMaxTabs = 8;
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRankServer,The following statement contains a magic number: var count = packet.ReadBits("Count"' 17);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildRankServer,The following statement contains a magic number: for (var i = 0; i < count; ++i)                  length[i] = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleNewText,The following statement contains a magic number: packet.ReadWoWString("Text"' (int)packet.ReadBits(10));
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: var count = packet.ReadBits("Achievement count"' 20);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 7' 5' 3' 4' 0' 6' 2' 1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 7' 5' 3' 4' 0' 6' 2' 1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 7' 5' 3' 4' 0' 6' 2' 1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 7' 5' 3' 4' 0' 6' 2' 1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 7' 5' 3' 4' 0' 6' 2' 1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 7' 5' 3' 4' 0' 6' 2' 1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                  packet.StartBitStream(guid[i]' 7' 5' 3' 4' 0' 6' 2' 1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                    packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                    packet.ReadInt32("Unk 1"' i);                    packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(guid[i]' 1);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(guid[i]' 4);                    packet.ReadInt32("Unk 2"' i);                    packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 5);                  packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                    packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                    packet.ReadInt32("Unk 1"' i);                    packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(guid[i]' 1);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(guid[i]' 4);                    packet.ReadInt32("Unk 2"' i);                    packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 5);                  packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                    packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                    packet.ReadInt32("Unk 1"' i);                    packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(guid[i]' 1);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(guid[i]' 4);                    packet.ReadInt32("Unk 2"' i);                    packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 5);                  packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                    packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                    packet.ReadInt32("Unk 1"' i);                    packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(guid[i]' 1);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(guid[i]' 4);                    packet.ReadInt32("Unk 2"' i);                    packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 5);                  packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                    packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                    packet.ReadInt32("Unk 1"' i);                    packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(guid[i]' 1);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(guid[i]' 4);                    packet.ReadInt32("Unk 2"' i);                    packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 5);                  packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\GuildHandler.cs,HandleGuildAchievementData,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                    packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                    packet.ReadInt32("Unk 1"' i);                    packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(guid[i]' 1);                    packet.ReadPackedTime("Time"' i);                    packet.ReadXORByte(guid[i]' 4);                    packet.ReadInt32("Unk 2"' i);                    packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 5);                  packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,HotfixHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\HotfixHandler.cs,HandleHotfixInfo,The following statement contains a magic number: var count = packet.ReadBits("Count"' 20);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: var playerGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: var itemGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: playerGuid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: itemGuid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: itemGuid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: playerGuid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: itemGuid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: playerGuid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: playerGuid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: itemGuid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: playerGuid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: itemGuid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: itemGuid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: playerGuid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(playerGuid' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(playerGuid' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(playerGuid' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(playerGuid' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(itemGuid' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(itemGuid' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(playerGuid' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(playerGuid' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(itemGuid' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(itemGuid' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(itemGuid' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(itemGuid' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandleSetTimeZoneInformation,The following statement contains a magic number: var len1 = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandleSetTimeZoneInformation,The following statement contains a magic number: var len2 = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(0' 2' 3' 5' 6' 4' 1' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(0' 2' 3' 5' 6' 4' 1' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(0' 2' 3' 5' 6' 4' 1' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(0' 2' 3' 5' 6' 4' 1' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(0' 2' 3' 5' 6' 4' 1' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(0' 2' 3' 5' 6' 4' 1' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 0' 3' 7' 4' 5' 6' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 0' 3' 7' 4' 5' 6' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 0' 3' 7' 4' 5' 6' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 0' 3' 7' 4' 5' 6' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 0' 3' 7' 4' 5' 6' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 0' 3' 7' 4' 5' 6' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,MultiplePackets,The following statement contains a magic number: var count = packet.ReadBits("Count"' 24);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,MultiplePackets,The following statement contains a magic number: for (var i = 0; i < count; ++i)                  lengths[i] = (int)packet.ReadBits(5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MiscellaneousHandler.cs,HandleWeeklySpellUsage,The following statement contains a magic number: var count = packet.ReadBits("Count"' 21);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: var transportGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  transportGUID[4] = packet.ReadBit();                  transportGUID[1] = packet.ReadBit();                  transportGUID[6] = packet.ReadBit();                  transportGUID[0] = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  hasTransportTime3 = packet.ReadBit();                  transportGUID[2] = packet.ReadBit();                  transportGUID[7] = packet.ReadBit();                  transportGUID[3] = packet.ReadBit();                  transportGUID[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  transportGUID[4] = packet.ReadBit();                  transportGUID[1] = packet.ReadBit();                  transportGUID[6] = packet.ReadBit();                  transportGUID[0] = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  hasTransportTime3 = packet.ReadBit();                  transportGUID[2] = packet.ReadBit();                  transportGUID[7] = packet.ReadBit();                  transportGUID[3] = packet.ReadBit();                  transportGUID[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  transportGUID[4] = packet.ReadBit();                  transportGUID[1] = packet.ReadBit();                  transportGUID[6] = packet.ReadBit();                  transportGUID[0] = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  hasTransportTime3 = packet.ReadBit();                  transportGUID[2] = packet.ReadBit();                  transportGUID[7] = packet.ReadBit();                  transportGUID[3] = packet.ReadBit();                  transportGUID[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  transportGUID[4] = packet.ReadBit();                  transportGUID[1] = packet.ReadBit();                  transportGUID[6] = packet.ReadBit();                  transportGUID[0] = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  hasTransportTime3 = packet.ReadBit();                  transportGUID[2] = packet.ReadBit();                  transportGUID[7] = packet.ReadBit();                  transportGUID[3] = packet.ReadBit();                  transportGUID[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  transportGUID[4] = packet.ReadBit();                  transportGUID[1] = packet.ReadBit();                  transportGUID[6] = packet.ReadBit();                  transportGUID[0] = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  hasTransportTime3 = packet.ReadBit();                  transportGUID[2] = packet.ReadBit();                  transportGUID[7] = packet.ReadBit();                  transportGUID[3] = packet.ReadBit();                  transportGUID[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  transportGUID[4] = packet.ReadBit();                  transportGUID[1] = packet.ReadBit();                  transportGUID[6] = packet.ReadBit();                  transportGUID[0] = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  hasTransportTime3 = packet.ReadBit();                  transportGUID[2] = packet.ReadBit();                  transportGUID[7] = packet.ReadBit();                  transportGUID[3] = packet.ReadBit();                  transportGUID[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: var bits98 = (int)packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasExtraMovementFlags)                  packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasMovementFlags)                  packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                    packet.ReadXORByte(transportGUID' 1);                    transPos.Y = packet.ReadSingle();                    if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                    packet.ReadXORByte(transportGUID' 5);                    transPos.X = packet.ReadSingle();                  packet.ReadByte("Seat");                  packet.ReadInt32("Transport Time");                    packet.ReadXORByte(transportGUID' 3);                  packet.ReadXORByte(transportGUID' 6);                    transPos.O = packet.ReadSingle();                  transPos.Z = packet.ReadSingle();                    if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                    packet.ReadXORByte(transportGUID' 7);                  packet.ReadXORByte(transportGUID' 4);                  packet.ReadXORByte(transportGUID' 2);                  packet.ReadXORByte(transportGUID' 0);                    packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                    packet.ReadXORByte(transportGUID' 1);                    transPos.Y = packet.ReadSingle();                    if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                    packet.ReadXORByte(transportGUID' 5);                    transPos.X = packet.ReadSingle();                  packet.ReadByte("Seat");                  packet.ReadInt32("Transport Time");                    packet.ReadXORByte(transportGUID' 3);                  packet.ReadXORByte(transportGUID' 6);                    transPos.O = packet.ReadSingle();                  transPos.Z = packet.ReadSingle();                    if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                    packet.ReadXORByte(transportGUID' 7);                  packet.ReadXORByte(transportGUID' 4);                  packet.ReadXORByte(transportGUID' 2);                  packet.ReadXORByte(transportGUID' 0);                    packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                    packet.ReadXORByte(transportGUID' 1);                    transPos.Y = packet.ReadSingle();                    if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                    packet.ReadXORByte(transportGUID' 5);                    transPos.X = packet.ReadSingle();                  packet.ReadByte("Seat");                  packet.ReadInt32("Transport Time");                    packet.ReadXORByte(transportGUID' 3);                  packet.ReadXORByte(transportGUID' 6);                    transPos.O = packet.ReadSingle();                  transPos.Z = packet.ReadSingle();                    if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                    packet.ReadXORByte(transportGUID' 7);                  packet.ReadXORByte(transportGUID' 4);                  packet.ReadXORByte(transportGUID' 2);                  packet.ReadXORByte(transportGUID' 0);                    packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                    packet.ReadXORByte(transportGUID' 1);                    transPos.Y = packet.ReadSingle();                    if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                    packet.ReadXORByte(transportGUID' 5);                    transPos.X = packet.ReadSingle();                  packet.ReadByte("Seat");                  packet.ReadInt32("Transport Time");                    packet.ReadXORByte(transportGUID' 3);                  packet.ReadXORByte(transportGUID' 6);                    transPos.O = packet.ReadSingle();                  transPos.Z = packet.ReadSingle();                    if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                    packet.ReadXORByte(transportGUID' 7);                  packet.ReadXORByte(transportGUID' 4);                  packet.ReadXORByte(transportGUID' 2);                  packet.ReadXORByte(transportGUID' 0);                    packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                    packet.ReadXORByte(transportGUID' 1);                    transPos.Y = packet.ReadSingle();                    if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                    packet.ReadXORByte(transportGUID' 5);                    transPos.X = packet.ReadSingle();                  packet.ReadByte("Seat");                  packet.ReadInt32("Transport Time");                    packet.ReadXORByte(transportGUID' 3);                  packet.ReadXORByte(transportGUID' 6);                    transPos.O = packet.ReadSingle();                  transPos.Z = packet.ReadSingle();                    if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                    packet.ReadXORByte(transportGUID' 7);                  packet.ReadXORByte(transportGUID' 4);                  packet.ReadXORByte(transportGUID' 2);                  packet.ReadXORByte(transportGUID' 0);                    packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: if (hasTransportData)              {                  var transPos = new Vector4();                    packet.ReadXORByte(transportGUID' 1);                    transPos.Y = packet.ReadSingle();                    if (hasTransportTime2)                      packet.ReadInt32("Transport Time 2");                    packet.ReadXORByte(transportGUID' 5);                    transPos.X = packet.ReadSingle();                  packet.ReadByte("Seat");                  packet.ReadInt32("Transport Time");                    packet.ReadXORByte(transportGUID' 3);                  packet.ReadXORByte(transportGUID' 6);                    transPos.O = packet.ReadSingle();                  transPos.Z = packet.ReadSingle();                    if (hasTransportTime3)                      packet.ReadInt32("Transport Time 3");                    packet.ReadXORByte(transportGUID' 7);                  packet.ReadXORByte(transportGUID' 4);                  packet.ReadXORByte(transportGUID' 2);                  packet.ReadXORByte(transportGUID' 0);                    packet.WriteGuid("Transport Guid"' transportGUID);                  packet.AddValue("Transport Position"' transPos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePlayerMove,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var factingTargetGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var ownerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: ownerGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: ownerGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var splineCount = (int)packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var splineType = (int)packet.ReadBits(3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 0' 7' 3' 4' 5' 6' 1' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 0' 7' 3' 4' 5' 6' 1' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 0' 7' 3' 4' 5' 6' 1' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 0' 7' 3' 4' 5' 6' 1' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 0' 7' 3' 4' 5' 6' 1' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 0' 7' 3' 4' 5' 6' 1' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 0' 7' 3' 4' 5' 6' 1' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: ownerGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 1' 3' 4' 5' 6' 0' 7' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 1' 3' 4' 5' 6' 0' 7' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 1' 3' 4' 5' 6' 0' 7' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 1' 3' 4' 5' 6' 0' 7' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 1' 3' 4' 5' 6' 0' 7' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 1' 3' 4' 5' 6' 0' 7' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: ownerGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: ownerGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (bit98)              {                  packet.ReadBits("bits74"' 2);                  bits84 = packet.ReadBits(22);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (bit98)              {                  packet.ReadBits("bits74"' 2);                  bits84 = packet.ReadBits(22);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: ownerGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var bits64 = (int)packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 1' 6' 4' 3' 5' 0' 2' 7);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 1' 6' 4' 3' 5' 0' 2' 7);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 1' 6' 4' 3' 5' 0' 2' 7);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 1' 6' 4' 3' 5' 0' 2' 7);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 1' 6' 4' 3' 5' 0' 2' 7);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 1' 6' 4' 3' 5' 0' 2' 7);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 1' 6' 4' 3' 5' 0' 2' 7);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORByte(ownerGUID' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORByte(ownerGUID' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ParseBitStream(guid2' 6' 7' 2' 5' 3' 4' 1' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ParseBitStream(guid2' 6' 7' 2' 5' 3' 4' 1' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ParseBitStream(guid2' 6' 7' 2' 5' 3' 4' 1' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ParseBitStream(guid2' 6' 7' 2' 5' 3' 4' 1' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ParseBitStream(guid2' 6' 7' 2' 5' 3' 4' 1' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ParseBitStream(guid2' 6' 7' 2' 5' 3' 4' 1' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 4)                  packet.ReadSingle("Facing Angle");
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORByte(ownerGUID' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 2)              {                  packet.ReadSingle("FloatA8");                  packet.ReadSingle("FloatAC");                  packet.ReadSingle("FloatB0");              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORByte(ownerGUID' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORByte(ownerGUID' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORByte(ownerGUID' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: var transGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: if (onTransport)                  packet.StartBitStream(transGuid' 1' 3' 6' 4' 5' 7' 0' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: if (onTransport)                  packet.StartBitStream(transGuid' 1' 3' 6' 4' 5' 7' 0' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: if (onTransport)                  packet.StartBitStream(transGuid' 1' 3' 6' 4' 5' 7' 0' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: if (onTransport)                  packet.StartBitStream(transGuid' 1' 3' 6' 4' 5' 7' 0' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: if (onTransport)                  packet.StartBitStream(transGuid' 1' 3' 6' 4' 5' 7' 0' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: if (onTransport)                  packet.StartBitStream(transGuid' 1' 3' 6' 4' 5' 7' 0' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: if (onTransport)              {                  packet.ParseBitStream(transGuid' 2' 3' 5' 0' 4' 6' 1' 7);                  packet.WriteGuid("Transport Guid"' transGuid);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: if (onTransport)              {                  packet.ParseBitStream(transGuid' 2' 3' 5' 0' 4' 6' 1' 7);                  packet.WriteGuid("Transport Guid"' transGuid);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: if (onTransport)              {                  packet.ParseBitStream(transGuid' 2' 3' 5' 0' 4' 6' 1' 7);                  packet.WriteGuid("Transport Guid"' transGuid);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: if (onTransport)              {                  packet.ParseBitStream(transGuid' 2' 3' 5' 0' 4' 6' 1' 7);                  packet.WriteGuid("Transport Guid"' transGuid);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: if (onTransport)              {                  packet.ParseBitStream(transGuid' 2' 3' 5' 0' 4' 6' 1' 7);                  packet.WriteGuid("Transport Guid"' transGuid);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: if (onTransport)              {                  packet.ParseBitStream(transGuid' 2' 3' 5' 0' 4' 6' 1' 7);                  packet.WriteGuid("Transport Guid"' transGuid);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveTeleport,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetRunSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(3' 4' 5' 7' 1' 2' 6' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetRunSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(3' 4' 5' 7' 1' 2' 6' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetRunSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(3' 4' 5' 7' 1' 2' 6' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetRunSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(3' 4' 5' 7' 1' 2' 6' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetRunSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(3' 4' 5' 7' 1' 2' 6' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetRunSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(3' 4' 5' 7' 1' 2' 6' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetRunSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetRunSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetRunSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetRunSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetRunSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetRunSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetWalkSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(2' 6' 1' 0' 3' 5' 4' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetWalkSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(2' 6' 1' 0' 3' 5' 4' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetWalkSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(2' 6' 1' 0' 3' 5' 4' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetWalkSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(2' 6' 1' 0' 3' 5' 4' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetWalkSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(2' 6' 1' 0' 3' 5' 4' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetWalkSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(2' 6' 1' 0' 3' 5' 4' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetWalkSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetWalkSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetWalkSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetWalkSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetWalkSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetWalkSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(5' 1' 4' 3' 0' 7' 2' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(5' 1' 4' 3' 0' 7' 2' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(5' 1' 4' 3' 0' 7' 2' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(5' 1' 4' 3' 0' 7' 2' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(5' 1' 4' 3' 0' 7' 2' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(5' 1' 4' 3' 0' 7' 2' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFlightSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(1' 5' 3' 0' 6' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFlightSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(1' 5' 3' 0' 6' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFlightSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(1' 5' 3' 0' 6' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFlightSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(1' 5' 3' 0' 6' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFlightSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(1' 5' 3' 0' 6' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFlightSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(1' 5' 3' 0' 6' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFlightSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFlightSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFlightSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFlightSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFlightSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFlightSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleSetCanFly,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleSetCanFly,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4' 7' 0' 6' 3' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleSetCanFly,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4' 7' 0' 6' 3' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleSetCanFly,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4' 7' 0' 6' 3' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleSetCanFly,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4' 7' 0' 6' 3' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleSetCanFly,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4' 7' 0' 6' 3' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleSetCanFly,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4' 7' 0' 6' 3' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleSetCanFly,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleSetCanFly,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleSetCanFly,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleSetCanFly,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleSetCanFly,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleSetCanFly,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleUnsetCanFly,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleUnsetCanFly,The following statement contains a magic number: packet.StartBitStream(guid' 2' 6' 1' 7' 4' 5' 3' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleUnsetCanFly,The following statement contains a magic number: packet.StartBitStream(guid' 2' 6' 1' 7' 4' 5' 3' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleUnsetCanFly,The following statement contains a magic number: packet.StartBitStream(guid' 2' 6' 1' 7' 4' 5' 3' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleUnsetCanFly,The following statement contains a magic number: packet.StartBitStream(guid' 2' 6' 1' 7' 4' 5' 3' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleUnsetCanFly,The following statement contains a magic number: packet.StartBitStream(guid' 2' 6' 1' 7' 4' 5' 3' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleUnsetCanFly,The following statement contains a magic number: packet.StartBitStream(guid' 2' 6' 1' 7' 4' 5' 3' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleUnsetCanFly,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 4' 5' 1' 7' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleUnsetCanFly,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 4' 5' 1' 7' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleUnsetCanFly,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 4' 5' 1' 7' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleUnsetCanFly,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 4' 5' 1' 7' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleUnsetCanFly,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 4' 5' 1' 7' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleUnsetCanFly,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 4' 5' 1' 7' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: var transportGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: var bits98 = (int)packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: if (hasTrans)              {                  transportGuid[3] = packet.ReadBit();                  bit64 = packet.ReadBit();                  transportGuid[2] = packet.ReadBit();                  bit5C = packet.ReadBit();                  transportGuid[5] = packet.ReadBit();                  transportGuid[7] = packet.ReadBit();                  transportGuid[6] = packet.ReadBit();                  transportGuid[1] = packet.ReadBit();                  transportGuid[4] = packet.ReadBit();                  transportGuid[0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: if (hasTrans)              {                  transportGuid[3] = packet.ReadBit();                  bit64 = packet.ReadBit();                  transportGuid[2] = packet.ReadBit();                  bit5C = packet.ReadBit();                  transportGuid[5] = packet.ReadBit();                  transportGuid[7] = packet.ReadBit();                  transportGuid[6] = packet.ReadBit();                  transportGuid[1] = packet.ReadBit();                  transportGuid[4] = packet.ReadBit();                  transportGuid[0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: if (hasTrans)              {                  transportGuid[3] = packet.ReadBit();                  bit64 = packet.ReadBit();                  transportGuid[2] = packet.ReadBit();                  bit5C = packet.ReadBit();                  transportGuid[5] = packet.ReadBit();                  transportGuid[7] = packet.ReadBit();                  transportGuid[6] = packet.ReadBit();                  transportGuid[1] = packet.ReadBit();                  transportGuid[4] = packet.ReadBit();                  transportGuid[0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: if (hasTrans)              {                  transportGuid[3] = packet.ReadBit();                  bit64 = packet.ReadBit();                  transportGuid[2] = packet.ReadBit();                  bit5C = packet.ReadBit();                  transportGuid[5] = packet.ReadBit();                  transportGuid[7] = packet.ReadBit();                  transportGuid[6] = packet.ReadBit();                  transportGuid[1] = packet.ReadBit();                  transportGuid[4] = packet.ReadBit();                  transportGuid[0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: if (hasTrans)              {                  transportGuid[3] = packet.ReadBit();                  bit64 = packet.ReadBit();                  transportGuid[2] = packet.ReadBit();                  bit5C = packet.ReadBit();                  transportGuid[5] = packet.ReadBit();                  transportGuid[7] = packet.ReadBit();                  transportGuid[6] = packet.ReadBit();                  transportGuid[1] = packet.ReadBit();                  transportGuid[4] = packet.ReadBit();                  transportGuid[0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: if (hasTrans)              {                  transportGuid[3] = packet.ReadBit();                  bit64 = packet.ReadBit();                  transportGuid[2] = packet.ReadBit();                  bit5C = packet.ReadBit();                  transportGuid[5] = packet.ReadBit();                  transportGuid[7] = packet.ReadBit();                  transportGuid[6] = packet.ReadBit();                  transportGuid[1] = packet.ReadBit();                  transportGuid[4] = packet.ReadBit();                  transportGuid[0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: if (hasMovementFlagsExtra)                  packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: if (hasMovementFlags)                  packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 4' 7' 0' 2' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 4' 7' 0' 2' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 4' 7' 0' 2' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 4' 7' 0' 2' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 4' 7' 0' 2' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 4' 7' 0' 2' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: if (hasTrans)              {                  packet.ReadSingle("Float48");                    packet.ReadXORByte(transportGuid' 2);                  packet.ReadXORByte(transportGuid' 6);                  packet.ReadXORByte(transportGuid' 7);                    if (bit5C)                      packet.ReadInt32("Int58");                    packet.ReadXORByte(transportGuid' 4);                    packet.ReadInt32("Int54");                  packet.ReadByte("Byte50");                    packet.ReadXORByte(transportGuid' 1);                  packet.ReadXORByte(transportGuid' 5);                    if (bit64)                      packet.ReadInt32("Int60");                    packet.ReadSingle("Float4C");                  packet.ReadXORByte(transportGuid' 3);                  packet.ReadXORByte(transportGuid' 0);                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float40");                    packet.WriteGuid("Transport Guid"' transportGuid);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: if (hasTrans)              {                  packet.ReadSingle("Float48");                    packet.ReadXORByte(transportGuid' 2);                  packet.ReadXORByte(transportGuid' 6);                  packet.ReadXORByte(transportGuid' 7);                    if (bit5C)                      packet.ReadInt32("Int58");                    packet.ReadXORByte(transportGuid' 4);                    packet.ReadInt32("Int54");                  packet.ReadByte("Byte50");                    packet.ReadXORByte(transportGuid' 1);                  packet.ReadXORByte(transportGuid' 5);                    if (bit64)                      packet.ReadInt32("Int60");                    packet.ReadSingle("Float4C");                  packet.ReadXORByte(transportGuid' 3);                  packet.ReadXORByte(transportGuid' 0);                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float40");                    packet.WriteGuid("Transport Guid"' transportGuid);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: if (hasTrans)              {                  packet.ReadSingle("Float48");                    packet.ReadXORByte(transportGuid' 2);                  packet.ReadXORByte(transportGuid' 6);                  packet.ReadXORByte(transportGuid' 7);                    if (bit5C)                      packet.ReadInt32("Int58");                    packet.ReadXORByte(transportGuid' 4);                    packet.ReadInt32("Int54");                  packet.ReadByte("Byte50");                    packet.ReadXORByte(transportGuid' 1);                  packet.ReadXORByte(transportGuid' 5);                    if (bit64)                      packet.ReadInt32("Int60");                    packet.ReadSingle("Float4C");                  packet.ReadXORByte(transportGuid' 3);                  packet.ReadXORByte(transportGuid' 0);                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float40");                    packet.WriteGuid("Transport Guid"' transportGuid);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: if (hasTrans)              {                  packet.ReadSingle("Float48");                    packet.ReadXORByte(transportGuid' 2);                  packet.ReadXORByte(transportGuid' 6);                  packet.ReadXORByte(transportGuid' 7);                    if (bit5C)                      packet.ReadInt32("Int58");                    packet.ReadXORByte(transportGuid' 4);                    packet.ReadInt32("Int54");                  packet.ReadByte("Byte50");                    packet.ReadXORByte(transportGuid' 1);                  packet.ReadXORByte(transportGuid' 5);                    if (bit64)                      packet.ReadInt32("Int60");                    packet.ReadSingle("Float4C");                  packet.ReadXORByte(transportGuid' 3);                  packet.ReadXORByte(transportGuid' 0);                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float40");                    packet.WriteGuid("Transport Guid"' transportGuid);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: if (hasTrans)              {                  packet.ReadSingle("Float48");                    packet.ReadXORByte(transportGuid' 2);                  packet.ReadXORByte(transportGuid' 6);                  packet.ReadXORByte(transportGuid' 7);                    if (bit5C)                      packet.ReadInt32("Int58");                    packet.ReadXORByte(transportGuid' 4);                    packet.ReadInt32("Int54");                  packet.ReadByte("Byte50");                    packet.ReadXORByte(transportGuid' 1);                  packet.ReadXORByte(transportGuid' 5);                    if (bit64)                      packet.ReadInt32("Int60");                    packet.ReadSingle("Float4C");                  packet.ReadXORByte(transportGuid' 3);                  packet.ReadXORByte(transportGuid' 0);                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float40");                    packet.WriteGuid("Transport Guid"' transportGuid);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveSetFacing,The following statement contains a magic number: if (hasTrans)              {                  packet.ReadSingle("Float48");                    packet.ReadXORByte(transportGuid' 2);                  packet.ReadXORByte(transportGuid' 6);                  packet.ReadXORByte(transportGuid' 7);                    if (bit5C)                      packet.ReadInt32("Int58");                    packet.ReadXORByte(transportGuid' 4);                    packet.ReadInt32("Int54");                  packet.ReadByte("Byte50");                    packet.ReadXORByte(transportGuid' 1);                  packet.ReadXORByte(transportGuid' 5);                    if (bit64)                      packet.ReadInt32("Int60");                    packet.ReadSingle("Float4C");                  packet.ReadXORByte(transportGuid' 3);                  packet.ReadXORByte(transportGuid' 0);                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float40");                    packet.WriteGuid("Transport Guid"' transportGuid);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 7' 2' 3' 6' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 7' 2' 3' 6' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 7' 2' 3' 6' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 7' 2' 3' 6' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 7' 2' 3' 6' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 7' 2' 3' 6' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: var transportGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: var bits98 = (int)packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: if (hasMovementFlagExtra)                  packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: if (hasTrans)              {                  transportGuid[3] = packet.ReadBit();                  hasTransportTime3 = packet.ReadBit();                  transportGuid[4] = packet.ReadBit();                  transportGuid[6] = packet.ReadBit();                  transportGuid[7] = packet.ReadBit();                  transportGuid[0] = packet.ReadBit();                  transportGuid[2] = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  transportGuid[1] = packet.ReadBit();                  transportGuid[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: if (hasTrans)              {                  transportGuid[3] = packet.ReadBit();                  hasTransportTime3 = packet.ReadBit();                  transportGuid[4] = packet.ReadBit();                  transportGuid[6] = packet.ReadBit();                  transportGuid[7] = packet.ReadBit();                  transportGuid[0] = packet.ReadBit();                  transportGuid[2] = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  transportGuid[1] = packet.ReadBit();                  transportGuid[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: if (hasTrans)              {                  transportGuid[3] = packet.ReadBit();                  hasTransportTime3 = packet.ReadBit();                  transportGuid[4] = packet.ReadBit();                  transportGuid[6] = packet.ReadBit();                  transportGuid[7] = packet.ReadBit();                  transportGuid[0] = packet.ReadBit();                  transportGuid[2] = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  transportGuid[1] = packet.ReadBit();                  transportGuid[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: if (hasTrans)              {                  transportGuid[3] = packet.ReadBit();                  hasTransportTime3 = packet.ReadBit();                  transportGuid[4] = packet.ReadBit();                  transportGuid[6] = packet.ReadBit();                  transportGuid[7] = packet.ReadBit();                  transportGuid[0] = packet.ReadBit();                  transportGuid[2] = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  transportGuid[1] = packet.ReadBit();                  transportGuid[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: if (hasTrans)              {                  transportGuid[3] = packet.ReadBit();                  hasTransportTime3 = packet.ReadBit();                  transportGuid[4] = packet.ReadBit();                  transportGuid[6] = packet.ReadBit();                  transportGuid[7] = packet.ReadBit();                  transportGuid[0] = packet.ReadBit();                  transportGuid[2] = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  transportGuid[1] = packet.ReadBit();                  transportGuid[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: if (hasTrans)              {                  transportGuid[3] = packet.ReadBit();                  hasTransportTime3 = packet.ReadBit();                  transportGuid[4] = packet.ReadBit();                  transportGuid[6] = packet.ReadBit();                  transportGuid[7] = packet.ReadBit();                  transportGuid[0] = packet.ReadBit();                  transportGuid[2] = packet.ReadBit();                  hasTransportTime2 = packet.ReadBit();                  transportGuid[1] = packet.ReadBit();                  transportGuid[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: if (hasMovementFlag)                  packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: if (hasTrans)              {                  var tpos = new Vector4();                    tpos.Y = packet.ReadSingle();                  tpos.X = packet.ReadSingle();                  packet.ReadByte("Transport Seat");                  packet.ReadXORByte(transportGuid' 7);                  tpos.O = packet.ReadSingle();                  packet.ReadXORByte(transportGuid' 1);                  packet.ReadXORByte(transportGuid' 0);                  packet.ReadXORByte(transportGuid' 2);                    if (hasTransportTime3)                      packet.ReadUInt32("Transport Time 3");                    packet.ReadXORByte(transportGuid' 3);                  packet.ReadUInt32("Transport Time");                    if (hasTransportTime2)                      packet.ReadUInt32("Transport Time 2");                    packet.ReadXORByte(transportGuid' 5);                  tpos.Z = packet.ReadSingle();                  packet.ReadXORByte(transportGuid' 4);                  packet.ReadXORByte(transportGuid' 6);                    packet.WriteGuid("Transport Guid"' transportGuid);                  packet.AddValue("Transport Position"' tpos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: if (hasTrans)              {                  var tpos = new Vector4();                    tpos.Y = packet.ReadSingle();                  tpos.X = packet.ReadSingle();                  packet.ReadByte("Transport Seat");                  packet.ReadXORByte(transportGuid' 7);                  tpos.O = packet.ReadSingle();                  packet.ReadXORByte(transportGuid' 1);                  packet.ReadXORByte(transportGuid' 0);                  packet.ReadXORByte(transportGuid' 2);                    if (hasTransportTime3)                      packet.ReadUInt32("Transport Time 3");                    packet.ReadXORByte(transportGuid' 3);                  packet.ReadUInt32("Transport Time");                    if (hasTransportTime2)                      packet.ReadUInt32("Transport Time 2");                    packet.ReadXORByte(transportGuid' 5);                  tpos.Z = packet.ReadSingle();                  packet.ReadXORByte(transportGuid' 4);                  packet.ReadXORByte(transportGuid' 6);                    packet.WriteGuid("Transport Guid"' transportGuid);                  packet.AddValue("Transport Position"' tpos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: if (hasTrans)              {                  var tpos = new Vector4();                    tpos.Y = packet.ReadSingle();                  tpos.X = packet.ReadSingle();                  packet.ReadByte("Transport Seat");                  packet.ReadXORByte(transportGuid' 7);                  tpos.O = packet.ReadSingle();                  packet.ReadXORByte(transportGuid' 1);                  packet.ReadXORByte(transportGuid' 0);                  packet.ReadXORByte(transportGuid' 2);                    if (hasTransportTime3)                      packet.ReadUInt32("Transport Time 3");                    packet.ReadXORByte(transportGuid' 3);                  packet.ReadUInt32("Transport Time");                    if (hasTransportTime2)                      packet.ReadUInt32("Transport Time 2");                    packet.ReadXORByte(transportGuid' 5);                  tpos.Z = packet.ReadSingle();                  packet.ReadXORByte(transportGuid' 4);                  packet.ReadXORByte(transportGuid' 6);                    packet.WriteGuid("Transport Guid"' transportGuid);                  packet.AddValue("Transport Position"' tpos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: if (hasTrans)              {                  var tpos = new Vector4();                    tpos.Y = packet.ReadSingle();                  tpos.X = packet.ReadSingle();                  packet.ReadByte("Transport Seat");                  packet.ReadXORByte(transportGuid' 7);                  tpos.O = packet.ReadSingle();                  packet.ReadXORByte(transportGuid' 1);                  packet.ReadXORByte(transportGuid' 0);                  packet.ReadXORByte(transportGuid' 2);                    if (hasTransportTime3)                      packet.ReadUInt32("Transport Time 3");                    packet.ReadXORByte(transportGuid' 3);                  packet.ReadUInt32("Transport Time");                    if (hasTransportTime2)                      packet.ReadUInt32("Transport Time 2");                    packet.ReadXORByte(transportGuid' 5);                  tpos.Z = packet.ReadSingle();                  packet.ReadXORByte(transportGuid' 4);                  packet.ReadXORByte(transportGuid' 6);                    packet.WriteGuid("Transport Guid"' transportGuid);                  packet.AddValue("Transport Position"' tpos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: if (hasTrans)              {                  var tpos = new Vector4();                    tpos.Y = packet.ReadSingle();                  tpos.X = packet.ReadSingle();                  packet.ReadByte("Transport Seat");                  packet.ReadXORByte(transportGuid' 7);                  tpos.O = packet.ReadSingle();                  packet.ReadXORByte(transportGuid' 1);                  packet.ReadXORByte(transportGuid' 0);                  packet.ReadXORByte(transportGuid' 2);                    if (hasTransportTime3)                      packet.ReadUInt32("Transport Time 3");                    packet.ReadXORByte(transportGuid' 3);                  packet.ReadUInt32("Transport Time");                    if (hasTransportTime2)                      packet.ReadUInt32("Transport Time 2");                    packet.ReadXORByte(transportGuid' 5);                  tpos.Z = packet.ReadSingle();                  packet.ReadXORByte(transportGuid' 4);                  packet.ReadXORByte(transportGuid' 6);                    packet.WriteGuid("Transport Guid"' transportGuid);                  packet.AddValue("Transport Position"' tpos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleMoveHeartbeat,The following statement contains a magic number: if (hasTrans)              {                  var tpos = new Vector4();                    tpos.Y = packet.ReadSingle();                  tpos.X = packet.ReadSingle();                  packet.ReadByte("Transport Seat");                  packet.ReadXORByte(transportGuid' 7);                  tpos.O = packet.ReadSingle();                  packet.ReadXORByte(transportGuid' 1);                  packet.ReadXORByte(transportGuid' 0);                  packet.ReadXORByte(transportGuid' 2);                    if (hasTransportTime3)                      packet.ReadUInt32("Transport Time 3");                    packet.ReadXORByte(transportGuid' 3);                  packet.ReadUInt32("Transport Time");                    if (hasTransportTime2)                      packet.ReadUInt32("Transport Time 2");                    packet.ReadXORByte(transportGuid' 5);                  tpos.Z = packet.ReadSingle();                  packet.ReadXORByte(transportGuid' 4);                  packet.ReadXORByte(transportGuid' 6);                    packet.WriteGuid("Transport Guid"' transportGuid);                  packet.AddValue("Transport Position"' tpos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(7' 5' 0' 4' 3' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(7' 5' 0' 4' 3' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(7' 5' 0' 4' 3' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(7' 5' 0' 4' 3' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(7' 5' 0' 4' 3' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(7' 5' 0' 4' 3' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 5' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 5' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 5' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var count = packet.ReadUInt32() / 2;
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: count = packet.ReadUInt32() / 2;
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ParseBitStream(guid' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: count = packet.ReadUInt32() / 2;
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: count = packet.ReadUInt32() / 2;
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ParseBitStream(guid' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 4' 6' 5' 3' 1' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 4' 6' 5' 3' 1' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 4' 6' 5' 3' 1' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 4' 6' 5' 3' 1' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 4' 6' 5' 3' 1' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 4' 6' 5' 3' 1' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 6' 4' 7' 0' 3' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 6' 4' 7' 0' 3' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 6' 4' 7' 0' 3' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 6' 4' 7' 0' 3' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 6' 4' 7' 0' 3' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 6' 4' 7' 0' 3' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.StartBitStream(guid' 5' 2' 0' 4' 7' 1' 6' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.StartBitStream(guid' 5' 2' 0' 4' 7' 1' 6' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.StartBitStream(guid' 5' 2' 0' 4' 7' 1' 6' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.StartBitStream(guid' 5' 2' 0' 4' 7' 1' 6' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.StartBitStream(guid' 5' 2' 0' 4' 7' 1' 6' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.StartBitStream(guid' 5' 2' 0' 4' 7' 1' 6' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 4' 6' 1' 0' 2' 7' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 4' 6' 1' 0' 2' 7' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 4' 6' 1' 0' 2' 7' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 4' 6' 1' 0' 2' 7' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 4' 6' 1' 0' 2' 7' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 4' 6' 1' 0' 2' 7' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: var guidBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: guidBytes[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: guidBytes[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: int questgossips = (int)packet.ReadBits(19);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: guidBytes[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: for (int i = 0; i < questgossips; ++i)              {                  titleLen[i] = packet.ReadBits(9);                  packet.ReadBit("Change Icon"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: guidBytes[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: guidBytes[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: uint amountOfOptions = packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: for (int i = 0; i < amountOfOptions; ++i)              {                  boxTextLen[i] = packet.ReadBits(12);                  optionTextLen[i] = packet.ReadBits(12);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: for (int i = 0; i < amountOfOptions; ++i)              {                  boxTextLen[i] = packet.ReadBits(12);                  optionTextLen[i] = packet.ReadBits(12);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: guidBytes[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: var bits8 = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 7' 4' 3' 0' 2' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 7' 4' 3' 0' 2' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 7' 4' 3' 0' 2' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 7' 4' 3' 0' 2' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 7' 4' 3' 0' 2' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 7' 4' 3' 0' 2' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 7' 1' 4' 3' 5' 2' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 7' 1' 4' 3' 5' 2' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 7' 1' 4' 3' 5' 2' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 7' 1' 4' 3' 5' 2' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 7' 1' 4' 3' 5' 2' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 7' 1' 4' 3' 5' 2' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcTextUpdate,The following statement contains a magic number: npcText.Probabilities = new float[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcTextUpdate,The following statement contains a magic number: npcText.BroadcastTextId = new uint[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcTextUpdate,The following statement contains a magic number: for (int i = 0; i < 8; ++i)                  npcText.Probabilities[i] = pkt.ReadSingle("Probability"' i);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleNpcTextUpdate,The following statement contains a magic number: for (int i = 0; i < 8; ++i)                  npcText.BroadcastTextId[i] = pkt.ReadUInt32("Broadcast Text Id"' i);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: int count = (int)packet.ReadBits(18);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  NpcVendor vendor = new NpcVendor                  {                      Type = packet.ReadUInt32("Type"' i)                  };                    uint buyCount = packet.ReadUInt32("Buy Count"' i);                  int maxCount = packet.ReadInt32("Max Count"' i);                  vendor.MaxCount = maxCount == -1 ? 0 : (uint)maxCount; // TDB                  if (vendor.Type == 2)                      vendor.MaxCount = buyCount;                    packet.ReadInt32("Display ID"' i);                  vendor.Slot = packet.ReadInt32("Item Position"' i);                  packet.ReadInt32("Max Durability"' i);                  packet.ReadInt32("Price"' i);                    if (hasExtendedCost[i])                      vendor.ExtendedCost = packet.ReadUInt32("Extended Cost"' i);                    packet.ReadInt32("Item Upgrade ID"' i);                  vendor.Item = packet.ReadInt32<ItemId>("Item ID"' i);                    if (hasCondition[i])                      vendor.PlayerConditionID = packet.ReadUInt32("Condition ID"' i);                    tempList.Add(vendor);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: var guidBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: guidBytes[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: uint titleLen = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: guidBytes[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: guidBytes[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: guidBytes[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: guidBytes[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: guidBytes[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: uint count = packet.ReadBits("Spells"' 19);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  TrainerSpell trainerSpell = new TrainerSpell                  {                      ReqAbility = new uint[3]                  };                  for (int j = 0; j < 3; ++j)                      trainerSpell.ReqAbility[j] = packet.ReadUInt32<SpellId>("ReqAbility"' i' j);                    packet.ReadByteE<TrainerSpellState>("Usable"' i);                  trainerSpell.ReqSkillLine = packet.ReadUInt32("ReqSkillLine"' i);                  trainerSpell.SpellId = packet.ReadUInt32<SpellId>("SpellID"' i);                  trainerSpell.MoneyCost = packet.ReadUInt32("MoneyCost"' i);                  trainerSpell.ReqLevel = packet.ReadByte("ReqLevel"' i);                  trainerSpell.ReqSkillRank = packet.ReadUInt32("ReqSkillRank"' i);                    tempList.Add(trainerSpell);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  TrainerSpell trainerSpell = new TrainerSpell                  {                      ReqAbility = new uint[3]                  };                  for (int j = 0; j < 3; ++j)                      trainerSpell.ReqAbility[j] = packet.ReadUInt32<SpellId>("ReqAbility"' i' j);                    packet.ReadByteE<TrainerSpellState>("Usable"' i);                  trainerSpell.ReqSkillLine = packet.ReadUInt32("ReqSkillLine"' i);                  trainerSpell.SpellId = packet.ReadUInt32<SpellId>("SpellID"' i);                  trainerSpell.MoneyCost = packet.ReadUInt32("MoneyCost"' i);                  trainerSpell.ReqLevel = packet.ReadByte("ReqLevel"' i);                  trainerSpell.ReqSkillRank = packet.ReadUInt32("ReqSkillRank"' i);                    tempList.Add(trainerSpell);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleBankerActivate,The following statement contains a magic number: var guid = packet.StartBitStream(0' 1' 5' 2' 4' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleBankerActivate,The following statement contains a magic number: var guid = packet.StartBitStream(0' 1' 5' 2' 4' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleBankerActivate,The following statement contains a magic number: var guid = packet.StartBitStream(0' 1' 5' 2' 4' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleBankerActivate,The following statement contains a magic number: var guid = packet.StartBitStream(0' 1' 5' 2' 4' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleBankerActivate,The following statement contains a magic number: var guid = packet.StartBitStream(0' 1' 5' 2' 4' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleBankerActivate,The following statement contains a magic number: var guid = packet.StartBitStream(0' 1' 5' 2' 4' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleBankerActivate,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 2' 0' 7' 4' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleBankerActivate,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 2' 0' 7' 4' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleBankerActivate,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 2' 0' 7' 4' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleBankerActivate,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 2' 0' 7' 4' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleBankerActivate,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 2' 0' 7' 4' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\NpcHandler.cs,HandleBankerActivate,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 2' 0' 7' 4' 5' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: var number = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: number[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: number[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: number[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: number[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: number[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: number[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(number' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(number' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(number' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(number' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(number' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(number' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQueryResponse,The following statement contains a magic number: var len = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQueryResponse,The following statement contains a magic number: const int maxDeclinedNameCases = 5;
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\PetHandler.cs,HandlePetNameQueryResponse,The following statement contains a magic number: for (var i = 0; i < maxDeclinedNameCases; ++i)                  declinedNameLen[i] = (int)packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ReputationHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ReputationHandler.cs,HandleInitializeFactions,The following statement contains a magic number: for (var i = 0; i < 256; i++)              {                  packet.ReadUInt32E<ReputationRank>("Faction Standing"' i);                  packet.ReadByteE<FactionFlag>("Faction Flags"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,ReputationHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\ReputationHandler.cs,HandleInitializeFactions,The following statement contains a magic number: for (var i = 0; i < 256; i++)                  packet.ReadBit("Count"' i);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: uint bits2C = packet.ReadBits(6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: uint bits24 = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: uint qItemCount = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: var stringLens = new int[4][];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][1] = (int)packet.ReadBits(11);                  stringLens[i][0] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][1] = (int)packet.ReadBits(11);                  stringLens[i][0] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][1] = (int)packet.ReadBits(11);                  stringLens[i][0] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][1] = (int)packet.ReadBits(11);                  stringLens[i][0] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: int bits1C = (int)packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.ModelIDs = new uint?[4];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.KillCredits = new uint?[2];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: var name = new string[4];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: var femaleName = new string[4];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; ++i)              {                  if (stringLens[i][0] > 1)                      name[i] = packet.ReadCString("Name"' i);                  if (stringLens[i][1] > 1)                      femaleName[i] = packet.ReadCString("Female Name"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.ModelIDs[3] = packet.ReadUInt32("Display ID 3");
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.ModelIDs[2] = packet.ReadUInt32("Display ID 2");
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: uint count = packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 3' 7' 5' 6' 2' 0' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 3' 7' 5' 6' 2' 0' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 3' 7' 5' 6' 2' 0' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 3' 7' 5' 6' 2' 0' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 3' 7' 5' 6' 2' 0' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 3' 7' 5' 6' 2' 0' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 3' 7' 5' 6' 2' 0' 4' 1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 5' 1' 4' 6' 7' 2' 0' 3);                  packet.ReadInt32("Entry"' i);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 5' 1' 4' 6' 7' 2' 0' 3);                  packet.ReadInt32("Entry"' i);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 5' 1' 4' 6' 7' 2' 0' 3);                  packet.ReadInt32("Entry"' i);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 5' 1' 4' 6' 7' 2' 0' 3);                  packet.ReadInt32("Entry"' i);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 5' 1' 4' 6' 7' 2' 0' 3);                  packet.ReadInt32("Entry"' i);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 5' 1' 4' 6' 7' 2' 0' 3);                  packet.ReadInt32("Entry"' i);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.StartBitStream(guid' 0' 6' 2' 1' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.StartBitStream(guid' 0' 6' 2' 1' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.StartBitStream(guid' 0' 6' 2' 1' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.StartBitStream(guid' 3' 5' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.StartBitStream(guid' 3' 5' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.StartBitStream(guid' 3' 5' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 2' 4' 7' 6' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 2' 4' 7' 6' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 2' 4' 7' 6' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 2' 4' 7' 6' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 2' 4' 7' 6' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 2' 4' 7' 6' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 0' 7' 3' 5' 6' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 0' 7' 3' 5' 6' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 0' 7' 3' 5' 6' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 0' 7' 3' 5' 6' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 0' 7' 3' 5' 6' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 0' 7' 3' 5' 6' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 1' 3' 2' 4' 7' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 1' 3' 2' 4' 7' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 1' 3' 2' 4' 7' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 1' 3' 2' 4' 7' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 1' 3' 2' 4' 7' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 1' 3' 2' 4' 7' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandlePageTextResponse,The following statement contains a magic number: uint textLen = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: var accountId = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid2[3] = packet.ReadBit();                  accountId[7] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    accountId[3] = packet.ReadBit();                  guid2[0] = packet.ReadBit();                  accountId[5] = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  accountId[0] = packet.ReadBit();                  guid2[6] = packet.ReadBit();                  guid2[7] = packet.ReadBit();                  accountId[6] = packet.ReadBit();                  accountId[1] = packet.ReadBit();                  var bit20 = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  var bits38 = (int)packet.ReadBits(6);                  guid2[2] = packet.ReadBit();                  accountId[4] = packet.ReadBit();                  guid2[5] = packet.ReadBit();                  accountId[2] = packet.ReadBit();                    packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 5);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadWoWString("Name"' bits38);                    packet.ReadXORByte(accountId' 2);                  packet.ReadXORByte(accountId' 5);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadXORByte(accountId' 0);                  packet.ReadXORByte(accountId' 6);                  packet.ReadXORByte(accountId' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadXORByte(accountId' 4);                  packet.ReadXORByte(accountId' 3);                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(accountId' 7);                  packet.ReadXORByte(guid2' 2);                    packet.AddValue("Account"' BitConverter.ToUInt64(accountId' 0));                  packet.WriteGuid("Guid2"' guid2);                }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleRealmQueryResponse,The following statement contains a magic number: var bits22 = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QueryHandler.cs,HandleRealmQueryResponse,The following statement contains a magic number: var bits278 = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestNpcQuery,The following statement contains a magic number: var count = packet.ReadBits("Count"' 22);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestPoiQueryResponse,The following statement contains a magic number: uint count = packet.ReadBits("Count"' 20);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestPoiQueryResponse,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  poiCounter[i] = packet.ReadBits("POI Counter"' 18' i);                  pointsSize[i] = new uint[poiCounter[i]];                    for (int j = 0; j < poiCounter[i]; ++j)                      pointsSize[i][j] = packet.ReadBits("Points Counter"' 21' i' j);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestPoiQueryResponse,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  poiCounter[i] = packet.ReadBits("POI Counter"' 18' i);                  pointsSize[i] = new uint[poiCounter[i]];                    for (int j = 0; j < poiCounter[i]; ++j)                      pointsSize[i][j] = packet.ReadBits("Points Counter"' 21' i' j);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.StartBitStream(guid' 1' 6' 3' 5' 0' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.StartBitStream(guid' 1' 6' 3' 5' 0' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.StartBitStream(guid' 1' 6' 3' 5' 0' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.StartBitStream(guid' 1' 6' 3' 5' 0' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.StartBitStream(guid' 1' 6' 3' 5' 0' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.StartBitStream(guid' 1' 6' 3' 5' 0' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 4' 1' 7' 6' 3' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 4' 1' 7' 6' 3' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 4' 1' 7' 6' 3' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 4' 1' 7' 6' 3' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 4' 1' 7' 6' 3' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 4' 1' 7' 6' 3' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: var bits19E8 = (int)packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: var bits2604 = (int)packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: var bits278 = (int)packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: var bits2004 = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: var bits2504 = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: var bits1C04 = (int)packet.ReadBits(10);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: var bits78 = (int)packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: var bitsE30 = (int)packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: var bits2E10 = (int)packet.ReadBits(19);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (var i = 0; i < bits2E10; ++i)             {                 len2949_20[i] = packet.ReadBits(8);                 bits114[i] = packet.ReadBits(22);             }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (var i = 0; i < bits2E10; ++i)             {                 len2949_20[i] = packet.ReadBits(8);                 bits114[i] = packet.ReadBits(22);             }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: var bits2104 = (int)packet.ReadBits(10);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (var i = 0; i < 5; ++i)              {                  packet.ReadInt32("int2986+40"' i);                  packet.ReadInt32("int2986+0"' i);                  packet.ReadInt32("int2986+20"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (var i = 0; i < 4; ++i)              {                  packet.ReadInt32("int3001+16"' i);                  packet.ReadInt32("int3001+0"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 5' 4' 3' 0' 6' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 5' 4' 3' 0' 6' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 5' 4' 3' 0' 6' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 5' 4' 3' 0' 6' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 5' 4' 3' 0' 6' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.StartBitStream(guid' 7' 2' 5' 4' 3' 0' 6' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 5' 0' 3' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 5' 0' 3' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 5' 0' 3' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 5' 0' 3' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 5' 0' 3' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 5' 0' 3' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleMessageOfTheDay,The following statement contains a magic number: var lineCount = packet.ReadBits("Line Count"' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleMessageOfTheDay,The following statement contains a magic number: for (var i = 0; i < lineCount; i++)                  lineLength[i] = (int)packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bits20 = packet.ReadBits(21);                  bit78 = packet.ReadBit();                    bits0 = new uint[bits20];                  bits0C = new uint[bits20];                    for (var i = 0; i < bits20; ++i)                  {                      bits0[i] = packet.ReadBits(8);                      packet.ReadBit("unk bit"' i);                      bits0C[i] = packet.ReadBits(8);                  }                    packet.ReadBit();                  packet.ReadBit();                  classCount = packet.ReadBits("Class Activation Count"' 23);                  raceCount = packet.ReadBits("Race Activation Count"' 23);                  bit7C = packet.ReadBit();                  packet.ReadBit();                  bits64 = packet.ReadBits(21);                    bits45 = new uint[bits64];                  bits68 = new uint[bits64];                  bits448 = new uint[bits64];                    for (var i = 0; i < bits64; ++i)                  {                      bits45[i] = packet.ReadBits(10);                      bits68[i] = packet.ReadBits(7);                      bits448[i] = packet.ReadBits(23);                  }              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bits20 = packet.ReadBits(21);                  bit78 = packet.ReadBit();                    bits0 = new uint[bits20];                  bits0C = new uint[bits20];                    for (var i = 0; i < bits20; ++i)                  {                      bits0[i] = packet.ReadBits(8);                      packet.ReadBit("unk bit"' i);                      bits0C[i] = packet.ReadBits(8);                  }                    packet.ReadBit();                  packet.ReadBit();                  classCount = packet.ReadBits("Class Activation Count"' 23);                  raceCount = packet.ReadBits("Race Activation Count"' 23);                  bit7C = packet.ReadBit();                  packet.ReadBit();                  bits64 = packet.ReadBits(21);                    bits45 = new uint[bits64];                  bits68 = new uint[bits64];                  bits448 = new uint[bits64];                    for (var i = 0; i < bits64; ++i)                  {                      bits45[i] = packet.ReadBits(10);                      bits68[i] = packet.ReadBits(7);                      bits448[i] = packet.ReadBits(23);                  }              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bits20 = packet.ReadBits(21);                  bit78 = packet.ReadBit();                    bits0 = new uint[bits20];                  bits0C = new uint[bits20];                    for (var i = 0; i < bits20; ++i)                  {                      bits0[i] = packet.ReadBits(8);                      packet.ReadBit("unk bit"' i);                      bits0C[i] = packet.ReadBits(8);                  }                    packet.ReadBit();                  packet.ReadBit();                  classCount = packet.ReadBits("Class Activation Count"' 23);                  raceCount = packet.ReadBits("Race Activation Count"' 23);                  bit7C = packet.ReadBit();                  packet.ReadBit();                  bits64 = packet.ReadBits(21);                    bits45 = new uint[bits64];                  bits68 = new uint[bits64];                  bits448 = new uint[bits64];                    for (var i = 0; i < bits64; ++i)                  {                      bits45[i] = packet.ReadBits(10);                      bits68[i] = packet.ReadBits(7);                      bits448[i] = packet.ReadBits(23);                  }              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bits20 = packet.ReadBits(21);                  bit78 = packet.ReadBit();                    bits0 = new uint[bits20];                  bits0C = new uint[bits20];                    for (var i = 0; i < bits20; ++i)                  {                      bits0[i] = packet.ReadBits(8);                      packet.ReadBit("unk bit"' i);                      bits0C[i] = packet.ReadBits(8);                  }                    packet.ReadBit();                  packet.ReadBit();                  classCount = packet.ReadBits("Class Activation Count"' 23);                  raceCount = packet.ReadBits("Race Activation Count"' 23);                  bit7C = packet.ReadBit();                  packet.ReadBit();                  bits64 = packet.ReadBits(21);                    bits45 = new uint[bits64];                  bits68 = new uint[bits64];                  bits448 = new uint[bits64];                    for (var i = 0; i < bits64; ++i)                  {                      bits45[i] = packet.ReadBits(10);                      bits68[i] = packet.ReadBits(7);                      bits448[i] = packet.ReadBits(23);                  }              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bits20 = packet.ReadBits(21);                  bit78 = packet.ReadBit();                    bits0 = new uint[bits20];                  bits0C = new uint[bits20];                    for (var i = 0; i < bits20; ++i)                  {                      bits0[i] = packet.ReadBits(8);                      packet.ReadBit("unk bit"' i);                      bits0C[i] = packet.ReadBits(8);                  }                    packet.ReadBit();                  packet.ReadBit();                  classCount = packet.ReadBits("Class Activation Count"' 23);                  raceCount = packet.ReadBits("Race Activation Count"' 23);                  bit7C = packet.ReadBit();                  packet.ReadBit();                  bits64 = packet.ReadBits(21);                    bits45 = new uint[bits64];                  bits68 = new uint[bits64];                  bits448 = new uint[bits64];                    for (var i = 0; i < bits64; ++i)                  {                      bits45[i] = packet.ReadBits(10);                      bits68[i] = packet.ReadBits(7);                      bits448[i] = packet.ReadBits(23);                  }              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bits20 = packet.ReadBits(21);                  bit78 = packet.ReadBit();                    bits0 = new uint[bits20];                  bits0C = new uint[bits20];                    for (var i = 0; i < bits20; ++i)                  {                      bits0[i] = packet.ReadBits(8);                      packet.ReadBit("unk bit"' i);                      bits0C[i] = packet.ReadBits(8);                  }                    packet.ReadBit();                  packet.ReadBit();                  classCount = packet.ReadBits("Class Activation Count"' 23);                  raceCount = packet.ReadBits("Race Activation Count"' 23);                  bit7C = packet.ReadBit();                  packet.ReadBit();                  bits64 = packet.ReadBits(21);                    bits45 = new uint[bits64];                  bits68 = new uint[bits64];                  bits448 = new uint[bits64];                    for (var i = 0; i < bits64; ++i)                  {                      bits45[i] = packet.ReadBits(10);                      bits68[i] = packet.ReadBits(7);                      bits448[i] = packet.ReadBits(23);                  }              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bits20 = packet.ReadBits(21);                  bit78 = packet.ReadBit();                    bits0 = new uint[bits20];                  bits0C = new uint[bits20];                    for (var i = 0; i < bits20; ++i)                  {                      bits0[i] = packet.ReadBits(8);                      packet.ReadBit("unk bit"' i);                      bits0C[i] = packet.ReadBits(8);                  }                    packet.ReadBit();                  packet.ReadBit();                  classCount = packet.ReadBits("Class Activation Count"' 23);                  raceCount = packet.ReadBits("Race Activation Count"' 23);                  bit7C = packet.ReadBit();                  packet.ReadBit();                  bits64 = packet.ReadBits(21);                    bits45 = new uint[bits64];                  bits68 = new uint[bits64];                  bits448 = new uint[bits64];                    for (var i = 0; i < bits64; ++i)                  {                      bits45[i] = packet.ReadBits(10);                      bits68[i] = packet.ReadBits(7);                      bits448[i] = packet.ReadBits(23);                  }              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bits20 = packet.ReadBits(21);                  bit78 = packet.ReadBit();                    bits0 = new uint[bits20];                  bits0C = new uint[bits20];                    for (var i = 0; i < bits20; ++i)                  {                      bits0[i] = packet.ReadBits(8);                      packet.ReadBit("unk bit"' i);                      bits0C[i] = packet.ReadBits(8);                  }                    packet.ReadBit();                  packet.ReadBit();                  classCount = packet.ReadBits("Class Activation Count"' 23);                  raceCount = packet.ReadBits("Race Activation Count"' 23);                  bit7C = packet.ReadBit();                  packet.ReadBit();                  bits64 = packet.ReadBits(21);                    bits45 = new uint[bits64];                  bits68 = new uint[bits64];                  bits448 = new uint[bits64];                    for (var i = 0; i < bits64; ++i)                  {                      bits45[i] = packet.ReadBits(10);                      bits68[i] = packet.ReadBits(7);                      bits448[i] = packet.ReadBits(23);                  }              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bits20 = packet.ReadBits(21);                  bit78 = packet.ReadBit();                    bits0 = new uint[bits20];                  bits0C = new uint[bits20];                    for (var i = 0; i < bits20; ++i)                  {                      bits0[i] = packet.ReadBits(8);                      packet.ReadBit("unk bit"' i);                      bits0C[i] = packet.ReadBits(8);                  }                    packet.ReadBit();                  packet.ReadBit();                  classCount = packet.ReadBits("Class Activation Count"' 23);                  raceCount = packet.ReadBits("Race Activation Count"' 23);                  bit7C = packet.ReadBit();                  packet.ReadBit();                  bits64 = packet.ReadBits(21);                    bits45 = new uint[bits64];                  bits68 = new uint[bits64];                  bits448 = new uint[bits64];                    for (var i = 0; i < bits64; ++i)                  {                      bits45[i] = packet.ReadBits(10);                      bits68[i] = packet.ReadBits(7);                      bits448[i] = packet.ReadBits(23);                  }              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: var sha = new byte[20];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[10] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[17] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[4] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[8] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[2] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[11] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[15] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[6] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[13] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[12] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[3] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[5] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[14] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[19] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[18] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[16] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[9] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SessionHandler.cs,HandleRedirectAuthProof,The following statement contains a magic number: sha[7] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: var bits0 = packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  hasAura[i] = packet.ReadBit();                    if (hasAura[i])                  {                      effectCount[i] = packet.ReadBits(22);                      bits48[i] = packet.ReadBits(22);                        hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 7' 4' 2' 5' 6' 1' 3' 0);                      }                        hasMaxDuration[i] = packet.ReadBit();                      hasDuration[i] = packet.ReadBit();                  }              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  hasAura[i] = packet.ReadBit();                    if (hasAura[i])                  {                      effectCount[i] = packet.ReadBits(22);                      bits48[i] = packet.ReadBits(22);                        hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 7' 4' 2' 5' 6' 1' 3' 0);                      }                        hasMaxDuration[i] = packet.ReadBit();                      hasDuration[i] = packet.ReadBit();                  }              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  hasAura[i] = packet.ReadBit();                    if (hasAura[i])                  {                      effectCount[i] = packet.ReadBits(22);                      bits48[i] = packet.ReadBits(22);                        hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 7' 4' 2' 5' 6' 1' 3' 0);                      }                        hasMaxDuration[i] = packet.ReadBit();                      hasDuration[i] = packet.ReadBit();                  }              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  hasAura[i] = packet.ReadBit();                    if (hasAura[i])                  {                      effectCount[i] = packet.ReadBits(22);                      bits48[i] = packet.ReadBits(22);                        hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 7' 4' 2' 5' 6' 1' 3' 0);                      }                        hasMaxDuration[i] = packet.ReadBit();                      hasDuration[i] = packet.ReadBit();                  }              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  hasAura[i] = packet.ReadBit();                    if (hasAura[i])                  {                      effectCount[i] = packet.ReadBits(22);                      bits48[i] = packet.ReadBits(22);                        hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 7' 4' 2' 5' 6' 1' 3' 0);                      }                        hasMaxDuration[i] = packet.ReadBit();                      hasDuration[i] = packet.ReadBit();                  }              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  hasAura[i] = packet.ReadBit();                    if (hasAura[i])                  {                      effectCount[i] = packet.ReadBits(22);                      bits48[i] = packet.ReadBits(22);                        hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 7' 4' 2' 5' 6' 1' 3' 0);                      }                        hasMaxDuration[i] = packet.ReadBit();                      hasDuration[i] = packet.ReadBit();                  }              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  hasAura[i] = packet.ReadBit();                    if (hasAura[i])                  {                      effectCount[i] = packet.ReadBits(22);                      bits48[i] = packet.ReadBits(22);                        hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 7' 4' 2' 5' 6' 1' 3' 0);                      }                        hasMaxDuration[i] = packet.ReadBit();                      hasDuration[i] = packet.ReadBit();                  }              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  hasAura[i] = packet.ReadBit();                    if (hasAura[i])                  {                      effectCount[i] = packet.ReadBits(22);                      bits48[i] = packet.ReadBits(22);                        hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 7' 4' 2' 5' 6' 1' 3' 0);                      }                        hasMaxDuration[i] = packet.ReadBit();                      hasDuration[i] = packet.ReadBit();                  }              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  hasAura[i] = packet.ReadBit();                    if (hasAura[i])                  {                      effectCount[i] = packet.ReadBits(22);                      bits48[i] = packet.ReadBits(22);                        hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 7' 4' 2' 5' 6' 1' 3' 0);                      }                        hasMaxDuration[i] = packet.ReadBit();                      hasDuration[i] = packet.ReadBit();                  }              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                      if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 0' 3' 7' 1' 2' 5' 4' 6);                          packet.WriteGuid("Caster GUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        for (var j = 0; j < bits48[i]; ++j)                          packet.ReadSingle("Float3"' i' j);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                        aura.Level = packet.ReadUInt16("Caster Level"' i);                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        aura.Charges = packet.ReadByte("Charges"' i);                      aura.SpellId = packet.ReadUInt32("Spell Id"' i);                      aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                      packet.ReadInt32("Effect Mask"' i);                        auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                    packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                      if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 0' 3' 7' 1' 2' 5' 4' 6);                          packet.WriteGuid("Caster GUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        for (var j = 0; j < bits48[i]; ++j)                          packet.ReadSingle("Float3"' i' j);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                        aura.Level = packet.ReadUInt16("Caster Level"' i);                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        aura.Charges = packet.ReadByte("Charges"' i);                      aura.SpellId = packet.ReadUInt32("Spell Id"' i);                      aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                      packet.ReadInt32("Effect Mask"' i);                        auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                    packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                      if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 0' 3' 7' 1' 2' 5' 4' 6);                          packet.WriteGuid("Caster GUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        for (var j = 0; j < bits48[i]; ++j)                          packet.ReadSingle("Float3"' i' j);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                        aura.Level = packet.ReadUInt16("Caster Level"' i);                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        aura.Charges = packet.ReadByte("Charges"' i);                      aura.SpellId = packet.ReadUInt32("Spell Id"' i);                      aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                      packet.ReadInt32("Effect Mask"' i);                        auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                    packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                      if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 0' 3' 7' 1' 2' 5' 4' 6);                          packet.WriteGuid("Caster GUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        for (var j = 0; j < bits48[i]; ++j)                          packet.ReadSingle("Float3"' i' j);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                        aura.Level = packet.ReadUInt16("Caster Level"' i);                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        aura.Charges = packet.ReadByte("Charges"' i);                      aura.SpellId = packet.ReadUInt32("Spell Id"' i);                      aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                      packet.ReadInt32("Effect Mask"' i);                        auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                    packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                      if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 0' 3' 7' 1' 2' 5' 4' 6);                          packet.WriteGuid("Caster GUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        for (var j = 0; j < bits48[i]; ++j)                          packet.ReadSingle("Float3"' i' j);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                        aura.Level = packet.ReadUInt16("Caster Level"' i);                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        aura.Charges = packet.ReadByte("Charges"' i);                      aura.SpellId = packet.ReadUInt32("Spell Id"' i);                      aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                      packet.ReadInt32("Effect Mask"' i);                        auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                    packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                      if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 0' 3' 7' 1' 2' 5' 4' 6);                          packet.WriteGuid("Caster GUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        for (var j = 0; j < bits48[i]; ++j)                          packet.ReadSingle("Float3"' i' j);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                        aura.Level = packet.ReadUInt16("Caster Level"' i);                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        aura.Charges = packet.ReadByte("Charges"' i);                      aura.SpellId = packet.ReadUInt32("Spell Id"' i);                      aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                      packet.ReadInt32("Effect Mask"' i);                        auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                    packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 2' 6' 0' 7' 4' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 2' 6' 0' 7' 4' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 2' 6' 0' 7' 4' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 2' 6' 0' 7' 4' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 2' 6' 0' 7' 4' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 2' 6' 0' 7' 4' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleInitialSpells,The following statement contains a magic number: var count = packet.ReadBits("Spell Count"' 22);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,ReadTalentInfo,The following statement contains a magic number: var specCount = packet.ReadBits("Spec Group count"' 19);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,ReadTalentInfo,The following statement contains a magic number: for (var i = 0; i < specCount; ++i)                  spentTalents[i] = packet.ReadBits("Spec Talent Count"' 23' i);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,ReadTalentInfo,The following statement contains a magic number: for (var i = 0; i < specCount; ++i)              {                  for (var j = 0; j < 6; ++j)                      packet.ReadUInt16("Glyph"' i' j);                    packet.ReadUInt32("Spec Id"' i);                    for (var j = 0; j < spentTalents[i]; ++j)                      packet.ReadUInt16("Talent Id"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleLearnedSpells,The following statement contains a magic number: var count = packet.ReadBits("Spell Count"' 22);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleRemovedSpell,The following statement contains a magic number: var count = packet.ReadBits("Spell Count"' 22);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid3 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid4 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid5 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid6 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var archeologyCounter = packet.ReadBits(2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: for (var i = 0; i < archeologyCounter; ++i)                  packet.ReadBits("archeologyType"' 2' i);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 3' 1' 0' 5' 4' 6' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 3' 1' 0' 5' 4' 6' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 3' 1' 0' 5' 4' 6' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 3' 1' 0' 5' 4' 6' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 3' 1' 0' 5' 4' 6' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 3' 1' 0' 5' 4' 6' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)                  packet.StartBitStream(guid3' 7' 2' 0' 6' 4' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)                  packet.StartBitStream(guid3' 7' 2' 0' 6' 4' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)                  packet.StartBitStream(guid3' 7' 2' 0' 6' 4' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)                  packet.StartBitStream(guid3' 7' 2' 0' 6' 4' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)                  packet.StartBitStream(guid3' 7' 2' 0' 6' 4' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)                  packet.StartBitStream(guid3' 7' 2' 0' 6' 4' 5' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  guid5[0] = packet.ReadBit();                  bits188 = (int)packet.ReadBits(22);                  var bit10C = !packet.ReadBit();                  bit158 = packet.ReadBit();                  guid5[6] = packet.ReadBit();                    if (bit158)                  {                      guid6[0] = packet.ReadBit();                      guid6[3] = packet.ReadBit();                      guid6[4] = packet.ReadBit();                      guid6[5] = packet.ReadBit();                      guid6[7] = packet.ReadBit();                      guid6[6] = packet.ReadBit();                      guid6[2] = packet.ReadBit();                      bit154 = packet.ReadBit();                      guid6[1] = packet.ReadBit();                      bit14C = packet.ReadBit();                  }                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit17C = packet.ReadBit();                    guid5[5] = packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    bit120 = !packet.ReadBit();                  packet.ReadBit("bit184");                    guid5[7] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                    bit180 = !packet.ReadBit();                  packet.ReadBit("bit185");                  var bit108 = !packet.ReadBit();                  bit160 = !packet.ReadBit();                  bit198 = !packet.ReadBit();                    guid5[2] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    packet.ReadBit("bit19C");                  bit110 = !packet.ReadBit();                    if (bit108)                      packet.ReadBits("bits108"' 30);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  guid5[0] = packet.ReadBit();                  bits188 = (int)packet.ReadBits(22);                  var bit10C = !packet.ReadBit();                  bit158 = packet.ReadBit();                  guid5[6] = packet.ReadBit();                    if (bit158)                  {                      guid6[0] = packet.ReadBit();                      guid6[3] = packet.ReadBit();                      guid6[4] = packet.ReadBit();                      guid6[5] = packet.ReadBit();                      guid6[7] = packet.ReadBit();                      guid6[6] = packet.ReadBit();                      guid6[2] = packet.ReadBit();                      bit154 = packet.ReadBit();                      guid6[1] = packet.ReadBit();                      bit14C = packet.ReadBit();                  }                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit17C = packet.ReadBit();                    guid5[5] = packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    bit120 = !packet.ReadBit();                  packet.ReadBit("bit184");                    guid5[7] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                    bit180 = !packet.ReadBit();                  packet.ReadBit("bit185");                  var bit108 = !packet.ReadBit();                  bit160 = !packet.ReadBit();                  bit198 = !packet.ReadBit();                    guid5[2] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    packet.ReadBit("bit19C");                  bit110 = !packet.ReadBit();                    if (bit108)                      packet.ReadBits("bits108"' 30);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  guid5[0] = packet.ReadBit();                  bits188 = (int)packet.ReadBits(22);                  var bit10C = !packet.ReadBit();                  bit158 = packet.ReadBit();                  guid5[6] = packet.ReadBit();                    if (bit158)                  {                      guid6[0] = packet.ReadBit();                      guid6[3] = packet.ReadBit();                      guid6[4] = packet.ReadBit();                      guid6[5] = packet.ReadBit();                      guid6[7] = packet.ReadBit();                      guid6[6] = packet.ReadBit();                      guid6[2] = packet.ReadBit();                      bit154 = packet.ReadBit();                      guid6[1] = packet.ReadBit();                      bit14C = packet.ReadBit();                  }                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit17C = packet.ReadBit();                    guid5[5] = packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    bit120 = !packet.ReadBit();                  packet.ReadBit("bit184");                    guid5[7] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                    bit180 = !packet.ReadBit();                  packet.ReadBit("bit185");                  var bit108 = !packet.ReadBit();                  bit160 = !packet.ReadBit();                  bit198 = !packet.ReadBit();                    guid5[2] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    packet.ReadBit("bit19C");                  bit110 = !packet.ReadBit();                    if (bit108)                      packet.ReadBits("bits108"' 30);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  guid5[0] = packet.ReadBit();                  bits188 = (int)packet.ReadBits(22);                  var bit10C = !packet.ReadBit();                  bit158 = packet.ReadBit();                  guid5[6] = packet.ReadBit();                    if (bit158)                  {                      guid6[0] = packet.ReadBit();                      guid6[3] = packet.ReadBit();                      guid6[4] = packet.ReadBit();                      guid6[5] = packet.ReadBit();                      guid6[7] = packet.ReadBit();                      guid6[6] = packet.ReadBit();                      guid6[2] = packet.ReadBit();                      bit154 = packet.ReadBit();                      guid6[1] = packet.ReadBit();                      bit14C = packet.ReadBit();                  }                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit17C = packet.ReadBit();                    guid5[5] = packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    bit120 = !packet.ReadBit();                  packet.ReadBit("bit184");                    guid5[7] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                    bit180 = !packet.ReadBit();                  packet.ReadBit("bit185");                  var bit108 = !packet.ReadBit();                  bit160 = !packet.ReadBit();                  bit198 = !packet.ReadBit();                    guid5[2] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    packet.ReadBit("bit19C");                  bit110 = !packet.ReadBit();                    if (bit108)                      packet.ReadBits("bits108"' 30);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  guid5[0] = packet.ReadBit();                  bits188 = (int)packet.ReadBits(22);                  var bit10C = !packet.ReadBit();                  bit158 = packet.ReadBit();                  guid5[6] = packet.ReadBit();                    if (bit158)                  {                      guid6[0] = packet.ReadBit();                      guid6[3] = packet.ReadBit();                      guid6[4] = packet.ReadBit();                      guid6[5] = packet.ReadBit();                      guid6[7] = packet.ReadBit();                      guid6[6] = packet.ReadBit();                      guid6[2] = packet.ReadBit();                      bit154 = packet.ReadBit();                      guid6[1] = packet.ReadBit();                      bit14C = packet.ReadBit();                  }                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit17C = packet.ReadBit();                    guid5[5] = packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    bit120 = !packet.ReadBit();                  packet.ReadBit("bit184");                    guid5[7] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                    bit180 = !packet.ReadBit();                  packet.ReadBit("bit185");                  var bit108 = !packet.ReadBit();                  bit160 = !packet.ReadBit();                  bit198 = !packet.ReadBit();                    guid5[2] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    packet.ReadBit("bit19C");                  bit110 = !packet.ReadBit();                    if (bit108)                      packet.ReadBits("bits108"' 30);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  guid5[0] = packet.ReadBit();                  bits188 = (int)packet.ReadBits(22);                  var bit10C = !packet.ReadBit();                  bit158 = packet.ReadBit();                  guid5[6] = packet.ReadBit();                    if (bit158)                  {                      guid6[0] = packet.ReadBit();                      guid6[3] = packet.ReadBit();                      guid6[4] = packet.ReadBit();                      guid6[5] = packet.ReadBit();                      guid6[7] = packet.ReadBit();                      guid6[6] = packet.ReadBit();                      guid6[2] = packet.ReadBit();                      bit154 = packet.ReadBit();                      guid6[1] = packet.ReadBit();                      bit14C = packet.ReadBit();                  }                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit17C = packet.ReadBit();                    guid5[5] = packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    bit120 = !packet.ReadBit();                  packet.ReadBit("bit184");                    guid5[7] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                    bit180 = !packet.ReadBit();                  packet.ReadBit("bit185");                  var bit108 = !packet.ReadBit();                  bit160 = !packet.ReadBit();                  bit198 = !packet.ReadBit();                    guid5[2] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    packet.ReadBit("bit19C");                  bit110 = !packet.ReadBit();                    if (bit108)                      packet.ReadBits("bits108"' 30);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  guid5[0] = packet.ReadBit();                  bits188 = (int)packet.ReadBits(22);                  var bit10C = !packet.ReadBit();                  bit158 = packet.ReadBit();                  guid5[6] = packet.ReadBit();                    if (bit158)                  {                      guid6[0] = packet.ReadBit();                      guid6[3] = packet.ReadBit();                      guid6[4] = packet.ReadBit();                      guid6[5] = packet.ReadBit();                      guid6[7] = packet.ReadBit();                      guid6[6] = packet.ReadBit();                      guid6[2] = packet.ReadBit();                      bit154 = packet.ReadBit();                      guid6[1] = packet.ReadBit();                      bit14C = packet.ReadBit();                  }                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit17C = packet.ReadBit();                    guid5[5] = packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    bit120 = !packet.ReadBit();                  packet.ReadBit("bit184");                    guid5[7] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                    bit180 = !packet.ReadBit();                  packet.ReadBit("bit185");                  var bit108 = !packet.ReadBit();                  bit160 = !packet.ReadBit();                  bit198 = !packet.ReadBit();                    guid5[2] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    packet.ReadBit("bit19C");                  bit110 = !packet.ReadBit();                    if (bit108)                      packet.ReadBits("bits108"' 30);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  guid5[0] = packet.ReadBit();                  bits188 = (int)packet.ReadBits(22);                  var bit10C = !packet.ReadBit();                  bit158 = packet.ReadBit();                  guid5[6] = packet.ReadBit();                    if (bit158)                  {                      guid6[0] = packet.ReadBit();                      guid6[3] = packet.ReadBit();                      guid6[4] = packet.ReadBit();                      guid6[5] = packet.ReadBit();                      guid6[7] = packet.ReadBit();                      guid6[6] = packet.ReadBit();                      guid6[2] = packet.ReadBit();                      bit154 = packet.ReadBit();                      guid6[1] = packet.ReadBit();                      bit14C = packet.ReadBit();                  }                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit17C = packet.ReadBit();                    guid5[5] = packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    bit120 = !packet.ReadBit();                  packet.ReadBit("bit184");                    guid5[7] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                    bit180 = !packet.ReadBit();                  packet.ReadBit("bit185");                  var bit108 = !packet.ReadBit();                  bit160 = !packet.ReadBit();                  bit198 = !packet.ReadBit();                    guid5[2] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    packet.ReadBit("bit19C");                  bit110 = !packet.ReadBit();                    if (bit108)                      packet.ReadBits("bits108"' 30);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  guid5[0] = packet.ReadBit();                  bits188 = (int)packet.ReadBits(22);                  var bit10C = !packet.ReadBit();                  bit158 = packet.ReadBit();                  guid5[6] = packet.ReadBit();                    if (bit158)                  {                      guid6[0] = packet.ReadBit();                      guid6[3] = packet.ReadBit();                      guid6[4] = packet.ReadBit();                      guid6[5] = packet.ReadBit();                      guid6[7] = packet.ReadBit();                      guid6[6] = packet.ReadBit();                      guid6[2] = packet.ReadBit();                      bit154 = packet.ReadBit();                      guid6[1] = packet.ReadBit();                      bit14C = packet.ReadBit();                  }                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit17C = packet.ReadBit();                    guid5[5] = packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    bit120 = !packet.ReadBit();                  packet.ReadBit("bit184");                    guid5[7] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                    bit180 = !packet.ReadBit();                  packet.ReadBit("bit185");                  var bit108 = !packet.ReadBit();                  bit160 = !packet.ReadBit();                  bit198 = !packet.ReadBit();                    guid5[2] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    packet.ReadBit("bit19C");                  bit110 = !packet.ReadBit();                    if (bit108)                      packet.ReadBits("bits108"' 30);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  guid5[0] = packet.ReadBit();                  bits188 = (int)packet.ReadBits(22);                  var bit10C = !packet.ReadBit();                  bit158 = packet.ReadBit();                  guid5[6] = packet.ReadBit();                    if (bit158)                  {                      guid6[0] = packet.ReadBit();                      guid6[3] = packet.ReadBit();                      guid6[4] = packet.ReadBit();                      guid6[5] = packet.ReadBit();                      guid6[7] = packet.ReadBit();                      guid6[6] = packet.ReadBit();                      guid6[2] = packet.ReadBit();                      bit154 = packet.ReadBit();                      guid6[1] = packet.ReadBit();                      bit14C = packet.ReadBit();                  }                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit17C = packet.ReadBit();                    guid5[5] = packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    bit120 = !packet.ReadBit();                  packet.ReadBit("bit184");                    guid5[7] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                    bit180 = !packet.ReadBit();                  packet.ReadBit("bit185");                  var bit108 = !packet.ReadBit();                  bit160 = !packet.ReadBit();                  bit198 = !packet.ReadBit();                    guid5[2] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    packet.ReadBit("bit19C");                  bit110 = !packet.ReadBit();                    if (bit108)                      packet.ReadBits("bits108"' 30);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  guid5[0] = packet.ReadBit();                  bits188 = (int)packet.ReadBits(22);                  var bit10C = !packet.ReadBit();                  bit158 = packet.ReadBit();                  guid5[6] = packet.ReadBit();                    if (bit158)                  {                      guid6[0] = packet.ReadBit();                      guid6[3] = packet.ReadBit();                      guid6[4] = packet.ReadBit();                      guid6[5] = packet.ReadBit();                      guid6[7] = packet.ReadBit();                      guid6[6] = packet.ReadBit();                      guid6[2] = packet.ReadBit();                      bit154 = packet.ReadBit();                      guid6[1] = packet.ReadBit();                      bit14C = packet.ReadBit();                  }                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit17C = packet.ReadBit();                    guid5[5] = packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    bit120 = !packet.ReadBit();                  packet.ReadBit("bit184");                    guid5[7] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                    bit180 = !packet.ReadBit();                  packet.ReadBit("bit185");                  var bit108 = !packet.ReadBit();                  bit160 = !packet.ReadBit();                  bit198 = !packet.ReadBit();                    guid5[2] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    packet.ReadBit("bit19C");                  bit110 = !packet.ReadBit();                    if (bit108)                      packet.ReadBits("bits108"' 30);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  guid5[0] = packet.ReadBit();                  bits188 = (int)packet.ReadBits(22);                  var bit10C = !packet.ReadBit();                  bit158 = packet.ReadBit();                  guid5[6] = packet.ReadBit();                    if (bit158)                  {                      guid6[0] = packet.ReadBit();                      guid6[3] = packet.ReadBit();                      guid6[4] = packet.ReadBit();                      guid6[5] = packet.ReadBit();                      guid6[7] = packet.ReadBit();                      guid6[6] = packet.ReadBit();                      guid6[2] = packet.ReadBit();                      bit154 = packet.ReadBit();                      guid6[1] = packet.ReadBit();                      bit14C = packet.ReadBit();                  }                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit17C = packet.ReadBit();                    guid5[5] = packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    bit120 = !packet.ReadBit();                  packet.ReadBit("bit184");                    guid5[7] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                    bit180 = !packet.ReadBit();                  packet.ReadBit("bit185");                  var bit108 = !packet.ReadBit();                  bit160 = !packet.ReadBit();                  bit198 = !packet.ReadBit();                    guid5[2] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    packet.ReadBit("bit19C");                  bit110 = !packet.ReadBit();                    if (bit108)                      packet.ReadBits("bits108"' 30);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  guid5[0] = packet.ReadBit();                  bits188 = (int)packet.ReadBits(22);                  var bit10C = !packet.ReadBit();                  bit158 = packet.ReadBit();                  guid5[6] = packet.ReadBit();                    if (bit158)                  {                      guid6[0] = packet.ReadBit();                      guid6[3] = packet.ReadBit();                      guid6[4] = packet.ReadBit();                      guid6[5] = packet.ReadBit();                      guid6[7] = packet.ReadBit();                      guid6[6] = packet.ReadBit();                      guid6[2] = packet.ReadBit();                      bit154 = packet.ReadBit();                      guid6[1] = packet.ReadBit();                      bit14C = packet.ReadBit();                  }                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit17C = packet.ReadBit();                    guid5[5] = packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    bit120 = !packet.ReadBit();                  packet.ReadBit("bit184");                    guid5[7] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                    bit180 = !packet.ReadBit();                  packet.ReadBit("bit185");                  var bit108 = !packet.ReadBit();                  bit160 = !packet.ReadBit();                  bit198 = !packet.ReadBit();                    guid5[2] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    packet.ReadBit("bit19C");                  bit110 = !packet.ReadBit();                    if (bit108)                      packet.ReadBits("bits108"' 30);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  guid5[0] = packet.ReadBit();                  bits188 = (int)packet.ReadBits(22);                  var bit10C = !packet.ReadBit();                  bit158 = packet.ReadBit();                  guid5[6] = packet.ReadBit();                    if (bit158)                  {                      guid6[0] = packet.ReadBit();                      guid6[3] = packet.ReadBit();                      guid6[4] = packet.ReadBit();                      guid6[5] = packet.ReadBit();                      guid6[7] = packet.ReadBit();                      guid6[6] = packet.ReadBit();                      guid6[2] = packet.ReadBit();                      bit154 = packet.ReadBit();                      guid6[1] = packet.ReadBit();                      bit14C = packet.ReadBit();                  }                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit17C = packet.ReadBit();                    guid5[5] = packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    bit120 = !packet.ReadBit();                  packet.ReadBit("bit184");                    guid5[7] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                    bit180 = !packet.ReadBit();                  packet.ReadBit("bit185");                  var bit108 = !packet.ReadBit();                  bit160 = !packet.ReadBit();                  bit198 = !packet.ReadBit();                    guid5[2] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    packet.ReadBit("bit19C");                  bit110 = !packet.ReadBit();                    if (bit108)                      packet.ReadBits("bits108"' 30);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  guid5[0] = packet.ReadBit();                  bits188 = (int)packet.ReadBits(22);                  var bit10C = !packet.ReadBit();                  bit158 = packet.ReadBit();                  guid5[6] = packet.ReadBit();                    if (bit158)                  {                      guid6[0] = packet.ReadBit();                      guid6[3] = packet.ReadBit();                      guid6[4] = packet.ReadBit();                      guid6[5] = packet.ReadBit();                      guid6[7] = packet.ReadBit();                      guid6[6] = packet.ReadBit();                      guid6[2] = packet.ReadBit();                      bit154 = packet.ReadBit();                      guid6[1] = packet.ReadBit();                      bit14C = packet.ReadBit();                  }                    if (bit10C)                      packet.ReadBits("bits10C"' 13);                    bit17C = packet.ReadBit();                    guid5[5] = packet.ReadBit();                    if (bit17C)                      bit178 = packet.ReadBit();                    bit120 = !packet.ReadBit();                  packet.ReadBit("bit184");                    guid5[7] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                    bit180 = !packet.ReadBit();                  packet.ReadBit("bit185");                  var bit108 = !packet.ReadBit();                  bit160 = !packet.ReadBit();                  bit198 = !packet.ReadBit();                    guid5[2] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    packet.ReadBit("bit19C");                  bit110 = !packet.ReadBit();                    if (bit108)                      packet.ReadBits("bits108"' 30);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid1' 0' 2' 7' 4' 5' 6' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid1' 0' 2' 7' 4' 5' 6' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid1' 0' 2' 7' 4' 5' 6' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid1' 0' 2' 7' 4' 5' 6' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid1' 0' 2' 7' 4' 5' 6' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid1' 0' 2' 7' 4' 5' 6' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)                  packet.StartBitStream(guid4' 2' 6' 1' 4' 5' 3' 7' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)                  packet.StartBitStream(guid4' 2' 6' 1' 4' 5' 3' 7' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)                  packet.StartBitStream(guid4' 2' 6' 1' 4' 5' 3' 7' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)                  packet.StartBitStream(guid4' 2' 6' 1' 4' 5' 3' 7' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)                  packet.StartBitStream(guid4' 2' 6' 1' 4' 5' 3' 7' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)                  packet.StartBitStream(guid4' 2' 6' 1' 4' 5' 3' 7' 0);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasTargetMask)                  packet.ReadBitsE<TargetFlag>("Target Flags"' 20);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit78)                  packet.ReadBits("bit78"' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1C)                  packet.ReadBits("bits1C"' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)              {                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 6);                  packet.ReadSingle("Float68");                  packet.ReadXORByte(guid4' 3);                  packet.ReadSingle("Float64");                  packet.ReadXORByte(guid4' 5);                  packet.ReadSingle("Float60");                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 7);                  packet.ReadXORByte(guid4' 4);                  packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)              {                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 6);                  packet.ReadSingle("Float68");                  packet.ReadXORByte(guid4' 3);                  packet.ReadSingle("Float64");                  packet.ReadXORByte(guid4' 5);                  packet.ReadSingle("Float60");                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 7);                  packet.ReadXORByte(guid4' 4);                  packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)              {                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 6);                  packet.ReadSingle("Float68");                  packet.ReadXORByte(guid4' 3);                  packet.ReadSingle("Float64");                  packet.ReadXORByte(guid4' 5);                  packet.ReadSingle("Float60");                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 7);                  packet.ReadXORByte(guid4' 4);                  packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)              {                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 6);                  packet.ReadSingle("Float68");                  packet.ReadXORByte(guid4' 3);                  packet.ReadSingle("Float64");                  packet.ReadXORByte(guid4' 5);                  packet.ReadSingle("Float60");                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 7);                  packet.ReadXORByte(guid4' 4);                  packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)              {                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 6);                  packet.ReadSingle("Float68");                  packet.ReadXORByte(guid4' 3);                  packet.ReadSingle("Float64");                  packet.ReadXORByte(guid4' 5);                  packet.ReadSingle("Float60");                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 7);                  packet.ReadXORByte(guid4' 4);                  packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit70)              {                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 6);                  packet.ReadSingle("Float68");                  packet.ReadXORByte(guid4' 3);                  packet.ReadSingle("Float64");                  packet.ReadXORByte(guid4' 5);                  packet.ReadSingle("Float60");                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 7);                  packet.ReadXORByte(guid4' 4);                  packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid1' 4' 2' 1' 0' 5' 3' 6' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid1' 4' 2' 1' 0' 5' 3' 6' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid1' 4' 2' 1' 0' 5' 3' 6' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid1' 4' 2' 1' 0' 5' 3' 6' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid1' 4' 2' 1' 0' 5' 3' 6' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid1' 4' 2' 1' 0' 5' 3' 6' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 7);                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit17C)                  {                      packet.ReadSingle("Float168");                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float174");                          packet.ReadSingle("Float16C");                      }                  }                    if (bit120)                      packet.ReadSingle("Float120");                    if (bit158)                  {                      packet.ReadSingle("Float130");                      packet.ReadXORByte(guid6' 3);                      packet.ReadSingle("Float13C");                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadInt32("Int144");                      packet.ReadByte("Byte140");                        packet.ReadXORByte(guid6' 1);                      packet.ReadXORByte(guid6' 0);                      packet.ReadXORByte(guid6' 6);                      packet.ReadXORByte(guid6' 2);                        packet.ReadSingle("Float138");                      packet.ReadSingle("Float134");                        packet.ReadXORByte(guid6' 4);                      packet.ReadXORByte(guid6' 5);                      packet.ReadXORByte(guid6' 7);                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.WriteGuid("Guid6"' guid6);                  }                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ReadXORByte(guid5' 2);                    packet.ReadSingle("Float11C");                    packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 3);                    packet.ReadSingle("Float114");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadXORByte(guid5' 0);                  packet.ReadSingle("Float118");                  packet.ReadXORByte(guid5' 5);                    if (bit160)                      packet.ReadSingle("Float160");                    packet.ReadXORByte(guid5' 6);                    if (bit110)                      packet.ReadInt32("Int110");                    packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 7);                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit17C)                  {                      packet.ReadSingle("Float168");                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float174");                          packet.ReadSingle("Float16C");                      }                  }                    if (bit120)                      packet.ReadSingle("Float120");                    if (bit158)                  {                      packet.ReadSingle("Float130");                      packet.ReadXORByte(guid6' 3);                      packet.ReadSingle("Float13C");                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadInt32("Int144");                      packet.ReadByte("Byte140");                        packet.ReadXORByte(guid6' 1);                      packet.ReadXORByte(guid6' 0);                      packet.ReadXORByte(guid6' 6);                      packet.ReadXORByte(guid6' 2);                        packet.ReadSingle("Float138");                      packet.ReadSingle("Float134");                        packet.ReadXORByte(guid6' 4);                      packet.ReadXORByte(guid6' 5);                      packet.ReadXORByte(guid6' 7);                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.WriteGuid("Guid6"' guid6);                  }                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ReadXORByte(guid5' 2);                    packet.ReadSingle("Float11C");                    packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 3);                    packet.ReadSingle("Float114");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadXORByte(guid5' 0);                  packet.ReadSingle("Float118");                  packet.ReadXORByte(guid5' 5);                    if (bit160)                      packet.ReadSingle("Float160");                    packet.ReadXORByte(guid5' 6);                    if (bit110)                      packet.ReadInt32("Int110");                    packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 7);                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit17C)                  {                      packet.ReadSingle("Float168");                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float174");                          packet.ReadSingle("Float16C");                      }                  }                    if (bit120)                      packet.ReadSingle("Float120");                    if (bit158)                  {                      packet.ReadSingle("Float130");                      packet.ReadXORByte(guid6' 3);                      packet.ReadSingle("Float13C");                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadInt32("Int144");                      packet.ReadByte("Byte140");                        packet.ReadXORByte(guid6' 1);                      packet.ReadXORByte(guid6' 0);                      packet.ReadXORByte(guid6' 6);                      packet.ReadXORByte(guid6' 2);                        packet.ReadSingle("Float138");                      packet.ReadSingle("Float134");                        packet.ReadXORByte(guid6' 4);                      packet.ReadXORByte(guid6' 5);                      packet.ReadXORByte(guid6' 7);                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.WriteGuid("Guid6"' guid6);                  }                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ReadXORByte(guid5' 2);                    packet.ReadSingle("Float11C");                    packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 3);                    packet.ReadSingle("Float114");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadXORByte(guid5' 0);                  packet.ReadSingle("Float118");                  packet.ReadXORByte(guid5' 5);                    if (bit160)                      packet.ReadSingle("Float160");                    packet.ReadXORByte(guid5' 6);                    if (bit110)                      packet.ReadInt32("Int110");                    packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 7);                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit17C)                  {                      packet.ReadSingle("Float168");                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float174");                          packet.ReadSingle("Float16C");                      }                  }                    if (bit120)                      packet.ReadSingle("Float120");                    if (bit158)                  {                      packet.ReadSingle("Float130");                      packet.ReadXORByte(guid6' 3);                      packet.ReadSingle("Float13C");                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadInt32("Int144");                      packet.ReadByte("Byte140");                        packet.ReadXORByte(guid6' 1);                      packet.ReadXORByte(guid6' 0);                      packet.ReadXORByte(guid6' 6);                      packet.ReadXORByte(guid6' 2);                        packet.ReadSingle("Float138");                      packet.ReadSingle("Float134");                        packet.ReadXORByte(guid6' 4);                      packet.ReadXORByte(guid6' 5);                      packet.ReadXORByte(guid6' 7);                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.WriteGuid("Guid6"' guid6);                  }                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ReadXORByte(guid5' 2);                    packet.ReadSingle("Float11C");                    packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 3);                    packet.ReadSingle("Float114");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadXORByte(guid5' 0);                  packet.ReadSingle("Float118");                  packet.ReadXORByte(guid5' 5);                    if (bit160)                      packet.ReadSingle("Float160");                    packet.ReadXORByte(guid5' 6);                    if (bit110)                      packet.ReadInt32("Int110");                    packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 7);                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit17C)                  {                      packet.ReadSingle("Float168");                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float174");                          packet.ReadSingle("Float16C");                      }                  }                    if (bit120)                      packet.ReadSingle("Float120");                    if (bit158)                  {                      packet.ReadSingle("Float130");                      packet.ReadXORByte(guid6' 3);                      packet.ReadSingle("Float13C");                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadInt32("Int144");                      packet.ReadByte("Byte140");                        packet.ReadXORByte(guid6' 1);                      packet.ReadXORByte(guid6' 0);                      packet.ReadXORByte(guid6' 6);                      packet.ReadXORByte(guid6' 2);                        packet.ReadSingle("Float138");                      packet.ReadSingle("Float134");                        packet.ReadXORByte(guid6' 4);                      packet.ReadXORByte(guid6' 5);                      packet.ReadXORByte(guid6' 7);                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.WriteGuid("Guid6"' guid6);                  }                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ReadXORByte(guid5' 2);                    packet.ReadSingle("Float11C");                    packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 3);                    packet.ReadSingle("Float114");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadXORByte(guid5' 0);                  packet.ReadSingle("Float118");                  packet.ReadXORByte(guid5' 5);                    if (bit160)                      packet.ReadSingle("Float160");                    packet.ReadXORByte(guid5' 6);                    if (bit110)                      packet.ReadInt32("Int110");                    packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 7);                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit17C)                  {                      packet.ReadSingle("Float168");                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float174");                          packet.ReadSingle("Float16C");                      }                  }                    if (bit120)                      packet.ReadSingle("Float120");                    if (bit158)                  {                      packet.ReadSingle("Float130");                      packet.ReadXORByte(guid6' 3);                      packet.ReadSingle("Float13C");                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadInt32("Int144");                      packet.ReadByte("Byte140");                        packet.ReadXORByte(guid6' 1);                      packet.ReadXORByte(guid6' 0);                      packet.ReadXORByte(guid6' 6);                      packet.ReadXORByte(guid6' 2);                        packet.ReadSingle("Float138");                      packet.ReadSingle("Float134");                        packet.ReadXORByte(guid6' 4);                      packet.ReadXORByte(guid6' 5);                      packet.ReadXORByte(guid6' 7);                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.WriteGuid("Guid6"' guid6);                  }                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ReadXORByte(guid5' 2);                    packet.ReadSingle("Float11C");                    packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 3);                    packet.ReadSingle("Float114");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadXORByte(guid5' 0);                  packet.ReadSingle("Float118");                  packet.ReadXORByte(guid5' 5);                    if (bit160)                      packet.ReadSingle("Float160");                    packet.ReadXORByte(guid5' 6);                    if (bit110)                      packet.ReadInt32("Int110");                    packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 7);                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit17C)                  {                      packet.ReadSingle("Float168");                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float174");                          packet.ReadSingle("Float16C");                      }                  }                    if (bit120)                      packet.ReadSingle("Float120");                    if (bit158)                  {                      packet.ReadSingle("Float130");                      packet.ReadXORByte(guid6' 3);                      packet.ReadSingle("Float13C");                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadInt32("Int144");                      packet.ReadByte("Byte140");                        packet.ReadXORByte(guid6' 1);                      packet.ReadXORByte(guid6' 0);                      packet.ReadXORByte(guid6' 6);                      packet.ReadXORByte(guid6' 2);                        packet.ReadSingle("Float138");                      packet.ReadSingle("Float134");                        packet.ReadXORByte(guid6' 4);                      packet.ReadXORByte(guid6' 5);                      packet.ReadXORByte(guid6' 7);                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.WriteGuid("Guid6"' guid6);                  }                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ReadXORByte(guid5' 2);                    packet.ReadSingle("Float11C");                    packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 3);                    packet.ReadSingle("Float114");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadXORByte(guid5' 0);                  packet.ReadSingle("Float118");                  packet.ReadXORByte(guid5' 5);                    if (bit160)                      packet.ReadSingle("Float160");                    packet.ReadXORByte(guid5' 6);                    if (bit110)                      packet.ReadInt32("Int110");                    packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 7);                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit17C)                  {                      packet.ReadSingle("Float168");                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float174");                          packet.ReadSingle("Float16C");                      }                  }                    if (bit120)                      packet.ReadSingle("Float120");                    if (bit158)                  {                      packet.ReadSingle("Float130");                      packet.ReadXORByte(guid6' 3);                      packet.ReadSingle("Float13C");                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadInt32("Int144");                      packet.ReadByte("Byte140");                        packet.ReadXORByte(guid6' 1);                      packet.ReadXORByte(guid6' 0);                      packet.ReadXORByte(guid6' 6);                      packet.ReadXORByte(guid6' 2);                        packet.ReadSingle("Float138");                      packet.ReadSingle("Float134");                        packet.ReadXORByte(guid6' 4);                      packet.ReadXORByte(guid6' 5);                      packet.ReadXORByte(guid6' 7);                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.WriteGuid("Guid6"' guid6);                  }                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ReadXORByte(guid5' 2);                    packet.ReadSingle("Float11C");                    packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 3);                    packet.ReadSingle("Float114");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadXORByte(guid5' 0);                  packet.ReadSingle("Float118");                  packet.ReadXORByte(guid5' 5);                    if (bit160)                      packet.ReadSingle("Float160");                    packet.ReadXORByte(guid5' 6);                    if (bit110)                      packet.ReadInt32("Int110");                    packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 7);                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit17C)                  {                      packet.ReadSingle("Float168");                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float174");                          packet.ReadSingle("Float16C");                      }                  }                    if (bit120)                      packet.ReadSingle("Float120");                    if (bit158)                  {                      packet.ReadSingle("Float130");                      packet.ReadXORByte(guid6' 3);                      packet.ReadSingle("Float13C");                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadInt32("Int144");                      packet.ReadByte("Byte140");                        packet.ReadXORByte(guid6' 1);                      packet.ReadXORByte(guid6' 0);                      packet.ReadXORByte(guid6' 6);                      packet.ReadXORByte(guid6' 2);                        packet.ReadSingle("Float138");                      packet.ReadSingle("Float134");                        packet.ReadXORByte(guid6' 4);                      packet.ReadXORByte(guid6' 5);                      packet.ReadXORByte(guid6' 7);                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.WriteGuid("Guid6"' guid6);                  }                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ReadXORByte(guid5' 2);                    packet.ReadSingle("Float11C");                    packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 3);                    packet.ReadSingle("Float114");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadXORByte(guid5' 0);                  packet.ReadSingle("Float118");                  packet.ReadXORByte(guid5' 5);                    if (bit160)                      packet.ReadSingle("Float160");                    packet.ReadXORByte(guid5' 6);                    if (bit110)                      packet.ReadInt32("Int110");                    packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 7);                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit17C)                  {                      packet.ReadSingle("Float168");                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float174");                          packet.ReadSingle("Float16C");                      }                  }                    if (bit120)                      packet.ReadSingle("Float120");                    if (bit158)                  {                      packet.ReadSingle("Float130");                      packet.ReadXORByte(guid6' 3);                      packet.ReadSingle("Float13C");                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadInt32("Int144");                      packet.ReadByte("Byte140");                        packet.ReadXORByte(guid6' 1);                      packet.ReadXORByte(guid6' 0);                      packet.ReadXORByte(guid6' 6);                      packet.ReadXORByte(guid6' 2);                        packet.ReadSingle("Float138");                      packet.ReadSingle("Float134");                        packet.ReadXORByte(guid6' 4);                      packet.ReadXORByte(guid6' 5);                      packet.ReadXORByte(guid6' 7);                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.WriteGuid("Guid6"' guid6);                  }                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ReadXORByte(guid5' 2);                    packet.ReadSingle("Float11C");                    packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 3);                    packet.ReadSingle("Float114");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadXORByte(guid5' 0);                  packet.ReadSingle("Float118");                  packet.ReadXORByte(guid5' 5);                    if (bit160)                      packet.ReadSingle("Float160");                    packet.ReadXORByte(guid5' 6);                    if (bit110)                      packet.ReadInt32("Int110");                    packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 7);                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit17C)                  {                      packet.ReadSingle("Float168");                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float174");                          packet.ReadSingle("Float16C");                      }                  }                    if (bit120)                      packet.ReadSingle("Float120");                    if (bit158)                  {                      packet.ReadSingle("Float130");                      packet.ReadXORByte(guid6' 3);                      packet.ReadSingle("Float13C");                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadInt32("Int144");                      packet.ReadByte("Byte140");                        packet.ReadXORByte(guid6' 1);                      packet.ReadXORByte(guid6' 0);                      packet.ReadXORByte(guid6' 6);                      packet.ReadXORByte(guid6' 2);                        packet.ReadSingle("Float138");                      packet.ReadSingle("Float134");                        packet.ReadXORByte(guid6' 4);                      packet.ReadXORByte(guid6' 5);                      packet.ReadXORByte(guid6' 7);                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.WriteGuid("Guid6"' guid6);                  }                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ReadXORByte(guid5' 2);                    packet.ReadSingle("Float11C");                    packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 3);                    packet.ReadSingle("Float114");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadXORByte(guid5' 0);                  packet.ReadSingle("Float118");                  packet.ReadXORByte(guid5' 5);                    if (bit160)                      packet.ReadSingle("Float160");                    packet.ReadXORByte(guid5' 6);                    if (bit110)                      packet.ReadInt32("Int110");                    packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit1A0)              {                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 7);                    for (var i = 0; i < bits188; ++i)                      packet.ReadInt32("IntEB"' i);                    if (bit17C)                  {                      packet.ReadSingle("Float168");                      packet.ReadInt32("Int164");                        if (bit178)                      {                          packet.ReadSingle("Float170");                          packet.ReadSingle("Float174");                          packet.ReadSingle("Float16C");                      }                  }                    if (bit120)                      packet.ReadSingle("Float120");                    if (bit158)                  {                      packet.ReadSingle("Float130");                      packet.ReadXORByte(guid6' 3);                      packet.ReadSingle("Float13C");                        if (bit154)                          packet.ReadInt32("Int150");                        packet.ReadInt32("Int144");                      packet.ReadByte("Byte140");                        packet.ReadXORByte(guid6' 1);                      packet.ReadXORByte(guid6' 0);                      packet.ReadXORByte(guid6' 6);                      packet.ReadXORByte(guid6' 2);                        packet.ReadSingle("Float138");                      packet.ReadSingle("Float134");                        packet.ReadXORByte(guid6' 4);                      packet.ReadXORByte(guid6' 5);                      packet.ReadXORByte(guid6' 7);                        if (bit14C)                          packet.ReadInt32("Int148");                        packet.WriteGuid("Guid6"' guid6);                  }                    if (bit180)                      packet.ReadSingle("Float180");                    packet.ReadXORByte(guid5' 2);                    packet.ReadSingle("Float11C");                    packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 3);                    packet.ReadSingle("Float114");                    if (bit198)                      packet.ReadInt32("Int198");                    packet.ReadXORByte(guid5' 0);                  packet.ReadSingle("Float118");                  packet.ReadXORByte(guid5' 5);                    if (bit160)                      packet.ReadSingle("Float160");                    packet.ReadXORByte(guid5' 6);                    if (bit110)                      packet.ReadInt32("Int110");                    packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid2' 7' 2' 6' 3' 5' 0' 1' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid2' 7' 2' 6' 3' 5' 0' 1' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid2' 7' 2' 6' 3' 5' 0' 1' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid2' 7' 2' 6' 3' 5' 0' 1' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid2' 7' 2' 6' 3' 5' 0' 1' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid2' 7' 2' 6' 3' 5' 0' 1' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)              {                  packet.ReadXORByte(guid3' 0);                  packet.ReadXORByte(guid3' 1);                  packet.ReadSingle("Float48");                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid3' 4);                  packet.ReadXORByte(guid3' 2);                  packet.ReadXORByte(guid3' 6);                  packet.ReadXORByte(guid3' 3);                  packet.ReadXORByte(guid3' 7);                  packet.ReadXORByte(guid3' 5);                  packet.WriteGuid("Guid3"' guid3);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)              {                  packet.ReadXORByte(guid3' 0);                  packet.ReadXORByte(guid3' 1);                  packet.ReadSingle("Float48");                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid3' 4);                  packet.ReadXORByte(guid3' 2);                  packet.ReadXORByte(guid3' 6);                  packet.ReadXORByte(guid3' 3);                  packet.ReadXORByte(guid3' 7);                  packet.ReadXORByte(guid3' 5);                  packet.WriteGuid("Guid3"' guid3);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)              {                  packet.ReadXORByte(guid3' 0);                  packet.ReadXORByte(guid3' 1);                  packet.ReadSingle("Float48");                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid3' 4);                  packet.ReadXORByte(guid3' 2);                  packet.ReadXORByte(guid3' 6);                  packet.ReadXORByte(guid3' 3);                  packet.ReadXORByte(guid3' 7);                  packet.ReadXORByte(guid3' 5);                  packet.WriteGuid("Guid3"' guid3);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)              {                  packet.ReadXORByte(guid3' 0);                  packet.ReadXORByte(guid3' 1);                  packet.ReadSingle("Float48");                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid3' 4);                  packet.ReadXORByte(guid3' 2);                  packet.ReadXORByte(guid3' 6);                  packet.ReadXORByte(guid3' 3);                  packet.ReadXORByte(guid3' 7);                  packet.ReadXORByte(guid3' 5);                  packet.WriteGuid("Guid3"' guid3);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)              {                  packet.ReadXORByte(guid3' 0);                  packet.ReadXORByte(guid3' 1);                  packet.ReadSingle("Float48");                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid3' 4);                  packet.ReadXORByte(guid3' 2);                  packet.ReadXORByte(guid3' 6);                  packet.ReadXORByte(guid3' 3);                  packet.ReadXORByte(guid3' 7);                  packet.ReadXORByte(guid3' 5);                  packet.WriteGuid("Guid3"' guid3);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit50)              {                  packet.ReadXORByte(guid3' 0);                  packet.ReadXORByte(guid3' 1);                  packet.ReadSingle("Float48");                  packet.ReadSingle("Float44");                  packet.ReadSingle("Float40");                  packet.ReadXORByte(guid3' 4);                  packet.ReadXORByte(guid3' 2);                  packet.ReadXORByte(guid3' 6);                  packet.ReadXORByte(guid3' 3);                  packet.ReadXORByte(guid3' 7);                  packet.ReadXORByte(guid3' 5);                  packet.WriteGuid("Guid3"' guid3);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid3 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid4 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid6 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid7 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid8 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var bits44 = (int)packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var bits184 = (int)packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 0' 3' 2' 4' 1' 5' 7' 6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 0' 3' 2' 4' 1' 5' 7' 6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 0' 3' 2' 4' 1' 5' 7' 6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 0' 3' 2' 4' 1' 5' 7' 6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 0' 3' 2' 4' 1' 5' 7' 6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 0' 3' 2' 4' 1' 5' 7' 6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 0' 3' 2' 4' 1' 5' 7' 6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var bits54 = (int)packet.ReadBits(25);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid4[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid4[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid4[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid4[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid4[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid4[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var bits34 = (int)packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 2' 1' 5' 6' 7' 0' 4' 3);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 2' 1' 5' 6' 7' 0' 4' 3);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 2' 1' 5' 6' 7' 0' 4' 3);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 2' 1' 5' 6' 7' 0' 4' 3);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 2' 1' 5' 6' 7' 0' 4' 3);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 2' 1' 5' 6' 7' 0' 4' 3);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 2' 1' 5' 6' 7' 0' 4' 3);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var bits140 = (int)packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)                  packet.StartBitStream(guid6' 1' 2' 5' 3' 4' 6' 0' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)                  packet.StartBitStream(guid6' 1' 2' 5' 3' 4' 6' 0' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)                  packet.StartBitStream(guid6' 1' 2' 5' 3' 4' 6' 0' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)                  packet.StartBitStream(guid6' 1' 2' 5' 3' 4' 6' 0' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)                  packet.StartBitStream(guid6' 1' 2' 5' 3' 4' 6' 0' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)                  packet.StartBitStream(guid6' 1' 2' 5' 3' 4' 6' 0' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid11[i] = new byte[8];                  packet.StartBitStream(guid11[i]' 7' 3' 1' 4' 0' 5' 6' 2);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid11[i] = new byte[8];                  packet.StartBitStream(guid11[i]' 7' 3' 1' 4' 0' 5' 6' 2);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid11[i] = new byte[8];                  packet.StartBitStream(guid11[i]' 7' 3' 1' 4' 0' 5' 6' 2);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid11[i] = new byte[8];                  packet.StartBitStream(guid11[i]' 7' 3' 1' 4' 0' 5' 6' 2);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid11[i] = new byte[8];                  packet.StartBitStream(guid11[i]' 7' 3' 1' 4' 0' 5' 6' 2);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid11[i] = new byte[8];                  packet.StartBitStream(guid11[i]' 7' 3' 1' 4' 0' 5' 6' 2);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid11[i] = new byte[8];                  packet.StartBitStream(guid11[i]' 7' 3' 1' 4' 0' 5' 6' 2);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var bits154 = (int)packet.ReadBits(3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid3[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid3[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid3[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid3[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid3[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid3[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)                  packet.StartBitStream(guid7' 3' 1' 4' 5' 6' 0' 7' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)                  packet.StartBitStream(guid7' 3' 1' 4' 5' 6' 0' 7' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)                  packet.StartBitStream(guid7' 3' 1' 4' 5' 6' 0' 7' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)                  packet.StartBitStream(guid7' 3' 1' 4' 5' 6' 0' 7' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)                  packet.StartBitStream(guid7' 3' 1' 4' 5' 6' 0' 7' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)                  packet.StartBitStream(guid7' 3' 1' 4' 5' 6' 0' 7' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasTargetFlags)                  packet.ReadBitsE<TargetFlag>("Target Flags"' 20);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  var bits136 = packet.ReadBits(4);                    if (bits136 == 11)                      packet.ReadBits("bits140"' 4' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  var bits136 = packet.ReadBits(4);                    if (bits136 == 11)                      packet.ReadBits("bits140"' 4' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  var bits136 = packet.ReadBits(4);                    if (bits136 == 11)                      packet.ReadBits("bits140"' 4' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadBits("bits2C"' 13);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid8[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid8[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid8[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid8[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid8[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid8[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitC0)                  bitsC0 = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid10[i]' 0' 1' 7' 4' 3' 6' 2' 5);                  packet.WriteGuid("Guid9"' guid10[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid10[i]' 0' 1' 7' 4' 3' 6' 2' 5);                  packet.WriteGuid("Guid9"' guid10[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid10[i]' 0' 1' 7' 4' 3' 6' 2' 5);                  packet.WriteGuid("Guid9"' guid10[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid10[i]' 0' 1' 7' 4' 3' 6' 2' 5);                  packet.WriteGuid("Guid9"' guid10[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid10[i]' 0' 1' 7' 4' 3' 6' 2' 5);                  packet.WriteGuid("Guid9"' guid10[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid10[i]' 0' 1' 7' 4' 3' 6' 2' 5);                  packet.WriteGuid("Guid9"' guid10[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  packet.ReadSingle("FloatAC");                  packet.ReadSingle("FloatB0");                  packet.ReadXORByte(guid7' 0);                  packet.ReadXORByte(guid7' 1);                  packet.ReadXORByte(guid7' 2);                  packet.ReadXORByte(guid7' 7);                  packet.ReadXORByte(guid7' 5);                  packet.ReadXORByte(guid7' 3);                  packet.ReadXORByte(guid7' 4);                  packet.ReadXORByte(guid7' 6);                  packet.ReadSingle("FloatA8");                  packet.WriteGuid("Guid7"' guid7);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  packet.ReadSingle("FloatAC");                  packet.ReadSingle("FloatB0");                  packet.ReadXORByte(guid7' 0);                  packet.ReadXORByte(guid7' 1);                  packet.ReadXORByte(guid7' 2);                  packet.ReadXORByte(guid7' 7);                  packet.ReadXORByte(guid7' 5);                  packet.ReadXORByte(guid7' 3);                  packet.ReadXORByte(guid7' 4);                  packet.ReadXORByte(guid7' 6);                  packet.ReadSingle("FloatA8");                  packet.WriteGuid("Guid7"' guid7);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  packet.ReadSingle("FloatAC");                  packet.ReadSingle("FloatB0");                  packet.ReadXORByte(guid7' 0);                  packet.ReadXORByte(guid7' 1);                  packet.ReadXORByte(guid7' 2);                  packet.ReadXORByte(guid7' 7);                  packet.ReadXORByte(guid7' 5);                  packet.ReadXORByte(guid7' 3);                  packet.ReadXORByte(guid7' 4);                  packet.ReadXORByte(guid7' 6);                  packet.ReadSingle("FloatA8");                  packet.WriteGuid("Guid7"' guid7);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  packet.ReadSingle("FloatAC");                  packet.ReadSingle("FloatB0");                  packet.ReadXORByte(guid7' 0);                  packet.ReadXORByte(guid7' 1);                  packet.ReadXORByte(guid7' 2);                  packet.ReadXORByte(guid7' 7);                  packet.ReadXORByte(guid7' 5);                  packet.ReadXORByte(guid7' 3);                  packet.ReadXORByte(guid7' 4);                  packet.ReadXORByte(guid7' 6);                  packet.ReadSingle("FloatA8");                  packet.WriteGuid("Guid7"' guid7);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  packet.ReadSingle("FloatAC");                  packet.ReadSingle("FloatB0");                  packet.ReadXORByte(guid7' 0);                  packet.ReadXORByte(guid7' 1);                  packet.ReadXORByte(guid7' 2);                  packet.ReadXORByte(guid7' 7);                  packet.ReadXORByte(guid7' 5);                  packet.ReadXORByte(guid7' 3);                  packet.ReadXORByte(guid7' 4);                  packet.ReadXORByte(guid7' 6);                  packet.ReadSingle("FloatA8");                  packet.WriteGuid("Guid7"' guid7);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  packet.ReadSingle("FloatAC");                  packet.ReadSingle("FloatB0");                  packet.ReadXORByte(guid7' 0);                  packet.ReadXORByte(guid7' 1);                  packet.ReadXORByte(guid7' 2);                  packet.ReadXORByte(guid7' 7);                  packet.ReadXORByte(guid7' 5);                  packet.ReadXORByte(guid7' 3);                  packet.ReadXORByte(guid7' 4);                  packet.ReadXORByte(guid7' 6);                  packet.ReadSingle("FloatA8");                  packet.WriteGuid("Guid7"' guid7);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  packet.ReadXORByte(guid9[i]' 4);                  packet.ReadXORByte(guid9[i]' 1);                  packet.ReadXORByte(guid9[i]' 3);                  packet.ReadXORByte(guid9[i]' 5);                  packet.ReadSingle("Float188");                  packet.ReadSingle("Float188");                  packet.ReadXORByte(guid9[i]' 0);                  packet.ReadSingle("Float188");                  packet.ReadXORByte(guid9[i]' 7);                  packet.ReadXORByte(guid9[i]' 2);                  packet.ReadXORByte(guid9[i]' 6);                  packet.WriteGuid("Guid9"' guid9[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  packet.ReadXORByte(guid9[i]' 4);                  packet.ReadXORByte(guid9[i]' 1);                  packet.ReadXORByte(guid9[i]' 3);                  packet.ReadXORByte(guid9[i]' 5);                  packet.ReadSingle("Float188");                  packet.ReadSingle("Float188");                  packet.ReadXORByte(guid9[i]' 0);                  packet.ReadSingle("Float188");                  packet.ReadXORByte(guid9[i]' 7);                  packet.ReadXORByte(guid9[i]' 2);                  packet.ReadXORByte(guid9[i]' 6);                  packet.WriteGuid("Guid9"' guid9[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  packet.ReadXORByte(guid9[i]' 4);                  packet.ReadXORByte(guid9[i]' 1);                  packet.ReadXORByte(guid9[i]' 3);                  packet.ReadXORByte(guid9[i]' 5);                  packet.ReadSingle("Float188");                  packet.ReadSingle("Float188");                  packet.ReadXORByte(guid9[i]' 0);                  packet.ReadSingle("Float188");                  packet.ReadXORByte(guid9[i]' 7);                  packet.ReadXORByte(guid9[i]' 2);                  packet.ReadXORByte(guid9[i]' 6);                  packet.WriteGuid("Guid9"' guid9[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  packet.ReadXORByte(guid9[i]' 4);                  packet.ReadXORByte(guid9[i]' 1);                  packet.ReadXORByte(guid9[i]' 3);                  packet.ReadXORByte(guid9[i]' 5);                  packet.ReadSingle("Float188");                  packet.ReadSingle("Float188");                  packet.ReadXORByte(guid9[i]' 0);                  packet.ReadSingle("Float188");                  packet.ReadXORByte(guid9[i]' 7);                  packet.ReadXORByte(guid9[i]' 2);                  packet.ReadXORByte(guid9[i]' 6);                  packet.WriteGuid("Guid9"' guid9[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  packet.ReadXORByte(guid9[i]' 4);                  packet.ReadXORByte(guid9[i]' 1);                  packet.ReadXORByte(guid9[i]' 3);                  packet.ReadXORByte(guid9[i]' 5);                  packet.ReadSingle("Float188");                  packet.ReadSingle("Float188");                  packet.ReadXORByte(guid9[i]' 0);                  packet.ReadSingle("Float188");                  packet.ReadXORByte(guid9[i]' 7);                  packet.ReadXORByte(guid9[i]' 2);                  packet.ReadXORByte(guid9[i]' 6);                  packet.WriteGuid("Guid9"' guid9[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  packet.ReadXORByte(guid9[i]' 4);                  packet.ReadXORByte(guid9[i]' 1);                  packet.ReadXORByte(guid9[i]' 3);                  packet.ReadXORByte(guid9[i]' 5);                  packet.ReadSingle("Float188");                  packet.ReadSingle("Float188");                  packet.ReadXORByte(guid9[i]' 0);                  packet.ReadSingle("Float188");                  packet.ReadXORByte(guid9[i]' 7);                  packet.ReadXORByte(guid9[i]' 2);                  packet.ReadXORByte(guid9[i]' 6);                  packet.WriteGuid("Guid9"' guid9[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  packet.ReadXORByte(guid6' 1);                  packet.ReadSingle("Float88");                  packet.ReadXORByte(guid6' 7);                  packet.ReadXORByte(guid6' 0);                  packet.ReadSingle("Float8C");                  packet.ReadXORByte(guid6' 3);                  packet.ReadXORByte(guid6' 6);                  packet.ReadSingle("Float90");                  packet.ReadXORByte(guid6' 2);                  packet.ReadXORByte(guid6' 4);                  packet.ReadXORByte(guid6' 5);                  packet.WriteGuid("Guid6"' guid6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  packet.ReadXORByte(guid6' 1);                  packet.ReadSingle("Float88");                  packet.ReadXORByte(guid6' 7);                  packet.ReadXORByte(guid6' 0);                  packet.ReadSingle("Float8C");                  packet.ReadXORByte(guid6' 3);                  packet.ReadXORByte(guid6' 6);                  packet.ReadSingle("Float90");                  packet.ReadXORByte(guid6' 2);                  packet.ReadXORByte(guid6' 4);                  packet.ReadXORByte(guid6' 5);                  packet.WriteGuid("Guid6"' guid6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  packet.ReadXORByte(guid6' 1);                  packet.ReadSingle("Float88");                  packet.ReadXORByte(guid6' 7);                  packet.ReadXORByte(guid6' 0);                  packet.ReadSingle("Float8C");                  packet.ReadXORByte(guid6' 3);                  packet.ReadXORByte(guid6' 6);                  packet.ReadSingle("Float90");                  packet.ReadXORByte(guid6' 2);                  packet.ReadXORByte(guid6' 4);                  packet.ReadXORByte(guid6' 5);                  packet.WriteGuid("Guid6"' guid6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  packet.ReadXORByte(guid6' 1);                  packet.ReadSingle("Float88");                  packet.ReadXORByte(guid6' 7);                  packet.ReadXORByte(guid6' 0);                  packet.ReadSingle("Float8C");                  packet.ReadXORByte(guid6' 3);                  packet.ReadXORByte(guid6' 6);                  packet.ReadSingle("Float90");                  packet.ReadXORByte(guid6' 2);                  packet.ReadXORByte(guid6' 4);                  packet.ReadXORByte(guid6' 5);                  packet.WriteGuid("Guid6"' guid6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  packet.ReadXORByte(guid6' 1);                  packet.ReadSingle("Float88");                  packet.ReadXORByte(guid6' 7);                  packet.ReadXORByte(guid6' 0);                  packet.ReadSingle("Float8C");                  packet.ReadXORByte(guid6' 3);                  packet.ReadXORByte(guid6' 6);                  packet.ReadSingle("Float90");                  packet.ReadXORByte(guid6' 2);                  packet.ReadXORByte(guid6' 4);                  packet.ReadXORByte(guid6' 5);                  packet.WriteGuid("Guid6"' guid6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  packet.ReadXORByte(guid6' 1);                  packet.ReadSingle("Float88");                  packet.ReadXORByte(guid6' 7);                  packet.ReadXORByte(guid6' 0);                  packet.ReadSingle("Float8C");                  packet.ReadXORByte(guid6' 3);                  packet.ReadXORByte(guid6' 6);                  packet.ReadSingle("Float90");                  packet.ReadXORByte(guid6' 2);                  packet.ReadXORByte(guid6' 4);                  packet.ReadXORByte(guid6' 5);                  packet.WriteGuid("Guid6"' guid6);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  packet.ParseBitStream(guid11[i]' 0' 7' 2' 3' 5' 1' 4' 6);                  packet.WriteGuid("Guid11"' guid11[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  packet.ParseBitStream(guid11[i]' 0' 7' 2' 3' 5' 1' 4' 6);                  packet.WriteGuid("Guid11"' guid11[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  packet.ParseBitStream(guid11[i]' 0' 7' 2' 3' 5' 1' 4' 6);                  packet.WriteGuid("Guid11"' guid11[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  packet.ParseBitStream(guid11[i]' 0' 7' 2' 3' 5' 1' 4' 6);                  packet.WriteGuid("Guid11"' guid11[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  packet.ParseBitStream(guid11[i]' 0' 7' 2' 3' 5' 1' 4' 6);                  packet.WriteGuid("Guid11"' guid11[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  packet.ParseBitStream(guid11[i]' 0' 7' 2' 3' 5' 1' 4' 6);                  packet.WriteGuid("Guid11"' guid11[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid8' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid8' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid8' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid8' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid8' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid8' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid4' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid4' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid4' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid4' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid4' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid4' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid3' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid3' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid3' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid3' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid3' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid3' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var guid3 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var guid4 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var guid5 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var guid6 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var guid7 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var bits4C = (int)packet.ReadBits(13);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var bits74 = (int)packet.ReadBits(25);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var bits174 = (int)packet.ReadBits(3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var bits64 = (int)packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  guid8[i] = new byte[8];                  packet.StartBitStream(guid8[i]' 2' 6' 3' 4' 5' 1' 7' 0);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  guid8[i] = new byte[8];                  packet.StartBitStream(guid8[i]' 2' 6' 3' 4' 5' 1' 7' 0);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  guid8[i] = new byte[8];                  packet.StartBitStream(guid8[i]' 2' 6' 3' 4' 5' 1' 7' 0);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  guid8[i] = new byte[8];                  packet.StartBitStream(guid8[i]' 2' 6' 3' 4' 5' 1' 7' 0);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  guid8[i] = new byte[8];                  packet.StartBitStream(guid8[i]' 2' 6' 3' 4' 5' 1' 7' 0);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  guid8[i] = new byte[8];                  packet.StartBitStream(guid8[i]' 2' 6' 3' 4' 5' 1' 7' 0);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  guid8[i] = new byte[8];                  packet.StartBitStream(guid8[i]' 2' 6' 3' 4' 5' 1' 7' 0);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var bits1A4 = (int)packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid7[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid7[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid7[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid7[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid7[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid7[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 0' 4' 1' 6' 5' 3' 2' 7);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 0' 4' 1' 6' 5' 3' 2' 7);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 0' 4' 1' 6' 5' 3' 2' 7);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 0' 4' 1' 6' 5' 3' 2' 7);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 0' 4' 1' 6' 5' 3' 2' 7);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 0' 4' 1' 6' 5' 3' 2' 7);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 0' 4' 1' 6' 5' 3' 2' 7);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid4[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid4[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid4[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid4[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid4[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid4[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasTargetFlags)                  packet.ReadBitsE<TargetFlag>("Target Flags"' 20);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid3[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid3[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid3[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid3[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid3[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid3[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSrcLocation)              {                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                  guid5[6] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSrcLocation)              {                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                  guid5[6] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSrcLocation)              {                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                  guid5[6] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSrcLocation)              {                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                  guid5[6] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSrcLocation)              {                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                  guid5[6] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSrcLocation)              {                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                  guid5[6] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bitE0)                  bits0 = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var hitCount = (int)packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < hitCount; ++i)              {                  hitGuid[i] = new byte[8];                  packet.StartBitStream(hitGuid[i]' 4' 3' 5' 6' 7' 0' 2' 1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < hitCount; ++i)              {                  hitGuid[i] = new byte[8];                  packet.StartBitStream(hitGuid[i]' 4' 3' 5' 6' 7' 0' 2' 1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < hitCount; ++i)              {                  hitGuid[i] = new byte[8];                  packet.StartBitStream(hitGuid[i]' 4' 3' 5' 6' 7' 0' 2' 1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < hitCount; ++i)              {                  hitGuid[i] = new byte[8];                  packet.StartBitStream(hitGuid[i]' 4' 3' 5' 6' 7' 0' 2' 1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < hitCount; ++i)              {                  hitGuid[i] = new byte[8];                  packet.StartBitStream(hitGuid[i]' 4' 3' 5' 6' 7' 0' 2' 1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < hitCount; ++i)              {                  hitGuid[i] = new byte[8];                  packet.StartBitStream(hitGuid[i]' 4' 3' 5' 6' 7' 0' 2' 1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < hitCount; ++i)              {                  hitGuid[i] = new byte[8];                  packet.StartBitStream(hitGuid[i]' 4' 3' 5' 6' 7' 0' 2' 1);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)              {                  guid6[7] = packet.ReadBit();                  guid6[0] = packet.ReadBit();                  guid6[2] = packet.ReadBit();                  guid6[1] = packet.ReadBit();                  guid6[6] = packet.ReadBit();                  guid6[5] = packet.ReadBit();                  guid6[3] = packet.ReadBit();                  guid6[4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)              {                  guid6[7] = packet.ReadBit();                  guid6[0] = packet.ReadBit();                  guid6[2] = packet.ReadBit();                  guid6[1] = packet.ReadBit();                  guid6[6] = packet.ReadBit();                  guid6[5] = packet.ReadBit();                  guid6[3] = packet.ReadBit();                  guid6[4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)              {                  guid6[7] = packet.ReadBit();                  guid6[0] = packet.ReadBit();                  guid6[2] = packet.ReadBit();                  guid6[1] = packet.ReadBit();                  guid6[6] = packet.ReadBit();                  guid6[5] = packet.ReadBit();                  guid6[3] = packet.ReadBit();                  guid6[4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)              {                  guid6[7] = packet.ReadBit();                  guid6[0] = packet.ReadBit();                  guid6[2] = packet.ReadBit();                  guid6[1] = packet.ReadBit();                  guid6[6] = packet.ReadBit();                  guid6[5] = packet.ReadBit();                  guid6[3] = packet.ReadBit();                  guid6[4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)              {                  guid6[7] = packet.ReadBit();                  guid6[0] = packet.ReadBit();                  guid6[2] = packet.ReadBit();                  guid6[1] = packet.ReadBit();                  guid6[6] = packet.ReadBit();                  guid6[5] = packet.ReadBit();                  guid6[3] = packet.ReadBit();                  guid6[4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)              {                  guid6[7] = packet.ReadBit();                  guid6[0] = packet.ReadBit();                  guid6[2] = packet.ReadBit();                  guid6[1] = packet.ReadBit();                  guid6[6] = packet.ReadBit();                  guid6[5] = packet.ReadBit();                  guid6[3] = packet.ReadBit();                  guid6[4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var bits160 = (int)packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits74; ++i)              {                  if (packet.ReadBits("bits22[0]"' 4' i) == 11)                      packet.ReadBits("bits22[1]"' 4' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits74; ++i)              {                  if (packet.ReadBits("bits22[0]"' 4' i) == 11)                      packet.ReadBits("bits22[1]"' 4' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits74; ++i)              {                  if (packet.ReadBits("bits22[0]"' 4' i) == 11)                      packet.ReadBits("bits22[1]"' 4' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (bit2C)              {                  var bits1C = (int)packet.ReadBits("bits1C"' 21);                  if (bit2C)                  {                      for (var i = 0; i < bits1C; ++i)                      {                          packet.ReadInt32("IntED"' i);                          packet.ReadInt32("IntED"' i);                      }                        packet.ReadInt32("Int18");                      packet.ReadInt32("Int14");                      packet.ReadInt32("Int10");                  }              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)              {                  Vector3 pos = new Vector3();                  packet.ReadXORByte(guid6' 0);                  pos.Z = packet.ReadSingle();                  packet.ReadXORByte(guid6' 1);                  pos.Y = packet.ReadSingle();                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(guid6' 7);                  packet.ReadXORByte(guid6' 4);                  packet.ReadXORByte(guid6' 3);                  packet.ReadXORByte(guid6' 2);                  packet.ReadXORByte(guid6' 5);                  packet.ReadXORByte(guid6' 6);                  packet.WriteGuid("Destination Transport GUID"' guid6);                  packet.AddValue("Destination Position"' pos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)              {                  Vector3 pos = new Vector3();                  packet.ReadXORByte(guid6' 0);                  pos.Z = packet.ReadSingle();                  packet.ReadXORByte(guid6' 1);                  pos.Y = packet.ReadSingle();                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(guid6' 7);                  packet.ReadXORByte(guid6' 4);                  packet.ReadXORByte(guid6' 3);                  packet.ReadXORByte(guid6' 2);                  packet.ReadXORByte(guid6' 5);                  packet.ReadXORByte(guid6' 6);                  packet.WriteGuid("Destination Transport GUID"' guid6);                  packet.AddValue("Destination Position"' pos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)              {                  Vector3 pos = new Vector3();                  packet.ReadXORByte(guid6' 0);                  pos.Z = packet.ReadSingle();                  packet.ReadXORByte(guid6' 1);                  pos.Y = packet.ReadSingle();                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(guid6' 7);                  packet.ReadXORByte(guid6' 4);                  packet.ReadXORByte(guid6' 3);                  packet.ReadXORByte(guid6' 2);                  packet.ReadXORByte(guid6' 5);                  packet.ReadXORByte(guid6' 6);                  packet.WriteGuid("Destination Transport GUID"' guid6);                  packet.AddValue("Destination Position"' pos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)              {                  Vector3 pos = new Vector3();                  packet.ReadXORByte(guid6' 0);                  pos.Z = packet.ReadSingle();                  packet.ReadXORByte(guid6' 1);                  pos.Y = packet.ReadSingle();                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(guid6' 7);                  packet.ReadXORByte(guid6' 4);                  packet.ReadXORByte(guid6' 3);                  packet.ReadXORByte(guid6' 2);                  packet.ReadXORByte(guid6' 5);                  packet.ReadXORByte(guid6' 6);                  packet.WriteGuid("Destination Transport GUID"' guid6);                  packet.AddValue("Destination Position"' pos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)              {                  Vector3 pos = new Vector3();                  packet.ReadXORByte(guid6' 0);                  pos.Z = packet.ReadSingle();                  packet.ReadXORByte(guid6' 1);                  pos.Y = packet.ReadSingle();                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(guid6' 7);                  packet.ReadXORByte(guid6' 4);                  packet.ReadXORByte(guid6' 3);                  packet.ReadXORByte(guid6' 2);                  packet.ReadXORByte(guid6' 5);                  packet.ReadXORByte(guid6' 6);                  packet.WriteGuid("Destination Transport GUID"' guid6);                  packet.AddValue("Destination Position"' pos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)              {                  Vector3 pos = new Vector3();                  packet.ReadXORByte(guid6' 0);                  pos.Z = packet.ReadSingle();                  packet.ReadXORByte(guid6' 1);                  pos.Y = packet.ReadSingle();                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(guid6' 7);                  packet.ReadXORByte(guid6' 4);                  packet.ReadXORByte(guid6' 3);                  packet.ReadXORByte(guid6' 2);                  packet.ReadXORByte(guid6' 5);                  packet.ReadXORByte(guid6' 6);                  packet.WriteGuid("Destination Transport GUID"' guid6);                  packet.AddValue("Destination Position"' pos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSrcLocation)              {                  Vector3 pos = new Vector3();                  packet.ReadXORByte(guid5' 6);                  pos.Z = packet.ReadSingle();                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid5' 1);                  pos.X = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 3);                  packet.WriteGuid("Source Transport GUID"' guid5);                  packet.AddValue("Source Position"' pos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSrcLocation)              {                  Vector3 pos = new Vector3();                  packet.ReadXORByte(guid5' 6);                  pos.Z = packet.ReadSingle();                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid5' 1);                  pos.X = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 3);                  packet.WriteGuid("Source Transport GUID"' guid5);                  packet.AddValue("Source Position"' pos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSrcLocation)              {                  Vector3 pos = new Vector3();                  packet.ReadXORByte(guid5' 6);                  pos.Z = packet.ReadSingle();                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid5' 1);                  pos.X = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 3);                  packet.WriteGuid("Source Transport GUID"' guid5);                  packet.AddValue("Source Position"' pos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSrcLocation)              {                  Vector3 pos = new Vector3();                  packet.ReadXORByte(guid5' 6);                  pos.Z = packet.ReadSingle();                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid5' 1);                  pos.X = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 3);                  packet.WriteGuid("Source Transport GUID"' guid5);                  packet.AddValue("Source Position"' pos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSrcLocation)              {                  Vector3 pos = new Vector3();                  packet.ReadXORByte(guid5' 6);                  pos.Z = packet.ReadSingle();                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid5' 1);                  pos.X = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 3);                  packet.WriteGuid("Source Transport GUID"' guid5);                  packet.AddValue("Source Position"' pos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSrcLocation)              {                  Vector3 pos = new Vector3();                  packet.ReadXORByte(guid5' 6);                  pos.Z = packet.ReadSingle();                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid5' 1);                  pos.X = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 3);                  packet.WriteGuid("Source Transport GUID"' guid5);                  packet.AddValue("Source Position"' pos);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  packet.ParseBitStream(guid8[i]' 7' 4' 1' 3' 5' 6' 2' 0);                  packet.WriteGuid("Guid8"' guid8[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  packet.ParseBitStream(guid8[i]' 7' 4' 1' 3' 5' 6' 2' 0);                  packet.WriteGuid("Guid8"' guid8[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  packet.ParseBitStream(guid8[i]' 7' 4' 1' 3' 5' 6' 2' 0);                  packet.WriteGuid("Guid8"' guid8[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  packet.ParseBitStream(guid8[i]' 7' 4' 1' 3' 5' 6' 2' 0);                  packet.WriteGuid("Guid8"' guid8[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  packet.ParseBitStream(guid8[i]' 7' 4' 1' 3' 5' 6' 2' 0);                  packet.WriteGuid("Guid8"' guid8[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  packet.ParseBitStream(guid8[i]' 7' 4' 1' 3' 5' 6' 2' 0);                  packet.WriteGuid("Guid8"' guid8[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < hitCount; ++i)              {                  packet.ParseBitStream(hitGuid[i]' 7' 1' 6' 2' 4' 3' 5' 0);                  packet.WriteGuid("Hit GUID"' hitGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < hitCount; ++i)              {                  packet.ParseBitStream(hitGuid[i]' 7' 1' 6' 2' 4' 3' 5' 0);                  packet.WriteGuid("Hit GUID"' hitGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < hitCount; ++i)              {                  packet.ParseBitStream(hitGuid[i]' 7' 1' 6' 2' 4' 3' 5' 0);                  packet.WriteGuid("Hit GUID"' hitGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < hitCount; ++i)              {                  packet.ParseBitStream(hitGuid[i]' 7' 1' 6' 2' 4' 3' 5' 0);                  packet.WriteGuid("Hit GUID"' hitGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < hitCount; ++i)              {                  packet.ParseBitStream(hitGuid[i]' 7' 1' 6' 2' 4' 3' 5' 0);                  packet.WriteGuid("Hit GUID"' hitGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < hitCount; ++i)              {                  packet.ParseBitStream(hitGuid[i]' 7' 1' 6' 2' 4' 3' 5' 0);                  packet.WriteGuid("Hit GUID"' hitGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  packet.ReadXORByte(guid9[i]' 7);                  packet.ReadSingle("Float1A8"' i);                  packet.ReadSingle("Float1A8"' i);                  packet.ReadXORByte(guid9[i]' 2);                  packet.ReadXORByte(guid9[i]' 0);                  packet.ReadXORByte(guid9[i]' 6);                  packet.ReadSingle("Float1A8"' i);                  packet.ReadXORByte(guid9[i]' 1);                  packet.ReadXORByte(guid9[i]' 3);                  packet.ReadXORByte(guid9[i]' 4);                  packet.ReadXORByte(guid9[i]' 5);                    packet.WriteGuid("Guid6"' guid9[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  packet.ReadXORByte(guid9[i]' 7);                  packet.ReadSingle("Float1A8"' i);                  packet.ReadSingle("Float1A8"' i);                  packet.ReadXORByte(guid9[i]' 2);                  packet.ReadXORByte(guid9[i]' 0);                  packet.ReadXORByte(guid9[i]' 6);                  packet.ReadSingle("Float1A8"' i);                  packet.ReadXORByte(guid9[i]' 1);                  packet.ReadXORByte(guid9[i]' 3);                  packet.ReadXORByte(guid9[i]' 4);                  packet.ReadXORByte(guid9[i]' 5);                    packet.WriteGuid("Guid6"' guid9[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  packet.ReadXORByte(guid9[i]' 7);                  packet.ReadSingle("Float1A8"' i);                  packet.ReadSingle("Float1A8"' i);                  packet.ReadXORByte(guid9[i]' 2);                  packet.ReadXORByte(guid9[i]' 0);                  packet.ReadXORByte(guid9[i]' 6);                  packet.ReadSingle("Float1A8"' i);                  packet.ReadXORByte(guid9[i]' 1);                  packet.ReadXORByte(guid9[i]' 3);                  packet.ReadXORByte(guid9[i]' 4);                  packet.ReadXORByte(guid9[i]' 5);                    packet.WriteGuid("Guid6"' guid9[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  packet.ReadXORByte(guid9[i]' 7);                  packet.ReadSingle("Float1A8"' i);                  packet.ReadSingle("Float1A8"' i);                  packet.ReadXORByte(guid9[i]' 2);                  packet.ReadXORByte(guid9[i]' 0);                  packet.ReadXORByte(guid9[i]' 6);                  packet.ReadSingle("Float1A8"' i);                  packet.ReadXORByte(guid9[i]' 1);                  packet.ReadXORByte(guid9[i]' 3);                  packet.ReadXORByte(guid9[i]' 4);                  packet.ReadXORByte(guid9[i]' 5);                    packet.WriteGuid("Guid6"' guid9[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  packet.ReadXORByte(guid9[i]' 7);                  packet.ReadSingle("Float1A8"' i);                  packet.ReadSingle("Float1A8"' i);                  packet.ReadXORByte(guid9[i]' 2);                  packet.ReadXORByte(guid9[i]' 0);                  packet.ReadXORByte(guid9[i]' 6);                  packet.ReadSingle("Float1A8"' i);                  packet.ReadXORByte(guid9[i]' 1);                  packet.ReadXORByte(guid9[i]' 3);                  packet.ReadXORByte(guid9[i]' 4);                  packet.ReadXORByte(guid9[i]' 5);                    packet.WriteGuid("Guid6"' guid9[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  packet.ReadXORByte(guid9[i]' 7);                  packet.ReadSingle("Float1A8"' i);                  packet.ReadSingle("Float1A8"' i);                  packet.ReadXORByte(guid9[i]' 2);                  packet.ReadXORByte(guid9[i]' 0);                  packet.ReadXORByte(guid9[i]' 6);                  packet.ReadSingle("Float1A8"' i);                  packet.ReadXORByte(guid9[i]' 1);                  packet.ReadXORByte(guid9[i]' 3);                  packet.ReadXORByte(guid9[i]' 4);                  packet.ReadXORByte(guid9[i]' 5);                    packet.WriteGuid("Guid6"' guid9[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid7' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid7' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid7' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid7' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid7' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid7' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid3' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid3' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid3' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid3' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid3' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid3' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid4' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid4' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid4' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid4' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid4' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid4' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSetSpellModifierFlat,The following statement contains a magic number: var modCount = packet.ReadBits("Modifier type count"' 22);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSetSpellModifierFlat,The following statement contains a magic number: for (var j = 0; j < modCount; ++j)                  modTypeCount[j] = packet.ReadBits("Count"' 21' j);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSetSpellModifierPct,The following statement contains a magic number: var modCount = packet.ReadBits("Modifier type count"' 22);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSetSpellModifierPct,The following statement contains a magic number: for (var j = 0; j < modCount; ++j)                  modTypeCount[j] = packet.ReadBits("Count"' 21' j);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellCategoryCooldown,The following statement contains a magic number: var count = packet.ReadBits("Count"' 21);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSendUnlearnSpells,The following statement contains a magic number: var count = packet.ReadBits("Count"' 21);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: var targetGUD = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: var casterGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: casterGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: casterGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: casterGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: casterGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  targetGUD[0] = packet.ReadBit();                  targetGUD[3] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                    bit24 = !packet.ReadBit();                    targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    bit20 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 2' 5' 0' 6' 3' 7' 4' 1);                    targetGUD[2] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  targetGUD[0] = packet.ReadBit();                  targetGUD[3] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                    bit24 = !packet.ReadBit();                    targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    bit20 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 2' 5' 0' 6' 3' 7' 4' 1);                    targetGUD[2] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  targetGUD[0] = packet.ReadBit();                  targetGUD[3] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                    bit24 = !packet.ReadBit();                    targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    bit20 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 2' 5' 0' 6' 3' 7' 4' 1);                    targetGUD[2] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  targetGUD[0] = packet.ReadBit();                  targetGUD[3] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                    bit24 = !packet.ReadBit();                    targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    bit20 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 2' 5' 0' 6' 3' 7' 4' 1);                    targetGUD[2] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  targetGUD[0] = packet.ReadBit();                  targetGUD[3] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                    bit24 = !packet.ReadBit();                    targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    bit20 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 2' 5' 0' 6' 3' 7' 4' 1);                    targetGUD[2] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  targetGUD[0] = packet.ReadBit();                  targetGUD[3] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                    bit24 = !packet.ReadBit();                    targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    bit20 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 2' 5' 0' 6' 3' 7' 4' 1);                    targetGUD[2] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  targetGUD[0] = packet.ReadBit();                  targetGUD[3] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                    bit24 = !packet.ReadBit();                    targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    bit20 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 2' 5' 0' 6' 3' 7' 4' 1);                    targetGUD[2] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  targetGUD[0] = packet.ReadBit();                  targetGUD[3] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                    bit24 = !packet.ReadBit();                    targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    bit20 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 2' 5' 0' 6' 3' 7' 4' 1);                    targetGUD[2] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  targetGUD[0] = packet.ReadBit();                  targetGUD[3] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                    bit24 = !packet.ReadBit();                    targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    bit20 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 2' 5' 0' 6' 3' 7' 4' 1);                    targetGUD[2] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  targetGUD[0] = packet.ReadBit();                  targetGUD[3] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                    bit24 = !packet.ReadBit();                    targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    bit20 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 2' 5' 0' 6' 3' 7' 4' 1);                    targetGUD[2] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  targetGUD[0] = packet.ReadBit();                  targetGUD[3] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                    bit24 = !packet.ReadBit();                    targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    bit20 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 2' 5' 0' 6' 3' 7' 4' 1);                    targetGUD[2] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  targetGUD[0] = packet.ReadBit();                  targetGUD[3] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                    bit24 = !packet.ReadBit();                    targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    bit20 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 2' 5' 0' 6' 3' 7' 4' 1);                    targetGUD[2] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: casterGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: casterGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  packet.ParseBitStream(guid2' 4' 7' 6' 0' 1' 3' 5' 2);                    packet.ReadXORByte(targetGUD' 0);                    if (bit20)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 3);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 1);                    if (bit24)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 6);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  packet.ParseBitStream(guid2' 4' 7' 6' 0' 1' 3' 5' 2);                    packet.ReadXORByte(targetGUD' 0);                    if (bit20)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 3);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 1);                    if (bit24)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 6);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  packet.ParseBitStream(guid2' 4' 7' 6' 0' 1' 3' 5' 2);                    packet.ReadXORByte(targetGUD' 0);                    if (bit20)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 3);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 1);                    if (bit24)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 6);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  packet.ParseBitStream(guid2' 4' 7' 6' 0' 1' 3' 5' 2);                    packet.ReadXORByte(targetGUD' 0);                    if (bit20)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 3);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 1);                    if (bit24)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 6);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  packet.ParseBitStream(guid2' 4' 7' 6' 0' 1' 3' 5' 2);                    packet.ReadXORByte(targetGUD' 0);                    if (bit20)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 3);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 1);                    if (bit24)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 6);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  packet.ParseBitStream(guid2' 4' 7' 6' 0' 1' 3' 5' 2);                    packet.ReadXORByte(targetGUD' 0);                    if (bit20)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 3);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 1);                    if (bit24)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 6);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  packet.ParseBitStream(guid2' 4' 7' 6' 0' 1' 3' 5' 2);                    packet.ReadXORByte(targetGUD' 0);                    if (bit20)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 3);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 1);                    if (bit24)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 6);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  packet.ParseBitStream(guid2' 4' 7' 6' 0' 1' 3' 5' 2);                    packet.ReadXORByte(targetGUD' 0);                    if (bit20)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 3);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 1);                    if (bit24)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 6);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  packet.ParseBitStream(guid2' 4' 7' 6' 0' 1' 3' 5' 2);                    packet.ReadXORByte(targetGUD' 0);                    if (bit20)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 3);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 1);                    if (bit24)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 6);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  packet.ParseBitStream(guid2' 4' 7' 6' 0' 1' 3' 5' 2);                    packet.ReadXORByte(targetGUD' 0);                    if (bit20)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 3);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 1);                    if (bit24)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 6);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  packet.ParseBitStream(guid2' 4' 7' 6' 0' 1' 3' 5' 2);                    packet.ReadXORByte(targetGUD' 0);                    if (bit20)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 3);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 1);                    if (bit24)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 6);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (bit28)              {                  packet.ParseBitStream(guid2' 4' 7' 6' 0' 1' 3' 5' 2);                    packet.ReadXORByte(targetGUD' 0);                    if (bit20)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 3);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 1);                    if (bit24)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 6);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 0' 4' 1' 3' 5' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 0' 4' 1' 3' 5' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 0' 4' 1' 3' 5' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 0' 4' 1' 3' 5' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 0' 4' 1' 3' 5' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7' 0' 4' 1' 3' 5' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var transportGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var goTransportGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var attackingTargetGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var transportFrames = packet.ReadBits("Transport Frames Count"' 22' index);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  packet.ReadBit("bit8D"' index);                  hasPitch = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[4] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  hasMoveFlagsExtra = !packet.ReadBit();                  bitA0 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 3' 7);                  bits90 = packet.ReadBits(22);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  guid1[1] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  packet.ReadBit("bit8C"' index);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    guid1[0] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                            packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                    hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 6' 1' 2' 5);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 4' 7' 0);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3);                  }                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  packet.ReadBit("bit8D"' index);                  hasPitch = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[4] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  hasMoveFlagsExtra = !packet.ReadBit();                  bitA0 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 3' 7);                  bits90 = packet.ReadBits(22);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  guid1[1] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  packet.ReadBit("bit8C"' index);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    guid1[0] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                            packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                    hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 6' 1' 2' 5);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 4' 7' 0);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3);                  }                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  packet.ReadBit("bit8D"' index);                  hasPitch = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[4] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  hasMoveFlagsExtra = !packet.ReadBit();                  bitA0 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 3' 7);                  bits90 = packet.ReadBits(22);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  guid1[1] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  packet.ReadBit("bit8C"' index);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    guid1[0] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                            packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                    hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 6' 1' 2' 5);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 4' 7' 0);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3);                  }                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  packet.ReadBit("bit8D"' index);                  hasPitch = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[4] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  hasMoveFlagsExtra = !packet.ReadBit();                  bitA0 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 3' 7);                  bits90 = packet.ReadBits(22);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  guid1[1] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  packet.ReadBit("bit8C"' index);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    guid1[0] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                            packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                    hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 6' 1' 2' 5);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 4' 7' 0);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3);                  }                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  packet.ReadBit("bit8D"' index);                  hasPitch = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[4] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  hasMoveFlagsExtra = !packet.ReadBit();                  bitA0 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 3' 7);                  bits90 = packet.ReadBits(22);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  guid1[1] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  packet.ReadBit("bit8C"' index);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    guid1[0] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                            packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                    hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 6' 1' 2' 5);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 4' 7' 0);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3);                  }                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  packet.ReadBit("bit8D"' index);                  hasPitch = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[4] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  hasMoveFlagsExtra = !packet.ReadBit();                  bitA0 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 3' 7);                  bits90 = packet.ReadBits(22);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  guid1[1] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  packet.ReadBit("bit8C"' index);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    guid1[0] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                            packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                    hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 6' 1' 2' 5);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 4' 7' 0);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3);                  }                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  packet.ReadBit("bit8D"' index);                  hasPitch = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[4] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  hasMoveFlagsExtra = !packet.ReadBit();                  bitA0 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 3' 7);                  bits90 = packet.ReadBits(22);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  guid1[1] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  packet.ReadBit("bit8C"' index);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    guid1[0] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                            packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                    hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 6' 1' 2' 5);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 4' 7' 0);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3);                  }                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  packet.ReadBit("bit8D"' index);                  hasPitch = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[4] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  hasMoveFlagsExtra = !packet.ReadBit();                  bitA0 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 3' 7);                  bits90 = packet.ReadBits(22);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  guid1[1] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  packet.ReadBit("bit8C"' index);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    guid1[0] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                            packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                    hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 6' 1' 2' 5);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 4' 7' 0);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3);                  }                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  packet.ReadBit("bit8D"' index);                  hasPitch = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[4] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  hasMoveFlagsExtra = !packet.ReadBit();                  bitA0 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 3' 7);                  bits90 = packet.ReadBits(22);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  guid1[1] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  packet.ReadBit("bit8C"' index);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    guid1[0] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                            packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                    hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 6' 1' 2' 5);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 4' 7' 0);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3);                  }                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  packet.ReadBit("bit8D"' index);                  hasPitch = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[4] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  hasMoveFlagsExtra = !packet.ReadBit();                  bitA0 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 3' 7);                  bits90 = packet.ReadBits(22);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  guid1[1] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  packet.ReadBit("bit8C"' index);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    guid1[0] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                            packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                    hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 6' 1' 2' 5);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 4' 7' 0);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3);                  }                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  packet.ReadBit("bit8D"' index);                  hasPitch = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[4] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  hasMoveFlagsExtra = !packet.ReadBit();                  bitA0 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 3' 7);                  bits90 = packet.ReadBits(22);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  guid1[1] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  packet.ReadBit("bit8C"' index);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    guid1[0] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                            packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                    hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 6' 1' 2' 5);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 4' 7' 0);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3);                  }                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  packet.ReadBit("bit8D"' index);                  hasPitch = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[4] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  hasMoveFlagsExtra = !packet.ReadBit();                  bitA0 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 3' 7);                  bits90 = packet.ReadBits(22);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  guid1[1] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  packet.ReadBit("bit8C"' index);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    guid1[0] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                            packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                    hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 6' 1' 2' 5);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 4' 7' 0);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3);                  }                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  packet.ReadBit("bit8D"' index);                  hasPitch = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[4] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  hasMoveFlagsExtra = !packet.ReadBit();                  bitA0 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 3' 7);                  bits90 = packet.ReadBits(22);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  guid1[1] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  packet.ReadBit("bit8C"' index);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    guid1[0] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                            packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                    hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 6' 1' 2' 5);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 4' 7' 0);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3);                  }                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  packet.ReadBit("bit8D"' index);                  hasPitch = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[4] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  hasMoveFlagsExtra = !packet.ReadBit();                  bitA0 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 3' 7);                  bits90 = packet.ReadBits(22);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  guid1[1] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  packet.ReadBit("bit8C"' index);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    guid1[0] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                            packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                    hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 6' 1' 2' 5);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 4' 7' 0);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3);                  }                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  packet.ReadBit("bit8D"' index);                  hasPitch = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[4] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  hasMoveFlagsExtra = !packet.ReadBit();                  bitA0 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 3' 7);                  bits90 = packet.ReadBits(22);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  guid1[1] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  packet.ReadBit("bit8C"' index);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    guid1[0] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                            packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                    hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 6' 1' 2' 5);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 4' 7' 0);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3);                  }                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  packet.ReadBit("bit8D"' index);                  hasPitch = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[4] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  hasMoveFlagsExtra = !packet.ReadBit();                  bitA0 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 3' 7);                  bits90 = packet.ReadBits(22);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  guid1[1] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  packet.ReadBit("bit8C"' index);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    guid1[0] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                            packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                    hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 6' 1' 2' 5);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 4' 7' 0);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3);                  }                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  packet.ReadBit("bit8D"' index);                  hasPitch = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[4] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  hasMoveFlagsExtra = !packet.ReadBit();                  bitA0 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 3' 7);                  bits90 = packet.ReadBits(22);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  guid1[1] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  packet.ReadBit("bit8C"' index);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    guid1[0] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                            packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                    hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 6' 1' 2' 5);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 4' 7' 0);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3);                  }                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  packet.ReadBit("bit8D"' index);                  hasPitch = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[4] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  hasMoveFlagsExtra = !packet.ReadBit();                  bitA0 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 3' 7);                  bits90 = packet.ReadBits(22);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  guid1[1] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  packet.ReadBit("bit8C"' index);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    guid1[0] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                            packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                    hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 6' 1' 2' 5);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 4' 7' 0);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3);                  }                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  packet.ReadBit("bit8D"' index);                  hasPitch = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[4] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  hasMoveFlagsExtra = !packet.ReadBit();                  bitA0 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 3' 7);                  bits90 = packet.ReadBits(22);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  guid1[1] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  packet.ReadBit("bit8C"' index);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    guid1[0] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                            packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                    hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 6' 1' 2' 5);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 4' 7' 0);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3);                  }                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  packet.ReadBit("bit8D"' index);                  hasPitch = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[4] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  hasMoveFlagsExtra = !packet.ReadBit();                  bitA0 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 3' 7);                  bits90 = packet.ReadBits(22);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  guid1[1] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  packet.ReadBit("bit8C"' index);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    guid1[0] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                            packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                    hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 6' 1' 2' 5);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 4' 7' 0);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3);                  }                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  packet.ReadBit("bit8D"' index);                  hasPitch = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[4] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  hasMoveFlagsExtra = !packet.ReadBit();                  bitA0 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 3' 7);                  bits90 = packet.ReadBits(22);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  guid1[1] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  packet.ReadBit("bit8C"' index);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    guid1[0] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                            packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                    hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 6' 1' 2' 5);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 4' 7' 0);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3);                  }                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[5] = packet.ReadBit();                  packet.ReadBit("bit8D"' index);                  hasPitch = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[4] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  hasMoveFlagsExtra = !packet.ReadBit();                  bitA0 = !packet.ReadBit();                  packet.StartBitStream(guid1' 2' 3' 7);                  bits90 = packet.ReadBits(22);                  hasMovementFlags = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  guid1[1] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  packet.ReadBit("bit8C"' index);                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                    guid1[0] = packet.ReadBit();                  moveInfo.HasSplineData = packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                          bit130 = packet.ReadBit();                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                            packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                      }                  }                    hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 6' 1' 2' 5);                      hasTransportTime3 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 4' 7' 0);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 3);                  }                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  hasGOTransportTime3 = packet.ReadBit();                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 4' 2' 7' 6' 3' 0' 1' 5);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  hasGOTransportTime3 = packet.ReadBit();                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 4' 2' 7' 6' 3' 0' 1' 5);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  hasGOTransportTime3 = packet.ReadBit();                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 4' 2' 7' 6' 3' 0' 1' 5);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  hasGOTransportTime3 = packet.ReadBit();                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 4' 2' 7' 6' 3' 0' 1' 5);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  hasGOTransportTime3 = packet.ReadBit();                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 4' 2' 7' 6' 3' 0' 1' 5);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  hasGOTransportTime3 = packet.ReadBit();                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 4' 2' 7' 6' 3' 0' 1' 5);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var CreatorGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_A = new bool[2];                  bit358_E = new bool[2];                  bit358_22 = new bool[2];                    bit332 = !packet.ReadBit();                  packet.ReadBit("bit350"' index);                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 5' 2);                      bit358_A[i] = !packet.ReadBit();                      bits358_10[i] = packet.ReadBits(2);                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_74[i][j] = packet.ReadBits(20);                          bits358_6_31[i][j] = packet.ReadBits(7);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            guid358_6[i][j][5] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                          packet.StartBitStream(guid358_6[i][j]' 1' 3' 2' 4' 7);                            bit358_6_2E[i][j] = !packet.ReadBit();                          bit358_6_30[i][j] = packet.ReadBit();                          guid358_6[i][j][0] = packet.ReadBit();                            bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            guid358_6[i][j][6] = packet.ReadBit();                      }                        bit358_E[i] = !packet.ReadBit();                      bit358_22[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 4' 1' 7' 3' 6' 0);                  }                    packet.ReadBit(); // fake bit                  packet.StartBitStream(CreatorGUID' 7' 3' 2' 4' 0' 5' 6' 1);                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388[i] = packet.ReadBits(21);                        bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                      for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                        bits388_10[i] = packet.ReadBits(21);                  }                    packet.ReadBit("bit351"' index);                  bit340 = !packet.ReadBit();                  bit330 = !packet.ReadBit();                  bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit29C)              {                  packet.ReadBit("bit20F"' index);                  bit230 = packet.ReadBit();                  bit23C = packet.ReadBit();                  packet.ReadBit("bit20C"' index);                  bit228 = packet.ReadBit();                  bit218 = packet.ReadBit();                  packet.ReadBit("bit20D"' index);                  packet.ReadBit("bit20E"' index);                  bit298 = packet.ReadBit();                  bit220 = packet.ReadBit();                  bit284 = packet.ReadBit();                  if (bit284)                  {                      bits26C = packet.ReadBits(21);                      bits25C = packet.ReadBits(21);                  }                    packet.ReadBit("bit210"' index);                  if (bit298)                      bits288 = packet.ReadBits(20);                    bit258 = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit29C)              {                  packet.ReadBit("bit20F"' index);                  bit230 = packet.ReadBit();                  bit23C = packet.ReadBit();                  packet.ReadBit("bit20C"' index);                  bit228 = packet.ReadBit();                  bit218 = packet.ReadBit();                  packet.ReadBit("bit20D"' index);                  packet.ReadBit("bit20E"' index);                  bit298 = packet.ReadBit();                  bit220 = packet.ReadBit();                  bit284 = packet.ReadBit();                  if (bit284)                  {                      bits26C = packet.ReadBits(21);                      bits25C = packet.ReadBits(21);                  }                    packet.ReadBit("bit210"' index);                  if (bit298)                      bits288 = packet.ReadBits(20);                    bit258 = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit29C)              {                  packet.ReadBit("bit20F"' index);                  bit230 = packet.ReadBit();                  bit23C = packet.ReadBit();                  packet.ReadBit("bit20C"' index);                  bit228 = packet.ReadBit();                  bit218 = packet.ReadBit();                  packet.ReadBit("bit20D"' index);                  packet.ReadBit("bit20E"' index);                  bit298 = packet.ReadBit();                  bit220 = packet.ReadBit();                  bit284 = packet.ReadBit();                  if (bit284)                  {                      bits26C = packet.ReadBits(21);                      bits25C = packet.ReadBits(21);                  }                    packet.ReadBit("bit210"' index);                  if (bit298)                      bits288 = packet.ReadBits(20);                    bit258 = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  packet.StartBitStream(attackingTargetGuid' 4' 0' 6' 2' 1' 5' 3' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  packet.StartBitStream(attackingTargetGuid' 4' 0' 6' 2' 1' 5' 3' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  packet.StartBitStream(attackingTargetGuid' 4' 0' 6' 2' 1' 5' 3' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  packet.StartBitStream(attackingTargetGuid' 4' 0' 6' 2' 1' 5' 3' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  packet.StartBitStream(attackingTargetGuid' 4' 0' 6' 2' 1' 5' 3' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  packet.StartBitStream(attackingTargetGuid' 4' 0' 6' 2' 1' 5' 3' 7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit428)                  bits418 = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit32A)                  bits2AA = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.ReadSByte("GO Transport Seat"' index);                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    packet.ReadXORBytes(goTransportGuid' 4' 3);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORBytes(goTransportGuid' 7' 6' 5' 0);                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  moveInfo.TransportOffset.X = packet.ReadSingle();                  packet.ReadUInt32("GO Transport Time"' index);                  moveInfo.TransportOffset.O = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 1);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 2);                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.ReadSByte("GO Transport Seat"' index);                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    packet.ReadXORBytes(goTransportGuid' 4' 3);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORBytes(goTransportGuid' 7' 6' 5' 0);                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  moveInfo.TransportOffset.X = packet.ReadSingle();                  packet.ReadUInt32("GO Transport Time"' index);                  moveInfo.TransportOffset.O = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 1);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 2);                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.ReadSByte("GO Transport Seat"' index);                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    packet.ReadXORBytes(goTransportGuid' 4' 3);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORBytes(goTransportGuid' 7' 6' 5' 0);                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  moveInfo.TransportOffset.X = packet.ReadSingle();                  packet.ReadUInt32("GO Transport Time"' index);                  moveInfo.TransportOffset.O = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 1);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 2);                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.ReadSByte("GO Transport Seat"' index);                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    packet.ReadXORBytes(goTransportGuid' 4' 3);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORBytes(goTransportGuid' 7' 6' 5' 0);                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  moveInfo.TransportOffset.X = packet.ReadSingle();                  packet.ReadUInt32("GO Transport Time"' index);                  moveInfo.TransportOffset.O = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 1);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 2);                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.ReadSByte("GO Transport Seat"' index);                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    packet.ReadXORBytes(goTransportGuid' 4' 3);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORBytes(goTransportGuid' 7' 6' 5' 0);                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  moveInfo.TransportOffset.X = packet.ReadSingle();                  packet.ReadUInt32("GO Transport Time"' index);                  moveInfo.TransportOffset.O = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 1);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 2);                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.ReadSByte("GO Transport Seat"' index);                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    packet.ReadXORBytes(goTransportGuid' 4' 3);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORBytes(goTransportGuid' 7' 6' 5' 0);                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  moveInfo.TransportOffset.X = packet.ReadSingle();                  packet.ReadUInt32("GO Transport Time"' index);                  moveInfo.TransportOffset.O = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 1);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 2);                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData)                  {                      packet.ReadXORBytes(transportGuid' 0' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORBytes(transportGuid' 6' 4);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 3);                      var seat = packet.ReadSByte("Transport Seat"' index);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                            for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                  }                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float14"' index' i);                      packet.ReadUInt32("Int0"' index' i);                      packet.ReadUInt32("Int10"' index' i);                      packet.ReadSingle("Float4"' index' i);                      packet.ReadSingle("Float8"' index' i);                      packet.ReadSingle("FloatC"' index' i);                  }                    if (hasFallData)                  {                      packet.ReadUInt32("Time Fallen"' index);                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                        packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadSingle("RunBack Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 2);                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("SwimBack Speed"' index);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORByte(guid1' 6);                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  packet.ReadSingle("Pitch Speed"' index);                  packet.ReadXORBytes(guid1' 0' 5);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    packet.ReadXORByte(guid1' 4);                  moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData)                  {                      packet.ReadXORBytes(transportGuid' 0' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORBytes(transportGuid' 6' 4);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 3);                      var seat = packet.ReadSByte("Transport Seat"' index);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                            for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                  }                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float14"' index' i);                      packet.ReadUInt32("Int0"' index' i);                      packet.ReadUInt32("Int10"' index' i);                      packet.ReadSingle("Float4"' index' i);                      packet.ReadSingle("Float8"' index' i);                      packet.ReadSingle("FloatC"' index' i);                  }                    if (hasFallData)                  {                      packet.ReadUInt32("Time Fallen"' index);                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                        packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadSingle("RunBack Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 2);                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("SwimBack Speed"' index);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORByte(guid1' 6);                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  packet.ReadSingle("Pitch Speed"' index);                  packet.ReadXORBytes(guid1' 0' 5);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    packet.ReadXORByte(guid1' 4);                  moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData)                  {                      packet.ReadXORBytes(transportGuid' 0' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORBytes(transportGuid' 6' 4);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 3);                      var seat = packet.ReadSByte("Transport Seat"' index);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                            for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                  }                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float14"' index' i);                      packet.ReadUInt32("Int0"' index' i);                      packet.ReadUInt32("Int10"' index' i);                      packet.ReadSingle("Float4"' index' i);                      packet.ReadSingle("Float8"' index' i);                      packet.ReadSingle("FloatC"' index' i);                  }                    if (hasFallData)                  {                      packet.ReadUInt32("Time Fallen"' index);                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                        packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadSingle("RunBack Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 2);                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("SwimBack Speed"' index);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORByte(guid1' 6);                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  packet.ReadSingle("Pitch Speed"' index);                  packet.ReadXORBytes(guid1' 0' 5);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    packet.ReadXORByte(guid1' 4);                  moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData)                  {                      packet.ReadXORBytes(transportGuid' 0' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORBytes(transportGuid' 6' 4);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 3);                      var seat = packet.ReadSByte("Transport Seat"' index);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                            for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                  }                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float14"' index' i);                      packet.ReadUInt32("Int0"' index' i);                      packet.ReadUInt32("Int10"' index' i);                      packet.ReadSingle("Float4"' index' i);                      packet.ReadSingle("Float8"' index' i);                      packet.ReadSingle("FloatC"' index' i);                  }                    if (hasFallData)                  {                      packet.ReadUInt32("Time Fallen"' index);                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                        packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadSingle("RunBack Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 2);                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("SwimBack Speed"' index);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORByte(guid1' 6);                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  packet.ReadSingle("Pitch Speed"' index);                  packet.ReadXORBytes(guid1' 0' 5);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    packet.ReadXORByte(guid1' 4);                  moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData)                  {                      packet.ReadXORBytes(transportGuid' 0' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORBytes(transportGuid' 6' 4);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 3);                      var seat = packet.ReadSByte("Transport Seat"' index);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                            for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                  }                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float14"' index' i);                      packet.ReadUInt32("Int0"' index' i);                      packet.ReadUInt32("Int10"' index' i);                      packet.ReadSingle("Float4"' index' i);                      packet.ReadSingle("Float8"' index' i);                      packet.ReadSingle("FloatC"' index' i);                  }                    if (hasFallData)                  {                      packet.ReadUInt32("Time Fallen"' index);                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                        packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadSingle("RunBack Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 2);                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("SwimBack Speed"' index);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORByte(guid1' 6);                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  packet.ReadSingle("Pitch Speed"' index);                  packet.ReadXORBytes(guid1' 0' 5);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    packet.ReadXORByte(guid1' 4);                  moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData)                  {                      packet.ReadXORBytes(transportGuid' 0' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORBytes(transportGuid' 6' 4);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 3);                      var seat = packet.ReadSByte("Transport Seat"' index);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                            for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                  }                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float14"' index' i);                      packet.ReadUInt32("Int0"' index' i);                      packet.ReadUInt32("Int10"' index' i);                      packet.ReadSingle("Float4"' index' i);                      packet.ReadSingle("Float8"' index' i);                      packet.ReadSingle("FloatC"' index' i);                  }                    if (hasFallData)                  {                      packet.ReadUInt32("Time Fallen"' index);                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                        packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadSingle("RunBack Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 2);                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("SwimBack Speed"' index);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORByte(guid1' 6);                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  packet.ReadSingle("Pitch Speed"' index);                  packet.ReadXORBytes(guid1' 0' 5);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    packet.ReadXORByte(guid1' 4);                  moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData)                  {                      packet.ReadXORBytes(transportGuid' 0' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORBytes(transportGuid' 6' 4);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 3);                      var seat = packet.ReadSByte("Transport Seat"' index);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                            for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                  }                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float14"' index' i);                      packet.ReadUInt32("Int0"' index' i);                      packet.ReadUInt32("Int10"' index' i);                      packet.ReadSingle("Float4"' index' i);                      packet.ReadSingle("Float8"' index' i);                      packet.ReadSingle("FloatC"' index' i);                  }                    if (hasFallData)                  {                      packet.ReadUInt32("Time Fallen"' index);                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                        packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadSingle("RunBack Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 2);                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("SwimBack Speed"' index);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORByte(guid1' 6);                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  packet.ReadSingle("Pitch Speed"' index);                  packet.ReadXORBytes(guid1' 0' 5);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    packet.ReadXORByte(guid1' 4);                  moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData)                  {                      packet.ReadXORBytes(transportGuid' 0' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORBytes(transportGuid' 6' 4);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 3);                      var seat = packet.ReadSByte("Transport Seat"' index);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                            for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                  }                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float14"' index' i);                      packet.ReadUInt32("Int0"' index' i);                      packet.ReadUInt32("Int10"' index' i);                      packet.ReadSingle("Float4"' index' i);                      packet.ReadSingle("Float8"' index' i);                      packet.ReadSingle("FloatC"' index' i);                  }                    if (hasFallData)                  {                      packet.ReadUInt32("Time Fallen"' index);                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                        packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadSingle("RunBack Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 2);                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("SwimBack Speed"' index);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORByte(guid1' 6);                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  packet.ReadSingle("Pitch Speed"' index);                  packet.ReadXORBytes(guid1' 0' 5);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    packet.ReadXORByte(guid1' 4);                  moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData)                  {                      packet.ReadXORBytes(transportGuid' 0' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORBytes(transportGuid' 6' 4);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 3);                      var seat = packet.ReadSByte("Transport Seat"' index);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                            for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                  }                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float14"' index' i);                      packet.ReadUInt32("Int0"' index' i);                      packet.ReadUInt32("Int10"' index' i);                      packet.ReadSingle("Float4"' index' i);                      packet.ReadSingle("Float8"' index' i);                      packet.ReadSingle("FloatC"' index' i);                  }                    if (hasFallData)                  {                      packet.ReadUInt32("Time Fallen"' index);                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                        packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadSingle("RunBack Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 2);                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("SwimBack Speed"' index);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORByte(guid1' 6);                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  packet.ReadSingle("Pitch Speed"' index);                  packet.ReadXORBytes(guid1' 0' 5);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    packet.ReadXORByte(guid1' 4);                  moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData)                  {                      packet.ReadXORBytes(transportGuid' 0' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORBytes(transportGuid' 6' 4);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 3);                      var seat = packet.ReadSByte("Transport Seat"' index);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                            for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                  }                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float14"' index' i);                      packet.ReadUInt32("Int0"' index' i);                      packet.ReadUInt32("Int10"' index' i);                      packet.ReadSingle("Float4"' index' i);                      packet.ReadSingle("Float8"' index' i);                      packet.ReadSingle("FloatC"' index' i);                  }                    if (hasFallData)                  {                      packet.ReadUInt32("Time Fallen"' index);                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                        packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadSingle("RunBack Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 2);                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("SwimBack Speed"' index);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORByte(guid1' 6);                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  packet.ReadSingle("Pitch Speed"' index);                  packet.ReadXORBytes(guid1' 0' 5);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    packet.ReadXORByte(guid1' 4);                  moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData)                  {                      packet.ReadXORBytes(transportGuid' 0' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORBytes(transportGuid' 6' 4);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 3);                      var seat = packet.ReadSByte("Transport Seat"' index);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                            for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                  }                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float14"' index' i);                      packet.ReadUInt32("Int0"' index' i);                      packet.ReadUInt32("Int10"' index' i);                      packet.ReadSingle("Float4"' index' i);                      packet.ReadSingle("Float8"' index' i);                      packet.ReadSingle("FloatC"' index' i);                  }                    if (hasFallData)                  {                      packet.ReadUInt32("Time Fallen"' index);                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                        packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadSingle("RunBack Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 2);                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("SwimBack Speed"' index);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORByte(guid1' 6);                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  packet.ReadSingle("Pitch Speed"' index);                  packet.ReadXORBytes(guid1' 0' 5);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    packet.ReadXORByte(guid1' 4);                  moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData)                  {                      packet.ReadXORBytes(transportGuid' 0' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORBytes(transportGuid' 6' 4);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 3);                      var seat = packet.ReadSByte("Transport Seat"' index);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                            for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                  }                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float14"' index' i);                      packet.ReadUInt32("Int0"' index' i);                      packet.ReadUInt32("Int10"' index' i);                      packet.ReadSingle("Float4"' index' i);                      packet.ReadSingle("Float8"' index' i);                      packet.ReadSingle("FloatC"' index' i);                  }                    if (hasFallData)                  {                      packet.ReadUInt32("Time Fallen"' index);                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                        packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadSingle("RunBack Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 2);                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("SwimBack Speed"' index);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORByte(guid1' 6);                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  packet.ReadSingle("Pitch Speed"' index);                  packet.ReadXORBytes(guid1' 0' 5);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    packet.ReadXORByte(guid1' 4);                  moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData)                  {                      packet.ReadXORBytes(transportGuid' 0' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORBytes(transportGuid' 6' 4);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 3);                      var seat = packet.ReadSByte("Transport Seat"' index);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                            for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                  }                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float14"' index' i);                      packet.ReadUInt32("Int0"' index' i);                      packet.ReadUInt32("Int10"' index' i);                      packet.ReadSingle("Float4"' index' i);                      packet.ReadSingle("Float8"' index' i);                      packet.ReadSingle("FloatC"' index' i);                  }                    if (hasFallData)                  {                      packet.ReadUInt32("Time Fallen"' index);                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                        packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadSingle("RunBack Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 2);                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("SwimBack Speed"' index);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORByte(guid1' 6);                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  packet.ReadSingle("Pitch Speed"' index);                  packet.ReadXORBytes(guid1' 0' 5);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    packet.ReadXORByte(guid1' 4);                  moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData)                  {                      packet.ReadXORBytes(transportGuid' 0' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORBytes(transportGuid' 6' 4);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 3);                      var seat = packet.ReadSByte("Transport Seat"' index);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                            for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                  }                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float14"' index' i);                      packet.ReadUInt32("Int0"' index' i);                      packet.ReadUInt32("Int10"' index' i);                      packet.ReadSingle("Float4"' index' i);                      packet.ReadSingle("Float8"' index' i);                      packet.ReadSingle("FloatC"' index' i);                  }                    if (hasFallData)                  {                      packet.ReadUInt32("Time Fallen"' index);                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                        packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadSingle("RunBack Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 2);                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("SwimBack Speed"' index);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORByte(guid1' 6);                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  packet.ReadSingle("Pitch Speed"' index);                  packet.ReadXORBytes(guid1' 0' 5);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    packet.ReadXORByte(guid1' 4);                  moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData)                  {                      packet.ReadXORBytes(transportGuid' 0' 5);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORBytes(transportGuid' 6' 4);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 3);                      var seat = packet.ReadSByte("Transport Seat"' index);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadSingle("Spline Duration Multiplier Next"' index);                            for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            packet.ReadInt32("Spline Full Time"' index);                      }                        packet.ReadInt32("Spline Id"' index);                      moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                  }                    moveInfo.Position.Y = packet.ReadSingle();                  packet.ReadXORByte(guid1' 7);                  for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float14"' index' i);                      packet.ReadUInt32("Int0"' index' i);                      packet.ReadUInt32("Int10"' index' i);                      packet.ReadSingle("Float4"' index' i);                      packet.ReadSingle("Float8"' index' i);                      packet.ReadSingle("FloatC"' index' i);                  }                    if (hasFallData)                  {                      packet.ReadUInt32("Time Fallen"' index);                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                          packet.ReadSingle("Jump Velocity"' index);                      }                        packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                  packet.ReadSingle("FlyBack Speed"' index);                  packet.ReadSingle("RunBack Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    moveInfo.Position.X = packet.ReadSingle();                  packet.ReadXORByte(guid1' 2);                  packet.ReadSingle("Swim Speed"' index);                  packet.ReadSingle("SwimBack Speed"' index);                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("Fly Speed"' index);                  packet.ReadXORByte(guid1' 6);                    if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f;                  packet.ReadSingle("Pitch Speed"' index);                  packet.ReadXORBytes(guid1' 0' 5);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    packet.ReadXORByte(guid1' 4);                  moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f;                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      if (bit358_22[i])                          packet.ReadByte("byte358+22"' index' i);                        packet.ReadByte("byte358+23"' index' i);                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          packet.ReadXORByte(guid358_6[i][j]' 7);                          packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadWoWString("string358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                            for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt16("short358+6+78+6"' index' i' j' k);                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                                packet.ReadInt16("short358+6+78+4"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                          }                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          packet.ReadInt16("short358+6+2C"' index' i' j);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                                if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                            }                            packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt32("int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadInt32("int358+6+24"' index' i' j);                            if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 3);                          packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 0' 2' 4' 5);                          packet.ReadInt32("int358+6+C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 7' 1' 4);                        if (bit358_E[i])                          packet.ReadInt16("short358+E"' index' i);                        if (bit358_A[i])                          packet.ReadInt32("int358+A"' index' i);                        packet.ReadXORBytes(guid358[i]' 0' 5' 2' 3);                      packet.ReadInt32("int358+8"' index' i);                      packet.ReadXORByte(guid358[i]' 6);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                        for (var j = 0; j < bits388[i]; ++j)                      {                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                          packet.ReadInt32("int388+1+0"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                      }                        for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                  }                    packet.ReadInt32("Int334"' index);                  packet.ParseBitStream(CreatorGUID' 1' 6' 0' 5' 7' 4' 3' 2);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    if (bit341)                      packet.ReadByte("byte341"' index);                    if (bit338)                      packet.ReadInt32("int338"' index);                    if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit33C)                      packet.ReadInt32("int33C"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 1' 3' 5' 4' 7' 6' 2' 0);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 1' 3' 5' 4' 7' 6' 2' 0);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 1' 3' 5' 4' 7' 6' 2' 0);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 1' 3' 5' 4' 7' 6' 2' 0);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 1' 3' 5' 4' 7' 6' 2' 0);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 1' 3' 5' 4' 7' 6' 2' 0);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 0' 2' 4' 1' 3' 6' 7);                  packet.ParseBitStream(facingTargetGuid' 5' 0' 4' 6' 3' 2' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 0' 2' 4' 1' 3' 6' 7);                  packet.ParseBitStream(facingTargetGuid' 5' 0' 4' 6' 3' 2' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 0' 2' 4' 1' 3' 6' 7);                  packet.ParseBitStream(facingTargetGuid' 5' 0' 4' 6' 3' 2' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 0' 2' 4' 1' 3' 6' 7);                  packet.ParseBitStream(facingTargetGuid' 5' 0' 4' 6' 3' 2' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 0' 2' 4' 1' 3' 6' 7);                  packet.ParseBitStream(facingTargetGuid' 5' 0' 4' 6' 3' 2' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 0' 2' 4' 1' 3' 6' 7);                  packet.ParseBitStream(facingTargetGuid' 5' 0' 4' 6' 3' 2' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 0' 2' 4' 1' 3' 6' 7);                  packet.ParseBitStream(facingTargetGuid' 5' 0' 4' 6' 3' 2' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 0' 2' 4' 1' 3' 6' 7);                  packet.ParseBitStream(facingTargetGuid' 5' 0' 4' 6' 3' 2' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 0' 2' 4' 1' 3' 6' 7);                  packet.ParseBitStream(facingTargetGuid' 5' 0' 4' 6' 3' 2' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 0' 2' 4' 1' 3' 6' 7);                  packet.ParseBitStream(facingTargetGuid' 5' 0' 4' 6' 3' 2' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 0' 2' 4' 1' 3' 6' 7);                  packet.ParseBitStream(facingTargetGuid' 5' 0' 4' 6' 3' 2' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 0' 2' 4' 1' 3' 6' 7);                  packet.ParseBitStream(facingTargetGuid' 5' 0' 4' 6' 3' 2' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 0' 2' 4' 1' 3' 6' 7);                  packet.ParseBitStream(facingTargetGuid' 5' 0' 4' 6' 3' 2' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 3' 0' 2' 6' 7' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 3' 0' 2' 6' 7' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 3' 0' 2' 6' 7' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 3' 0' 2' 6' 7' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 3' 0' 2' 6' 7' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 3' 0' 2' 6' 7' 4);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: var guid = packet.StartBitStream(5' 4' 2' 7' 0' 6' 3' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: var guid = packet.StartBitStream(5' 4' 2' 7' 0' 6' 3' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: var guid = packet.StartBitStream(5' 4' 2' 7' 0' 6' 3' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: var guid = packet.StartBitStream(5' 4' 2' 7' 0' 6' 3' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: var guid = packet.StartBitStream(5' 4' 2' 7' 0' 6' 3' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: var guid = packet.StartBitStream(5' 4' 2' 7' 0' 6' 3' 1);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 3' 0' 7' 1' 4' 2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 3' 0' 7' 1' 4' 2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 3' 0' 7' 1' 4' 2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 3' 0' 7' 1' 4' 2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 3' 0' 7' 1' 4' 2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 3' 0' 7' 1' 4' 2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17658.Parsers,WorldStateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\WorldStateHandler.cs,HandleInitWorldStates,The following statement contains a magic number: var numFields = packet.ReadBits("Field Count"' 21);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: var casterGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: var targetGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: casterGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: casterGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: targetGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: casterGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: targetGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: casterGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: targetGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: targetGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: casterGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: targetGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: casterGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: targetGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: if (hasPawerData)              {                  var bits74 = packet.ReadBits(21);                  if (hasPawerData)                  {                      packet.ReadInt32("Int70");                        for (var i = 0; i < bits74; ++i)                      {                          packet.ReadInt32("IntED"' i);                          packet.ReadInt32("IntED"' i);                      }                        packet.ReadInt32("Int6C");                      packet.ReadInt32("Int68");                  }                }
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 6);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 6);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 4);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 2);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 5);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 2);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 3);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 5);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 3);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 4);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 7);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 7);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: var AttackerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: var VictimGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: VictimGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: AttackerGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: VictimGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: VictimGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: VictimGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: AttackerGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: AttackerGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: VictimGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: AttackerGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: AttackerGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: VictimGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: AttackerGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 2);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 5);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 3);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 7);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 6);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 3);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 6);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 2);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 4);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 7);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 5);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 4);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: var VictimGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: var AttackerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: AttackerGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: VictimGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: VictimGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: VictimGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: VictimGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: AttackerGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: AttackerGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: VictimGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: VictimGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: AttackerGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: AttackerGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: AttackerGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 3);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 7);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 2);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 4);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 4);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 5);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 6);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 7);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 3);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(VictimGUID' 2);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 6);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(AttackerGUID' 5);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.StartBitStream(guid' 4' 3' 5' 7' 0' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.StartBitStream(guid' 4' 3' 5' 7' 0' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.StartBitStream(guid' 4' 3' 5' 7' 0' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.StartBitStream(guid' 4' 3' 5' 7' 0' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.StartBitStream(guid' 4' 3' 5' 7' 0' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.StartBitStream(guid' 4' 3' 5' 7' 0' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 5' 4' 2' 0' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 5' 4' 2' 0' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 5' 4' 2' 0' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 5' 4' 2' 0' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 5' 4' 2' 0' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 5' 4' 2' 0' 1' 3);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: var casterGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: var targetGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: casterGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: targetGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: targetGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: casterGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: casterGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: targetGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: targetGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: casterGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: targetGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: targetGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)                  bits3C = packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: casterGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: casterGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: var bits20 = (int)packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 6);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 4);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 4);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 3);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 2);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 5);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 2);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 7);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 5);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 6);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 3);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 7);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: var guid4 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: guid4[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: guid4[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: guid4[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: guid4[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: guid4[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: if (hasPowerData)                  bits44 = (int)packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: guid4[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(guid4' 7);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(guid4' 4);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(guid4' 5);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(guid4' 3);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(guid4' 2);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(guid4' 6);
Magic Number,WowPacketParserModule.V5_4_2_17659.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: var count = packet.ReadBits(19);
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][7] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 6' 7' 5' 1' 0' 4' 2' 3);                  }                    guid2[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  bits4[i] = packet.ReadBits(9);                  guid2[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][7] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 6' 7' 5' 1' 0' 4' 2' 3);                  }                    guid2[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  bits4[i] = packet.ReadBits(9);                  guid2[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][7] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 6' 7' 5' 1' 0' 4' 2' 3);                  }                    guid2[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  bits4[i] = packet.ReadBits(9);                  guid2[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][7] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 6' 7' 5' 1' 0' 4' 2' 3);                  }                    guid2[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  bits4[i] = packet.ReadBits(9);                  guid2[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][7] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 6' 7' 5' 1' 0' 4' 2' 3);                  }                    guid2[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  bits4[i] = packet.ReadBits(9);                  guid2[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][7] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 6' 7' 5' 1' 0' 4' 2' 3);                  }                    guid2[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  bits4[i] = packet.ReadBits(9);                  guid2[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][7] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 6' 7' 5' 1' 0' 4' 2' 3);                  }                    guid2[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  bits4[i] = packet.ReadBits(9);                  guid2[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][7] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 6' 7' 5' 1' 0' 4' 2' 3);                  }                    guid2[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  bits4[i] = packet.ReadBits(9);                  guid2[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][7] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 6' 7' 5' 1' 0' 4' 2' 3);                  }                    guid2[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  bits4[i] = packet.ReadBits(9);                  guid2[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][7] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 6' 7' 5' 1' 0' 4' 2' 3);                  }                    guid2[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  bits4[i] = packet.ReadBits(9);                  guid2[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][7] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 6' 7' 5' 1' 0' 4' 2' 3);                  }                    guid2[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  bits4[i] = packet.ReadBits(9);                  guid2[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][7] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 6' 7' 5' 1' 0' 4' 2' 3);                  }                    guid2[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  bits4[i] = packet.ReadBits(9);                  guid2[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][7] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 6' 7' 5' 1' 0' 4' 2' 3);                  }                    guid2[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  bits4[i] = packet.ReadBits(9);                  guid2[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][7] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 6' 7' 5' 1' 0' 4' 2' 3);                  }                    guid2[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  bits4[i] = packet.ReadBits(9);                  guid2[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][7] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 6' 7' 5' 1' 0' 4' 2' 3);                  }                    guid2[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  bits4[i] = packet.ReadBits(9);                  guid2[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][7] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 6' 7' 5' 1' 0' 4' 2' 3);                  }                    guid2[i][3] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  bits4[i] = packet.ReadBits(9);                  guid2[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 7' 4' 5' 3' 0' 6' 2' 1);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 7' 4' 5' 3' 0' 6' 2' 1);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 7' 4' 5' 3' 0' 6' 2' 1);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 7' 4' 5' 3' 0' 6' 2' 1);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 7' 4' 5' 3' 0' 6' 2' 1);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 7' 4' 5' 3' 0' 6' 2' 1);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 7' 4' 5' 3' 0' 6' 2' 1);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 7' 4' 5' 3' 0' 6' 2' 1);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 7' 4' 5' 3' 0' 6' 2' 1);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 7' 4' 5' 3' 0' 6' 2' 1);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 7' 4' 5' 3' 0' 6' 2' 1);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 7' 4' 5' 3' 0' 6' 2' 1);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetUse,The following statement contains a magic number: var slotsInfo = new byte[19][];
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetUse,The following statement contains a magic number: for (var i = 0; i < 19; ++i)              {                  slotsInfo[i] = new byte[2];                  slotsInfo[i][0] = packet.ReadByte();                  slotsInfo[i][1] = packet.ReadByte();              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetUse,The following statement contains a magic number: for (var i = 0; i < 19; ++i)              {                  slotsInfo[i] = new byte[2];                  slotsInfo[i][0] = packet.ReadByte();                  slotsInfo[i][1] = packet.ReadByte();              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetUse,The following statement contains a magic number: var itemGuids = new byte[19][];
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetUse,The following statement contains a magic number: for (var i = 0; i < 19; ++i)              {                  itemGuids[i] = new byte[8];                  packet.StartBitStream(itemGuids[i]' 6' 1' 5' 2' 0' 4' 3' 7);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetUse,The following statement contains a magic number: for (var i = 0; i < 19; ++i)              {                  itemGuids[i] = new byte[8];                  packet.StartBitStream(itemGuids[i]' 6' 1' 5' 2' 0' 4' 3' 7);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetUse,The following statement contains a magic number: for (var i = 0; i < 19; ++i)              {                  itemGuids[i] = new byte[8];                  packet.StartBitStream(itemGuids[i]' 6' 1' 5' 2' 0' 4' 3' 7);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetUse,The following statement contains a magic number: for (var i = 0; i < 19; ++i)              {                  itemGuids[i] = new byte[8];                  packet.StartBitStream(itemGuids[i]' 6' 1' 5' 2' 0' 4' 3' 7);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetUse,The following statement contains a magic number: for (var i = 0; i < 19; ++i)              {                  itemGuids[i] = new byte[8];                  packet.StartBitStream(itemGuids[i]' 6' 1' 5' 2' 0' 4' 3' 7);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetUse,The following statement contains a magic number: for (var i = 0; i < 19; ++i)              {                  itemGuids[i] = new byte[8];                  packet.StartBitStream(itemGuids[i]' 6' 1' 5' 2' 0' 4' 3' 7);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetUse,The following statement contains a magic number: for (var i = 0; i < 19; ++i)              {                  itemGuids[i] = new byte[8];                  packet.StartBitStream(itemGuids[i]' 6' 1' 5' 2' 0' 4' 3' 7);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetUse,The following statement contains a magic number: for (var i = 0; i < 19; ++i)              {                  itemGuids[i] = new byte[8];                  packet.StartBitStream(itemGuids[i]' 6' 1' 5' 2' 0' 4' 3' 7);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetUse,The following statement contains a magic number: var someCount = packet.ReadBits("Some count"' 2);
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetUse,The following statement contains a magic number: for (var i = 0; i < someCount; ++i)              {                  someThings[i] = new byte[2];                  packet.StartBitStream(someThings[i]' 1' 0);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetUse,The following statement contains a magic number: for (var i = 0; i < 19; ++i)              {                  packet.ParseBitStream(itemGuids[i]' 1' 6' 4' 7' 0' 3' 5' 2);                  packet.WriteGuid("ItemGUID"' itemGuids[i]' i);                  packet.AddValue("Source bag"' slotsInfo[i][0]' i);                  packet.AddValue("Source slot"' slotsInfo[i][1]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetUse,The following statement contains a magic number: for (var i = 0; i < 19; ++i)              {                  packet.ParseBitStream(itemGuids[i]' 1' 6' 4' 7' 0' 3' 5' 2);                  packet.WriteGuid("ItemGUID"' itemGuids[i]' i);                  packet.AddValue("Source bag"' slotsInfo[i][0]' i);                  packet.AddValue("Source slot"' slotsInfo[i][1]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetUse,The following statement contains a magic number: for (var i = 0; i < 19; ++i)              {                  packet.ParseBitStream(itemGuids[i]' 1' 6' 4' 7' 0' 3' 5' 2);                  packet.WriteGuid("ItemGUID"' itemGuids[i]' i);                  packet.AddValue("Source bag"' slotsInfo[i][0]' i);                  packet.AddValue("Source slot"' slotsInfo[i][1]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetUse,The following statement contains a magic number: for (var i = 0; i < 19; ++i)              {                  packet.ParseBitStream(itemGuids[i]' 1' 6' 4' 7' 0' 3' 5' 2);                  packet.WriteGuid("ItemGUID"' itemGuids[i]' i);                  packet.AddValue("Source bag"' slotsInfo[i][0]' i);                  packet.AddValue("Source slot"' slotsInfo[i][1]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetUse,The following statement contains a magic number: for (var i = 0; i < 19; ++i)              {                  packet.ParseBitStream(itemGuids[i]' 1' 6' 4' 7' 0' 3' 5' 2);                  packet.WriteGuid("ItemGUID"' itemGuids[i]' i);                  packet.AddValue("Source bag"' slotsInfo[i][0]' i);                  packet.AddValue("Source slot"' slotsInfo[i][1]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetUse,The following statement contains a magic number: for (var i = 0; i < 19; ++i)              {                  packet.ParseBitStream(itemGuids[i]' 1' 6' 4' 7' 0' 3' 5' 2);                  packet.WriteGuid("ItemGUID"' itemGuids[i]' i);                  packet.AddValue("Source bag"' slotsInfo[i][0]' i);                  packet.AddValue("Source slot"' slotsInfo[i][1]' i);              }
Magic Number,WowPacketParserModule.V5_4_2_17568.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetUse,The following statement contains a magic number: for (var i = 0; i < 19; ++i)              {                  packet.ParseBitStream(itemGuids[i]' 1' 6' 4' 7' 0' 3' 5' 2);                  packet.WriteGuid("ItemGUID"' itemGuids[i]' i);                  packet.AddValue("Source bag"' slotsInfo[i][0]' i);                  packet.AddValue("Source slot"' slotsInfo[i][1]' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: var count = packet.ReadBits(18);
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  bit1C[i] = packet.ReadBit();                  bit24[i] = packet.ReadBit();                  subjectLength[i] = packet.ReadBits(8);                  itemCount[i] = packet.ReadBits(17);                  bodyLength[i] = packet.ReadBits(13);                    for (var j = 0; j < itemCount[i]; ++j)                      packet.ReadBit("bit84"' i' j);                    bit10[i] = packet.ReadBit();                    if (bit10[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 2' 0' 4' 5' 6' 3' 1' 7);                  }                    bit2C[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  bit1C[i] = packet.ReadBit();                  bit24[i] = packet.ReadBit();                  subjectLength[i] = packet.ReadBits(8);                  itemCount[i] = packet.ReadBits(17);                  bodyLength[i] = packet.ReadBits(13);                    for (var j = 0; j < itemCount[i]; ++j)                      packet.ReadBit("bit84"' i' j);                    bit10[i] = packet.ReadBit();                    if (bit10[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 2' 0' 4' 5' 6' 3' 1' 7);                  }                    bit2C[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  bit1C[i] = packet.ReadBit();                  bit24[i] = packet.ReadBit();                  subjectLength[i] = packet.ReadBits(8);                  itemCount[i] = packet.ReadBits(17);                  bodyLength[i] = packet.ReadBits(13);                    for (var j = 0; j < itemCount[i]; ++j)                      packet.ReadBit("bit84"' i' j);                    bit10[i] = packet.ReadBit();                    if (bit10[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 2' 0' 4' 5' 6' 3' 1' 7);                  }                    bit2C[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  bit1C[i] = packet.ReadBit();                  bit24[i] = packet.ReadBit();                  subjectLength[i] = packet.ReadBits(8);                  itemCount[i] = packet.ReadBits(17);                  bodyLength[i] = packet.ReadBits(13);                    for (var j = 0; j < itemCount[i]; ++j)                      packet.ReadBit("bit84"' i' j);                    bit10[i] = packet.ReadBit();                    if (bit10[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 2' 0' 4' 5' 6' 3' 1' 7);                  }                    bit2C[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  bit1C[i] = packet.ReadBit();                  bit24[i] = packet.ReadBit();                  subjectLength[i] = packet.ReadBits(8);                  itemCount[i] = packet.ReadBits(17);                  bodyLength[i] = packet.ReadBits(13);                    for (var j = 0; j < itemCount[i]; ++j)                      packet.ReadBit("bit84"' i' j);                    bit10[i] = packet.ReadBit();                    if (bit10[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 2' 0' 4' 5' 6' 3' 1' 7);                  }                    bit2C[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  bit1C[i] = packet.ReadBit();                  bit24[i] = packet.ReadBit();                  subjectLength[i] = packet.ReadBits(8);                  itemCount[i] = packet.ReadBits(17);                  bodyLength[i] = packet.ReadBits(13);                    for (var j = 0; j < itemCount[i]; ++j)                      packet.ReadBit("bit84"' i' j);                    bit10[i] = packet.ReadBit();                    if (bit10[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 2' 0' 4' 5' 6' 3' 1' 7);                  }                    bit2C[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  bit1C[i] = packet.ReadBit();                  bit24[i] = packet.ReadBit();                  subjectLength[i] = packet.ReadBits(8);                  itemCount[i] = packet.ReadBits(17);                  bodyLength[i] = packet.ReadBits(13);                    for (var j = 0; j < itemCount[i]; ++j)                      packet.ReadBit("bit84"' i' j);                    bit10[i] = packet.ReadBit();                    if (bit10[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 2' 0' 4' 5' 6' 3' 1' 7);                  }                    bit2C[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  bit1C[i] = packet.ReadBit();                  bit24[i] = packet.ReadBit();                  subjectLength[i] = packet.ReadBits(8);                  itemCount[i] = packet.ReadBits(17);                  bodyLength[i] = packet.ReadBits(13);                    for (var j = 0; j < itemCount[i]; ++j)                      packet.ReadBit("bit84"' i' j);                    bit10[i] = packet.ReadBit();                    if (bit10[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 2' 0' 4' 5' 6' 3' 1' 7);                  }                    bit2C[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  bit1C[i] = packet.ReadBit();                  bit24[i] = packet.ReadBit();                  subjectLength[i] = packet.ReadBits(8);                  itemCount[i] = packet.ReadBits(17);                  bodyLength[i] = packet.ReadBits(13);                    for (var j = 0; j < itemCount[i]; ++j)                      packet.ReadBit("bit84"' i' j);                    bit10[i] = packet.ReadBit();                    if (bit10[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 2' 0' 4' 5' 6' 3' 1' 7);                  }                    bit2C[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  bit1C[i] = packet.ReadBit();                  bit24[i] = packet.ReadBit();                  subjectLength[i] = packet.ReadBits(8);                  itemCount[i] = packet.ReadBits(17);                  bodyLength[i] = packet.ReadBits(13);                    for (var j = 0; j < itemCount[i]; ++j)                      packet.ReadBit("bit84"' i' j);                    bit10[i] = packet.ReadBit();                    if (bit10[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 2' 0' 4' 5' 6' 3' 1' 7);                  }                    bit2C[i] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  if (bit10[i])                  {                      packet.ParseBitStream(guid[i]' 6' 4' 2' 7' 3' 1' 0' 5);                      packet.WriteGuid("Guid"' guid[i]);                  }                    for (var j = 0; j < itemCount[i]; ++j)                  {                      packet.ReadInt32("Int14"' i' j);                        for (var k = 0; k < 8; ++k)                      {                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                      }                        packet.ReadUInt32<ItemId>("Item Id"' i' j);                        var len = packet.ReadInt32();                        packet.ReadBytes(len);                        packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadByte("ByteED"' i' j);                  }                    packet.ReadWoWString("Subject"' subjectLength[i]' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadWoWString("Body"' bodyLength[i]' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadSingle("Time"' i);                  packet.ReadByte("ByteED"' i);                  packet.ReadInt64("Int30"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt64("Int40"' i);                    if (bit1C[i])                      packet.ReadInt32("IntED"' i);                    if (bit24[i])                      packet.ReadInt32("IntED"' i);                    if (bit2C[i])                      packet.ReadInt32("IntED"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  if (bit10[i])                  {                      packet.ParseBitStream(guid[i]' 6' 4' 2' 7' 3' 1' 0' 5);                      packet.WriteGuid("Guid"' guid[i]);                  }                    for (var j = 0; j < itemCount[i]; ++j)                  {                      packet.ReadInt32("Int14"' i' j);                        for (var k = 0; k < 8; ++k)                      {                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                      }                        packet.ReadUInt32<ItemId>("Item Id"' i' j);                        var len = packet.ReadInt32();                        packet.ReadBytes(len);                        packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadByte("ByteED"' i' j);                  }                    packet.ReadWoWString("Subject"' subjectLength[i]' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadWoWString("Body"' bodyLength[i]' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadSingle("Time"' i);                  packet.ReadByte("ByteED"' i);                  packet.ReadInt64("Int30"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt64("Int40"' i);                    if (bit1C[i])                      packet.ReadInt32("IntED"' i);                    if (bit24[i])                      packet.ReadInt32("IntED"' i);                    if (bit2C[i])                      packet.ReadInt32("IntED"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  if (bit10[i])                  {                      packet.ParseBitStream(guid[i]' 6' 4' 2' 7' 3' 1' 0' 5);                      packet.WriteGuid("Guid"' guid[i]);                  }                    for (var j = 0; j < itemCount[i]; ++j)                  {                      packet.ReadInt32("Int14"' i' j);                        for (var k = 0; k < 8; ++k)                      {                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                      }                        packet.ReadUInt32<ItemId>("Item Id"' i' j);                        var len = packet.ReadInt32();                        packet.ReadBytes(len);                        packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadByte("ByteED"' i' j);                  }                    packet.ReadWoWString("Subject"' subjectLength[i]' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadWoWString("Body"' bodyLength[i]' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadSingle("Time"' i);                  packet.ReadByte("ByteED"' i);                  packet.ReadInt64("Int30"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt64("Int40"' i);                    if (bit1C[i])                      packet.ReadInt32("IntED"' i);                    if (bit24[i])                      packet.ReadInt32("IntED"' i);                    if (bit2C[i])                      packet.ReadInt32("IntED"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  if (bit10[i])                  {                      packet.ParseBitStream(guid[i]' 6' 4' 2' 7' 3' 1' 0' 5);                      packet.WriteGuid("Guid"' guid[i]);                  }                    for (var j = 0; j < itemCount[i]; ++j)                  {                      packet.ReadInt32("Int14"' i' j);                        for (var k = 0; k < 8; ++k)                      {                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                      }                        packet.ReadUInt32<ItemId>("Item Id"' i' j);                        var len = packet.ReadInt32();                        packet.ReadBytes(len);                        packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadByte("ByteED"' i' j);                  }                    packet.ReadWoWString("Subject"' subjectLength[i]' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadWoWString("Body"' bodyLength[i]' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadSingle("Time"' i);                  packet.ReadByte("ByteED"' i);                  packet.ReadInt64("Int30"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt64("Int40"' i);                    if (bit1C[i])                      packet.ReadInt32("IntED"' i);                    if (bit24[i])                      packet.ReadInt32("IntED"' i);                    if (bit2C[i])                      packet.ReadInt32("IntED"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  if (bit10[i])                  {                      packet.ParseBitStream(guid[i]' 6' 4' 2' 7' 3' 1' 0' 5);                      packet.WriteGuid("Guid"' guid[i]);                  }                    for (var j = 0; j < itemCount[i]; ++j)                  {                      packet.ReadInt32("Int14"' i' j);                        for (var k = 0; k < 8; ++k)                      {                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                      }                        packet.ReadUInt32<ItemId>("Item Id"' i' j);                        var len = packet.ReadInt32();                        packet.ReadBytes(len);                        packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadByte("ByteED"' i' j);                  }                    packet.ReadWoWString("Subject"' subjectLength[i]' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadWoWString("Body"' bodyLength[i]' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadSingle("Time"' i);                  packet.ReadByte("ByteED"' i);                  packet.ReadInt64("Int30"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt64("Int40"' i);                    if (bit1C[i])                      packet.ReadInt32("IntED"' i);                    if (bit24[i])                      packet.ReadInt32("IntED"' i);                    if (bit2C[i])                      packet.ReadInt32("IntED"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  if (bit10[i])                  {                      packet.ParseBitStream(guid[i]' 6' 4' 2' 7' 3' 1' 0' 5);                      packet.WriteGuid("Guid"' guid[i]);                  }                    for (var j = 0; j < itemCount[i]; ++j)                  {                      packet.ReadInt32("Int14"' i' j);                        for (var k = 0; k < 8; ++k)                      {                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                      }                        packet.ReadUInt32<ItemId>("Item Id"' i' j);                        var len = packet.ReadInt32();                        packet.ReadBytes(len);                        packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadByte("ByteED"' i' j);                  }                    packet.ReadWoWString("Subject"' subjectLength[i]' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadWoWString("Body"' bodyLength[i]' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadSingle("Time"' i);                  packet.ReadByte("ByteED"' i);                  packet.ReadInt64("Int30"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt64("Int40"' i);                    if (bit1C[i])                      packet.ReadInt32("IntED"' i);                    if (bit24[i])                      packet.ReadInt32("IntED"' i);                    if (bit2C[i])                      packet.ReadInt32("IntED"' i);              }
Magic Number,WowPacketParserModule.V5_4_0_17359.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  if (bit10[i])                  {                      packet.ParseBitStream(guid[i]' 6' 4' 2' 7' 3' 1' 0' 5);                      packet.WriteGuid("Guid"' guid[i]);                  }                    for (var j = 0; j < itemCount[i]; ++j)                  {                      packet.ReadInt32("Int14"' i' j);                        for (var k = 0; k < 8; ++k)                      {                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                          packet.ReadInt32("Int14"' i' j' k);                      }                        packet.ReadUInt32<ItemId>("Item Id"' i' j);                        var len = packet.ReadInt32();                        packet.ReadBytes(len);                        packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadInt32("IntED"' i' j);                      packet.ReadByte("ByteED"' i' j);                  }                    packet.ReadWoWString("Subject"' subjectLength[i]' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadWoWString("Body"' bodyLength[i]' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadSingle("Time"' i);                  packet.ReadByte("ByteED"' i);                  packet.ReadInt64("Int30"' i);                  packet.ReadInt32("IntED"' i);                  packet.ReadInt32("Int14"' i);                  packet.ReadInt64("Int40"' i);                    if (bit1C[i])                      packet.ReadInt32("IntED"' i);                    if (bit24[i])                      packet.ReadInt32("IntED"' i);                    if (bit2C[i])                      packet.ReadInt32("IntED"' i);              }
Missing Default,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,HandleUpdateObject,The following switch statement is missing a default case: switch (typeString)                  {                      case "Values":                          {                              var guid = packet.ReadPackedGuid("GUID"' i);                                WoWObject obj;                              var updates = CoreParsers.UpdateHandler.ReadValuesUpdateBlock(packet' guid.GetObjectType()' i' false);                                if (Storage.Objects.TryGetValue(guid' out obj))                              {                                  if (obj.ChangedUpdateFieldsList == null)                                      obj.ChangedUpdateFieldsList = new List<Dictionary<int' UpdateField>>();                                  obj.ChangedUpdateFieldsList.Add(updates);                              }                                break;                          }                      case "CreateObject1":                      case "CreateObject2": // Might != CreateObject1 on Cata                          {                              var guid = packet.ReadPackedGuid("GUID"' i);                              ReadCreateObjectBlock(packet' guid' map' i);                              break;                          }                      case "DestroyObjects":                          {                              CoreParsers.UpdateHandler.ReadObjectsBlock(packet' i);                              break;                          }                  }
Missing Default,WowPacketParserModule.V5_4_2_17658.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_2_17658\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following switch statement is missing a default case: switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }
