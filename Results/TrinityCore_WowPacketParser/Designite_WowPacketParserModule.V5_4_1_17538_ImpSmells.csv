Implementation smell,Namespace,Class,File,Method,Description
Long Method,WowPacketParserModule.V5_4_1_17538.Hotfix,HotfixSerializer<T>,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Hotfix\HotfixSerializer.cs,GenerateDeserializer,The method has 129 lines of code.
Long Method,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The method has 100 lines of code.
Long Method,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The method has 121 lines of code.
Long Method,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The method has 303 lines of code.
Long Method,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The method has 180 lines of code.
Long Method,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The method has 672 lines of code.
Complex Method,WowPacketParserModule.V5_4_1_17538.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ActionBarHandler.cs,HandleActionButtons,Cyclomatic complexity of the method is 21
Complex Method,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,Cyclomatic complexity of the method is 15
Complex Method,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,Cyclomatic complexity of the method is 8
Complex Method,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossip,Cyclomatic complexity of the method is 9
Complex Method,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,Cyclomatic complexity of the method is 10
Complex Method,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthResponse,Cyclomatic complexity of the method is 14
Complex Method,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,Cyclomatic complexity of the method is 32
Complex Method,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,Cyclomatic complexity of the method is 28
Complex Method,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,Cyclomatic complexity of the method is 107
Long Statement,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The length of the statement  "                    PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 }; " is 145.
Long Statement,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossip,The length of the statement  "                Storage.GossipMenuOptionActions.Add(new GossipMenuOptionAction { MenuId = lastGossipOption.MenuId' OptionIndex = lastGossipOption.OptionIndex' ActionMenuId = gossip.Entry }' packet.TimeSpan); " is 191.
Long Statement,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcTextUpdate,The length of the statement  "            Packet pkt = new Packet(data' packet.Opcode' packet.Time' packet.Direction' packet.Number' packet.Writer' packet.FileName); " is 123.
Long Statement,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleServerTrainerList,The length of the statement  "                Storage.GossipMenuOptionTrainers.Add(new GossipMenuOptionTrainer { MenuId = lastGossipOption.MenuId' OptionIndex = lastGossipOption.OptionIndex' TrainerId = trainer.Id }' packet.TimeSpan); " is 188.
Long Statement,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleServerTrainerList,The length of the statement  "                Storage.CreatureDefaultTrainers.Add(new CreatureDefaultTrainer { CreatureId = lastGossipOption.Guid.GetEntry()' TrainerId = trainer.Id }' packet.TimeSpan); " is 155.
Long Statement,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleDBReply,The length of the statement  "            var db2File = new Packet(data' packet.Opcode' packet.Time' packet.Direction' packet.Number' packet.Writer' packet.FileName); " is 124.
Long Statement,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadCreateObjectBlock,The length of the statement  "                CoreParsers.UpdateHandler.ProcessExistingObject(ref existObj' obj' guid); // can't do "ref Storage.Objects[guid].Item1 directly " is 127.
Complex Conditional,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The conditional expression  "moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature"  is complex.
Complex Conditional,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The conditional expression  "isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget"  is complex.
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\AccountDataHandler.cs,HandleAccountDataTimes,The following statement contains a magic number: for (var i = 0; i < 8; ++i)              {                  packet.ReadTime("[" + (AccountDataType)i + "]" + " Time");              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: const int buttonCount = 132;
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)              {                  buttons[i] = new byte[8];                  buttons[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)              {                  buttons[i] = new byte[8];                  buttons[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 5);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChannelHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChannelHandler.cs,HandleClientChatMessageChannel,The following statement contains a magic number: var channelNameLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChannelHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChannelHandler.cs,HandleClientChatMessageChannel,The following statement contains a magic number: var msgLen = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChannelHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChannelHandler.cs,HandleChannelList,The following statement contains a magic number: var length = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChannelHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChannelHandler.cs,HandleChannelList,The following statement contains a magic number: packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: var playerGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: playerGuid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: playerGuid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: playerGuid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: playerGuid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: playerGuid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: playerGuid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.ParseBitStream(playerGuid' 2' 0' 4' 1' 5' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.ParseBitStream(playerGuid' 2' 0' 4' 1' 5' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.ParseBitStream(playerGuid' 2' 0' 4' 1' 5' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.ParseBitStream(playerGuid' 2' 0' 4' 1' 5' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.ParseBitStream(playerGuid' 2' 0' 4' 1' 5' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleClientCharDelete,The following statement contains a magic number: packet.ParseBitStream(playerGuid' 2' 0' 4' 1' 5' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: var count = packet.ReadBits("Char count"' 16);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                      guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                      guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                      guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                      guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                      guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                      guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                      guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                      guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                      guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                      guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                      guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                      guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                      guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                      guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  charGuids[c] = new byte[8];                  guildGuids[c] = new byte[8];                      guildGuids[c][3] = packet.ReadBit();                  firstLogins[c] = packet.ReadBit();                  charGuids[c][6] = packet.ReadBit();                  guildGuids[c][1] = packet.ReadBit();                  charGuids[c][1] = packet.ReadBit();                  charGuids[c][5] = packet.ReadBit();                  guildGuids[c][6] = packet.ReadBit();                  charGuids[c][7] = packet.ReadBit();                  charGuids[c][0] = packet.ReadBit();                  guildGuids[c][5] = packet.ReadBit();                  charGuids[c][2] = packet.ReadBit();                  nameLenghts[c] = packet.ReadBits(6);                  charGuids[c][4] = packet.ReadBit();                  guildGuids[c][4] = packet.ReadBit();                  guildGuids[c][2] = packet.ReadBit();                  charGuids[c][3] = packet.ReadBit();                  guildGuids[c][0] = packet.ReadBit();                  guildGuids[c][7] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: var count2 = packet.ReadBits("RIDBIT21"' 21);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadByte("Skin"' c); //v4+61                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 6);                    var level = packet.ReadByte("Level"' c); // v4+66                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadByte("List Order"' c); //v4+57                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadXORByte(guildGuids[c]' 5);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByte("Facial Hair"' c); // v4+65                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(guildGuids[c]' 4);                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadByte("unk2"' i);                      packet.ReadUInt32("unk1"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadByte("Skin"' c); //v4+61                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 6);                    var level = packet.ReadByte("Level"' c); // v4+66                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadByte("List Order"' c); //v4+57                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadXORByte(guildGuids[c]' 5);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByte("Facial Hair"' c); // v4+65                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(guildGuids[c]' 4);                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadByte("unk2"' i);                      packet.ReadUInt32("unk1"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadByte("Skin"' c); //v4+61                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 6);                    var level = packet.ReadByte("Level"' c); // v4+66                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadByte("List Order"' c); //v4+57                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadXORByte(guildGuids[c]' 5);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByte("Facial Hair"' c); // v4+65                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(guildGuids[c]' 4);                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadByte("unk2"' i);                      packet.ReadUInt32("unk1"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadByte("Skin"' c); //v4+61                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 6);                    var level = packet.ReadByte("Level"' c); // v4+66                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadByte("List Order"' c); //v4+57                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadXORByte(guildGuids[c]' 5);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByte("Facial Hair"' c); // v4+65                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(guildGuids[c]' 4);                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadByte("unk2"' i);                      packet.ReadUInt32("unk1"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadByte("Skin"' c); //v4+61                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 6);                    var level = packet.ReadByte("Level"' c); // v4+66                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadByte("List Order"' c); //v4+57                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadXORByte(guildGuids[c]' 5);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByte("Facial Hair"' c); // v4+65                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(guildGuids[c]' 4);                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadByte("unk2"' i);                      packet.ReadUInt32("unk1"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadByte("Skin"' c); //v4+61                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 6);                    var level = packet.ReadByte("Level"' c); // v4+66                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadByte("List Order"' c); //v4+57                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadXORByte(guildGuids[c]' 5);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByte("Facial Hair"' c); // v4+65                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(guildGuids[c]' 4);                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadByte("unk2"' i);                      packet.ReadUInt32("unk1"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadByte("Skin"' c); //v4+61                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 6);                    var level = packet.ReadByte("Level"' c); // v4+66                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadByte("List Order"' c); //v4+57                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadXORByte(guildGuids[c]' 5);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByte("Facial Hair"' c); // v4+65                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(guildGuids[c]' 4);                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadByte("unk2"' i);                      packet.ReadUInt32("unk1"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadByte("Skin"' c); //v4+61                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 6);                    var level = packet.ReadByte("Level"' c); // v4+66                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadByte("List Order"' c); //v4+57                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadXORByte(guildGuids[c]' 5);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByte("Facial Hair"' c); // v4+65                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(guildGuids[c]' 4);                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadByte("unk2"' i);                      packet.ReadUInt32("unk1"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadByte("Skin"' c); //v4+61                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 6);                    var level = packet.ReadByte("Level"' c); // v4+66                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadByte("List Order"' c); //v4+57                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadXORByte(guildGuids[c]' 5);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByte("Facial Hair"' c); // v4+65                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(guildGuids[c]' 4);                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadByte("unk2"' i);                      packet.ReadUInt32("unk1"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadByte("Skin"' c); //v4+61                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 6);                    var level = packet.ReadByte("Level"' c); // v4+66                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadByte("List Order"' c); //v4+57                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadXORByte(guildGuids[c]' 5);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByte("Facial Hair"' c); // v4+65                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(guildGuids[c]' 4);                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadByte("unk2"' i);                      packet.ReadUInt32("unk1"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadByte("Skin"' c); //v4+61                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 6);                    var level = packet.ReadByte("Level"' c); // v4+66                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadByte("List Order"' c); //v4+57                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadXORByte(guildGuids[c]' 5);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByte("Facial Hair"' c); // v4+65                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(guildGuids[c]' 4);                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadByte("unk2"' i);                      packet.ReadUInt32("unk1"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadByte("Skin"' c); //v4+61                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 6);                    var level = packet.ReadByte("Level"' c); // v4+66                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadByte("List Order"' c); //v4+57                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadXORByte(guildGuids[c]' 5);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByte("Facial Hair"' c); // v4+65                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(guildGuids[c]' 4);                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadByte("unk2"' i);                      packet.ReadUInt32("unk1"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\CharacterHandler.cs,HandleCharEnum,The following statement contains a magic number: for (int c = 0; c < count; ++c)              {                  Vector3 pos = new Vector3();                    packet.ReadByte("Skin"' c); //v4+61                  packet.ReadXORByte(charGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 7);                  packet.ReadInt32("Pet Display ID"' c); //v4+108                  var name = packet.ReadWoWString("Name"' (int)nameLenghts[c]' c); // v4 + 8                    for (int j = 0; j < 23; ++j)                  {                      packet.ReadInt32("Item DisplayID"' c' j);                      packet.ReadInt32("Item EnchantID"' c' j);                      packet.ReadByteE<InventoryType>("Item InventoryType"' c' j);                  }                    packet.ReadXORByte(charGuids[c]' 4);                  packet.ReadXORByte(charGuids[c]' 6);                    var level = packet.ReadByte("Level"' c); // v4+66                  pos.Y = packet.ReadSingle("Position Y"' c); // v4+80                  pos.X = packet.ReadSingle("Position X"' c); //v4+76                  packet.ReadByte("Face"' c); // v4+62                  packet.ReadXORByte(guildGuids[c]' 0);                  packet.ReadByte("List Order"' c); //v4+57                  var zone = packet.ReadUInt32<ZoneId>("Zone Id"' c);                  packet.ReadXORByte(guildGuids[c]' 7);                  packet.ReadInt32E<CharacterFlag>("CharacterFlag"' c);                  var mapId = packet.ReadInt32<MapId>("Map Id"' c); //v4+72                  var race = packet.ReadByteE<Race>("Race"' c); //v4+58                  pos.Z = packet.ReadSingle("Position Z"' c); //v4+84                  packet.ReadXORByte(guildGuids[c]' 1);                  packet.ReadByteE<Gender>("Gender"' c); //v4+60                  packet.ReadXORByte(charGuids[c]' 3);                  packet.ReadByte("Hair Color"' c); // v4+64                  packet.ReadXORByte(guildGuids[c]' 5);                  var klass = packet.ReadByteE<Class>("Class"' c); // v4+59                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadXORByte(charGuids[c]' 1);                  packet.ReadUInt32E<CustomizationFlag>("CustomizationFlag"' c); //v4+100                  packet.ReadByte("Facial Hair"' c); // v4+65                  packet.ReadXORByte(guildGuids[c]' 6);                  packet.ReadXORByte(charGuids[c]' 0);                  packet.ReadByte("Hair Style"' c); // v4+63                  packet.ReadXORByte(charGuids[c]' 5);                  packet.ReadInt32("Pet Family"' c); // v4+116                  packet.ReadXORByte(guildGuids[c]' 2);                  packet.ReadInt32("Pet Level"' c); // v4+112                  packet.ReadXORByte(guildGuids[c]' 4);                    for (var i = 0; i < count2; ++i)                  {                      packet.ReadByte("unk2"' i);                      packet.ReadUInt32("unk1"' i);                  }                    var playerGuid = new WowGuid64(BitConverter.ToUInt64(charGuids[c]' 0));                    packet.WriteGuid("Character GUID"' charGuids[c]' c);                  packet.WriteGuid("Guild GUID"' guildGuids[c]' c);                    if (firstLogins[c])                  {                      PlayerCreateInfo startPos = new PlayerCreateInfo { Race = race' Class = klass' Map = (uint)mapId' Zone = zone' Position = pos' Orientation = 0 };                      Storage.StartPositions.Add(startPos' packet.TimeSpan);                  }                    var playerInfo = new Player { Race = race' Class = klass' Name = name' FirstLogin = firstLogins[c]' Level = level };                  if (Storage.Objects.ContainsKey(playerGuid))                      Storage.Objects[playerGuid] = new Tuple<WoWObject' TimeSpan?>(playerInfo' packet.TimeSpan);                  else                      Storage.Objects.Add(playerGuid' playerInfo' packet.TimeSpan);                    StoreGetters.AddName(playerGuid' name);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: var senderGUIDBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: var guildGUIDBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: var receiverGUIDBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: var groupGUIDBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 3' 7' 2' 6' 0' 4' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 3' 7' 2' 6' 0' 4' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 3' 7' 2' 6' 0' 4' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 3' 7' 2' 6' 0' 4' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 3' 7' 2' 6' 0' 4' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 3' 7' 2' 6' 0' 4' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 1' 6' 0' 5' 2' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 1' 6' 0' 5' 2' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 1' 6' 0' 5' 2' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 1' 6' 0' 5' 2' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 1' 6' 0' 5' 2' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 1' 6' 0' 5' 2' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 6' 1' 3' 5' 4' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 6' 1' 3' 5' 4' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 6' 1' 3' 5' 4' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 6' 1' 3' 5' 4' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 6' 1' 3' 5' 4' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 6' 1' 3' 5' 4' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasReceiver)                  receiverLen = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (bit43D)                  bits43D = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasChannel)                  channelLen = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (bit8CF)                  textLen = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 4' 1' 3' 6' 2' 5' 0' 7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 4' 1' 3' 6' 2' 5' 0' 7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 4' 1' 3' 6' 2' 5' 0' 7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 4' 1' 3' 6' 2' 5' 0' 7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 4' 1' 3' 6' 2' 5' 0' 7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 4' 1' 3' 6' 2' 5' 0' 7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (bit148C)                  bits148C = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasPrefix)              {                  var prefixLen = packet.ReadBits(5);                  packet.ReadWoWString("Addon Message Prefix"' prefixLen);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 4' 2' 7' 3' 6' 1' 5' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 4' 2' 7' 3' 6' 1' 5' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 4' 2' 7' 3' 6' 1' 5' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 4' 2' 7' 3' 6' 1' 5' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 4' 2' 7' 3' 6' 1' 5' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 4' 2' 7' 3' 6' 1' 5' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 7' 4' 1' 3' 0' 6' 5' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 7' 4' 1' 3' 0' 6' 5' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 7' 4' 1' 3' 0' 6' 5' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 7' 4' 1' 3' 0' 6' 5' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 7' 4' 1' 3' 0' 6' 5' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 7' 4' 1' 3' 0' 6' 5' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 5' 7' 3' 0' 4' 6' 1' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 5' 7' 3' 0' 4' 6' 1' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 5' 7' 3' 0' 4' 6' 1' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 5' 7' 3' 0' 4' 6' 1' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 5' 7' 3' 0' 4' 6' 1' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 5' 7' 3' 0' 4' 6' 1' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 7' 4' 0' 6' 3' 2' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 7' 4' 0' 6' 3' 2' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 7' 4' 0' 6' 3' 2' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 7' 4' 0' 6' 3' 2' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 7' 4' 0' 6' 3' 2' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 7' 4' 0' 6' 3' 2' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\ChatHandler.cs,HandleClientChatMessage,The following statement contains a magic number: var len = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GameObjectHandler.cs,HandleGameObjectQueryResponse,The following statement contains a magic number: var name = new string[4];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GameObjectHandler.cs,HandleGameObjectQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)                  name[i] = packet.ReadCString("Name"' i);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GameObjectHandler.cs,HandleGameObjectQueryResponse,The following statement contains a magic number: gameObject.Data = new int?[32];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 2' 0' 7' 5' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 2' 0' 7' 5' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 2' 0' 7' 5' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 2' 0' 7' 5' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 2' 0' 7' 5' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 2' 0' 7' 5' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 0' 6' 7' 3' 4' 2' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 0' 6' 7' 3' 4' 2' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 0' 6' 7' 3' 4' 2' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 0' 6' 7' 3' 4' 2' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 0' 6' 7' 3' 4' 2' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 0' 6' 7' 3' 4' 2' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: var strLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: var nameLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: var guid3 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: var guid5 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: var GroupGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: guid3[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: guid3[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: GroupGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: GroupGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: GroupGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: GroupGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: GroupGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: guid3[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: GroupGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: var memberCount = packet.ReadBits("Member Count"' 21);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit38)              {                  guid5[4] = packet.ReadBit();                  guid5[6] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit38)              {                  guid5[4] = packet.ReadBit();                  guid5[6] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit38)              {                  guid5[4] = packet.ReadBit();                  guid5[6] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit38)              {                  guid5[4] = packet.ReadBit();                  guid5[6] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit38)              {                  guid5[4] = packet.ReadBit();                  guid5[6] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit38)              {                  guid5[4] = packet.ReadBit();                  guid5[6] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; ++i)              {                  guid7[i] = new byte[8];                  bitsED[i] = packet.ReadBits(6);                  packet.StartBitStream(guid7[i]' 4' 3' 7' 0' 1' 2' 6' 5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; ++i)              {                  guid7[i] = new byte[8];                  bitsED[i] = packet.ReadBits(6);                  packet.StartBitStream(guid7[i]' 4' 3' 7' 0' 1' 2' 6' 5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; ++i)              {                  guid7[i] = new byte[8];                  bitsED[i] = packet.ReadBits(6);                  packet.StartBitStream(guid7[i]' 4' 3' 7' 0' 1' 2' 6' 5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; ++i)              {                  guid7[i] = new byte[8];                  bitsED[i] = packet.ReadBits(6);                  packet.StartBitStream(guid7[i]' 4' 3' 7' 0' 1' 2' 6' 5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; ++i)              {                  guid7[i] = new byte[8];                  bitsED[i] = packet.ReadBits(6);                  packet.StartBitStream(guid7[i]' 4' 3' 7' 0' 1' 2' 6' 5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; ++i)              {                  guid7[i] = new byte[8];                  bitsED[i] = packet.ReadBits(6);                  packet.StartBitStream(guid7[i]' 4' 3' 7' 0' 1' 2' 6' 5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; ++i)              {                  guid7[i] = new byte[8];                  bitsED[i] = packet.ReadBits(6);                  packet.StartBitStream(guid7[i]' 4' 3' 7' 0' 1' 2' 6' 5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; ++i)              {                  guid7[i] = new byte[8];                  bitsED[i] = packet.ReadBits(6);                  packet.StartBitStream(guid7[i]' 4' 3' 7' 0' 1' 2' 6' 5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: guid3[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: guid3[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: guid3[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; ++i)              {                  packet.ReadByte("Byte50");                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid7[i]' 2);                  packet.ReadXORByte(guid7[i]' 7);                  packet.ReadXORByte(guid7[i]' 4);                  packet.ReadXORByte(guid7[i]' 0);                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid7[i]' 6);                  packet.ReadXORByte(guid7[i]' 1);                  packet.ReadXORByte(guid7[i]' 5);                  packet.ReadXORByte(guid7[i]' 3);                  packet.ReadByte("Byte50");                  packet.ReadWoWString("Name"' bitsED[i]' i);                  packet.WriteGuid("Guid7"' guid7[i]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; ++i)              {                  packet.ReadByte("Byte50");                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid7[i]' 2);                  packet.ReadXORByte(guid7[i]' 7);                  packet.ReadXORByte(guid7[i]' 4);                  packet.ReadXORByte(guid7[i]' 0);                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid7[i]' 6);                  packet.ReadXORByte(guid7[i]' 1);                  packet.ReadXORByte(guid7[i]' 5);                  packet.ReadXORByte(guid7[i]' 3);                  packet.ReadByte("Byte50");                  packet.ReadWoWString("Name"' bitsED[i]' i);                  packet.WriteGuid("Guid7"' guid7[i]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; ++i)              {                  packet.ReadByte("Byte50");                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid7[i]' 2);                  packet.ReadXORByte(guid7[i]' 7);                  packet.ReadXORByte(guid7[i]' 4);                  packet.ReadXORByte(guid7[i]' 0);                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid7[i]' 6);                  packet.ReadXORByte(guid7[i]' 1);                  packet.ReadXORByte(guid7[i]' 5);                  packet.ReadXORByte(guid7[i]' 3);                  packet.ReadByte("Byte50");                  packet.ReadWoWString("Name"' bitsED[i]' i);                  packet.WriteGuid("Guid7"' guid7[i]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; ++i)              {                  packet.ReadByte("Byte50");                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid7[i]' 2);                  packet.ReadXORByte(guid7[i]' 7);                  packet.ReadXORByte(guid7[i]' 4);                  packet.ReadXORByte(guid7[i]' 0);                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid7[i]' 6);                  packet.ReadXORByte(guid7[i]' 1);                  packet.ReadXORByte(guid7[i]' 5);                  packet.ReadXORByte(guid7[i]' 3);                  packet.ReadByte("Byte50");                  packet.ReadWoWString("Name"' bitsED[i]' i);                  packet.WriteGuid("Guid7"' guid7[i]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; ++i)              {                  packet.ReadByte("Byte50");                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid7[i]' 2);                  packet.ReadXORByte(guid7[i]' 7);                  packet.ReadXORByte(guid7[i]' 4);                  packet.ReadXORByte(guid7[i]' 0);                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid7[i]' 6);                  packet.ReadXORByte(guid7[i]' 1);                  packet.ReadXORByte(guid7[i]' 5);                  packet.ReadXORByte(guid7[i]' 3);                  packet.ReadByte("Byte50");                  packet.ReadWoWString("Name"' bitsED[i]' i);                  packet.WriteGuid("Guid7"' guid7[i]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCount; ++i)              {                  packet.ReadByte("Byte50");                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid7[i]' 2);                  packet.ReadXORByte(guid7[i]' 7);                  packet.ReadXORByte(guid7[i]' 4);                  packet.ReadXORByte(guid7[i]' 0);                  packet.ReadByte("Byte50");                  packet.ReadXORByte(guid7[i]' 6);                  packet.ReadXORByte(guid7[i]' 1);                  packet.ReadXORByte(guid7[i]' 5);                  packet.ReadXORByte(guid7[i]' 3);                  packet.ReadByte("Byte50");                  packet.ReadWoWString("Name"' bitsED[i]' i);                  packet.WriteGuid("Guid7"' guid7[i]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit38)              {                  packet.ReadByte("Byte31");                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid5' 4);                  packet.ReadByte("Byte30");                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 7);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit38)              {                  packet.ReadByte("Byte31");                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid5' 4);                  packet.ReadByte("Byte30");                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 7);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit38)              {                  packet.ReadByte("Byte31");                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid5' 4);                  packet.ReadByte("Byte30");                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 7);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit38)              {                  packet.ReadByte("Byte31");                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid5' 4);                  packet.ReadByte("Byte30");                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 7);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit38)              {                  packet.ReadByte("Byte31");                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid5' 4);                  packet.ReadByte("Byte30");                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 7);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (bit38)              {                  packet.ReadByte("Byte31");                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid5' 4);                  packet.ReadByte("Byte30");                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 7);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(GroupGUID' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(GroupGUID' 5);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(GroupGUID' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(guid3' 7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(guid3' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(GroupGUID' 7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(guid3' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(guid3' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(guid3' 5);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(GroupGUID' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(GroupGUID' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(guid3' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: bits164 = (int)packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: bits122 = (int)packet.ReadBits(6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: bits21 = (int)packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: var counter = packet.ReadBits(6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    playerGUID[i][5] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                    guildNameLength[i] = packet.ReadBits(7);                  playerNameLength[i] = packet.ReadBits(6);                    accountId[i][2] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  playerGUID[i][3] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                    bitEB = packet.ReadBit();                    accountId[i][6] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                    bit214 = packet.ReadBit();                    accountId[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 5);                    packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(playerGUID[i]' 6);                    packet.ReadXORByte(accountId[i]' 6);                    packet.ReadByteE<Race>("Race"' i);                  packet.ReadInt32("RealmId"' i);                    packet.ReadXORByte(accountId[i]' 1);                    packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                    packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadXORByte(guildGUID[i]' 0);                    packet.ReadXORByte(playerGUID[i]' 4);                    packet.ReadByteE<Class>("Class"' i);                    packet.ReadXORByte(guildGUID[i]' 6);                    packet.ReadUInt32<ZoneId>("Zone Id"' i);                    packet.ReadXORByte(accountId[i]' 0);                    packet.ReadInt32("RealmID"' i);                    packet.ReadXORByte(playerGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 4);                    packet.ReadByte("Level"' i);                    packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 2);                    packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                    packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 0);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Unk1"' i);                    packet.ReadXORByte(playerGUID[i]' 5);                    packet.ReadXORByte(guildGUID[i]' 7);                    packet.ReadXORByte(accountId[i]' 3);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]' i' j);                    packet.ReadXORByte(guildGUID[i]' 2);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 5);                    packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(playerGUID[i]' 6);                    packet.ReadXORByte(accountId[i]' 6);                    packet.ReadByteE<Race>("Race"' i);                  packet.ReadInt32("RealmId"' i);                    packet.ReadXORByte(accountId[i]' 1);                    packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                    packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadXORByte(guildGUID[i]' 0);                    packet.ReadXORByte(playerGUID[i]' 4);                    packet.ReadByteE<Class>("Class"' i);                    packet.ReadXORByte(guildGUID[i]' 6);                    packet.ReadUInt32<ZoneId>("Zone Id"' i);                    packet.ReadXORByte(accountId[i]' 0);                    packet.ReadInt32("RealmID"' i);                    packet.ReadXORByte(playerGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 4);                    packet.ReadByte("Level"' i);                    packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 2);                    packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                    packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 0);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Unk1"' i);                    packet.ReadXORByte(playerGUID[i]' 5);                    packet.ReadXORByte(guildGUID[i]' 7);                    packet.ReadXORByte(accountId[i]' 3);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]' i' j);                    packet.ReadXORByte(guildGUID[i]' 2);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 5);                    packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(playerGUID[i]' 6);                    packet.ReadXORByte(accountId[i]' 6);                    packet.ReadByteE<Race>("Race"' i);                  packet.ReadInt32("RealmId"' i);                    packet.ReadXORByte(accountId[i]' 1);                    packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                    packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadXORByte(guildGUID[i]' 0);                    packet.ReadXORByte(playerGUID[i]' 4);                    packet.ReadByteE<Class>("Class"' i);                    packet.ReadXORByte(guildGUID[i]' 6);                    packet.ReadUInt32<ZoneId>("Zone Id"' i);                    packet.ReadXORByte(accountId[i]' 0);                    packet.ReadInt32("RealmID"' i);                    packet.ReadXORByte(playerGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 4);                    packet.ReadByte("Level"' i);                    packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 2);                    packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                    packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 0);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Unk1"' i);                    packet.ReadXORByte(playerGUID[i]' 5);                    packet.ReadXORByte(guildGUID[i]' 7);                    packet.ReadXORByte(accountId[i]' 3);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]' i' j);                    packet.ReadXORByte(guildGUID[i]' 2);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 5);                    packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(playerGUID[i]' 6);                    packet.ReadXORByte(accountId[i]' 6);                    packet.ReadByteE<Race>("Race"' i);                  packet.ReadInt32("RealmId"' i);                    packet.ReadXORByte(accountId[i]' 1);                    packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                    packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadXORByte(guildGUID[i]' 0);                    packet.ReadXORByte(playerGUID[i]' 4);                    packet.ReadByteE<Class>("Class"' i);                    packet.ReadXORByte(guildGUID[i]' 6);                    packet.ReadUInt32<ZoneId>("Zone Id"' i);                    packet.ReadXORByte(accountId[i]' 0);                    packet.ReadInt32("RealmID"' i);                    packet.ReadXORByte(playerGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 4);                    packet.ReadByte("Level"' i);                    packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 2);                    packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                    packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 0);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Unk1"' i);                    packet.ReadXORByte(playerGUID[i]' 5);                    packet.ReadXORByte(guildGUID[i]' 7);                    packet.ReadXORByte(accountId[i]' 3);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]' i' j);                    packet.ReadXORByte(guildGUID[i]' 2);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 5);                    packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(playerGUID[i]' 6);                    packet.ReadXORByte(accountId[i]' 6);                    packet.ReadByteE<Race>("Race"' i);                  packet.ReadInt32("RealmId"' i);                    packet.ReadXORByte(accountId[i]' 1);                    packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                    packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadXORByte(guildGUID[i]' 0);                    packet.ReadXORByte(playerGUID[i]' 4);                    packet.ReadByteE<Class>("Class"' i);                    packet.ReadXORByte(guildGUID[i]' 6);                    packet.ReadUInt32<ZoneId>("Zone Id"' i);                    packet.ReadXORByte(accountId[i]' 0);                    packet.ReadInt32("RealmID"' i);                    packet.ReadXORByte(playerGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 4);                    packet.ReadByte("Level"' i);                    packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 2);                    packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                    packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 0);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Unk1"' i);                    packet.ReadXORByte(playerGUID[i]' 5);                    packet.ReadXORByte(guildGUID[i]' 7);                    packet.ReadXORByte(accountId[i]' 3);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]' i' j);                    packet.ReadXORByte(guildGUID[i]' 2);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 5);                    packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(playerGUID[i]' 6);                    packet.ReadXORByte(accountId[i]' 6);                    packet.ReadByteE<Race>("Race"' i);                  packet.ReadInt32("RealmId"' i);                    packet.ReadXORByte(accountId[i]' 1);                    packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                    packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadXORByte(guildGUID[i]' 0);                    packet.ReadXORByte(playerGUID[i]' 4);                    packet.ReadByteE<Class>("Class"' i);                    packet.ReadXORByte(guildGUID[i]' 6);                    packet.ReadUInt32<ZoneId>("Zone Id"' i);                    packet.ReadXORByte(accountId[i]' 0);                    packet.ReadInt32("RealmID"' i);                    packet.ReadXORByte(playerGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 4);                    packet.ReadByte("Level"' i);                    packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 2);                    packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                    packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 0);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Unk1"' i);                    packet.ReadXORByte(playerGUID[i]' 5);                    packet.ReadXORByte(guildGUID[i]' 7);                    packet.ReadXORByte(accountId[i]' 3);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]' i' j);                    packet.ReadXORByte(guildGUID[i]' 2);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 5);                    packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(playerGUID[i]' 6);                    packet.ReadXORByte(accountId[i]' 6);                    packet.ReadByteE<Race>("Race"' i);                  packet.ReadInt32("RealmId"' i);                    packet.ReadXORByte(accountId[i]' 1);                    packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                    packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadXORByte(guildGUID[i]' 0);                    packet.ReadXORByte(playerGUID[i]' 4);                    packet.ReadByteE<Class>("Class"' i);                    packet.ReadXORByte(guildGUID[i]' 6);                    packet.ReadUInt32<ZoneId>("Zone Id"' i);                    packet.ReadXORByte(accountId[i]' 0);                    packet.ReadInt32("RealmID"' i);                    packet.ReadXORByte(playerGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 4);                    packet.ReadByte("Level"' i);                    packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 2);                    packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                    packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 0);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Unk1"' i);                    packet.ReadXORByte(playerGUID[i]' 5);                    packet.ReadXORByte(guildGUID[i]' 7);                    packet.ReadXORByte(accountId[i]' 3);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]' i' j);                    packet.ReadXORByte(guildGUID[i]' 2);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 5);                    packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(playerGUID[i]' 6);                    packet.ReadXORByte(accountId[i]' 6);                    packet.ReadByteE<Race>("Race"' i);                  packet.ReadInt32("RealmId"' i);                    packet.ReadXORByte(accountId[i]' 1);                    packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                    packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadXORByte(guildGUID[i]' 0);                    packet.ReadXORByte(playerGUID[i]' 4);                    packet.ReadByteE<Class>("Class"' i);                    packet.ReadXORByte(guildGUID[i]' 6);                    packet.ReadUInt32<ZoneId>("Zone Id"' i);                    packet.ReadXORByte(accountId[i]' 0);                    packet.ReadInt32("RealmID"' i);                    packet.ReadXORByte(playerGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 4);                    packet.ReadByte("Level"' i);                    packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 2);                    packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                    packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 0);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Unk1"' i);                    packet.ReadXORByte(playerGUID[i]' 5);                    packet.ReadXORByte(guildGUID[i]' 7);                    packet.ReadXORByte(accountId[i]' 3);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]' i' j);                    packet.ReadXORByte(guildGUID[i]' 2);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 5);                    packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(playerGUID[i]' 6);                    packet.ReadXORByte(accountId[i]' 6);                    packet.ReadByteE<Race>("Race"' i);                  packet.ReadInt32("RealmId"' i);                    packet.ReadXORByte(accountId[i]' 1);                    packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                    packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadXORByte(guildGUID[i]' 0);                    packet.ReadXORByte(playerGUID[i]' 4);                    packet.ReadByteE<Class>("Class"' i);                    packet.ReadXORByte(guildGUID[i]' 6);                    packet.ReadUInt32<ZoneId>("Zone Id"' i);                    packet.ReadXORByte(accountId[i]' 0);                    packet.ReadInt32("RealmID"' i);                    packet.ReadXORByte(playerGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 4);                    packet.ReadByte("Level"' i);                    packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 2);                    packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                    packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 0);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Unk1"' i);                    packet.ReadXORByte(playerGUID[i]' 5);                    packet.ReadXORByte(guildGUID[i]' 7);                    packet.ReadXORByte(accountId[i]' 3);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]' i' j);                    packet.ReadXORByte(guildGUID[i]' 2);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 5);                    packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(playerGUID[i]' 6);                    packet.ReadXORByte(accountId[i]' 6);                    packet.ReadByteE<Race>("Race"' i);                  packet.ReadInt32("RealmId"' i);                    packet.ReadXORByte(accountId[i]' 1);                    packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                    packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadXORByte(guildGUID[i]' 0);                    packet.ReadXORByte(playerGUID[i]' 4);                    packet.ReadByteE<Class>("Class"' i);                    packet.ReadXORByte(guildGUID[i]' 6);                    packet.ReadUInt32<ZoneId>("Zone Id"' i);                    packet.ReadXORByte(accountId[i]' 0);                    packet.ReadInt32("RealmID"' i);                    packet.ReadXORByte(playerGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 4);                    packet.ReadByte("Level"' i);                    packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 2);                    packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                    packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 0);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Unk1"' i);                    packet.ReadXORByte(playerGUID[i]' 5);                    packet.ReadXORByte(guildGUID[i]' 7);                    packet.ReadXORByte(accountId[i]' 3);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]' i' j);                    packet.ReadXORByte(guildGUID[i]' 2);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 5);                    packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(playerGUID[i]' 6);                    packet.ReadXORByte(accountId[i]' 6);                    packet.ReadByteE<Race>("Race"' i);                  packet.ReadInt32("RealmId"' i);                    packet.ReadXORByte(accountId[i]' 1);                    packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                    packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadXORByte(guildGUID[i]' 0);                    packet.ReadXORByte(playerGUID[i]' 4);                    packet.ReadByteE<Class>("Class"' i);                    packet.ReadXORByte(guildGUID[i]' 6);                    packet.ReadUInt32<ZoneId>("Zone Id"' i);                    packet.ReadXORByte(accountId[i]' 0);                    packet.ReadInt32("RealmID"' i);                    packet.ReadXORByte(playerGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 4);                    packet.ReadByte("Level"' i);                    packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 2);                    packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                    packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 0);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Unk1"' i);                    packet.ReadXORByte(playerGUID[i]' 5);                    packet.ReadXORByte(guildGUID[i]' 7);                    packet.ReadXORByte(accountId[i]' 3);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]' i' j);                    packet.ReadXORByte(guildGUID[i]' 2);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 5);                    packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(playerGUID[i]' 6);                    packet.ReadXORByte(accountId[i]' 6);                    packet.ReadByteE<Race>("Race"' i);                  packet.ReadInt32("RealmId"' i);                    packet.ReadXORByte(accountId[i]' 1);                    packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                    packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadXORByte(guildGUID[i]' 0);                    packet.ReadXORByte(playerGUID[i]' 4);                    packet.ReadByteE<Class>("Class"' i);                    packet.ReadXORByte(guildGUID[i]' 6);                    packet.ReadUInt32<ZoneId>("Zone Id"' i);                    packet.ReadXORByte(accountId[i]' 0);                    packet.ReadInt32("RealmID"' i);                    packet.ReadXORByte(playerGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 4);                    packet.ReadByte("Level"' i);                    packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 2);                    packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                    packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 0);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Unk1"' i);                    packet.ReadXORByte(playerGUID[i]' 5);                    packet.ReadXORByte(guildGUID[i]' 7);                    packet.ReadXORByte(accountId[i]' 3);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]' i' j);                    packet.ReadXORByte(guildGUID[i]' 2);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 5);                    packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(playerGUID[i]' 6);                    packet.ReadXORByte(accountId[i]' 6);                    packet.ReadByteE<Race>("Race"' i);                  packet.ReadInt32("RealmId"' i);                    packet.ReadXORByte(accountId[i]' 1);                    packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                    packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadXORByte(guildGUID[i]' 0);                    packet.ReadXORByte(playerGUID[i]' 4);                    packet.ReadByteE<Class>("Class"' i);                    packet.ReadXORByte(guildGUID[i]' 6);                    packet.ReadUInt32<ZoneId>("Zone Id"' i);                    packet.ReadXORByte(accountId[i]' 0);                    packet.ReadInt32("RealmID"' i);                    packet.ReadXORByte(playerGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 4);                    packet.ReadByte("Level"' i);                    packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 2);                    packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                    packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 0);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Unk1"' i);                    packet.ReadXORByte(playerGUID[i]' 5);                    packet.ReadXORByte(guildGUID[i]' 7);                    packet.ReadXORByte(accountId[i]' 3);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]' i' j);                    packet.ReadXORByte(guildGUID[i]' 2);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 5);                    packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(playerGUID[i]' 6);                    packet.ReadXORByte(accountId[i]' 6);                    packet.ReadByteE<Race>("Race"' i);                  packet.ReadInt32("RealmId"' i);                    packet.ReadXORByte(accountId[i]' 1);                    packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                    packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadXORByte(guildGUID[i]' 0);                    packet.ReadXORByte(playerGUID[i]' 4);                    packet.ReadByteE<Class>("Class"' i);                    packet.ReadXORByte(guildGUID[i]' 6);                    packet.ReadUInt32<ZoneId>("Zone Id"' i);                    packet.ReadXORByte(accountId[i]' 0);                    packet.ReadInt32("RealmID"' i);                    packet.ReadXORByte(playerGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 4);                    packet.ReadByte("Level"' i);                    packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 2);                    packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                    packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 0);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Unk1"' i);                    packet.ReadXORByte(playerGUID[i]' 5);                    packet.ReadXORByte(guildGUID[i]' 7);                    packet.ReadXORByte(accountId[i]' 3);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]' i' j);                    packet.ReadXORByte(guildGUID[i]' 2);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 5);                    packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(playerGUID[i]' 6);                    packet.ReadXORByte(accountId[i]' 6);                    packet.ReadByteE<Race>("Race"' i);                  packet.ReadInt32("RealmId"' i);                    packet.ReadXORByte(accountId[i]' 1);                    packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                    packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadXORByte(guildGUID[i]' 0);                    packet.ReadXORByte(playerGUID[i]' 4);                    packet.ReadByteE<Class>("Class"' i);                    packet.ReadXORByte(guildGUID[i]' 6);                    packet.ReadUInt32<ZoneId>("Zone Id"' i);                    packet.ReadXORByte(accountId[i]' 0);                    packet.ReadInt32("RealmID"' i);                    packet.ReadXORByte(playerGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 4);                    packet.ReadByte("Level"' i);                    packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 2);                    packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                    packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 0);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Unk1"' i);                    packet.ReadXORByte(playerGUID[i]' 5);                    packet.ReadXORByte(guildGUID[i]' 7);                    packet.ReadXORByte(accountId[i]' 3);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]' i' j);                    packet.ReadXORByte(guildGUID[i]' 2);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 5);                    packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(playerGUID[i]' 6);                    packet.ReadXORByte(accountId[i]' 6);                    packet.ReadByteE<Race>("Race"' i);                  packet.ReadInt32("RealmId"' i);                    packet.ReadXORByte(accountId[i]' 1);                    packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                    packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadXORByte(guildGUID[i]' 0);                    packet.ReadXORByte(playerGUID[i]' 4);                    packet.ReadByteE<Class>("Class"' i);                    packet.ReadXORByte(guildGUID[i]' 6);                    packet.ReadUInt32<ZoneId>("Zone Id"' i);                    packet.ReadXORByte(accountId[i]' 0);                    packet.ReadInt32("RealmID"' i);                    packet.ReadXORByte(playerGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 4);                    packet.ReadByte("Level"' i);                    packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 2);                    packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                    packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 0);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Unk1"' i);                    packet.ReadXORByte(playerGUID[i]' 5);                    packet.ReadXORByte(guildGUID[i]' 7);                    packet.ReadXORByte(accountId[i]' 3);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]' i' j);                    packet.ReadXORByte(guildGUID[i]' 2);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 5);                    packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(playerGUID[i]' 6);                    packet.ReadXORByte(accountId[i]' 6);                    packet.ReadByteE<Race>("Race"' i);                  packet.ReadInt32("RealmId"' i);                    packet.ReadXORByte(accountId[i]' 1);                    packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                    packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadXORByte(guildGUID[i]' 0);                    packet.ReadXORByte(playerGUID[i]' 4);                    packet.ReadByteE<Class>("Class"' i);                    packet.ReadXORByte(guildGUID[i]' 6);                    packet.ReadUInt32<ZoneId>("Zone Id"' i);                    packet.ReadXORByte(accountId[i]' 0);                    packet.ReadInt32("RealmID"' i);                    packet.ReadXORByte(playerGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 4);                    packet.ReadByte("Level"' i);                    packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 2);                    packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                    packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 0);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Unk1"' i);                    packet.ReadXORByte(playerGUID[i]' 5);                    packet.ReadXORByte(guildGUID[i]' 7);                    packet.ReadXORByte(accountId[i]' 3);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]' i' j);                    packet.ReadXORByte(guildGUID[i]' 2);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 5);                    packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(playerGUID[i]' 6);                    packet.ReadXORByte(accountId[i]' 6);                    packet.ReadByteE<Race>("Race"' i);                  packet.ReadInt32("RealmId"' i);                    packet.ReadXORByte(accountId[i]' 1);                    packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                    packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadXORByte(guildGUID[i]' 0);                    packet.ReadXORByte(playerGUID[i]' 4);                    packet.ReadByteE<Class>("Class"' i);                    packet.ReadXORByte(guildGUID[i]' 6);                    packet.ReadUInt32<ZoneId>("Zone Id"' i);                    packet.ReadXORByte(accountId[i]' 0);                    packet.ReadInt32("RealmID"' i);                    packet.ReadXORByte(playerGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 4);                    packet.ReadByte("Level"' i);                    packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 2);                    packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                    packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 0);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Unk1"' i);                    packet.ReadXORByte(playerGUID[i]' 5);                    packet.ReadXORByte(guildGUID[i]' 7);                    packet.ReadXORByte(accountId[i]' 3);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]' i' j);                    packet.ReadXORByte(guildGUID[i]' 2);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadByteE<Gender>("Gender"' i);                    packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 5);                    packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(playerGUID[i]' 6);                    packet.ReadXORByte(accountId[i]' 6);                    packet.ReadByteE<Race>("Race"' i);                  packet.ReadInt32("RealmId"' i);                    packet.ReadXORByte(accountId[i]' 1);                    packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                    packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadXORByte(guildGUID[i]' 0);                    packet.ReadXORByte(playerGUID[i]' 4);                    packet.ReadByteE<Class>("Class"' i);                    packet.ReadXORByte(guildGUID[i]' 6);                    packet.ReadUInt32<ZoneId>("Zone Id"' i);                    packet.ReadXORByte(accountId[i]' 0);                    packet.ReadInt32("RealmID"' i);                    packet.ReadXORByte(playerGUID[i]' 1);                    packet.ReadXORByte(accountId[i]' 4);                    packet.ReadByte("Level"' i);                    packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 2);                    packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                    packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 0);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 7);                    packet.ReadInt32("Unk1"' i);                    packet.ReadXORByte(playerGUID[i]' 5);                    packet.ReadXORByte(guildGUID[i]' 7);                    packet.ReadXORByte(accountId[i]' 3);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]' i' j);                    packet.ReadXORByte(guildGUID[i]' 2);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: var guidBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: uint amountOfOptions = packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.StartBitStream(guidBytes' 5' 1' 7' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.StartBitStream(guidBytes' 5' 1' 7' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.StartBitStream(guidBytes' 5' 1' 7' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: uint questgossips = packet.ReadBits(19);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.StartBitStream(guidBytes' 6' 4' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.StartBitStream(guidBytes' 6' 4' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: for (int i = 0; i < questgossips; ++i)              {                  packet.ReadBit("Change Icon"' i);                  titleLen[i] = packet.ReadBits(9);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: for (int i = 0; i < amountOfOptions; ++i)              {                  boxTextLen[i] = packet.ReadBits(12);                  optionTextLen[i] = packet.ReadBits(12);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: for (int i = 0; i < amountOfOptions; ++i)              {                  boxTextLen[i] = packet.ReadBits(12);                  optionTextLen[i] = packet.ReadBits(12);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: guidBytes[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 5);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcTextUpdate,The following statement contains a magic number: npcText.Probabilities = new float[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcTextUpdate,The following statement contains a magic number: npcText.BroadcastTextId = new uint[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcTextUpdate,The following statement contains a magic number: for (int i = 0; i < 8; ++i)                  npcText.Probabilities[i] = pkt.ReadSingle("Probability"' i);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcTextUpdate,The following statement contains a magic number: for (int i = 0; i < 8; ++i)                  npcText.BroadcastTextId[i] = pkt.ReadUInt32("Broadcast Text Id"' i);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.StartBitStream(guid' 2' 0' 1' 5' 7' 6' 4' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.StartBitStream(guid' 2' 0' 1' 5' 7' 6' 4' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.StartBitStream(guid' 2' 0' 1' 5' 7' 6' 4' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.StartBitStream(guid' 2' 0' 1' 5' 7' 6' 4' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.StartBitStream(guid' 2' 0' 1' 5' 7' 6' 4' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.StartBitStream(guid' 2' 0' 1' 5' 7' 6' 4' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 3' 2' 0' 5' 1' 7' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 3' 2' 0' 5' 1' 7' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 3' 2' 0' 5' 1' 7' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 3' 2' 0' 5' 1' 7' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 3' 2' 0' 5' 1' 7' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 3' 2' 0' 5' 1' 7' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 4' 7' 2' 5' 3' 0' 1' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 4' 7' 2' 5' 3' 0' 1' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 4' 7' 2' 5' 3' 0' 1' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 4' 7' 2' 5' 3' 0' 1' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 4' 7' 2' 5' 3' 0' 1' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 4' 7' 2' 5' 3' 0' 1' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 4' 1' 3' 2' 5' 7' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 4' 1' 3' 2' 5' 7' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 4' 1' 3' 2' 5' 7' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 4' 1' 3' 2' 5' 7' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 4' 1' 3' 2' 5' 7' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 4' 1' 3' 2' 5' 7' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 6' 3' 2' 7' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 6' 3' 2' 7' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 6' 3' 2' 7' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 6' 3' 2' 7' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 6' 3' 2' 7' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: var bits8 = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: uint count = packet.ReadBits("itemCount"' 18);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  NpcVendor vendor = new NpcVendor();                    vendor.Item = packet.ReadInt32<ItemId>("Item ID"' i);                    if (hasCondition[i])                      vendor.PlayerConditionID = packet.ReadUInt32("Condition ID"' i);                    packet.ReadInt32("Price"' i);                    if (hasExtendedCost[i])                      vendor.ExtendedCost = packet.ReadUInt32("Extended Cost"' i);                    packet.ReadInt32("Display ID"' i);                  uint buyCount = packet.ReadUInt32("Buy Count"' i);                  vendor.Slot = packet.ReadInt32("Item Position"' i);                  int maxCount = packet.ReadInt32("Max Count"' i);                  vendor.MaxCount = maxCount == -1 ? 0 : (uint)maxCount; // TDB                  if (vendor.Type == 2)                      vendor.MaxCount = buyCount;                    vendor.Type = packet.ReadUInt32("Type"' i); // 1 - item' 2 - currency                  packet.ReadInt32("Item Upgrade ID"' i);                  packet.ReadInt32("Max Durability"' i);                    tempList.Add(vendor);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 2' 1' 3' 5' 7' 4' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 2' 1' 3' 5' 7' 4' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 2' 1' 3' 5' 7' 4' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 2' 1' 3' 5' 7' 4' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 2' 1' 3' 5' 7' 4' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 2' 1' 3' 5' 7' 4' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: uint count = packet.ReadBits("Spells"' 19);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: uint titleLen = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  TrainerSpell trainerSpell = new TrainerSpell                  {                      SpellId = packet.ReadUInt32<SpellId>("SpellID"' i)'                      ReqAbility = new uint[3]                  };                    for (var j = 0; j < 3; ++j)                      trainerSpell.ReqAbility[j] = packet.ReadUInt32<SpellId>("ReqAbility"' i' j);                    packet.ReadByteE<TrainerSpellState>("Usable"' i);                  trainerSpell.ReqLevel = packet.ReadByte("ReqLevel"' i);                  trainerSpell.ReqSkillRank = packet.ReadUInt32("ReqSkillRank"' i);                  trainerSpell.MoneyCost = packet.ReadUInt32("MoneyCost"' i);                  trainerSpell.ReqSkillLine = packet.ReadUInt32("ReqSkillLine"' i);                    tempList.Add(trainerSpell);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  TrainerSpell trainerSpell = new TrainerSpell                  {                      SpellId = packet.ReadUInt32<SpellId>("SpellID"' i)'                      ReqAbility = new uint[3]                  };                    for (var j = 0; j < 3; ++j)                      trainerSpell.ReqAbility[j] = packet.ReadUInt32<SpellId>("ReqAbility"' i' j);                    packet.ReadByteE<TrainerSpellState>("Usable"' i);                  trainerSpell.ReqLevel = packet.ReadByte("ReqLevel"' i);                  trainerSpell.ReqSkillRank = packet.ReadUInt32("ReqSkillRank"' i);                  trainerSpell.MoneyCost = packet.ReadUInt32("MoneyCost"' i);                  trainerSpell.ReqSkillLine = packet.ReadUInt32("ReqSkillLine"' i);                    tempList.Add(trainerSpell);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: uint qItemCount = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: int lenS4 = (int)packet.ReadBits(6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: var stringLens = new int[4][];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][0] = (int)packet.ReadBits(11);                  stringLens[i][1] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][0] = (int)packet.ReadBits(11);                  stringLens[i][1] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][0] = (int)packet.ReadBits(11);                  stringLens[i][1] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][0] = (int)packet.ReadBits(11);                  stringLens[i][1] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: int lenS5 = (int)packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.ModelIDs = new uint?[4];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.ModelIDs[3] = packet.ReadUInt32("Display ID 3");
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: var name = new string[4];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: var femaleName = new string[4];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; ++i)              {                  if (stringLens[i][0] > 1)                      name[i] = packet.ReadCString("Name"' i);                  if (stringLens[i][1] > 1)                      femaleName[i] = packet.ReadCString("Female Name"' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.KillCredits = new uint?[2];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 2; ++i)                  creature.KillCredits[i] = packet.ReadUInt32("Kill Credit"' i);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.ModelIDs[2] = packet.ReadUInt32("Display ID 2");
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 7' 1' 2' 5' 0' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 7' 1' 2' 5' 0' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 7' 1' 2' 5' 0' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 7' 1' 2' 5' 0' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 7' 1' 2' 5' 0' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandlePlayerQueryName,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 6' 7' 1' 2' 5' 0' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: var count = packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 1' 7' 2' 5' 0' 6' 3' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 1' 7' 2' 5' 0' 6' 3' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 1' 7' 2' 5' 0' 6' 3' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 1' 7' 2' 5' 0' 6' 3' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 1' 7' 2' 5' 0' 6' 3' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 1' 7' 2' 5' 0' 6' 3' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 1' 7' 2' 5' 0' 6' 3' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 4' 7' 6' 0' 2' 3);                  packet.ReadInt32("Entry"' i);                  packet.ReadXORBytes(guids[i]' 5' 1);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 4' 7' 6' 0' 2' 3);                  packet.ReadInt32("Entry"' i);                  packet.ReadXORBytes(guids[i]' 5' 1);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 4' 7' 6' 0' 2' 3);                  packet.ReadInt32("Entry"' i);                  packet.ReadXORBytes(guids[i]' 5' 1);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 4' 7' 6' 0' 2' 3);                  packet.ReadInt32("Entry"' i);                  packet.ReadXORBytes(guids[i]' 5' 1);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 4' 7' 6' 0' 2' 3);                  packet.ReadInt32("Entry"' i);                  packet.ReadXORBytes(guids[i]' 5' 1);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORBytes(guids[i]' 4' 7' 6' 0' 2' 3);                  packet.ReadInt32("Entry"' i);                  packet.ReadXORBytes(guids[i]' 5' 1);                  packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleRealmQueryResponse,The following statement contains a magic number: var bits278 = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandleRealmQueryResponse,The following statement contains a magic number: var bits22 = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\QueryHandler.cs,HandlePageTextResponse,The following statement contains a magic number: uint textLen = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: var guid = packet.StartBitStream(6' 7' 1' 5' 2' 4' 3' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: var guid = packet.StartBitStream(6' 7' 1' 5' 2' 4' 3' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: var guid = packet.StartBitStream(6' 7' 1' 5' 2' 4' 3' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: var guid = packet.StartBitStream(6' 7' 1' 5' 2' 4' 3' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: var guid = packet.StartBitStream(6' 7' 1' 5' 2' 4' 3' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: var guid = packet.StartBitStream(6' 7' 1' 5' 2' 4' 3' 0);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 0' 1' 4' 3' 2' 5);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 0' 1' 4' 3' 2' 5);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 0' 1' 4' 3' 2' 5);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 0' 1' 4' 3' 2' 5);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 0' 1' 4' 3' 2' 5);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 0' 1' 4' 3' 2' 5);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: var sha = new byte[20];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[14] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[8] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[10] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[19] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[16] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[13] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[4] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[9] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[5] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[2] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[12] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[18] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[17] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[11] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[7] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[3] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[6] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: sha[15] = packet.ReadByte();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthSession,The following statement contains a magic number: var size = (int)packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleMessageOfTheDay,The following statement contains a magic number: var lineCount = packet.ReadBits("Line Count"' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleMessageOfTheDay,The following statement contains a magic number: for (var i = 0; i < lineCount; i++)                  lineLength[i] = (int)packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bit70 = packet.ReadBit("unk 1");                  bits14 = (int)packet.ReadBits(21);                  bits58 = (int)packet.ReadBits(21);                  classCount = packet.ReadBits(23);                    bits448 = new uint[bits58];                  bitsEA = new uint[bits58];                  bits45 = new uint[bits58];                    for (var i = 0; i < bits58; ++i)                  {                      bits448[i] = packet.ReadBits(23);                      bitsEA[i] =  packet.ReadBits(7);                      bits45[i] = packet.ReadBits(10);                  }                      bit6C = packet.ReadBit();                  bit68 = packet.ReadBit();                    bits0 = new uint[bits14];                  bits1 = new uint[bits14];                    for (var i = 0; i < bits14; ++i)                  {                      bits0[i] = packet.ReadBits(8);                      bit4 = packet.ReadBit("unk bit"' i);                      bits1[i] = packet.ReadBits(8);                  }                      bit32 = packet.ReadBit();                  raceCount = packet.ReadBits("Race Activation Count"' 23);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bit70 = packet.ReadBit("unk 1");                  bits14 = (int)packet.ReadBits(21);                  bits58 = (int)packet.ReadBits(21);                  classCount = packet.ReadBits(23);                    bits448 = new uint[bits58];                  bitsEA = new uint[bits58];                  bits45 = new uint[bits58];                    for (var i = 0; i < bits58; ++i)                  {                      bits448[i] = packet.ReadBits(23);                      bitsEA[i] =  packet.ReadBits(7);                      bits45[i] = packet.ReadBits(10);                  }                      bit6C = packet.ReadBit();                  bit68 = packet.ReadBit();                    bits0 = new uint[bits14];                  bits1 = new uint[bits14];                    for (var i = 0; i < bits14; ++i)                  {                      bits0[i] = packet.ReadBits(8);                      bit4 = packet.ReadBit("unk bit"' i);                      bits1[i] = packet.ReadBits(8);                  }                      bit32 = packet.ReadBit();                  raceCount = packet.ReadBits("Race Activation Count"' 23);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bit70 = packet.ReadBit("unk 1");                  bits14 = (int)packet.ReadBits(21);                  bits58 = (int)packet.ReadBits(21);                  classCount = packet.ReadBits(23);                    bits448 = new uint[bits58];                  bitsEA = new uint[bits58];                  bits45 = new uint[bits58];                    for (var i = 0; i < bits58; ++i)                  {                      bits448[i] = packet.ReadBits(23);                      bitsEA[i] =  packet.ReadBits(7);                      bits45[i] = packet.ReadBits(10);                  }                      bit6C = packet.ReadBit();                  bit68 = packet.ReadBit();                    bits0 = new uint[bits14];                  bits1 = new uint[bits14];                    for (var i = 0; i < bits14; ++i)                  {                      bits0[i] = packet.ReadBits(8);                      bit4 = packet.ReadBit("unk bit"' i);                      bits1[i] = packet.ReadBits(8);                  }                      bit32 = packet.ReadBit();                  raceCount = packet.ReadBits("Race Activation Count"' 23);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bit70 = packet.ReadBit("unk 1");                  bits14 = (int)packet.ReadBits(21);                  bits58 = (int)packet.ReadBits(21);                  classCount = packet.ReadBits(23);                    bits448 = new uint[bits58];                  bitsEA = new uint[bits58];                  bits45 = new uint[bits58];                    for (var i = 0; i < bits58; ++i)                  {                      bits448[i] = packet.ReadBits(23);                      bitsEA[i] =  packet.ReadBits(7);                      bits45[i] = packet.ReadBits(10);                  }                      bit6C = packet.ReadBit();                  bit68 = packet.ReadBit();                    bits0 = new uint[bits14];                  bits1 = new uint[bits14];                    for (var i = 0; i < bits14; ++i)                  {                      bits0[i] = packet.ReadBits(8);                      bit4 = packet.ReadBit("unk bit"' i);                      bits1[i] = packet.ReadBits(8);                  }                      bit32 = packet.ReadBit();                  raceCount = packet.ReadBits("Race Activation Count"' 23);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bit70 = packet.ReadBit("unk 1");                  bits14 = (int)packet.ReadBits(21);                  bits58 = (int)packet.ReadBits(21);                  classCount = packet.ReadBits(23);                    bits448 = new uint[bits58];                  bitsEA = new uint[bits58];                  bits45 = new uint[bits58];                    for (var i = 0; i < bits58; ++i)                  {                      bits448[i] = packet.ReadBits(23);                      bitsEA[i] =  packet.ReadBits(7);                      bits45[i] = packet.ReadBits(10);                  }                      bit6C = packet.ReadBit();                  bit68 = packet.ReadBit();                    bits0 = new uint[bits14];                  bits1 = new uint[bits14];                    for (var i = 0; i < bits14; ++i)                  {                      bits0[i] = packet.ReadBits(8);                      bit4 = packet.ReadBit("unk bit"' i);                      bits1[i] = packet.ReadBits(8);                  }                      bit32 = packet.ReadBit();                  raceCount = packet.ReadBits("Race Activation Count"' 23);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bit70 = packet.ReadBit("unk 1");                  bits14 = (int)packet.ReadBits(21);                  bits58 = (int)packet.ReadBits(21);                  classCount = packet.ReadBits(23);                    bits448 = new uint[bits58];                  bitsEA = new uint[bits58];                  bits45 = new uint[bits58];                    for (var i = 0; i < bits58; ++i)                  {                      bits448[i] = packet.ReadBits(23);                      bitsEA[i] =  packet.ReadBits(7);                      bits45[i] = packet.ReadBits(10);                  }                      bit6C = packet.ReadBit();                  bit68 = packet.ReadBit();                    bits0 = new uint[bits14];                  bits1 = new uint[bits14];                    for (var i = 0; i < bits14; ++i)                  {                      bits0[i] = packet.ReadBits(8);                      bit4 = packet.ReadBit("unk bit"' i);                      bits1[i] = packet.ReadBits(8);                  }                      bit32 = packet.ReadBit();                  raceCount = packet.ReadBits("Race Activation Count"' 23);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bit70 = packet.ReadBit("unk 1");                  bits14 = (int)packet.ReadBits(21);                  bits58 = (int)packet.ReadBits(21);                  classCount = packet.ReadBits(23);                    bits448 = new uint[bits58];                  bitsEA = new uint[bits58];                  bits45 = new uint[bits58];                    for (var i = 0; i < bits58; ++i)                  {                      bits448[i] = packet.ReadBits(23);                      bitsEA[i] =  packet.ReadBits(7);                      bits45[i] = packet.ReadBits(10);                  }                      bit6C = packet.ReadBit();                  bit68 = packet.ReadBit();                    bits0 = new uint[bits14];                  bits1 = new uint[bits14];                    for (var i = 0; i < bits14; ++i)                  {                      bits0[i] = packet.ReadBits(8);                      bit4 = packet.ReadBit("unk bit"' i);                      bits1[i] = packet.ReadBits(8);                  }                      bit32 = packet.ReadBit();                  raceCount = packet.ReadBits("Race Activation Count"' 23);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bit70 = packet.ReadBit("unk 1");                  bits14 = (int)packet.ReadBits(21);                  bits58 = (int)packet.ReadBits(21);                  classCount = packet.ReadBits(23);                    bits448 = new uint[bits58];                  bitsEA = new uint[bits58];                  bits45 = new uint[bits58];                    for (var i = 0; i < bits58; ++i)                  {                      bits448[i] = packet.ReadBits(23);                      bitsEA[i] =  packet.ReadBits(7);                      bits45[i] = packet.ReadBits(10);                  }                      bit6C = packet.ReadBit();                  bit68 = packet.ReadBit();                    bits0 = new uint[bits14];                  bits1 = new uint[bits14];                    for (var i = 0; i < bits14; ++i)                  {                      bits0[i] = packet.ReadBits(8);                      bit4 = packet.ReadBit("unk bit"' i);                      bits1[i] = packet.ReadBits(8);                  }                      bit32 = packet.ReadBit();                  raceCount = packet.ReadBits("Race Activation Count"' 23);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SessionHandler.cs,HandleAuthResponse,The following statement contains a magic number: if (hasAccountData)              {                  bit70 = packet.ReadBit("unk 1");                  bits14 = (int)packet.ReadBits(21);                  bits58 = (int)packet.ReadBits(21);                  classCount = packet.ReadBits(23);                    bits448 = new uint[bits58];                  bitsEA = new uint[bits58];                  bits45 = new uint[bits58];                    for (var i = 0; i < bits58; ++i)                  {                      bits448[i] = packet.ReadBits(23);                      bitsEA[i] =  packet.ReadBits(7);                      bits45[i] = packet.ReadBits(10);                  }                      bit6C = packet.ReadBit();                  bit68 = packet.ReadBit();                    bits0 = new uint[bits14];                  bits1 = new uint[bits14];                    for (var i = 0; i < bits14; ++i)                  {                      bits0[i] = packet.ReadBits(8);                      bit4 = packet.ReadBit("unk bit"' i);                      bits1[i] = packet.ReadBits(8);                  }                      bit32 = packet.ReadBit();                  raceCount = packet.ReadBits("Race Activation Count"' 23);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleLearnedSpells,The following statement contains a magic number: var count = packet.ReadBits("Spell Count"' 22);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleLearnTalents,The following statement contains a magic number: var talentCount = packet.ReadBits("Learned Talent Count"' 23);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,ReadTalentInfo510,The following statement contains a magic number: var specCount = packet.ReadBits("Spec Group count"' 19);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,ReadTalentInfo510,The following statement contains a magic number: for (var i = 0; i < specCount; ++i)                  spentTalents[i] = packet.ReadBits("Spec Talent Count"' 23' i);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,ReadTalentInfo510,The following statement contains a magic number: for (var i = 0; i < specCount; ++i)              {                  for (var j = 0; j < 6; ++j)                      packet.ReadUInt16("Glyph"' i' j);                    for (var j = 0; j < spentTalents[i]; ++j)                      packet.ReadUInt16("Talent Id"' i' j);                    packet.ReadUInt32("Spec Id"' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid3 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid4 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid5 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid6 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid7 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var powerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var bits140 = (int)packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var bits54 = (int)packet.ReadBits(25);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var bits184 = (int)packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  powerGUID[7] = packet.ReadBit();                  powerGUID[3] = packet.ReadBit();                  powerGUID[1] = packet.ReadBit();                  powerGUID[5] = packet.ReadBit();                  powerGUID[4] = packet.ReadBit();                  powerGUID[2] = packet.ReadBit();                  powerGUID[0] = packet.ReadBit();                  PowerTypeCount = packet.ReadBits(21);                  powerGUID[6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  powerGUID[7] = packet.ReadBit();                  powerGUID[3] = packet.ReadBit();                  powerGUID[1] = packet.ReadBit();                  powerGUID[5] = packet.ReadBit();                  powerGUID[4] = packet.ReadBit();                  powerGUID[2] = packet.ReadBit();                  powerGUID[0] = packet.ReadBit();                  PowerTypeCount = packet.ReadBits(21);                  powerGUID[6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  powerGUID[7] = packet.ReadBit();                  powerGUID[3] = packet.ReadBit();                  powerGUID[1] = packet.ReadBit();                  powerGUID[5] = packet.ReadBit();                  powerGUID[4] = packet.ReadBit();                  powerGUID[2] = packet.ReadBit();                  powerGUID[0] = packet.ReadBit();                  PowerTypeCount = packet.ReadBits(21);                  powerGUID[6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  powerGUID[7] = packet.ReadBit();                  powerGUID[3] = packet.ReadBit();                  powerGUID[1] = packet.ReadBit();                  powerGUID[5] = packet.ReadBit();                  powerGUID[4] = packet.ReadBit();                  powerGUID[2] = packet.ReadBit();                  powerGUID[0] = packet.ReadBit();                  PowerTypeCount = packet.ReadBits(21);                  powerGUID[6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  powerGUID[7] = packet.ReadBit();                  powerGUID[3] = packet.ReadBit();                  powerGUID[1] = packet.ReadBit();                  powerGUID[5] = packet.ReadBit();                  powerGUID[4] = packet.ReadBit();                  powerGUID[2] = packet.ReadBit();                  powerGUID[0] = packet.ReadBit();                  PowerTypeCount = packet.ReadBits(21);                  powerGUID[6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  powerGUID[7] = packet.ReadBit();                  powerGUID[3] = packet.ReadBit();                  powerGUID[1] = packet.ReadBit();                  powerGUID[5] = packet.ReadBit();                  powerGUID[4] = packet.ReadBit();                  powerGUID[2] = packet.ReadBit();                  powerGUID[0] = packet.ReadBit();                  PowerTypeCount = packet.ReadBits(21);                  powerGUID[6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  powerGUID[7] = packet.ReadBit();                  powerGUID[3] = packet.ReadBit();                  powerGUID[1] = packet.ReadBit();                  powerGUID[5] = packet.ReadBit();                  powerGUID[4] = packet.ReadBit();                  powerGUID[2] = packet.ReadBit();                  powerGUID[0] = packet.ReadBit();                  PowerTypeCount = packet.ReadBits(21);                  powerGUID[6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  guid8[i] = new byte[8];                  packet.StartBitStream(guid8[i]' 3' 1' 7' 6' 2' 4' 5' 0);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  guid8[i] = new byte[8];                  packet.StartBitStream(guid8[i]' 3' 1' 7' 6' 2' 4' 5' 0);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  guid8[i] = new byte[8];                  packet.StartBitStream(guid8[i]' 3' 1' 7' 6' 2' 4' 5' 0);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  guid8[i] = new byte[8];                  packet.StartBitStream(guid8[i]' 3' 1' 7' 6' 2' 4' 5' 0);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  guid8[i] = new byte[8];                  packet.StartBitStream(guid8[i]' 3' 1' 7' 6' 2' 4' 5' 0);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  guid8[i] = new byte[8];                  packet.StartBitStream(guid8[i]' 3' 1' 7' 6' 2' 4' 5' 0);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  guid8[i] = new byte[8];                  packet.StartBitStream(guid8[i]' 3' 1' 7' 6' 2' 4' 5' 0);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var bits34 = (int)packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  if (packet.ReadBits("bits22[0]"' 4' i) == 11)                      packet.ReadBits("bits22[1]"' 4' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  if (packet.ReadBits("bits22[0]"' 4' i) == 11)                      packet.ReadBits("bits22[1]"' 4' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  if (packet.ReadBits("bits22[0]"' 4' i) == 11)                      packet.ReadBits("bits22[1]"' 4' i);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 6' 1' 5' 2' 7' 0' 4' 3);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 6' 1' 5' 2' 7' 0' 4' 3);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 6' 1' 5' 2' 7' 0' 4' 3);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 6' 1' 5' 2' 7' 0' 4' 3);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 6' 1' 5' 2' 7' 0' 4' 3);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 6' 1' 5' 2' 7' 0' 4' 3);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 6' 1' 5' 2' 7' 0' 4' 3);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var bits2C = (int)packet.ReadBits(13);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid7[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid7[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid7[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid7[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid7[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid7[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var bits154 = (int)packet.ReadBits(3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  guid6[4] = packet.ReadBit();                  guid6[1] = packet.ReadBit();                  guid6[6] = packet.ReadBit();                  guid6[2] = packet.ReadBit();                  guid6[3] = packet.ReadBit();                  guid6[0] = packet.ReadBit();                  guid6[7] = packet.ReadBit();                  guid6[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  guid6[4] = packet.ReadBit();                  guid6[1] = packet.ReadBit();                  guid6[6] = packet.ReadBit();                  guid6[2] = packet.ReadBit();                  guid6[3] = packet.ReadBit();                  guid6[0] = packet.ReadBit();                  guid6[7] = packet.ReadBit();                  guid6[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  guid6[4] = packet.ReadBit();                  guid6[1] = packet.ReadBit();                  guid6[6] = packet.ReadBit();                  guid6[2] = packet.ReadBit();                  guid6[3] = packet.ReadBit();                  guid6[0] = packet.ReadBit();                  guid6[7] = packet.ReadBit();                  guid6[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  guid6[4] = packet.ReadBit();                  guid6[1] = packet.ReadBit();                  guid6[6] = packet.ReadBit();                  guid6[2] = packet.ReadBit();                  guid6[3] = packet.ReadBit();                  guid6[0] = packet.ReadBit();                  guid6[7] = packet.ReadBit();                  guid6[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  guid6[4] = packet.ReadBit();                  guid6[1] = packet.ReadBit();                  guid6[6] = packet.ReadBit();                  guid6[2] = packet.ReadBit();                  guid6[3] = packet.ReadBit();                  guid6[0] = packet.ReadBit();                  guid6[7] = packet.ReadBit();                  guid6[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  guid6[4] = packet.ReadBit();                  guid6[1] = packet.ReadBit();                  guid6[6] = packet.ReadBit();                  guid6[2] = packet.ReadBit();                  guid6[3] = packet.ReadBit();                  guid6[0] = packet.ReadBit();                  guid6[7] = packet.ReadBit();                  guid6[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  guid5[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid5[6] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  guid5[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid5[6] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  guid5[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid5[6] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  guid5[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid5[6] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  guid5[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid5[6] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  guid5[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid5[6] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitC0)                  bitsC0 = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var bits44 = (int)packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 4' 1' 7' 5' 3' 6' 2' 0);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 4' 1' 7' 5' 3' 6' 2' 0);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 4' 1' 7' 5' 3' 6' 2' 0);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 4' 1' 7' 5' 3' 6' 2' 0);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 4' 1' 7' 5' 3' 6' 2' 0);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 4' 1' 7' 5' 3' 6' 2' 0);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 4' 1' 7' 5' 3' 6' 2' 0);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid3[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid3[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid3[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid3[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid3[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid3[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit68)                  bits68 = packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid4[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid4[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid4[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid4[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid4[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid4[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 3);                  packet.ReadSingle("Float90");                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 5);                  packet.ReadSingle("Float88");                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 4);                  packet.ReadSingle("Float8C");                  packet.ReadXORByte(guid5' 6);                  packet.WriteGuid("Guid10"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 3);                  packet.ReadSingle("Float90");                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 5);                  packet.ReadSingle("Float88");                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 4);                  packet.ReadSingle("Float8C");                  packet.ReadXORByte(guid5' 6);                  packet.WriteGuid("Guid10"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 3);                  packet.ReadSingle("Float90");                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 5);                  packet.ReadSingle("Float88");                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 4);                  packet.ReadSingle("Float8C");                  packet.ReadXORByte(guid5' 6);                  packet.WriteGuid("Guid10"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 3);                  packet.ReadSingle("Float90");                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 5);                  packet.ReadSingle("Float88");                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 4);                  packet.ReadSingle("Float8C");                  packet.ReadXORByte(guid5' 6);                  packet.WriteGuid("Guid10"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 3);                  packet.ReadSingle("Float90");                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 5);                  packet.ReadSingle("Float88");                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 4);                  packet.ReadSingle("Float8C");                  packet.ReadXORByte(guid5' 6);                  packet.WriteGuid("Guid10"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bit98)              {                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid5' 3);                  packet.ReadSingle("Float90");                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 5);                  packet.ReadSingle("Float88");                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid5' 0);                  packet.ReadXORByte(guid5' 4);                  packet.ReadSingle("Float8C");                  packet.ReadXORByte(guid5' 6);                  packet.WriteGuid("Guid10"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid10[i]' 7' 1' 6' 4' 5' 2' 0' 3);                  packet.WriteGuid("Guid9"' guid10[9]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid10[i]' 7' 1' 6' 4' 5' 2' 0' 3);                  packet.WriteGuid("Guid9"' guid10[9]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid10[i]' 7' 1' 6' 4' 5' 2' 0' 3);                  packet.WriteGuid("Guid9"' guid10[9]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid10[i]' 7' 1' 6' 4' 5' 2' 0' 3);                  packet.WriteGuid("Guid9"' guid10[9]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid10[i]' 7' 1' 6' 4' 5' 2' 0' 3);                  packet.WriteGuid("Guid9"' guid10[9]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid10[i]' 7' 1' 6' 4' 5' 2' 0' 3);                  packet.WriteGuid("Guid9"' guid10[9]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid10[i]' 7' 1' 6' 4' 5' 2' 0' 3);                  packet.WriteGuid("Guid9"' guid10[9]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  packet.ReadXORByte(guid8[i]' 5);                  packet.ReadXORByte(guid8[i]' 2);                    packet.ReadSingle("Float188");                  packet.ReadSingle("Float188");                    packet.ReadXORByte(guid8[i]' 7);                    packet.ReadSingle("Float188");                    packet.ReadXORByte(guid8[i]' 3);                  packet.ReadXORByte(guid8[i]' 1);                  packet.ReadXORByte(guid8[i]' 6);                  packet.ReadXORByte(guid8[i]' 4);                  packet.ReadXORByte(guid8[i]' 0);                  packet.WriteGuid("Guid31"' guid8[i]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  packet.ReadXORByte(guid8[i]' 5);                  packet.ReadXORByte(guid8[i]' 2);                    packet.ReadSingle("Float188");                  packet.ReadSingle("Float188");                    packet.ReadXORByte(guid8[i]' 7);                    packet.ReadSingle("Float188");                    packet.ReadXORByte(guid8[i]' 3);                  packet.ReadXORByte(guid8[i]' 1);                  packet.ReadXORByte(guid8[i]' 6);                  packet.ReadXORByte(guid8[i]' 4);                  packet.ReadXORByte(guid8[i]' 0);                  packet.WriteGuid("Guid31"' guid8[i]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  packet.ReadXORByte(guid8[i]' 5);                  packet.ReadXORByte(guid8[i]' 2);                    packet.ReadSingle("Float188");                  packet.ReadSingle("Float188");                    packet.ReadXORByte(guid8[i]' 7);                    packet.ReadSingle("Float188");                    packet.ReadXORByte(guid8[i]' 3);                  packet.ReadXORByte(guid8[i]' 1);                  packet.ReadXORByte(guid8[i]' 6);                  packet.ReadXORByte(guid8[i]' 4);                  packet.ReadXORByte(guid8[i]' 0);                  packet.WriteGuid("Guid31"' guid8[i]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  packet.ReadXORByte(guid8[i]' 5);                  packet.ReadXORByte(guid8[i]' 2);                    packet.ReadSingle("Float188");                  packet.ReadSingle("Float188");                    packet.ReadXORByte(guid8[i]' 7);                    packet.ReadSingle("Float188");                    packet.ReadXORByte(guid8[i]' 3);                  packet.ReadXORByte(guid8[i]' 1);                  packet.ReadXORByte(guid8[i]' 6);                  packet.ReadXORByte(guid8[i]' 4);                  packet.ReadXORByte(guid8[i]' 0);                  packet.WriteGuid("Guid31"' guid8[i]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  packet.ReadXORByte(guid8[i]' 5);                  packet.ReadXORByte(guid8[i]' 2);                    packet.ReadSingle("Float188");                  packet.ReadSingle("Float188");                    packet.ReadXORByte(guid8[i]' 7);                    packet.ReadSingle("Float188");                    packet.ReadXORByte(guid8[i]' 3);                  packet.ReadXORByte(guid8[i]' 1);                  packet.ReadXORByte(guid8[i]' 6);                  packet.ReadXORByte(guid8[i]' 4);                  packet.ReadXORByte(guid8[i]' 0);                  packet.WriteGuid("Guid31"' guid8[i]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits184; ++i)              {                  packet.ReadXORByte(guid8[i]' 5);                  packet.ReadXORByte(guid8[i]' 2);                    packet.ReadSingle("Float188");                  packet.ReadSingle("Float188");                    packet.ReadXORByte(guid8[i]' 7);                    packet.ReadSingle("Float188");                    packet.ReadXORByte(guid8[i]' 3);                  packet.ReadXORByte(guid8[i]' 1);                  packet.ReadXORByte(guid8[i]' 6);                  packet.ReadXORByte(guid8[i]' 4);                  packet.ReadXORByte(guid8[i]' 0);                  packet.WriteGuid("Guid31"' guid8[i]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid3' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid3' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid3' 5);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid3' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid3' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid3' 7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  packet.ParseBitStream(guid9[i]' 2' 4' 5' 3' 6' 7' 1);                  packet.WriteGuid("Guid7"' guid9[i]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  packet.ParseBitStream(guid9[i]' 2' 4' 5' 3' 6' 7' 1);                  packet.WriteGuid("Guid7"' guid9[i]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  packet.ParseBitStream(guid9[i]' 2' 4' 5' 3' 6' 7' 1);                  packet.WriteGuid("Guid7"' guid9[i]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  packet.ParseBitStream(guid9[i]' 2' 4' 5' 3' 6' 7' 1);                  packet.WriteGuid("Guid7"' guid9[i]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  packet.ParseBitStream(guid9[i]' 2' 4' 5' 3' 6' 7' 1);                  packet.WriteGuid("Guid7"' guid9[i]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (var i = 0; i < bits34; ++i)              {                  packet.ParseBitStream(guid9[i]' 2' 4' 5' 3' 6' 7' 1);                  packet.WriteGuid("Guid7"' guid9[i]);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  packet.ReadSingle("FloatA8");                  packet.ReadXORByte(guid6' 0);                  packet.ReadSingle("FloatB0");                  packet.ReadXORByte(guid6' 7);                  packet.ReadXORByte(guid6' 4);                  packet.ReadXORByte(guid6' 1);                  packet.ReadXORByte(guid6' 5);                  packet.ReadXORByte(guid6' 3);                  packet.ReadXORByte(guid6' 2);                  packet.ReadSingle("FloatAC");                  packet.ReadXORByte(guid6' 6);                  packet.WriteGuid("Guid14"' guid6);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  packet.ReadSingle("FloatA8");                  packet.ReadXORByte(guid6' 0);                  packet.ReadSingle("FloatB0");                  packet.ReadXORByte(guid6' 7);                  packet.ReadXORByte(guid6' 4);                  packet.ReadXORByte(guid6' 1);                  packet.ReadXORByte(guid6' 5);                  packet.ReadXORByte(guid6' 3);                  packet.ReadXORByte(guid6' 2);                  packet.ReadSingle("FloatAC");                  packet.ReadXORByte(guid6' 6);                  packet.WriteGuid("Guid14"' guid6);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  packet.ReadSingle("FloatA8");                  packet.ReadXORByte(guid6' 0);                  packet.ReadSingle("FloatB0");                  packet.ReadXORByte(guid6' 7);                  packet.ReadXORByte(guid6' 4);                  packet.ReadXORByte(guid6' 1);                  packet.ReadXORByte(guid6' 5);                  packet.ReadXORByte(guid6' 3);                  packet.ReadXORByte(guid6' 2);                  packet.ReadSingle("FloatAC");                  packet.ReadXORByte(guid6' 6);                  packet.WriteGuid("Guid14"' guid6);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  packet.ReadSingle("FloatA8");                  packet.ReadXORByte(guid6' 0);                  packet.ReadSingle("FloatB0");                  packet.ReadXORByte(guid6' 7);                  packet.ReadXORByte(guid6' 4);                  packet.ReadXORByte(guid6' 1);                  packet.ReadXORByte(guid6' 5);                  packet.ReadXORByte(guid6' 3);                  packet.ReadXORByte(guid6' 2);                  packet.ReadSingle("FloatAC");                  packet.ReadXORByte(guid6' 6);                  packet.WriteGuid("Guid14"' guid6);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  packet.ReadSingle("FloatA8");                  packet.ReadXORByte(guid6' 0);                  packet.ReadSingle("FloatB0");                  packet.ReadXORByte(guid6' 7);                  packet.ReadXORByte(guid6' 4);                  packet.ReadXORByte(guid6' 1);                  packet.ReadXORByte(guid6' 5);                  packet.ReadXORByte(guid6' 3);                  packet.ReadXORByte(guid6' 2);                  packet.ReadSingle("FloatAC");                  packet.ReadXORByte(guid6' 6);                  packet.WriteGuid("Guid14"' guid6);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (bitB8)              {                  packet.ReadSingle("FloatA8");                  packet.ReadXORByte(guid6' 0);                  packet.ReadSingle("FloatB0");                  packet.ReadXORByte(guid6' 7);                  packet.ReadXORByte(guid6' 4);                  packet.ReadXORByte(guid6' 1);                  packet.ReadXORByte(guid6' 5);                  packet.ReadXORByte(guid6' 3);                  packet.ReadXORByte(guid6' 2);                  packet.ReadSingle("FloatAC");                  packet.ReadXORByte(guid6' 6);                  packet.WriteGuid("Guid14"' guid6);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid7' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid7' 7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid7' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid7' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid7' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid7' 5);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Int1B8");                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 2);                  for (var i = 0; i < PowerTypeCount; ++i)                  {                      packet.ReadInt32("IntED"' i);                      packet.ReadInt32("IntED"' i);                  }                    packet.ReadInt32("Int1BC");                  packet.ReadInt32("Int1C0");                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 3);                    packet.WriteGuid("Guid36"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Int1B8");                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 2);                  for (var i = 0; i < PowerTypeCount; ++i)                  {                      packet.ReadInt32("IntED"' i);                      packet.ReadInt32("IntED"' i);                  }                    packet.ReadInt32("Int1BC");                  packet.ReadInt32("Int1C0");                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 3);                    packet.WriteGuid("Guid36"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Int1B8");                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 2);                  for (var i = 0; i < PowerTypeCount; ++i)                  {                      packet.ReadInt32("IntED"' i);                      packet.ReadInt32("IntED"' i);                  }                    packet.ReadInt32("Int1BC");                  packet.ReadInt32("Int1C0");                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 3);                    packet.WriteGuid("Guid36"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Int1B8");                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 2);                  for (var i = 0; i < PowerTypeCount; ++i)                  {                      packet.ReadInt32("IntED"' i);                      packet.ReadInt32("IntED"' i);                  }                    packet.ReadInt32("Int1BC");                  packet.ReadInt32("Int1C0");                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 3);                    packet.WriteGuid("Guid36"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Int1B8");                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 2);                  for (var i = 0; i < PowerTypeCount; ++i)                  {                      packet.ReadInt32("IntED"' i);                      packet.ReadInt32("IntED"' i);                  }                    packet.ReadInt32("Int1BC");                  packet.ReadInt32("Int1C0");                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 3);                    packet.WriteGuid("Guid36"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasPowerData)              {                  packet.ReadInt32("Int1B8");                  packet.ReadXORByte(powerGUID' 7);                  packet.ReadXORByte(powerGUID' 2);                  for (var i = 0; i < PowerTypeCount; ++i)                  {                      packet.ReadInt32("IntED"' i);                      packet.ReadInt32("IntED"' i);                  }                    packet.ReadInt32("Int1BC");                  packet.ReadInt32("Int1C0");                    packet.ReadXORByte(powerGUID' 6);                  packet.ReadXORByte(powerGUID' 4);                  packet.ReadXORByte(powerGUID' 5);                  packet.ReadXORByte(powerGUID' 0);                  packet.ReadXORByte(powerGUID' 1);                  packet.ReadXORByte(powerGUID' 3);                    packet.WriteGuid("Guid36"' powerGUID);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid4' 7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid4' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid4' 5);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid4' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid4' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid4' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleInitialSpells,The following statement contains a magic number: var count = packet.ReadBits("Spell Count"' 22);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid3 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid4 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid5 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid6 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var archeologyCounter = packet.ReadBits(2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: for (var i = 0; i < archeologyCounter; ++i)                  packet.ReadBits("archeologyType"' 2' i);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit120)                  bits120 = packet.ReadBits("bits120"' 7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit112)                  packet.StartBitStream(guid1' 3' 5' 1' 7' 0' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit112)                  packet.StartBitStream(guid1' 3' 5' 1' 7' 0' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit112)                  packet.StartBitStream(guid1' 3' 5' 1' 7' 0' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit112)                  packet.StartBitStream(guid1' 3' 5' 1' 7' 0' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit112)                  packet.StartBitStream(guid1' 3' 5' 1' 7' 0' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit112)                  packet.StartBitStream(guid1' 3' 5' 1' 7' 0' 6' 2' 4);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  var bit388 = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  var bit264 = !packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  bit380 = packet.ReadBit();                    packet.ReadBit(); // fake                  guid2[6] = packet.ReadBit();                    if (bit264)                      packet.ReadBits(30);                    packet.ReadBit(); // fake                  var bit412 = packet.ReadBit();                  bit344 = packet.ReadBit();                    if (bit344)                  {                      guid3[6] = packet.ReadBit();                      guid3[0] = packet.ReadBit();                      guid3[7] = packet.ReadBit();                      bit340 = packet.ReadBit("bit340");                      guid3[3] = packet.ReadBit();                      guid3[2] = packet.ReadBit();                      guid3[1] = packet.ReadBit();                      guid3[5] = packet.ReadBit();                      guid3[4] = packet.ReadBit();                      bit332 = packet.ReadBit("bit332");                  }                  bit272 = !packet.ReadBit();                  guid2[7] = packet.ReadBit();                    if (bit380)                      bit376 = packet.ReadBit("bit376");                    var bit268 = !packet.ReadBit();                  packet.ReadBit("bit389");                  packet.ReadBit(); // fake                  guid2[2] = packet.ReadBit();                    if (bit268)                      packet.ReadBits(13);                    bit408 = !packet.ReadBit();                  guid2[5] = packet.ReadBit();                  bits392 = packet.ReadBits(22);                  guid2[3] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  var bit388 = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  var bit264 = !packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  bit380 = packet.ReadBit();                    packet.ReadBit(); // fake                  guid2[6] = packet.ReadBit();                    if (bit264)                      packet.ReadBits(30);                    packet.ReadBit(); // fake                  var bit412 = packet.ReadBit();                  bit344 = packet.ReadBit();                    if (bit344)                  {                      guid3[6] = packet.ReadBit();                      guid3[0] = packet.ReadBit();                      guid3[7] = packet.ReadBit();                      bit340 = packet.ReadBit("bit340");                      guid3[3] = packet.ReadBit();                      guid3[2] = packet.ReadBit();                      guid3[1] = packet.ReadBit();                      guid3[5] = packet.ReadBit();                      guid3[4] = packet.ReadBit();                      bit332 = packet.ReadBit("bit332");                  }                  bit272 = !packet.ReadBit();                  guid2[7] = packet.ReadBit();                    if (bit380)                      bit376 = packet.ReadBit("bit376");                    var bit268 = !packet.ReadBit();                  packet.ReadBit("bit389");                  packet.ReadBit(); // fake                  guid2[2] = packet.ReadBit();                    if (bit268)                      packet.ReadBits(13);                    bit408 = !packet.ReadBit();                  guid2[5] = packet.ReadBit();                  bits392 = packet.ReadBits(22);                  guid2[3] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  var bit388 = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  var bit264 = !packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  bit380 = packet.ReadBit();                    packet.ReadBit(); // fake                  guid2[6] = packet.ReadBit();                    if (bit264)                      packet.ReadBits(30);                    packet.ReadBit(); // fake                  var bit412 = packet.ReadBit();                  bit344 = packet.ReadBit();                    if (bit344)                  {                      guid3[6] = packet.ReadBit();                      guid3[0] = packet.ReadBit();                      guid3[7] = packet.ReadBit();                      bit340 = packet.ReadBit("bit340");                      guid3[3] = packet.ReadBit();                      guid3[2] = packet.ReadBit();                      guid3[1] = packet.ReadBit();                      guid3[5] = packet.ReadBit();                      guid3[4] = packet.ReadBit();                      bit332 = packet.ReadBit("bit332");                  }                  bit272 = !packet.ReadBit();                  guid2[7] = packet.ReadBit();                    if (bit380)                      bit376 = packet.ReadBit("bit376");                    var bit268 = !packet.ReadBit();                  packet.ReadBit("bit389");                  packet.ReadBit(); // fake                  guid2[2] = packet.ReadBit();                    if (bit268)                      packet.ReadBits(13);                    bit408 = !packet.ReadBit();                  guid2[5] = packet.ReadBit();                  bits392 = packet.ReadBits(22);                  guid2[3] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  var bit388 = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  var bit264 = !packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  bit380 = packet.ReadBit();                    packet.ReadBit(); // fake                  guid2[6] = packet.ReadBit();                    if (bit264)                      packet.ReadBits(30);                    packet.ReadBit(); // fake                  var bit412 = packet.ReadBit();                  bit344 = packet.ReadBit();                    if (bit344)                  {                      guid3[6] = packet.ReadBit();                      guid3[0] = packet.ReadBit();                      guid3[7] = packet.ReadBit();                      bit340 = packet.ReadBit("bit340");                      guid3[3] = packet.ReadBit();                      guid3[2] = packet.ReadBit();                      guid3[1] = packet.ReadBit();                      guid3[5] = packet.ReadBit();                      guid3[4] = packet.ReadBit();                      bit332 = packet.ReadBit("bit332");                  }                  bit272 = !packet.ReadBit();                  guid2[7] = packet.ReadBit();                    if (bit380)                      bit376 = packet.ReadBit("bit376");                    var bit268 = !packet.ReadBit();                  packet.ReadBit("bit389");                  packet.ReadBit(); // fake                  guid2[2] = packet.ReadBit();                    if (bit268)                      packet.ReadBits(13);                    bit408 = !packet.ReadBit();                  guid2[5] = packet.ReadBit();                  bits392 = packet.ReadBits(22);                  guid2[3] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  var bit388 = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  var bit264 = !packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  bit380 = packet.ReadBit();                    packet.ReadBit(); // fake                  guid2[6] = packet.ReadBit();                    if (bit264)                      packet.ReadBits(30);                    packet.ReadBit(); // fake                  var bit412 = packet.ReadBit();                  bit344 = packet.ReadBit();                    if (bit344)                  {                      guid3[6] = packet.ReadBit();                      guid3[0] = packet.ReadBit();                      guid3[7] = packet.ReadBit();                      bit340 = packet.ReadBit("bit340");                      guid3[3] = packet.ReadBit();                      guid3[2] = packet.ReadBit();                      guid3[1] = packet.ReadBit();                      guid3[5] = packet.ReadBit();                      guid3[4] = packet.ReadBit();                      bit332 = packet.ReadBit("bit332");                  }                  bit272 = !packet.ReadBit();                  guid2[7] = packet.ReadBit();                    if (bit380)                      bit376 = packet.ReadBit("bit376");                    var bit268 = !packet.ReadBit();                  packet.ReadBit("bit389");                  packet.ReadBit(); // fake                  guid2[2] = packet.ReadBit();                    if (bit268)                      packet.ReadBits(13);                    bit408 = !packet.ReadBit();                  guid2[5] = packet.ReadBit();                  bits392 = packet.ReadBits(22);                  guid2[3] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  var bit388 = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  var bit264 = !packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  bit380 = packet.ReadBit();                    packet.ReadBit(); // fake                  guid2[6] = packet.ReadBit();                    if (bit264)                      packet.ReadBits(30);                    packet.ReadBit(); // fake                  var bit412 = packet.ReadBit();                  bit344 = packet.ReadBit();                    if (bit344)                  {                      guid3[6] = packet.ReadBit();                      guid3[0] = packet.ReadBit();                      guid3[7] = packet.ReadBit();                      bit340 = packet.ReadBit("bit340");                      guid3[3] = packet.ReadBit();                      guid3[2] = packet.ReadBit();                      guid3[1] = packet.ReadBit();                      guid3[5] = packet.ReadBit();                      guid3[4] = packet.ReadBit();                      bit332 = packet.ReadBit("bit332");                  }                  bit272 = !packet.ReadBit();                  guid2[7] = packet.ReadBit();                    if (bit380)                      bit376 = packet.ReadBit("bit376");                    var bit268 = !packet.ReadBit();                  packet.ReadBit("bit389");                  packet.ReadBit(); // fake                  guid2[2] = packet.ReadBit();                    if (bit268)                      packet.ReadBits(13);                    bit408 = !packet.ReadBit();                  guid2[5] = packet.ReadBit();                  bits392 = packet.ReadBits(22);                  guid2[3] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  var bit388 = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  var bit264 = !packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  bit380 = packet.ReadBit();                    packet.ReadBit(); // fake                  guid2[6] = packet.ReadBit();                    if (bit264)                      packet.ReadBits(30);                    packet.ReadBit(); // fake                  var bit412 = packet.ReadBit();                  bit344 = packet.ReadBit();                    if (bit344)                  {                      guid3[6] = packet.ReadBit();                      guid3[0] = packet.ReadBit();                      guid3[7] = packet.ReadBit();                      bit340 = packet.ReadBit("bit340");                      guid3[3] = packet.ReadBit();                      guid3[2] = packet.ReadBit();                      guid3[1] = packet.ReadBit();                      guid3[5] = packet.ReadBit();                      guid3[4] = packet.ReadBit();                      bit332 = packet.ReadBit("bit332");                  }                  bit272 = !packet.ReadBit();                  guid2[7] = packet.ReadBit();                    if (bit380)                      bit376 = packet.ReadBit("bit376");                    var bit268 = !packet.ReadBit();                  packet.ReadBit("bit389");                  packet.ReadBit(); // fake                  guid2[2] = packet.ReadBit();                    if (bit268)                      packet.ReadBits(13);                    bit408 = !packet.ReadBit();                  guid2[5] = packet.ReadBit();                  bits392 = packet.ReadBits(22);                  guid2[3] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  var bit388 = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  var bit264 = !packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  bit380 = packet.ReadBit();                    packet.ReadBit(); // fake                  guid2[6] = packet.ReadBit();                    if (bit264)                      packet.ReadBits(30);                    packet.ReadBit(); // fake                  var bit412 = packet.ReadBit();                  bit344 = packet.ReadBit();                    if (bit344)                  {                      guid3[6] = packet.ReadBit();                      guid3[0] = packet.ReadBit();                      guid3[7] = packet.ReadBit();                      bit340 = packet.ReadBit("bit340");                      guid3[3] = packet.ReadBit();                      guid3[2] = packet.ReadBit();                      guid3[1] = packet.ReadBit();                      guid3[5] = packet.ReadBit();                      guid3[4] = packet.ReadBit();                      bit332 = packet.ReadBit("bit332");                  }                  bit272 = !packet.ReadBit();                  guid2[7] = packet.ReadBit();                    if (bit380)                      bit376 = packet.ReadBit("bit376");                    var bit268 = !packet.ReadBit();                  packet.ReadBit("bit389");                  packet.ReadBit(); // fake                  guid2[2] = packet.ReadBit();                    if (bit268)                      packet.ReadBits(13);                    bit408 = !packet.ReadBit();                  guid2[5] = packet.ReadBit();                  bits392 = packet.ReadBits(22);                  guid2[3] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  var bit388 = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  var bit264 = !packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  bit380 = packet.ReadBit();                    packet.ReadBit(); // fake                  guid2[6] = packet.ReadBit();                    if (bit264)                      packet.ReadBits(30);                    packet.ReadBit(); // fake                  var bit412 = packet.ReadBit();                  bit344 = packet.ReadBit();                    if (bit344)                  {                      guid3[6] = packet.ReadBit();                      guid3[0] = packet.ReadBit();                      guid3[7] = packet.ReadBit();                      bit340 = packet.ReadBit("bit340");                      guid3[3] = packet.ReadBit();                      guid3[2] = packet.ReadBit();                      guid3[1] = packet.ReadBit();                      guid3[5] = packet.ReadBit();                      guid3[4] = packet.ReadBit();                      bit332 = packet.ReadBit("bit332");                  }                  bit272 = !packet.ReadBit();                  guid2[7] = packet.ReadBit();                    if (bit380)                      bit376 = packet.ReadBit("bit376");                    var bit268 = !packet.ReadBit();                  packet.ReadBit("bit389");                  packet.ReadBit(); // fake                  guid2[2] = packet.ReadBit();                    if (bit268)                      packet.ReadBits(13);                    bit408 = !packet.ReadBit();                  guid2[5] = packet.ReadBit();                  bits392 = packet.ReadBits(22);                  guid2[3] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  var bit388 = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  var bit264 = !packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  bit380 = packet.ReadBit();                    packet.ReadBit(); // fake                  guid2[6] = packet.ReadBit();                    if (bit264)                      packet.ReadBits(30);                    packet.ReadBit(); // fake                  var bit412 = packet.ReadBit();                  bit344 = packet.ReadBit();                    if (bit344)                  {                      guid3[6] = packet.ReadBit();                      guid3[0] = packet.ReadBit();                      guid3[7] = packet.ReadBit();                      bit340 = packet.ReadBit("bit340");                      guid3[3] = packet.ReadBit();                      guid3[2] = packet.ReadBit();                      guid3[1] = packet.ReadBit();                      guid3[5] = packet.ReadBit();                      guid3[4] = packet.ReadBit();                      bit332 = packet.ReadBit("bit332");                  }                  bit272 = !packet.ReadBit();                  guid2[7] = packet.ReadBit();                    if (bit380)                      bit376 = packet.ReadBit("bit376");                    var bit268 = !packet.ReadBit();                  packet.ReadBit("bit389");                  packet.ReadBit(); // fake                  guid2[2] = packet.ReadBit();                    if (bit268)                      packet.ReadBits(13);                    bit408 = !packet.ReadBit();                  guid2[5] = packet.ReadBit();                  bits392 = packet.ReadBits(22);                  guid2[3] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  var bit388 = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  var bit264 = !packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  bit380 = packet.ReadBit();                    packet.ReadBit(); // fake                  guid2[6] = packet.ReadBit();                    if (bit264)                      packet.ReadBits(30);                    packet.ReadBit(); // fake                  var bit412 = packet.ReadBit();                  bit344 = packet.ReadBit();                    if (bit344)                  {                      guid3[6] = packet.ReadBit();                      guid3[0] = packet.ReadBit();                      guid3[7] = packet.ReadBit();                      bit340 = packet.ReadBit("bit340");                      guid3[3] = packet.ReadBit();                      guid3[2] = packet.ReadBit();                      guid3[1] = packet.ReadBit();                      guid3[5] = packet.ReadBit();                      guid3[4] = packet.ReadBit();                      bit332 = packet.ReadBit("bit332");                  }                  bit272 = !packet.ReadBit();                  guid2[7] = packet.ReadBit();                    if (bit380)                      bit376 = packet.ReadBit("bit376");                    var bit268 = !packet.ReadBit();                  packet.ReadBit("bit389");                  packet.ReadBit(); // fake                  guid2[2] = packet.ReadBit();                    if (bit268)                      packet.ReadBits(13);                    bit408 = !packet.ReadBit();                  guid2[5] = packet.ReadBit();                  bits392 = packet.ReadBits(22);                  guid2[3] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  var bit388 = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  var bit264 = !packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  bit380 = packet.ReadBit();                    packet.ReadBit(); // fake                  guid2[6] = packet.ReadBit();                    if (bit264)                      packet.ReadBits(30);                    packet.ReadBit(); // fake                  var bit412 = packet.ReadBit();                  bit344 = packet.ReadBit();                    if (bit344)                  {                      guid3[6] = packet.ReadBit();                      guid3[0] = packet.ReadBit();                      guid3[7] = packet.ReadBit();                      bit340 = packet.ReadBit("bit340");                      guid3[3] = packet.ReadBit();                      guid3[2] = packet.ReadBit();                      guid3[1] = packet.ReadBit();                      guid3[5] = packet.ReadBit();                      guid3[4] = packet.ReadBit();                      bit332 = packet.ReadBit("bit332");                  }                  bit272 = !packet.ReadBit();                  guid2[7] = packet.ReadBit();                    if (bit380)                      bit376 = packet.ReadBit("bit376");                    var bit268 = !packet.ReadBit();                  packet.ReadBit("bit389");                  packet.ReadBit(); // fake                  guid2[2] = packet.ReadBit();                    if (bit268)                      packet.ReadBits(13);                    bit408 = !packet.ReadBit();                  guid2[5] = packet.ReadBit();                  bits392 = packet.ReadBits(22);                  guid2[3] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  var bit388 = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  var bit264 = !packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  bit380 = packet.ReadBit();                    packet.ReadBit(); // fake                  guid2[6] = packet.ReadBit();                    if (bit264)                      packet.ReadBits(30);                    packet.ReadBit(); // fake                  var bit412 = packet.ReadBit();                  bit344 = packet.ReadBit();                    if (bit344)                  {                      guid3[6] = packet.ReadBit();                      guid3[0] = packet.ReadBit();                      guid3[7] = packet.ReadBit();                      bit340 = packet.ReadBit("bit340");                      guid3[3] = packet.ReadBit();                      guid3[2] = packet.ReadBit();                      guid3[1] = packet.ReadBit();                      guid3[5] = packet.ReadBit();                      guid3[4] = packet.ReadBit();                      bit332 = packet.ReadBit("bit332");                  }                  bit272 = !packet.ReadBit();                  guid2[7] = packet.ReadBit();                    if (bit380)                      bit376 = packet.ReadBit("bit376");                    var bit268 = !packet.ReadBit();                  packet.ReadBit("bit389");                  packet.ReadBit(); // fake                  guid2[2] = packet.ReadBit();                    if (bit268)                      packet.ReadBits(13);                    bit408 = !packet.ReadBit();                  guid2[5] = packet.ReadBit();                  bits392 = packet.ReadBits(22);                  guid2[3] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  var bit388 = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  var bit264 = !packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  bit380 = packet.ReadBit();                    packet.ReadBit(); // fake                  guid2[6] = packet.ReadBit();                    if (bit264)                      packet.ReadBits(30);                    packet.ReadBit(); // fake                  var bit412 = packet.ReadBit();                  bit344 = packet.ReadBit();                    if (bit344)                  {                      guid3[6] = packet.ReadBit();                      guid3[0] = packet.ReadBit();                      guid3[7] = packet.ReadBit();                      bit340 = packet.ReadBit("bit340");                      guid3[3] = packet.ReadBit();                      guid3[2] = packet.ReadBit();                      guid3[1] = packet.ReadBit();                      guid3[5] = packet.ReadBit();                      guid3[4] = packet.ReadBit();                      bit332 = packet.ReadBit("bit332");                  }                  bit272 = !packet.ReadBit();                  guid2[7] = packet.ReadBit();                    if (bit380)                      bit376 = packet.ReadBit("bit376");                    var bit268 = !packet.ReadBit();                  packet.ReadBit("bit389");                  packet.ReadBit(); // fake                  guid2[2] = packet.ReadBit();                    if (bit268)                      packet.ReadBits(13);                    bit408 = !packet.ReadBit();                  guid2[5] = packet.ReadBit();                  bits392 = packet.ReadBits(22);                  guid2[3] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  var bit388 = packet.ReadBit();                  guid2[4] = packet.ReadBit();                  var bit264 = !packet.ReadBit();                  guid2[0] = packet.ReadBit();                  guid2[1] = packet.ReadBit();                  bit380 = packet.ReadBit();                    packet.ReadBit(); // fake                  guid2[6] = packet.ReadBit();                    if (bit264)                      packet.ReadBits(30);                    packet.ReadBit(); // fake                  var bit412 = packet.ReadBit();                  bit344 = packet.ReadBit();                    if (bit344)                  {                      guid3[6] = packet.ReadBit();                      guid3[0] = packet.ReadBit();                      guid3[7] = packet.ReadBit();                      bit340 = packet.ReadBit("bit340");                      guid3[3] = packet.ReadBit();                      guid3[2] = packet.ReadBit();                      guid3[1] = packet.ReadBit();                      guid3[5] = packet.ReadBit();                      guid3[4] = packet.ReadBit();                      bit332 = packet.ReadBit("bit332");                  }                  bit272 = !packet.ReadBit();                  guid2[7] = packet.ReadBit();                    if (bit380)                      bit376 = packet.ReadBit("bit376");                    var bit268 = !packet.ReadBit();                  packet.ReadBit("bit389");                  packet.ReadBit(); // fake                  guid2[2] = packet.ReadBit();                    if (bit268)                      packet.ReadBits(13);                    bit408 = !packet.ReadBit();                  guid2[5] = packet.ReadBit();                  bits392 = packet.ReadBits(22);                  guid2[3] = packet.ReadBit();                }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit80)              {                  guid4[2] = packet.ReadBit();                  guid4[6] = packet.ReadBit();                  guid4[4] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit80)              {                  guid4[2] = packet.ReadBit();                  guid4[6] = packet.ReadBit();                  guid4[4] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit80)              {                  guid4[2] = packet.ReadBit();                  guid4[6] = packet.ReadBit();                  guid4[4] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit80)              {                  guid4[2] = packet.ReadBit();                  guid4[6] = packet.ReadBit();                  guid4[4] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit80)              {                  guid4[2] = packet.ReadBit();                  guid4[6] = packet.ReadBit();                  guid4[4] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit80)              {                  guid4[2] = packet.ReadBit();                  guid4[6] = packet.ReadBit();                  guid4[4] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid5' 0' 4' 3' 1' 6' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid5' 0' 4' 3' 1' 6' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid5' 0' 4' 3' 1' 6' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid5' 0' 4' 3' 1' 6' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid5' 0' 4' 3' 1' 6' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid5' 0' 4' 3' 1' 6' 5' 7' 2);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid6' 3' 4' 2' 0' 7' 6' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid6' 3' 4' 2' 0' 7' 6' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid6' 3' 4' 2' 0' 7' 6' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid6' 3' 4' 2' 0' 7' 6' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid6' 3' 4' 2' 0' 7' 6' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid6' 3' 4' 2' 0' 7' 6' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit28)                  packet.ReadBits(5);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasTargetMask)                  packet.ReadBitsE<TargetFlag>("Target Flags"' 20);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid6' 4' 3' 5' 6' 0' 7' 2' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid6' 4' 3' 5' 6' 0' 7' 2' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid6' 4' 3' 5' 6' 0' 7' 2' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid6' 4' 3' 5' 6' 0' 7' 2' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid6' 4' 3' 5' 6' 0' 7' 2' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid6' 4' 3' 5' 6' 0' 7' 2' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  packet.ReadXORByte(guid2' 3);                    if (bit344)                  {                      packet.ReadXORByte(guid3' 2);                      packet.ReadSingle("float1");                      packet.ParseBitStream(guid3' 3' 5' 6);                      packet.ReadSingle("float2");                      packet.ReadUInt32("unk3");                      packet.ParseBitStream(guid3' 7' 1);                        if (bit340)                          packet.ReadUInt32("unk4");                        packet.ReadSingle("float3");                        if (bit332)                          packet.ReadUInt32("unk5");                        packet.ReadXORByte(guid3' 0);                      packet.ReadSingle("float4");                      packet.ReadXORByte(guid3' 4);                  }                  packet.ParseBitStream(guid2' 7' 1);                    if (bit408)                      packet.ReadUInt32("unk6");                    packet.ReadSingle("float5");                    if (bit272)                      packet.ReadUInt32("unk7");                    packet.ReadSingle("float6");                    if (bit380)                  {                      packet.ReadSingle("float7");                      if (bit376)                      {                          packet.ReadSingle("float8");                          packet.ReadSingle("float9");                          packet.ReadSingle("float10");                      }                      packet.ReadUInt32("unk8");                  }                  packet.ReadSingle("float11");                  packet.ParseBitStream(guid2' 0' 6);                    for (var i = 0; i < bits392; ++i)                      packet.ReadUInt32("unk8"' i);                    packet.ReadSingle("float11x");                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("float12");                  packet.ReadSingle("float13");                    packet.ParseBitStream(guid2' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  packet.ReadXORByte(guid2' 3);                    if (bit344)                  {                      packet.ReadXORByte(guid3' 2);                      packet.ReadSingle("float1");                      packet.ParseBitStream(guid3' 3' 5' 6);                      packet.ReadSingle("float2");                      packet.ReadUInt32("unk3");                      packet.ParseBitStream(guid3' 7' 1);                        if (bit340)                          packet.ReadUInt32("unk4");                        packet.ReadSingle("float3");                        if (bit332)                          packet.ReadUInt32("unk5");                        packet.ReadXORByte(guid3' 0);                      packet.ReadSingle("float4");                      packet.ReadXORByte(guid3' 4);                  }                  packet.ParseBitStream(guid2' 7' 1);                    if (bit408)                      packet.ReadUInt32("unk6");                    packet.ReadSingle("float5");                    if (bit272)                      packet.ReadUInt32("unk7");                    packet.ReadSingle("float6");                    if (bit380)                  {                      packet.ReadSingle("float7");                      if (bit376)                      {                          packet.ReadSingle("float8");                          packet.ReadSingle("float9");                          packet.ReadSingle("float10");                      }                      packet.ReadUInt32("unk8");                  }                  packet.ReadSingle("float11");                  packet.ParseBitStream(guid2' 0' 6);                    for (var i = 0; i < bits392; ++i)                      packet.ReadUInt32("unk8"' i);                    packet.ReadSingle("float11x");                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("float12");                  packet.ReadSingle("float13");                    packet.ParseBitStream(guid2' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  packet.ReadXORByte(guid2' 3);                    if (bit344)                  {                      packet.ReadXORByte(guid3' 2);                      packet.ReadSingle("float1");                      packet.ParseBitStream(guid3' 3' 5' 6);                      packet.ReadSingle("float2");                      packet.ReadUInt32("unk3");                      packet.ParseBitStream(guid3' 7' 1);                        if (bit340)                          packet.ReadUInt32("unk4");                        packet.ReadSingle("float3");                        if (bit332)                          packet.ReadUInt32("unk5");                        packet.ReadXORByte(guid3' 0);                      packet.ReadSingle("float4");                      packet.ReadXORByte(guid3' 4);                  }                  packet.ParseBitStream(guid2' 7' 1);                    if (bit408)                      packet.ReadUInt32("unk6");                    packet.ReadSingle("float5");                    if (bit272)                      packet.ReadUInt32("unk7");                    packet.ReadSingle("float6");                    if (bit380)                  {                      packet.ReadSingle("float7");                      if (bit376)                      {                          packet.ReadSingle("float8");                          packet.ReadSingle("float9");                          packet.ReadSingle("float10");                      }                      packet.ReadUInt32("unk8");                  }                  packet.ReadSingle("float11");                  packet.ParseBitStream(guid2' 0' 6);                    for (var i = 0; i < bits392; ++i)                      packet.ReadUInt32("unk8"' i);                    packet.ReadSingle("float11x");                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("float12");                  packet.ReadSingle("float13");                    packet.ParseBitStream(guid2' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  packet.ReadXORByte(guid2' 3);                    if (bit344)                  {                      packet.ReadXORByte(guid3' 2);                      packet.ReadSingle("float1");                      packet.ParseBitStream(guid3' 3' 5' 6);                      packet.ReadSingle("float2");                      packet.ReadUInt32("unk3");                      packet.ParseBitStream(guid3' 7' 1);                        if (bit340)                          packet.ReadUInt32("unk4");                        packet.ReadSingle("float3");                        if (bit332)                          packet.ReadUInt32("unk5");                        packet.ReadXORByte(guid3' 0);                      packet.ReadSingle("float4");                      packet.ReadXORByte(guid3' 4);                  }                  packet.ParseBitStream(guid2' 7' 1);                    if (bit408)                      packet.ReadUInt32("unk6");                    packet.ReadSingle("float5");                    if (bit272)                      packet.ReadUInt32("unk7");                    packet.ReadSingle("float6");                    if (bit380)                  {                      packet.ReadSingle("float7");                      if (bit376)                      {                          packet.ReadSingle("float8");                          packet.ReadSingle("float9");                          packet.ReadSingle("float10");                      }                      packet.ReadUInt32("unk8");                  }                  packet.ReadSingle("float11");                  packet.ParseBitStream(guid2' 0' 6);                    for (var i = 0; i < bits392; ++i)                      packet.ReadUInt32("unk8"' i);                    packet.ReadSingle("float11x");                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("float12");                  packet.ReadSingle("float13");                    packet.ParseBitStream(guid2' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  packet.ReadXORByte(guid2' 3);                    if (bit344)                  {                      packet.ReadXORByte(guid3' 2);                      packet.ReadSingle("float1");                      packet.ParseBitStream(guid3' 3' 5' 6);                      packet.ReadSingle("float2");                      packet.ReadUInt32("unk3");                      packet.ParseBitStream(guid3' 7' 1);                        if (bit340)                          packet.ReadUInt32("unk4");                        packet.ReadSingle("float3");                        if (bit332)                          packet.ReadUInt32("unk5");                        packet.ReadXORByte(guid3' 0);                      packet.ReadSingle("float4");                      packet.ReadXORByte(guid3' 4);                  }                  packet.ParseBitStream(guid2' 7' 1);                    if (bit408)                      packet.ReadUInt32("unk6");                    packet.ReadSingle("float5");                    if (bit272)                      packet.ReadUInt32("unk7");                    packet.ReadSingle("float6");                    if (bit380)                  {                      packet.ReadSingle("float7");                      if (bit376)                      {                          packet.ReadSingle("float8");                          packet.ReadSingle("float9");                          packet.ReadSingle("float10");                      }                      packet.ReadUInt32("unk8");                  }                  packet.ReadSingle("float11");                  packet.ParseBitStream(guid2' 0' 6);                    for (var i = 0; i < bits392; ++i)                      packet.ReadUInt32("unk8"' i);                    packet.ReadSingle("float11x");                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("float12");                  packet.ReadSingle("float13");                    packet.ParseBitStream(guid2' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  packet.ReadXORByte(guid2' 3);                    if (bit344)                  {                      packet.ReadXORByte(guid3' 2);                      packet.ReadSingle("float1");                      packet.ParseBitStream(guid3' 3' 5' 6);                      packet.ReadSingle("float2");                      packet.ReadUInt32("unk3");                      packet.ParseBitStream(guid3' 7' 1);                        if (bit340)                          packet.ReadUInt32("unk4");                        packet.ReadSingle("float3");                        if (bit332)                          packet.ReadUInt32("unk5");                        packet.ReadXORByte(guid3' 0);                      packet.ReadSingle("float4");                      packet.ReadXORByte(guid3' 4);                  }                  packet.ParseBitStream(guid2' 7' 1);                    if (bit408)                      packet.ReadUInt32("unk6");                    packet.ReadSingle("float5");                    if (bit272)                      packet.ReadUInt32("unk7");                    packet.ReadSingle("float6");                    if (bit380)                  {                      packet.ReadSingle("float7");                      if (bit376)                      {                          packet.ReadSingle("float8");                          packet.ReadSingle("float9");                          packet.ReadSingle("float10");                      }                      packet.ReadUInt32("unk8");                  }                  packet.ReadSingle("float11");                  packet.ParseBitStream(guid2' 0' 6);                    for (var i = 0; i < bits392; ++i)                      packet.ReadUInt32("unk8"' i);                    packet.ReadSingle("float11x");                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("float12");                  packet.ReadSingle("float13");                    packet.ParseBitStream(guid2' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  packet.ReadXORByte(guid2' 3);                    if (bit344)                  {                      packet.ReadXORByte(guid3' 2);                      packet.ReadSingle("float1");                      packet.ParseBitStream(guid3' 3' 5' 6);                      packet.ReadSingle("float2");                      packet.ReadUInt32("unk3");                      packet.ParseBitStream(guid3' 7' 1);                        if (bit340)                          packet.ReadUInt32("unk4");                        packet.ReadSingle("float3");                        if (bit332)                          packet.ReadUInt32("unk5");                        packet.ReadXORByte(guid3' 0);                      packet.ReadSingle("float4");                      packet.ReadXORByte(guid3' 4);                  }                  packet.ParseBitStream(guid2' 7' 1);                    if (bit408)                      packet.ReadUInt32("unk6");                    packet.ReadSingle("float5");                    if (bit272)                      packet.ReadUInt32("unk7");                    packet.ReadSingle("float6");                    if (bit380)                  {                      packet.ReadSingle("float7");                      if (bit376)                      {                          packet.ReadSingle("float8");                          packet.ReadSingle("float9");                          packet.ReadSingle("float10");                      }                      packet.ReadUInt32("unk8");                  }                  packet.ReadSingle("float11");                  packet.ParseBitStream(guid2' 0' 6);                    for (var i = 0; i < bits392; ++i)                      packet.ReadUInt32("unk8"' i);                    packet.ReadSingle("float11x");                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("float12");                  packet.ReadSingle("float13");                    packet.ParseBitStream(guid2' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  packet.ReadXORByte(guid2' 3);                    if (bit344)                  {                      packet.ReadXORByte(guid3' 2);                      packet.ReadSingle("float1");                      packet.ParseBitStream(guid3' 3' 5' 6);                      packet.ReadSingle("float2");                      packet.ReadUInt32("unk3");                      packet.ParseBitStream(guid3' 7' 1);                        if (bit340)                          packet.ReadUInt32("unk4");                        packet.ReadSingle("float3");                        if (bit332)                          packet.ReadUInt32("unk5");                        packet.ReadXORByte(guid3' 0);                      packet.ReadSingle("float4");                      packet.ReadXORByte(guid3' 4);                  }                  packet.ParseBitStream(guid2' 7' 1);                    if (bit408)                      packet.ReadUInt32("unk6");                    packet.ReadSingle("float5");                    if (bit272)                      packet.ReadUInt32("unk7");                    packet.ReadSingle("float6");                    if (bit380)                  {                      packet.ReadSingle("float7");                      if (bit376)                      {                          packet.ReadSingle("float8");                          packet.ReadSingle("float9");                          packet.ReadSingle("float10");                      }                      packet.ReadUInt32("unk8");                  }                  packet.ReadSingle("float11");                  packet.ParseBitStream(guid2' 0' 6);                    for (var i = 0; i < bits392; ++i)                      packet.ReadUInt32("unk8"' i);                    packet.ReadSingle("float11x");                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("float12");                  packet.ReadSingle("float13");                    packet.ParseBitStream(guid2' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  packet.ReadXORByte(guid2' 3);                    if (bit344)                  {                      packet.ReadXORByte(guid3' 2);                      packet.ReadSingle("float1");                      packet.ParseBitStream(guid3' 3' 5' 6);                      packet.ReadSingle("float2");                      packet.ReadUInt32("unk3");                      packet.ParseBitStream(guid3' 7' 1);                        if (bit340)                          packet.ReadUInt32("unk4");                        packet.ReadSingle("float3");                        if (bit332)                          packet.ReadUInt32("unk5");                        packet.ReadXORByte(guid3' 0);                      packet.ReadSingle("float4");                      packet.ReadXORByte(guid3' 4);                  }                  packet.ParseBitStream(guid2' 7' 1);                    if (bit408)                      packet.ReadUInt32("unk6");                    packet.ReadSingle("float5");                    if (bit272)                      packet.ReadUInt32("unk7");                    packet.ReadSingle("float6");                    if (bit380)                  {                      packet.ReadSingle("float7");                      if (bit376)                      {                          packet.ReadSingle("float8");                          packet.ReadSingle("float9");                          packet.ReadSingle("float10");                      }                      packet.ReadUInt32("unk8");                  }                  packet.ReadSingle("float11");                  packet.ParseBitStream(guid2' 0' 6);                    for (var i = 0; i < bits392; ++i)                      packet.ReadUInt32("unk8"' i);                    packet.ReadSingle("float11x");                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("float12");                  packet.ReadSingle("float13");                    packet.ParseBitStream(guid2' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  packet.ReadXORByte(guid2' 3);                    if (bit344)                  {                      packet.ReadXORByte(guid3' 2);                      packet.ReadSingle("float1");                      packet.ParseBitStream(guid3' 3' 5' 6);                      packet.ReadSingle("float2");                      packet.ReadUInt32("unk3");                      packet.ParseBitStream(guid3' 7' 1);                        if (bit340)                          packet.ReadUInt32("unk4");                        packet.ReadSingle("float3");                        if (bit332)                          packet.ReadUInt32("unk5");                        packet.ReadXORByte(guid3' 0);                      packet.ReadSingle("float4");                      packet.ReadXORByte(guid3' 4);                  }                  packet.ParseBitStream(guid2' 7' 1);                    if (bit408)                      packet.ReadUInt32("unk6");                    packet.ReadSingle("float5");                    if (bit272)                      packet.ReadUInt32("unk7");                    packet.ReadSingle("float6");                    if (bit380)                  {                      packet.ReadSingle("float7");                      if (bit376)                      {                          packet.ReadSingle("float8");                          packet.ReadSingle("float9");                          packet.ReadSingle("float10");                      }                      packet.ReadUInt32("unk8");                  }                  packet.ReadSingle("float11");                  packet.ParseBitStream(guid2' 0' 6);                    for (var i = 0; i < bits392; ++i)                      packet.ReadUInt32("unk8"' i);                    packet.ReadSingle("float11x");                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("float12");                  packet.ReadSingle("float13");                    packet.ParseBitStream(guid2' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  packet.ReadXORByte(guid2' 3);                    if (bit344)                  {                      packet.ReadXORByte(guid3' 2);                      packet.ReadSingle("float1");                      packet.ParseBitStream(guid3' 3' 5' 6);                      packet.ReadSingle("float2");                      packet.ReadUInt32("unk3");                      packet.ParseBitStream(guid3' 7' 1);                        if (bit340)                          packet.ReadUInt32("unk4");                        packet.ReadSingle("float3");                        if (bit332)                          packet.ReadUInt32("unk5");                        packet.ReadXORByte(guid3' 0);                      packet.ReadSingle("float4");                      packet.ReadXORByte(guid3' 4);                  }                  packet.ParseBitStream(guid2' 7' 1);                    if (bit408)                      packet.ReadUInt32("unk6");                    packet.ReadSingle("float5");                    if (bit272)                      packet.ReadUInt32("unk7");                    packet.ReadSingle("float6");                    if (bit380)                  {                      packet.ReadSingle("float7");                      if (bit376)                      {                          packet.ReadSingle("float8");                          packet.ReadSingle("float9");                          packet.ReadSingle("float10");                      }                      packet.ReadUInt32("unk8");                  }                  packet.ReadSingle("float11");                  packet.ParseBitStream(guid2' 0' 6);                    for (var i = 0; i < bits392; ++i)                      packet.ReadUInt32("unk8"' i);                    packet.ReadSingle("float11x");                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("float12");                  packet.ReadSingle("float13");                    packet.ParseBitStream(guid2' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit416)              {                  packet.ReadXORByte(guid2' 3);                    if (bit344)                  {                      packet.ReadXORByte(guid3' 2);                      packet.ReadSingle("float1");                      packet.ParseBitStream(guid3' 3' 5' 6);                      packet.ReadSingle("float2");                      packet.ReadUInt32("unk3");                      packet.ParseBitStream(guid3' 7' 1);                        if (bit340)                          packet.ReadUInt32("unk4");                        packet.ReadSingle("float3");                        if (bit332)                          packet.ReadUInt32("unk5");                        packet.ReadXORByte(guid3' 0);                      packet.ReadSingle("float4");                      packet.ReadXORByte(guid3' 4);                  }                  packet.ParseBitStream(guid2' 7' 1);                    if (bit408)                      packet.ReadUInt32("unk6");                    packet.ReadSingle("float5");                    if (bit272)                      packet.ReadUInt32("unk7");                    packet.ReadSingle("float6");                    if (bit380)                  {                      packet.ReadSingle("float7");                      if (bit376)                      {                          packet.ReadSingle("float8");                          packet.ReadSingle("float9");                          packet.ReadSingle("float10");                      }                      packet.ReadUInt32("unk8");                  }                  packet.ReadSingle("float11");                  packet.ParseBitStream(guid2' 0' 6);                    for (var i = 0; i < bits392; ++i)                      packet.ReadUInt32("unk8"' i);                    packet.ReadSingle("float11x");                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("float12");                  packet.ReadSingle("float13");                    packet.ParseBitStream(guid2' 4' 5);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit112)              {                  packet.ReadSingle("float14");                  packet.ParseBitStream(guid1' 1' 3' 7' 6' 0' 2);                  packet.ReadSingle("float15");                  packet.ReadXORByte(guid1' 5);                  packet.ReadSingle("float16");                  packet.ReadXORByte(guid1' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit112)              {                  packet.ReadSingle("float14");                  packet.ParseBitStream(guid1' 1' 3' 7' 6' 0' 2);                  packet.ReadSingle("float15");                  packet.ReadXORByte(guid1' 5);                  packet.ReadSingle("float16");                  packet.ReadXORByte(guid1' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit112)              {                  packet.ReadSingle("float14");                  packet.ParseBitStream(guid1' 1' 3' 7' 6' 0' 2);                  packet.ReadSingle("float15");                  packet.ReadXORByte(guid1' 5);                  packet.ReadSingle("float16");                  packet.ReadXORByte(guid1' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit112)              {                  packet.ReadSingle("float14");                  packet.ParseBitStream(guid1' 1' 3' 7' 6' 0' 2);                  packet.ReadSingle("float15");                  packet.ReadXORByte(guid1' 5);                  packet.ReadSingle("float16");                  packet.ReadXORByte(guid1' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit112)              {                  packet.ReadSingle("float14");                  packet.ParseBitStream(guid1' 1' 3' 7' 6' 0' 2);                  packet.ReadSingle("float15");                  packet.ReadXORByte(guid1' 5);                  packet.ReadSingle("float16");                  packet.ReadXORByte(guid1' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit112)              {                  packet.ReadSingle("float14");                  packet.ParseBitStream(guid1' 1' 3' 7' 6' 0' 2);                  packet.ReadSingle("float15");                  packet.ReadXORByte(guid1' 5);                  packet.ReadSingle("float16");                  packet.ReadXORByte(guid1' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit80)              {                  packet.ReadSingle("float17");                  packet.ParseBitStream(guid4' 5' 7' 0' 4);                  packet.ReadSingle("float18");                  packet.ParseBitStream(guid4' 2' 1' 3);                  packet.ReadSingle("float19");                  packet.ReadXORByte(guid4' 6);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit80)              {                  packet.ReadSingle("float17");                  packet.ParseBitStream(guid4' 5' 7' 0' 4);                  packet.ReadSingle("float18");                  packet.ParseBitStream(guid4' 2' 1' 3);                  packet.ReadSingle("float19");                  packet.ReadXORByte(guid4' 6);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit80)              {                  packet.ReadSingle("float17");                  packet.ParseBitStream(guid4' 5' 7' 0' 4);                  packet.ReadSingle("float18");                  packet.ParseBitStream(guid4' 2' 1' 3);                  packet.ReadSingle("float19");                  packet.ReadXORByte(guid4' 6);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit80)              {                  packet.ReadSingle("float17");                  packet.ParseBitStream(guid4' 5' 7' 0' 4);                  packet.ReadSingle("float18");                  packet.ParseBitStream(guid4' 2' 1' 3);                  packet.ReadSingle("float19");                  packet.ReadXORByte(guid4' 6);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit80)              {                  packet.ReadSingle("float17");                  packet.ParseBitStream(guid4' 5' 7' 0' 4);                  packet.ReadSingle("float18");                  packet.ParseBitStream(guid4' 2' 1' 3);                  packet.ReadSingle("float19");                  packet.ReadXORByte(guid4' 6);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (bit80)              {                  packet.ReadSingle("float17");                  packet.ParseBitStream(guid4' 5' 7' 0' 4);                  packet.ReadSingle("float18");                  packet.ParseBitStream(guid4' 2' 1' 3);                  packet.ReadSingle("float19");                  packet.ReadXORByte(guid4' 6);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid5' 7' 3' 2' 0' 4' 6' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid5' 7' 3' 2' 0' 4' 6' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid5' 7' 3' 2' 0' 4' 6' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid5' 7' 3' 2' 0' 4' 6' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid5' 7' 3' 2' 0' 4' 6' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid5' 7' 3' 2' 0' 4' 6' 5' 1);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var transportGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var goTransportGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var attackingTargetGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var transportFrames = packet.ReadBits("Transport Frames Count"' 22' index);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit29C)              {                  bit284 = packet.ReadBit();                  if (bit284)                  {                      bits25C = packet.ReadBits(21);                      bits26C = packet.ReadBits(21);                  }                    packet.ReadBit("bit20C"' index);                  packet.ReadBit("bit210"' index);                  bit23C = packet.ReadBit();                  bit298 = packet.ReadBit();                  packet.ReadBit("bit20F"' index);                  packet.ReadBit("bit20E"' index);                  bit218 = packet.ReadBit();                  bit220 = packet.ReadBit();                  if (bit298)                      bits288 = packet.ReadBits(20);                    bit228 = packet.ReadBit();                  packet.ReadBit("bit20D"' index);                  bit230 = packet.ReadBit();                  bit258 = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit29C)              {                  bit284 = packet.ReadBit();                  if (bit284)                  {                      bits25C = packet.ReadBits(21);                      bits26C = packet.ReadBits(21);                  }                    packet.ReadBit("bit20C"' index);                  packet.ReadBit("bit210"' index);                  bit23C = packet.ReadBit();                  bit298 = packet.ReadBit();                  packet.ReadBit("bit20F"' index);                  packet.ReadBit("bit20E"' index);                  bit218 = packet.ReadBit();                  bit220 = packet.ReadBit();                  if (bit298)                      bits288 = packet.ReadBits(20);                    bit228 = packet.ReadBit();                  packet.ReadBit("bit20D"' index);                  bit230 = packet.ReadBit();                  bit258 = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit29C)              {                  bit284 = packet.ReadBit();                  if (bit284)                  {                      bits25C = packet.ReadBits(21);                      bits26C = packet.ReadBits(21);                  }                    packet.ReadBit("bit20C"' index);                  packet.ReadBit("bit210"' index);                  bit23C = packet.ReadBit();                  bit298 = packet.ReadBit();                  packet.ReadBit("bit20F"' index);                  packet.ReadBit("bit20E"' index);                  bit218 = packet.ReadBit();                  bit220 = packet.ReadBit();                  if (bit298)                      bits288 = packet.ReadBits(20);                    bit228 = packet.ReadBit();                  packet.ReadBit("bit20D"' index);                  bit230 = packet.ReadBit();                  bit258 = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit428)                  bits418 = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[5] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  bits90 = packet.ReadBits(22);                  moveInfo.HasSplineData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          bit130 = packet.ReadBit();                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                      }                  }                    bitA0 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    packet.ReadBit("bit8C"' index);                  packet.ReadBit("bit8D"' index);                  guid1[2] = packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 4' 7' 3' 1' 6);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 0' 5);                      hasTransportTime3 = packet.ReadBit();                  }                    guid1[6] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMoveFlagsExtra = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[5] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  bits90 = packet.ReadBits(22);                  moveInfo.HasSplineData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          bit130 = packet.ReadBit();                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                      }                  }                    bitA0 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    packet.ReadBit("bit8C"' index);                  packet.ReadBit("bit8D"' index);                  guid1[2] = packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 4' 7' 3' 1' 6);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 0' 5);                      hasTransportTime3 = packet.ReadBit();                  }                    guid1[6] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMoveFlagsExtra = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[5] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  bits90 = packet.ReadBits(22);                  moveInfo.HasSplineData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          bit130 = packet.ReadBit();                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                      }                  }                    bitA0 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    packet.ReadBit("bit8C"' index);                  packet.ReadBit("bit8D"' index);                  guid1[2] = packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 4' 7' 3' 1' 6);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 0' 5);                      hasTransportTime3 = packet.ReadBit();                  }                    guid1[6] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMoveFlagsExtra = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[5] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  bits90 = packet.ReadBits(22);                  moveInfo.HasSplineData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          bit130 = packet.ReadBit();                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                      }                  }                    bitA0 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    packet.ReadBit("bit8C"' index);                  packet.ReadBit("bit8D"' index);                  guid1[2] = packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 4' 7' 3' 1' 6);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 0' 5);                      hasTransportTime3 = packet.ReadBit();                  }                    guid1[6] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMoveFlagsExtra = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[5] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  bits90 = packet.ReadBits(22);                  moveInfo.HasSplineData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          bit130 = packet.ReadBit();                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                      }                  }                    bitA0 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    packet.ReadBit("bit8C"' index);                  packet.ReadBit("bit8D"' index);                  guid1[2] = packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 4' 7' 3' 1' 6);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 0' 5);                      hasTransportTime3 = packet.ReadBit();                  }                    guid1[6] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMoveFlagsExtra = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[5] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  bits90 = packet.ReadBits(22);                  moveInfo.HasSplineData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          bit130 = packet.ReadBit();                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                      }                  }                    bitA0 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    packet.ReadBit("bit8C"' index);                  packet.ReadBit("bit8D"' index);                  guid1[2] = packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 4' 7' 3' 1' 6);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 0' 5);                      hasTransportTime3 = packet.ReadBit();                  }                    guid1[6] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMoveFlagsExtra = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[5] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  bits90 = packet.ReadBits(22);                  moveInfo.HasSplineData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          bit130 = packet.ReadBit();                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                      }                  }                    bitA0 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    packet.ReadBit("bit8C"' index);                  packet.ReadBit("bit8D"' index);                  guid1[2] = packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 4' 7' 3' 1' 6);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 0' 5);                      hasTransportTime3 = packet.ReadBit();                  }                    guid1[6] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMoveFlagsExtra = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[5] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  bits90 = packet.ReadBits(22);                  moveInfo.HasSplineData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          bit130 = packet.ReadBit();                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                      }                  }                    bitA0 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    packet.ReadBit("bit8C"' index);                  packet.ReadBit("bit8D"' index);                  guid1[2] = packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 4' 7' 3' 1' 6);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 0' 5);                      hasTransportTime3 = packet.ReadBit();                  }                    guid1[6] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMoveFlagsExtra = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[5] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  bits90 = packet.ReadBits(22);                  moveInfo.HasSplineData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          bit130 = packet.ReadBit();                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                      }                  }                    bitA0 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    packet.ReadBit("bit8C"' index);                  packet.ReadBit("bit8D"' index);                  guid1[2] = packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 4' 7' 3' 1' 6);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 0' 5);                      hasTransportTime3 = packet.ReadBit();                  }                    guid1[6] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMoveFlagsExtra = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[5] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  bits90 = packet.ReadBits(22);                  moveInfo.HasSplineData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          bit130 = packet.ReadBit();                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                      }                  }                    bitA0 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    packet.ReadBit("bit8C"' index);                  packet.ReadBit("bit8D"' index);                  guid1[2] = packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 4' 7' 3' 1' 6);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 0' 5);                      hasTransportTime3 = packet.ReadBit();                  }                    guid1[6] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMoveFlagsExtra = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[5] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  bits90 = packet.ReadBits(22);                  moveInfo.HasSplineData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          bit130 = packet.ReadBit();                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                      }                  }                    bitA0 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    packet.ReadBit("bit8C"' index);                  packet.ReadBit("bit8D"' index);                  guid1[2] = packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 4' 7' 3' 1' 6);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 0' 5);                      hasTransportTime3 = packet.ReadBit();                  }                    guid1[6] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMoveFlagsExtra = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[5] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  bits90 = packet.ReadBits(22);                  moveInfo.HasSplineData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          bit130 = packet.ReadBit();                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                      }                  }                    bitA0 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    packet.ReadBit("bit8C"' index);                  packet.ReadBit("bit8D"' index);                  guid1[2] = packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 4' 7' 3' 1' 6);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 0' 5);                      hasTransportTime3 = packet.ReadBit();                  }                    guid1[6] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMoveFlagsExtra = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[5] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  bits90 = packet.ReadBits(22);                  moveInfo.HasSplineData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          bit130 = packet.ReadBit();                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                      }                  }                    bitA0 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    packet.ReadBit("bit8C"' index);                  packet.ReadBit("bit8D"' index);                  guid1[2] = packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 4' 7' 3' 1' 6);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 0' 5);                      hasTransportTime3 = packet.ReadBit();                  }                    guid1[6] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMoveFlagsExtra = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[5] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  bits90 = packet.ReadBits(22);                  moveInfo.HasSplineData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          bit130 = packet.ReadBit();                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                      }                  }                    bitA0 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    packet.ReadBit("bit8C"' index);                  packet.ReadBit("bit8D"' index);                  guid1[2] = packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 4' 7' 3' 1' 6);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 0' 5);                      hasTransportTime3 = packet.ReadBit();                  }                    guid1[6] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMoveFlagsExtra = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[5] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  bits90 = packet.ReadBits(22);                  moveInfo.HasSplineData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          bit130 = packet.ReadBit();                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                      }                  }                    bitA0 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    packet.ReadBit("bit8C"' index);                  packet.ReadBit("bit8D"' index);                  guid1[2] = packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 4' 7' 3' 1' 6);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 0' 5);                      hasTransportTime3 = packet.ReadBit();                  }                    guid1[6] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMoveFlagsExtra = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[5] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  bits90 = packet.ReadBits(22);                  moveInfo.HasSplineData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          bit130 = packet.ReadBit();                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                      }                  }                    bitA0 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    packet.ReadBit("bit8C"' index);                  packet.ReadBit("bit8D"' index);                  guid1[2] = packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 4' 7' 3' 1' 6);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 0' 5);                      hasTransportTime3 = packet.ReadBit();                  }                    guid1[6] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMoveFlagsExtra = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[5] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  bits90 = packet.ReadBits(22);                  moveInfo.HasSplineData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          bit130 = packet.ReadBit();                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                      }                  }                    bitA0 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    packet.ReadBit("bit8C"' index);                  packet.ReadBit("bit8D"' index);                  guid1[2] = packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 4' 7' 3' 1' 6);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 0' 5);                      hasTransportTime3 = packet.ReadBit();                  }                    guid1[6] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMoveFlagsExtra = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[5] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  bits90 = packet.ReadBits(22);                  moveInfo.HasSplineData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          bit130 = packet.ReadBit();                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                      }                  }                    bitA0 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    packet.ReadBit("bit8C"' index);                  packet.ReadBit("bit8D"' index);                  guid1[2] = packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 4' 7' 3' 1' 6);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 0' 5);                      hasTransportTime3 = packet.ReadBit();                  }                    guid1[6] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMoveFlagsExtra = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[5] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  bits90 = packet.ReadBits(22);                  moveInfo.HasSplineData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          bit130 = packet.ReadBit();                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                      }                  }                    bitA0 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    packet.ReadBit("bit8C"' index);                  packet.ReadBit("bit8D"' index);                  guid1[2] = packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 4' 7' 3' 1' 6);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 0' 5);                      hasTransportTime3 = packet.ReadBit();                  }                    guid1[6] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMoveFlagsExtra = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[5] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  bits90 = packet.ReadBits(22);                  moveInfo.HasSplineData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          bit130 = packet.ReadBit();                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                      }                  }                    bitA0 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    packet.ReadBit("bit8C"' index);                  packet.ReadBit("bit8D"' index);                  guid1[2] = packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 4' 7' 3' 1' 6);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 0' 5);                      hasTransportTime3 = packet.ReadBit();                  }                    guid1[6] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMoveFlagsExtra = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[5] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  bits90 = packet.ReadBits(22);                  moveInfo.HasSplineData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          bit130 = packet.ReadBit();                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                      }                  }                    bitA0 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    packet.ReadBit("bit8C"' index);                  packet.ReadBit("bit8D"' index);                  guid1[2] = packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 4' 7' 3' 1' 6);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 0' 5);                      hasTransportTime3 = packet.ReadBit();                  }                    guid1[6] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMoveFlagsExtra = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[4] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  bits160 = packet.ReadBits(19);                  for (var i = 0; i < bits160; ++i)                      packet.ReadBits("bits164"' 2' index' i);                    guid1[5] = packet.ReadBit();                  hasOrientation = !packet.ReadBit();                  guid1[7] = packet.ReadBit();                  bits90 = packet.ReadBits(22);                  moveInfo.HasSplineData = packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          bit130 = packet.ReadBit();                          hasSplineVerticalAcceleration = packet.ReadBit("has Spline Vertical Acceleration"' index);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          if (bit130)                          {                              bits11C = packet.ReadBits(21);                              packet.ReadBits("bits12C"' 2' index);                          }                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                          hasSplineStartTime = packet.ReadBit("Has Spline Start Time"' index);                          splineCount = packet.ReadBits("SplineWaypointsCount"' 20' index);                      }                  }                    bitA0 = !packet.ReadBit();                  guid1[3] = packet.ReadBit();                  packet.ReadBit("bitA4"' index);                  hasMovementFlags = !packet.ReadBit();                  if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    packet.ReadBit("bit8C"' index);                  packet.ReadBit("bit8D"' index);                  guid1[2] = packet.ReadBit();                  hasTimestamp = !packet.ReadBit();                  guid1[0] = packet.ReadBit();                  hasTransportData = packet.ReadBit();                  if (hasTransportData)                  {                      packet.StartBitStream(transportGuid' 4' 7' 3' 1' 6);                      hasTransportTime2 = packet.ReadBit();                      packet.StartBitStream(transportGuid' 2' 0' 5);                      hasTransportTime3 = packet.ReadBit();                  }                    guid1[6] = packet.ReadBit();                  hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMoveFlagsExtra = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.StartBitStream(goTransportGuid' 0' 7);                  hasGOTransportTime3 = packet.ReadBit();                  goTransportGuid[1] = packet.ReadBit();                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 6' 5' 4' 3' 2);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.StartBitStream(goTransportGuid' 0' 7);                  hasGOTransportTime3 = packet.ReadBit();                  goTransportGuid[1] = packet.ReadBit();                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 6' 5' 4' 3' 2);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.StartBitStream(goTransportGuid' 0' 7);                  hasGOTransportTime3 = packet.ReadBit();                  goTransportGuid[1] = packet.ReadBit();                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 6' 5' 4' 3' 2);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.StartBitStream(goTransportGuid' 0' 7);                  hasGOTransportTime3 = packet.ReadBit();                  goTransportGuid[1] = packet.ReadBit();                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 6' 5' 4' 3' 2);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.StartBitStream(goTransportGuid' 0' 7);                  hasGOTransportTime3 = packet.ReadBit();                  goTransportGuid[1] = packet.ReadBit();                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 6' 5' 4' 3' 2);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  packet.StartBitStream(goTransportGuid' 0' 7);                  hasGOTransportTime3 = packet.ReadBit();                  goTransportGuid[1] = packet.ReadBit();                  hasGOTransportTime2 = packet.ReadBit();                  packet.StartBitStream(goTransportGuid' 6' 5' 4' 3' 2);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit32A)                  bits2AA = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  packet.StartBitStream(attackingTargetGuid' 5' 4' 6' 0' 1' 7' 2' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  packet.StartBitStream(attackingTargetGuid' 5' 4' 6' 0' 1' 7' 2' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  packet.StartBitStream(attackingTargetGuid' 5' 4' 6' 0' 1' 7' 2' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  packet.StartBitStream(attackingTargetGuid' 5' 4' 6' 0' 1' 7' 2' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  packet.StartBitStream(attackingTargetGuid' 5' 4' 6' 0' 1' 7' 2' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  packet.StartBitStream(attackingTargetGuid' 5' 4' 6' 0' 1' 7' 2' 3);
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var CreatorGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  guid358 = new byte[2][];                  guid358_6 = new byte[2][][];                  bits358_10 = new uint[2];                  bits358_6_84 = new uint[2][];                  bits358_6_94 = new uint[2][];                  bits358_6_31 = new uint[2][];                  bits358_6_74 = new uint[2][];                  bit358_6_78_9 = new byte[2][][];                  bit358_6_88_10 = new byte[2][][];                  bit358_6_88_C = new bool[2][][];                  bit358_6_88_8 = new bool[2][][];                  bit358_6_2E = new bool[2][];                  bit358_6_30 = new bool[2][];                  bit358_20 = new bool[2];                  bit358_C = new bool[2];                  bit358_24 = new bool[2];                    for (var i = 0; i < 2; ++i)                  {                      guid358[i] = new byte[8];                      packet.StartBitStream(guid358[i]' 3' 4' 1' 0);                      bits358_10[i] = packet.ReadBits(2);                      bit358_20[i] = !packet.ReadBit();                        guid358_6[i] = new byte[bits358_10[i]][];                      bits358_6_84[i] = new uint[bits358_10[i]];                      bits358_6_94[i] = new uint[bits358_10[i]];                      bits358_6_31[i] = new uint[bits358_10[i]];                      bits358_6_74[i] = new uint[bits358_10[i]];                      bit358_6_78_9[i] = new byte[bits358_10[i]][];                      bit358_6_88_10[i] = new byte[bits358_10[i]][];                      bit358_6_88_C[i] = new bool[bits358_10[i]][];                      bit358_6_88_8[i] = new bool[bits358_10[i]][];                      bit358_6_2E[i] = new bool[bits358_10[i]];                      bit358_6_30[i] = new bool[bits358_10[i]];                        for (var j = 0; j < bits358_10[i]; ++j)                      {                          guid358_6[i][j] = new byte[8];                          bits358_6_84[i][j] = packet.ReadBits(21);                            bit358_6_88_8[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_C[i][j] = new bool[bits358_6_84[i][j]];                          bit358_6_88_10[i][j] = new byte[bits358_6_84[i][j]];                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              bit358_6_88_10[i][j][k] = (byte)(10 - packet.ReadBit());                              bit358_6_88_C[i][j][k] = !packet.ReadBit();                              bit358_6_88_8[i][j][k] = !packet.ReadBit();                          }                            packet.StartBitStream(guid358_6[i][j]' 5' 3' 4' 1' 0' 6' 7);                          bits358_6_31[i][j] = packet.ReadBits(7);                          guid358_6[i][j][2] = packet.ReadBit();                          bit358_6_2E[i][j] = !packet.ReadBit();                          bits358_6_74[i][j] = packet.ReadBits(20);                            bit358_6_78_9[i][j] = new byte[bits358_6_74[i][j]];                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                              bit358_6_78_9[i][j][k] = (byte)(10 - packet.ReadBit());                            bit358_6_30[i][j] = packet.ReadBit();                          bits358_6_94[i][j] = packet.ReadBits(21);                      }                        guid358[i][6] = packet.ReadBit();                      bit358_C[i] = !packet.ReadBit();                      packet.StartBitStream(guid358[i]' 2' 5);                      bit358_24[i] = !packet.ReadBit();                      guid358[i][7] = packet.ReadBit();                  }                    bit330 = !packet.ReadBit();                  bit340 = !packet.ReadBit();                    bits388 = new uint[3];                  bits388_10 = new uint[3];                  bit388_1_10 = new byte[3][];                  bit388_1_C = new bool[3][];                  bit388_1_8 = new bool[3][];                    for (var i = 0; i < 3; ++i)                  {                      bits388_10[i] = packet.ReadBits(21);                      bits388[i] = packet.ReadBits(21);                      bit388_1_10[i] = new byte[bits388[i]];                      bit388_1_C[i] = new bool[bits388[i]];                      bit388_1_8[i] = new bool[bits388[i]];                        for (var j = 0; j < bits388[i]; ++j)                      {                          bit388_1_8[i][j] = !packet.ReadBit();                          bit388_1_10[i][j] = (byte)(10 - packet.ReadBit());                          bit388_1_C[i][j] = !packet.ReadBit();                      }                  }                    bit33C = !packet.ReadBit();                  bit341 = !packet.ReadBit();                  bit338 = !packet.ReadBit();                  bit332 = !packet.ReadBit();                  packet.ReadBit(); // fake bit                  packet.ReadBit("bit351"' index);                  packet.ReadBit("bit350"' index);                  packet.StartBitStream(CreatorGUID' 2' 7' 0' 5' 1' 3' 6' 4);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasSceneObjectData)              {                  for (var i = 0; i < 2; ++i)                  {                      for (var j = 0; j < bits358_10[i]; ++j)                      {                          for (var k = 0; k < bits358_6_74[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+78+0"' index' i' j' k);                              packet.ReadInt16("short358+6+78+3"' index' i' j' k);                              packet.ReadByte("byte358+6+78+8"' index' i' j' k);                              packet.ReadInt16("short358+6+78+2"' index' i' j' k);                              if (bit358_6_78_9[i][j][k] != 9)                                  packet.ReadByte("byte358+6+78+9"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 6);                          for (var k = 0; k < bits358_6_84[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+88+4"' index' i' j' k);                              packet.ReadInt32("int358+6+88+0"' index' i' j' k);                              if (bit358_6_88_8[i][j][k])                                  packet.ReadInt32("int358+6+88+8"' index' i' j' k);                                if (bit358_6_88_C[i][j][k])                                  packet.ReadInt32("int358+6+88+C"' index' i' j' k);                                if (bit358_6_88_10[i][j][k] != 9)                                  packet.ReadByte("byte358+6+88+10"' index' i' j' k);                          }                            packet.ReadInt32("int358+6+28"' index' i' j);                          packet.ReadXORBytes(guid358_6[i][j]' 5' 3);                          packet.ReadInt32("int358+6+24"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 1);                          packet.ReadInt32("Int358+6+8"' index' i' j);                          packet.ReadInt16("short358+6+2C"' index' i' j);                          packet.ReadInt32("int358+6+C"' index' i' j);                          if (!bit358_6_30[i][j])                              packet.ReadByte("byte358+6+30"' index' i' j);                            for (var k = 0; k < bits358_6_94[i][j]; ++k)                          {                              packet.ReadInt32("int358+6+98+4"' index' i' j' k);                              packet.ReadInt32("int358+6+98+0"' index' i' j' k);                          }                            packet.ReadXORByte(guid358_6[i][j]' 0);                          packet.ReadWoWString("String358+6+31"' (int)bits358_6_31[i][j]' index' i' j);                          packet.ReadInt32("int358+6+10"' index' i' j);                          packet.ReadInt16("short358+6+16"' index' i' j);                          packet.ReadInt16("short358+6+14"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 2);                          packet.ReadInt32("int358+6+18"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 4);                            if (bit358_6_2E[i][j])                              packet.ReadInt16("short358+6+2E"' index' i' j);                            packet.ReadInt32("int358+6+1C"' index' i' j);                          packet.ReadInt32("int358+6+20"' index' i' j);                          packet.ReadXORByte(guid358_6[i][j]' 7);                            packet.WriteGuid("Guid 358_6"' guid358_6[i][j]' index' i' j);                      }                        packet.ReadXORBytes(guid358[i]' 0' 7);                      packet.ReadByte("byte358+25"' index' i);                      if (bit358_24[i])                          packet.ReadInt32("int358+C"' index' i);                        packet.ReadXORBytes(guid358[i]' 5' 4);                      if (!bit358_20[i])                          packet.ReadByte("byte358+24"' index' i);                        if (bit358_C[i])                          packet.ReadInt16("Short358+10"' index' i);                        packet.ReadXORBytes(guid358[i]' 1' 2' 3' 6);                      packet.ReadInt32("int358+8"' index' i);                      packet.WriteGuid("Guid358"' guid358[i]' index' i);                  }                    for (var i = 0; i < 3; ++i)                  {                      for (var j = 0; j < bits388_10[i]; ++j)                      {                          packet.ReadInt32("int388+6+4"' index' i' j);                          packet.ReadInt32("int388+6+0"' index' i' j);                      }                        for (var j = 0; j < bits388[i]; ++j)                      {                          packet.ReadInt32("int388+1+0"' index' i' j);                          if (bit388_1_C[i][j])                              packet.ReadInt32("int388+1+C"' index' i' j);                            if (bit388_1_8[i][j])                              packet.ReadInt32("int388+1+8"' index' i' j);                            if (bit388_1_10[i][j] != 9)                              packet.ReadByte("byte388+1+10"' index' i' j);                            packet.ReadInt32("int388+1+4"' index' i' j);                      }                  }                    if (bit338)                      packet.ReadInt32("Int338"' index);                  packet.ParseBitStream(CreatorGUID' 3' 5' 4' 2' 7' 6' 0' 1);                    if (bit33C)                      packet.ReadInt32("Int33C"' index);                    if (bit341)                      packet.ReadByte("Byte341"' index);                    if (bit340)                      packet.ReadByte("Byte340"' index);                    packet.ReadInt32("Int334"' index);                  if (bit332)                      packet.ReadInt16("Short332"' index);                    if (bit330)                      packet.ReadInt16("Short318"' index);                    packet.WriteGuid("Creator GUID"' CreatorGUID' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  moveInfo.Position.Y = packet.ReadSingle();                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadInt32("Spline Full Time"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          packet.ReadSingle("Spline Duration Multiplier Next"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                  }                    packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatA8"' index);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                        packet.ReadUInt32("Time Fallen"' index);                      packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 5);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORByte(transportGuid' 2);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 3' 6);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 0);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 5);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("FloatB0"' index);                  packet.ReadSingle("FloatC0"' index);                  packet.ReadXORByte(guid1' 6);                  packet.ReadSingle("FloatC4"' index);                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    moveInfo.Position.X = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC8"' index);                  packet.ReadSingle("FloatB4"' index);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadXORByte(guid1' 3);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    packet.ReadSingle("FloatB8"' index);                  packet.ReadXORBytes(guid1' 7' 2);                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 0);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  moveInfo.Position.Y = packet.ReadSingle();                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadInt32("Spline Full Time"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          packet.ReadSingle("Spline Duration Multiplier Next"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                  }                    packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatA8"' index);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                        packet.ReadUInt32("Time Fallen"' index);                      packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 5);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORByte(transportGuid' 2);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 3' 6);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 0);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 5);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("FloatB0"' index);                  packet.ReadSingle("FloatC0"' index);                  packet.ReadXORByte(guid1' 6);                  packet.ReadSingle("FloatC4"' index);                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    moveInfo.Position.X = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC8"' index);                  packet.ReadSingle("FloatB4"' index);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadXORByte(guid1' 3);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    packet.ReadSingle("FloatB8"' index);                  packet.ReadXORBytes(guid1' 7' 2);                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 0);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  moveInfo.Position.Y = packet.ReadSingle();                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadInt32("Spline Full Time"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          packet.ReadSingle("Spline Duration Multiplier Next"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                  }                    packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatA8"' index);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                        packet.ReadUInt32("Time Fallen"' index);                      packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 5);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORByte(transportGuid' 2);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 3' 6);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 0);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 5);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("FloatB0"' index);                  packet.ReadSingle("FloatC0"' index);                  packet.ReadXORByte(guid1' 6);                  packet.ReadSingle("FloatC4"' index);                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    moveInfo.Position.X = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC8"' index);                  packet.ReadSingle("FloatB4"' index);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadXORByte(guid1' 3);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    packet.ReadSingle("FloatB8"' index);                  packet.ReadXORBytes(guid1' 7' 2);                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 0);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  moveInfo.Position.Y = packet.ReadSingle();                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadInt32("Spline Full Time"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          packet.ReadSingle("Spline Duration Multiplier Next"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                  }                    packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatA8"' index);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                        packet.ReadUInt32("Time Fallen"' index);                      packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 5);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORByte(transportGuid' 2);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 3' 6);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 0);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 5);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("FloatB0"' index);                  packet.ReadSingle("FloatC0"' index);                  packet.ReadXORByte(guid1' 6);                  packet.ReadSingle("FloatC4"' index);                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    moveInfo.Position.X = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC8"' index);                  packet.ReadSingle("FloatB4"' index);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadXORByte(guid1' 3);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    packet.ReadSingle("FloatB8"' index);                  packet.ReadXORBytes(guid1' 7' 2);                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 0);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  moveInfo.Position.Y = packet.ReadSingle();                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadInt32("Spline Full Time"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          packet.ReadSingle("Spline Duration Multiplier Next"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                  }                    packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatA8"' index);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                        packet.ReadUInt32("Time Fallen"' index);                      packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 5);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORByte(transportGuid' 2);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 3' 6);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 0);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 5);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("FloatB0"' index);                  packet.ReadSingle("FloatC0"' index);                  packet.ReadXORByte(guid1' 6);                  packet.ReadSingle("FloatC4"' index);                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    moveInfo.Position.X = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC8"' index);                  packet.ReadSingle("FloatB4"' index);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadXORByte(guid1' 3);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    packet.ReadSingle("FloatB8"' index);                  packet.ReadXORBytes(guid1' 7' 2);                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 0);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  moveInfo.Position.Y = packet.ReadSingle();                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadInt32("Spline Full Time"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          packet.ReadSingle("Spline Duration Multiplier Next"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                  }                    packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatA8"' index);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                        packet.ReadUInt32("Time Fallen"' index);                      packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 5);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORByte(transportGuid' 2);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 3' 6);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 0);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 5);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("FloatB0"' index);                  packet.ReadSingle("FloatC0"' index);                  packet.ReadXORByte(guid1' 6);                  packet.ReadSingle("FloatC4"' index);                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    moveInfo.Position.X = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC8"' index);                  packet.ReadSingle("FloatB4"' index);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadXORByte(guid1' 3);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    packet.ReadSingle("FloatB8"' index);                  packet.ReadXORBytes(guid1' 7' 2);                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 0);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  moveInfo.Position.Y = packet.ReadSingle();                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadInt32("Spline Full Time"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          packet.ReadSingle("Spline Duration Multiplier Next"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                  }                    packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatA8"' index);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                        packet.ReadUInt32("Time Fallen"' index);                      packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 5);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORByte(transportGuid' 2);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 3' 6);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 0);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 5);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("FloatB0"' index);                  packet.ReadSingle("FloatC0"' index);                  packet.ReadXORByte(guid1' 6);                  packet.ReadSingle("FloatC4"' index);                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    moveInfo.Position.X = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC8"' index);                  packet.ReadSingle("FloatB4"' index);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadXORByte(guid1' 3);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    packet.ReadSingle("FloatB8"' index);                  packet.ReadXORBytes(guid1' 7' 2);                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 0);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  moveInfo.Position.Y = packet.ReadSingle();                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadInt32("Spline Full Time"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          packet.ReadSingle("Spline Duration Multiplier Next"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                  }                    packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatA8"' index);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                        packet.ReadUInt32("Time Fallen"' index);                      packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 5);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORByte(transportGuid' 2);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 3' 6);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 0);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 5);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("FloatB0"' index);                  packet.ReadSingle("FloatC0"' index);                  packet.ReadXORByte(guid1' 6);                  packet.ReadSingle("FloatC4"' index);                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    moveInfo.Position.X = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC8"' index);                  packet.ReadSingle("FloatB4"' index);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadXORByte(guid1' 3);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    packet.ReadSingle("FloatB8"' index);                  packet.ReadXORBytes(guid1' 7' 2);                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 0);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  moveInfo.Position.Y = packet.ReadSingle();                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadInt32("Spline Full Time"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          packet.ReadSingle("Spline Duration Multiplier Next"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                  }                    packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatA8"' index);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                        packet.ReadUInt32("Time Fallen"' index);                      packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 5);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORByte(transportGuid' 2);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 3' 6);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 0);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 5);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("FloatB0"' index);                  packet.ReadSingle("FloatC0"' index);                  packet.ReadXORByte(guid1' 6);                  packet.ReadSingle("FloatC4"' index);                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    moveInfo.Position.X = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC8"' index);                  packet.ReadSingle("FloatB4"' index);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadXORByte(guid1' 3);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    packet.ReadSingle("FloatB8"' index);                  packet.ReadXORBytes(guid1' 7' 2);                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 0);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  moveInfo.Position.Y = packet.ReadSingle();                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadInt32("Spline Full Time"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          packet.ReadSingle("Spline Duration Multiplier Next"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                  }                    packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatA8"' index);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                        packet.ReadUInt32("Time Fallen"' index);                      packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 5);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORByte(transportGuid' 2);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 3' 6);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 0);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 5);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("FloatB0"' index);                  packet.ReadSingle("FloatC0"' index);                  packet.ReadXORByte(guid1' 6);                  packet.ReadSingle("FloatC4"' index);                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    moveInfo.Position.X = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC8"' index);                  packet.ReadSingle("FloatB4"' index);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadXORByte(guid1' 3);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    packet.ReadSingle("FloatB8"' index);                  packet.ReadXORBytes(guid1' 7' 2);                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 0);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  moveInfo.Position.Y = packet.ReadSingle();                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadInt32("Spline Full Time"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          packet.ReadSingle("Spline Duration Multiplier Next"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                  }                    packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatA8"' index);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                        packet.ReadUInt32("Time Fallen"' index);                      packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 5);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORByte(transportGuid' 2);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 3' 6);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 0);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 5);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("FloatB0"' index);                  packet.ReadSingle("FloatC0"' index);                  packet.ReadXORByte(guid1' 6);                  packet.ReadSingle("FloatC4"' index);                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    moveInfo.Position.X = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC8"' index);                  packet.ReadSingle("FloatB4"' index);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadXORByte(guid1' 3);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    packet.ReadSingle("FloatB8"' index);                  packet.ReadXORBytes(guid1' 7' 2);                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 0);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  moveInfo.Position.Y = packet.ReadSingle();                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadInt32("Spline Full Time"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          packet.ReadSingle("Spline Duration Multiplier Next"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                  }                    packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatA8"' index);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                        packet.ReadUInt32("Time Fallen"' index);                      packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 5);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORByte(transportGuid' 2);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 3' 6);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 0);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 5);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("FloatB0"' index);                  packet.ReadSingle("FloatC0"' index);                  packet.ReadXORByte(guid1' 6);                  packet.ReadSingle("FloatC4"' index);                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    moveInfo.Position.X = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC8"' index);                  packet.ReadSingle("FloatB4"' index);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadXORByte(guid1' 3);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    packet.ReadSingle("FloatB8"' index);                  packet.ReadXORBytes(guid1' 7' 2);                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 0);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  moveInfo.Position.Y = packet.ReadSingle();                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadInt32("Spline Full Time"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          packet.ReadSingle("Spline Duration Multiplier Next"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                  }                    packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatA8"' index);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                        packet.ReadUInt32("Time Fallen"' index);                      packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 5);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORByte(transportGuid' 2);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 3' 6);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 0);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 5);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("FloatB0"' index);                  packet.ReadSingle("FloatC0"' index);                  packet.ReadXORByte(guid1' 6);                  packet.ReadSingle("FloatC4"' index);                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    moveInfo.Position.X = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC8"' index);                  packet.ReadSingle("FloatB4"' index);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadXORByte(guid1' 3);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    packet.ReadSingle("FloatB8"' index);                  packet.ReadXORBytes(guid1' 7' 2);                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 0);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  moveInfo.Position.Y = packet.ReadSingle();                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadInt32("Spline Full Time"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          packet.ReadSingle("Spline Duration Multiplier Next"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                  }                    packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatA8"' index);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                        packet.ReadUInt32("Time Fallen"' index);                      packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 5);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORByte(transportGuid' 2);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 3' 6);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 0);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 5);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("FloatB0"' index);                  packet.ReadSingle("FloatC0"' index);                  packet.ReadXORByte(guid1' 6);                  packet.ReadSingle("FloatC4"' index);                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    moveInfo.Position.X = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC8"' index);                  packet.ReadSingle("FloatB4"' index);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadXORByte(guid1' 3);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    packet.ReadSingle("FloatB8"' index);                  packet.ReadXORBytes(guid1' 7' 2);                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 0);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  moveInfo.Position.Y = packet.ReadSingle();                  if (moveInfo.HasSplineData)                  {                      if (hasFullSpline)                      {                          for (var i = 0u; i < splineCount; ++i)                          {                              var wp = new Vector3                              {                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()'                                  Y = packet.ReadSingle()                              };                                packet.AddValue("Spline Waypoint"' wp' index' i);                          }                            packet.ReadInt32("Spline Time"' index); // if need swap with "Spline Full Time"                          if (hasSplineVerticalAcceleration)                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            if (bit130)                          {                              for (var i = 0; i < bits11C; ++i)                              {                                  packet.ReadSingle("Float13C+1"' index' i);                                  packet.ReadSingle("Float13C+0"' index' i);                              }                          }                            packet.ReadInt32("Spline Full Time"' index);                            if (hasSplineStartTime)                              packet.ReadInt32("Spline Start Time"' index);                            var type = packet.ReadByte();                          switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            packet.ReadSingle("Spline Duration Multiplier"' index); // if need swap with "Spline Duration Multiplier Next"                          packet.ReadSingle("Spline Duration Multiplier Next"' index);                            if (splineType == SplineType.FacingSpot)                          {                              var point = new Vector3                              {                                  Y = packet.ReadSingle()'                                  Z = packet.ReadSingle()'                                  X = packet.ReadSingle()                              };                                packet.AddValue("Facing Spot"' point' index);                          }                            if (splineType == SplineType.FacingAngle)                              packet.ReadSingle("Facing Angle"' index);                      }                        moveInfo.Position.Y = packet.ReadSingle();                      moveInfo.Position.Z = packet.ReadSingle();                      moveInfo.Position.X = packet.ReadSingle();                      packet.ReadInt32("Spline Id"' index);                  }                    packet.ReadSingle("FloatBC"' index);                  packet.ReadSingle("FloatAC"' index);                  packet.ReadXORByte(guid1' 4);                  packet.ReadSingle("FloatA8"' index);                    if (hasFallData)                  {                      if (hasFallDirection)                      {                          packet.ReadSingle("Jump Velocity"' index);                          packet.ReadSingle("Jump Sin"' index);                          packet.ReadSingle("Jump Cos"' index);                      }                        packet.ReadUInt32("Time Fallen"' index);                      packet.ReadSingle("Fall Start Velocity"' index);                  }                    if (hasTransportData)                  {                      packet.ReadXORByte(transportGuid' 5);                      var seat = packet.ReadByte("Transport Seat"' index);                      packet.ReadXORByte(transportGuid' 2);                      moveInfo.TransportOffset.O = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 4' 7);                      if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadUInt32("Transport Time"' index);                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORBytes(transportGuid' 3' 6);                      moveInfo.TransportOffset.X = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 0);                      if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                      packet.ReadXORByte(transportGuid' 1);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                          Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 5);                    if (hasTimestamp)                      packet.ReadUInt32("Time"' index);                    for (var i = 0; i < bits90; ++i)                      packet.ReadInt32("Int8C"' index' i);                    if (bitA0)                      packet.ReadInt32("Int98"' index);                    packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("FloatB0"' index);                  packet.ReadSingle("FloatC0"' index);                  packet.ReadXORByte(guid1' 6);                  packet.ReadSingle("FloatC4"' index);                    for (var i = 0; i < bits160; ++i)                  {                      packet.ReadSingle("Float16C+3"' index' i);                      packet.ReadSingle("Float16C+5"' index' i);                      packet.ReadSingle("Float16C+1"' index' i);                      packet.ReadInt32("Int16C+0"' index' i);                      packet.ReadInt32("Int16C+4"' index' i);                      packet.ReadSingle("Float16C+2"' index' i);                  }                    moveInfo.Position.X = packet.ReadSingle();                  if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle();                    packet.ReadSingle("FloatC8"' index);                  packet.ReadSingle("FloatB4"' index);                  if (hasSplineElevation)                      packet.ReadSingle("Spline Elevation"' index);                    packet.ReadXORByte(guid1' 3);                  if (hasPitch)                      packet.ReadSingle("Pitch"' index);                    packet.ReadSingle("FloatB8"' index);                  packet.ReadXORBytes(guid1' 7' 2);                  moveInfo.Position.Z = packet.ReadSingle();                  packet.ReadXORByte(guid1' 0);                    packet.WriteGuid("GUID1"' guid1' index);                  packet.AddValue("Position"' moveInfo.Position' index);                  packet.AddValue("Orientation"' moveInfo.Orientation' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    packet.ReadXORBytes(goTransportGuid' 4' 2' 7' 3);                  packet.ReadUInt32("GO Transport Time"' index);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 1);                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  packet.ReadSByte("GO Transport Seat"' index);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORByte(goTransportGuid' 6);                  moveInfo.TransportOffset.O = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 5' 0);                  moveInfo.TransportOffset.X = packet.ReadSingle();                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    packet.ReadXORBytes(goTransportGuid' 4' 2' 7' 3);                  packet.ReadUInt32("GO Transport Time"' index);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 1);                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  packet.ReadSByte("GO Transport Seat"' index);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORByte(goTransportGuid' 6);                  moveInfo.TransportOffset.O = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 5' 0);                  moveInfo.TransportOffset.X = packet.ReadSingle();                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    packet.ReadXORBytes(goTransportGuid' 4' 2' 7' 3);                  packet.ReadUInt32("GO Transport Time"' index);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 1);                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  packet.ReadSByte("GO Transport Seat"' index);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORByte(goTransportGuid' 6);                  moveInfo.TransportOffset.O = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 5' 0);                  moveInfo.TransportOffset.X = packet.ReadSingle();                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    packet.ReadXORBytes(goTransportGuid' 4' 2' 7' 3);                  packet.ReadUInt32("GO Transport Time"' index);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 1);                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  packet.ReadSByte("GO Transport Seat"' index);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORByte(goTransportGuid' 6);                  moveInfo.TransportOffset.O = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 5' 0);                  moveInfo.TransportOffset.X = packet.ReadSingle();                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    packet.ReadXORBytes(goTransportGuid' 4' 2' 7' 3);                  packet.ReadUInt32("GO Transport Time"' index);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 1);                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  packet.ReadSByte("GO Transport Seat"' index);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORByte(goTransportGuid' 6);                  moveInfo.TransportOffset.O = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 5' 0);                  moveInfo.TransportOffset.X = packet.ReadSingle();                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasGameObjectPosition)              {                  if (hasGOTransportTime2)                      packet.ReadUInt32("GO Transport Time 2"' index);                    packet.ReadXORBytes(goTransportGuid' 4' 2' 7' 3);                  packet.ReadUInt32("GO Transport Time"' index);                  moveInfo.TransportOffset.Y = packet.ReadSingle();                  packet.ReadXORByte(goTransportGuid' 1);                  moveInfo.TransportOffset.Z = packet.ReadSingle();                  packet.ReadSByte("GO Transport Seat"' index);                  if (hasGOTransportTime3)                      packet.ReadUInt32("GO Transport Time 3"' index);                    packet.ReadXORByte(goTransportGuid' 6);                  moveInfo.TransportOffset.O = packet.ReadSingle();                  packet.ReadXORBytes(goTransportGuid' 5' 0);                  moveInfo.TransportOffset.X = packet.ReadSingle();                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("GO Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("GO Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 4' 6' 3' 0' 7' 1' 2' 5);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 4' 6' 3' 0' 7' 1' 2' 5);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 4' 6' 3' 0' 7' 1' 2' 5);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 4' 6' 3' 0' 7' 1' 2' 5);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 4' 6' 3' 0' 7' 1' 2' 5);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 4' 6' 3' 0' 7' 1' 2' 5);                  packet.WriteGuid("Attacking GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 3' 6' 2' 7' 0' 1' 4);                  packet.ParseBitStream(facingTargetGuid' 7' 0' 1' 4' 2' 5' 3' 6);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 3' 6' 2' 7' 0' 1' 4);                  packet.ParseBitStream(facingTargetGuid' 7' 0' 1' 4' 2' 5' 3' 6);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 3' 6' 2' 7' 0' 1' 4);                  packet.ParseBitStream(facingTargetGuid' 7' 0' 1' 4' 2' 5' 3' 6);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 3' 6' 2' 7' 0' 1' 4);                  packet.ParseBitStream(facingTargetGuid' 7' 0' 1' 4' 2' 5' 3' 6);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 3' 6' 2' 7' 0' 1' 4);                  packet.ParseBitStream(facingTargetGuid' 7' 0' 1' 4' 2' 5' 3' 6);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 3' 6' 2' 7' 0' 1' 4);                  packet.ParseBitStream(facingTargetGuid' 7' 0' 1' 4' 2' 5' 3' 6);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 3' 6' 2' 7' 0' 1' 4);                  packet.ParseBitStream(facingTargetGuid' 7' 0' 1' 4' 2' 5' 3' 6);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 3' 6' 2' 7' 0' 1' 4);                  packet.ParseBitStream(facingTargetGuid' 7' 0' 1' 4' 2' 5' 3' 6);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 3' 6' 2' 7' 0' 1' 4);                  packet.ParseBitStream(facingTargetGuid' 7' 0' 1' 4' 2' 5' 3' 6);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 3' 6' 2' 7' 0' 1' 4);                  packet.ParseBitStream(facingTargetGuid' 7' 0' 1' 4' 2' 5' 3' 6);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 3' 6' 2' 7' 0' 1' 4);                  packet.ParseBitStream(facingTargetGuid' 7' 0' 1' 4' 2' 5' 3' 6);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 3' 6' 2' 7' 0' 1' 4);                  packet.ParseBitStream(facingTargetGuid' 7' 0' 1' 4' 2' 5' 3' 6);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                  var facingTargetGuid = new byte[8];                  facingTargetGuid = packet.StartBitStream(5' 3' 6' 2' 7' 0' 1' 4);                  packet.ParseBitStream(facingTargetGuid' 7' 0' 1' 4' 2' 5' 3' 6);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Missing Default,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,HandleUpdateObject,The following switch statement is missing a default case: switch (typeString)                  {                      case "Values":                      {                          var guid = packet.ReadPackedGuid("GUID"' i);                            WoWObject obj;                          var updates = CoreParsers.UpdateHandler.ReadValuesUpdateBlock(packet' guid.GetObjectType()' i' false);                            if (Storage.Objects.TryGetValue(guid' out obj))                          {                              if (obj.ChangedUpdateFieldsList == null)                                  obj.ChangedUpdateFieldsList = new List<Dictionary<int' UpdateField>>();                              obj.ChangedUpdateFieldsList.Add(updates);                          }                            break;                      }                      case "CreateObject1":                      case "CreateObject2": // Might != CreateObject1 on Cata                      {                          var guid = packet.ReadPackedGuid("GUID"' i);                          ReadCreateObjectBlock(packet' guid' map' i);                          break;                      }                      case "DestroyObjects":                      {                          CoreParsers.UpdateHandler.ReadObjectsBlock(packet' i);                          break;                      }                  }
Missing Default,WowPacketParserModule.V5_4_1_17538.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_1_17538\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following switch statement is missing a default case: switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }
