Implementation smell,Namespace,Class,File,Method,Description
Long Method,WowPacketParserModule.V5_4_8_18291.Hotfix,HotfixSerializer<T>,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Hotfix\HotfixSerializer.cs,GenerateDeserializer,The method has 129 lines of code.
Long Method,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The method has 110 lines of code.
Long Method,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The method has 129 lines of code.
Long Method,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandlePartyMemberStats,The method has 121 lines of code.
Long Method,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The method has 307 lines of code.
Long Method,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The method has 143 lines of code.
Long Method,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The method has 220 lines of code.
Long Method,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The method has 171 lines of code.
Long Method,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The method has 207 lines of code.
Long Method,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The method has 218 lines of code.
Long Method,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The method has 224 lines of code.
Long Method,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The method has 135 lines of code.
Long Method,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The method has 447 lines of code.
Complex Method,WowPacketParserModule.V5_4_8_18291.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ActionBarHandler.cs,HandleActionButtons,Cyclomatic complexity of the method is 21
Complex Method,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,Cyclomatic complexity of the method is 19
Complex Method,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackerStateUpdate,Cyclomatic complexity of the method is 12
Complex Method,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,Cyclomatic complexity of the method is 16
Complex Method,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,Cyclomatic complexity of the method is 10
Complex Method,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,Cyclomatic complexity of the method is 8
Complex Method,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandlePartyMemberStats,Cyclomatic complexity of the method is 39
Complex Method,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailListResult,Cyclomatic complexity of the method is 11
Complex Method,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,Cyclomatic complexity of the method is 22
Complex Method,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossip,Cyclomatic complexity of the method is 9
Complex Method,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,Cyclomatic complexity of the method is 33
Complex Method,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,Cyclomatic complexity of the method is 12
Complex Method,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQueryResponse,Cyclomatic complexity of the method is 9
Complex Method,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,Cyclomatic complexity of the method is 33
Complex Method,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,Cyclomatic complexity of the method is 30
Complex Method,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,Cyclomatic complexity of the method is 33
Complex Method,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,Cyclomatic complexity of the method is 12
Complex Method,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,Cyclomatic complexity of the method is 16
Complex Method,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,Cyclomatic complexity of the method is 69
Long Statement,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The length of the statement  "                packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(guid2[i]' 0)' i); // guid and counter is switched' was lazy to remake it " is 130.
Long Statement,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandlePartyMemberStats,The length of the statement  "            var updateFlagPacket = new Packet(data' packet.Opcode' packet.Time' packet.Direction' packet.Number' packet.Writer' packet.FileName); " is 133.
Long Statement,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossip,The length of the statement  "                Storage.GossipMenuOptionActions.Add(new GossipMenuOptionAction { MenuId = lastGossipOption.MenuId' OptionIndex = lastGossipOption.OptionIndex' ActionMenuId = gossip.Entry }' packet.TimeSpan); " is 191.
Long Statement,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleGossipPoi,The length of the statement  "                Storage.GossipMenuOptionActions.Add(new GossipMenuOptionAction { MenuId = lastGossipOption.MenuId' OptionIndex = lastGossipOption.OptionIndex' ActionPoiId = gossipPOI.ID }' packet.TimeSpan); " is 190.
Long Statement,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcTextUpdate,The length of the statement  "            Packet pkt = new Packet(data' packet.Opcode' packet.Time' packet.Direction' packet.Number' packet.Writer' packet.FileName); " is 123.
Long Statement,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleServerTrainerList,The length of the statement  "                Storage.GossipMenuOptionTrainers.Add(new GossipMenuOptionTrainer { MenuId = lastGossipOption.MenuId' OptionIndex = lastGossipOption.OptionIndex' TrainerId = trainer.Id }' packet.TimeSpan); " is 188.
Long Statement,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleServerTrainerList,The length of the statement  "                Storage.CreatureDefaultTrainers.Add(new CreatureDefaultTrainer { CreatureId = lastGossipOption.Guid.GetEntry()' TrainerId = trainer.Id }' packet.TimeSpan); " is 155.
Long Statement,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleDBReply,The length of the statement  "            var db2File = new Packet(data' packet.Opcode' packet.Time' packet.Direction' packet.Number' packet.Writer' packet.FileName); " is 124.
Long Statement,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The length of the statement  "            packet.ReadUInt32("QuestTurnInPortrait");                                      // model Id' usually used in wanted or boss quests " is 129.
Long Statement,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadCreateObjectBlock,The length of the statement  "                CoreParsers.UpdateHandler.ProcessExistingObject(ref existObj' obj' guid); // can't do "ref Storage.Objects[guid].Item1 directly " is 127.
Complex Conditional,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The conditional expression  "moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature"  is complex.
Complex Conditional,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The conditional expression  "isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget"  is complex.
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AccountDataHandler.cs,HandleAccountDataTimes,The following statement contains a magic number: for (var i = 0; i < 8; ++i)              {                  packet.ReadTime("[" + (AccountDataType)i + "]" + " Time");              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.ReadBitsE<AccountDataType>("Data Type"' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.StartBitStream(guid' 5' 1' 3' 7' 0' 4' 2' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.StartBitStream(guid' 5' 1' 3' 7' 0' 4' 2' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.StartBitStream(guid' 5' 1' 3' 7' 0' 4' 2' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.StartBitStream(guid' 5' 1' 3' 7' 0' 4' 2' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.StartBitStream(guid' 5' 1' 3' 7' 0' 4' 2' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.StartBitStream(guid' 5' 1' 3' 7' 0' 4' 2' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.ReadXORBytes(guid' 3' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.ReadXORBytes(guid' 3' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.ReadXORBytes(guid' 7' 4' 0' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.ReadXORBytes(guid' 7' 4' 0' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.ReadXORBytes(guid' 7' 4' 0' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AccountDataHandler.cs,HandleServerUpdateAccountData,The following statement contains a magic number: packet.ReadXORBytes(guid' 7' 4' 0' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AccountDataHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AccountDataHandler.cs,HandleRequestAccountData,The following statement contains a magic number: packet.ReadBitsE<AccountDataType>("Data Type"' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: var counter = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: var accountId = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: counter[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: accountId[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: counter[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: accountId[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: counter[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: accountId[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: counter[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: accountId[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: counter[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: accountId[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadBits("Flags"' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: accountId[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: counter[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(accountId' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(counter' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(accountId' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(accountId' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(counter' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(counter' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(counter' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(counter' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(accountId' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(accountId' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(counter' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaUpdateAccount,The following statement contains a magic number: packet.ReadXORByte(accountId' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 2' 3' 7' 1' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 2' 3' 7' 1' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 2' 3' 7' 1' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 2' 3' 7' 1' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 2' 3' 7' 1' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 2' 3' 7' 1' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleCriteriaPlayer,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: var bits20 = packet.ReadBits("Criteria count"' 19);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    guid2[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                  guid2[i][6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    guid2[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                  guid2[i][6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    guid2[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                  guid2[i][6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    guid2[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                  guid2[i][6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    guid2[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                  guid2[i][6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    guid2[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                  guid2[i][6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    guid2[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                  guid2[i][6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    guid2[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                  guid2[i][6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    guid2[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                  guid2[i][6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    guid2[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                  guid2[i][6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    guid2[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                  guid2[i][6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    guid2[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                  guid2[i][6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    guid2[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                  guid2[i][6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    guid2[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                  guid2[i][6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  counter[i] = new byte[8];                  guid2[i] = new byte[8];                    guid2[i][3] = packet.ReadBit();                  counter[i][3] = packet.ReadBit();                  counter[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();                  counter[i][7] = packet.ReadBit();                  guid2[i][1] = packet.ReadBit();                  guid2[i][5] = packet.ReadBit();                  counter[i][2] = packet.ReadBit();                  counter[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  counter[i][4] = packet.ReadBit();                  counter[i][0] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  counter[i][5] = packet.ReadBit();                  guid2[i][4] = packet.ReadBit();                  flags[i] = (byte)(packet.ReadBits(4) & 0xFFu);                  guid2[i][6] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: var bits10 = packet.ReadBits("Achievement count"' 20);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 0' 7' 1' 5' 2' 4' 6' 3);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 0' 7' 1' 5' 2' 4' 6' 3);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 0' 7' 1' 5' 2' 4' 6' 3);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 0' 7' 1' 5' 2' 4' 6' 3);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 0' 7' 1' 5' 2' 4' 6' 3);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 0' 7' 1' 5' 2' 4' 6' 3);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  guid1[i] = new byte[8];                  packet.StartBitStream(guid1[i]' 0' 7' 1' 5' 2' 4' 6' 3);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadPackedTime("Time"' i);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 3);                    packet.WriteGuid("Guid3"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadPackedTime("Time"' i);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 3);                    packet.WriteGuid("Guid3"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadPackedTime("Time"' i);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 3);                    packet.WriteGuid("Guid3"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadPackedTime("Time"' i);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 3);                    packet.WriteGuid("Guid3"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadPackedTime("Time"' i);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 3);                    packet.WriteGuid("Guid3"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  packet.ReadInt32<AchievementId>("Achievement Id"' i);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadXORByte(guid1[i]' 5);                  packet.ReadXORByte(guid1[i]' 7);                  packet.ReadInt32("Realm Id"' i);                  packet.ReadPackedTime("Time"' i);                  packet.ReadXORByte(guid1[i]' 0);                  packet.ReadXORByte(guid1[i]' 4);                  packet.ReadXORByte(guid1[i]' 1);                  packet.ReadXORByte(guid1[i]' 6);                  packet.ReadXORByte(guid1[i]' 2);                  packet.ReadXORByte(guid1[i]' 3);                    packet.WriteGuid("Guid3"' guid1[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadUInt32("Timer 1"' i);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadInt32("Criteria ID"' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadUInt32("Timer 2"' i);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadPackedTime("Time"' i);                    packet.WriteGuid("Guid2"' guid2[i]' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(guid2[i]' 0)' i); // guid and counter is switched' was lazy to remake it                  packet.WriteGuid("Criteria GUID"' counter[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadUInt32("Timer 1"' i);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadInt32("Criteria ID"' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadUInt32("Timer 2"' i);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadPackedTime("Time"' i);                    packet.WriteGuid("Guid2"' guid2[i]' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(guid2[i]' 0)' i); // guid and counter is switched' was lazy to remake it                  packet.WriteGuid("Criteria GUID"' counter[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadUInt32("Timer 1"' i);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadInt32("Criteria ID"' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadUInt32("Timer 2"' i);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadPackedTime("Time"' i);                    packet.WriteGuid("Guid2"' guid2[i]' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(guid2[i]' 0)' i); // guid and counter is switched' was lazy to remake it                  packet.WriteGuid("Criteria GUID"' counter[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadUInt32("Timer 1"' i);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadInt32("Criteria ID"' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadUInt32("Timer 2"' i);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadPackedTime("Time"' i);                    packet.WriteGuid("Guid2"' guid2[i]' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(guid2[i]' 0)' i); // guid and counter is switched' was lazy to remake it                  packet.WriteGuid("Criteria GUID"' counter[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadUInt32("Timer 1"' i);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadInt32("Criteria ID"' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadUInt32("Timer 2"' i);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadPackedTime("Time"' i);                    packet.WriteGuid("Guid2"' guid2[i]' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(guid2[i]' 0)' i); // guid and counter is switched' was lazy to remake it                  packet.WriteGuid("Criteria GUID"' counter[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadUInt32("Timer 1"' i);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadInt32("Criteria ID"' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadUInt32("Timer 2"' i);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadPackedTime("Time"' i);                    packet.WriteGuid("Guid2"' guid2[i]' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(guid2[i]' 0)' i); // guid and counter is switched' was lazy to remake it                  packet.WriteGuid("Criteria GUID"' counter[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadUInt32("Timer 1"' i);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadInt32("Criteria ID"' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadUInt32("Timer 2"' i);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadPackedTime("Time"' i);                    packet.WriteGuid("Guid2"' guid2[i]' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(guid2[i]' 0)' i); // guid and counter is switched' was lazy to remake it                  packet.WriteGuid("Criteria GUID"' counter[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadUInt32("Timer 1"' i);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadInt32("Criteria ID"' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadUInt32("Timer 2"' i);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadPackedTime("Time"' i);                    packet.WriteGuid("Guid2"' guid2[i]' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(guid2[i]' 0)' i); // guid and counter is switched' was lazy to remake it                  packet.WriteGuid("Criteria GUID"' counter[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadUInt32("Timer 1"' i);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadInt32("Criteria ID"' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadUInt32("Timer 2"' i);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadPackedTime("Time"' i);                    packet.WriteGuid("Guid2"' guid2[i]' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(guid2[i]' 0)' i); // guid and counter is switched' was lazy to remake it                  packet.WriteGuid("Criteria GUID"' counter[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadUInt32("Timer 1"' i);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadInt32("Criteria ID"' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadUInt32("Timer 2"' i);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadPackedTime("Time"' i);                    packet.WriteGuid("Guid2"' guid2[i]' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(guid2[i]' 0)' i); // guid and counter is switched' was lazy to remake it                  packet.WriteGuid("Criteria GUID"' counter[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadUInt32("Timer 1"' i);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadInt32("Criteria ID"' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadUInt32("Timer 2"' i);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadPackedTime("Time"' i);                    packet.WriteGuid("Guid2"' guid2[i]' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(guid2[i]' 0)' i); // guid and counter is switched' was lazy to remake it                  packet.WriteGuid("Criteria GUID"' counter[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAllAchievementDataPlayer,The following statement contains a magic number: for (var i = 0; i < bits20; ++i)              {                  packet.ReadXORByte(guid2[i]' 7);                  packet.ReadUInt32("Timer 1"' i);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(counter[i]' 1);                  packet.ReadInt32("Criteria ID"' i);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadXORByte(counter[i]' 0);                  packet.ReadXORByte(counter[i]' 4);                  packet.ReadXORByte(counter[i]' 6);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(counter[i]' 7);                  packet.ReadXORByte(counter[i]' 2);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(counter[i]' 3);                  packet.ReadUInt32("Timer 2"' i);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(counter[i]' 5);                  packet.ReadPackedTime("Time"' i);                    packet.WriteGuid("Guid2"' guid2[i]' i);                    packet.AddValue("Criteria Flags"' flags[i]' i);                  packet.AddValue("Criteria Counter"' BitConverter.ToUInt64(guid2[i]' 0)' i); // guid and counter is switched' was lazy to remake it                  packet.WriteGuid("Criteria GUID"' counter[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,AchievementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\AchievementHandler.cs,HandleAchievementEarned,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: const int buttonCount = 132;
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)              {                  buttons[i] = new byte[8];                  buttons[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)              {                  buttons[i] = new byte[8];                  buttons[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  buttons[i][2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ActionBarHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ActionBarHandler.cs,HandleActionButtons,The following statement contains a magic number: for (int i = 0; i < buttonCount; i++)                  packet.ReadXORByte(buttons[i]' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,BattlegroundHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\BattlegroundHandler.cs,HandleBattlemasterJoin434,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,BattlegroundHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\BattlegroundHandler.cs,HandleBattlemasterJoin434,The following statement contains a magic number: for (var i = 0; i < 2; ++i)                  packet.ReadInt32("Blacklisted MapId"' i);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,BattlegroundHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\BattlegroundHandler.cs,HandleBattlemasterJoin434,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,BattlegroundHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\BattlegroundHandler.cs,HandleBattlemasterJoin434,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,BattlegroundHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\BattlegroundHandler.cs,HandleBattlemasterJoin434,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,BattlegroundHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\BattlegroundHandler.cs,HandleBattlemasterJoin434,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,BattlegroundHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\BattlegroundHandler.cs,HandleBattlemasterJoin434,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,BattlegroundHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\BattlegroundHandler.cs,HandleBattlemasterJoin434,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,BattlegroundHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\BattlegroundHandler.cs,HandleBattlemasterJoin434,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 2' 4' 5' 0' 6' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,BattlegroundHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\BattlegroundHandler.cs,HandleBattlemasterJoin434,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 2' 4' 5' 0' 6' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,BattlegroundHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\BattlegroundHandler.cs,HandleBattlemasterJoin434,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 2' 4' 5' 0' 6' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,BattlegroundHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\BattlegroundHandler.cs,HandleBattlemasterJoin434,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 2' 4' 5' 0' 6' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,BattlegroundHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\BattlegroundHandler.cs,HandleBattlemasterJoin434,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 2' 4' 5' 0' 6' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,BattlegroundHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\BattlegroundHandler.cs,HandleBattlemasterJoin434,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 2' 4' 5' 0' 6' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandlePowerUpdate,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandlePowerUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 7' 5' 2' 3' 0' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandlePowerUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 7' 5' 2' 3' 0' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandlePowerUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 7' 5' 2' 3' 0' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandlePowerUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 7' 5' 2' 3' 0' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandlePowerUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 7' 5' 2' 3' 0' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandlePowerUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 4' 6' 7' 5' 2' 3' 0' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandlePowerUpdate,The following statement contains a magic number: var count = packet.ReadBits("Count"' 21);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandlePowerUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandlePowerUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandlePowerUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandlePowerUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandlePowerUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandlePowerUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandleInitCurrency,The following statement contains a magic number: var count = packet.ReadBits("Count"' 21);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandleInitCurrency,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  hasWeekCount[i] = packet.ReadBit();     // +28                  flags[i] = packet.ReadBits(5);          // +32                  hasWeekCap[i] = packet.ReadBit();       // +20                  hasSeasonTotal[i] = packet.ReadBit();   // +12              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CharacterHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CharacterHandler.cs,HandleLogXPGain,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleClientChatMessage,The following statement contains a magic number: var len = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleClientChatMessageWhisper,The following statement contains a magic number: var msgLen = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleClientChatMessageWhisper,The following statement contains a magic number: var recvName = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleClientChatMessageChannel434,The following statement contains a magic number: var channelNameLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleClientChatMessageChannel434,The following statement contains a magic number: var msgLen = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleMessageChatDND,The following statement contains a magic number: var len = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.StartBitStream(guid' 6' 7' 3' 2' 0' 5' 1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.StartBitStream(guid' 6' 7' 3' 2' 0' 5' 1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.StartBitStream(guid' 6' 7' 3' 2' 0' 5' 1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.StartBitStream(guid' 6' 7' 3' 2' 0' 5' 1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.StartBitStream(guid' 6' 7' 3' 2' 0' 5' 1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.StartBitStream(guid' 6' 7' 3' 2' 0' 5' 1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 1' 4' 2' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 1' 4' 2' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 1' 4' 2' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 1' 4' 2' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 1' 4' 2' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 1' 4' 2' 3' 7' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: var targetGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: targetGuid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: targetGuid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: targetGuid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: targetGuid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: targetGuid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: targetGuid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(targetGuid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(targetGuid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(targetGuid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(targetGuid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(targetGuid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleTextEmoteServer,The following statement contains a magic number: packet.ReadXORByte(targetGuid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: var senderGUIDBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: var guildGUIDBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: var receiverGUIDBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: var groupGUIDBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasSender)                  senderNameLen = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 0' 1' 5' 4' 3' 2' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 0' 1' 5' 4' 3' 2' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 0' 1' 5' 4' 3' 2' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 0' 1' 5' 4' 3' 2' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 0' 1' 5' 4' 3' 2' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(groupGUIDBytes' 0' 1' 5' 4' 3' 2' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (bit1490)                  bits1490 = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 7' 6' 1' 4' 0' 2' 3' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 7' 6' 1' 4' 0' 2' 3' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 7' 6' 1' 4' 0' 2' 3' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 7' 6' 1' 4' 0' 2' 3' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 7' 6' 1' 4' 0' 2' 3' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(receiverGUIDBytes' 7' 6' 1' 4' 0' 2' 3' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 0' 3' 7' 2' 1' 5' 4' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 0' 3' 7' 2' 1' 5' 4' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 0' 3' 7' 2' 1' 5' 4' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 0' 3' 7' 2' 1' 5' 4' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 0' 3' 7' 2' 1' 5' 4' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(senderGUIDBytes' 0' 3' 7' 2' 1' 5' 4' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasChannel)                  channelLen = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasText)                  textLen = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasPrefix)                  prefixLen = packet.ReadBits(5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: if (hasReceiver)                  receiverLen = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 2' 5' 7' 4' 0' 1' 3' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 2' 5' 7' 4' 0' 1' 3' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 2' 5' 7' 4' 0' 1' 3' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 2' 5' 7' 4' 0' 1' 3' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 2' 5' 7' 4' 0' 1' 3' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.StartBitStream(guildGUIDBytes' 2' 5' 7' 4' 0' 1' 3' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 4' 5' 7' 3' 2' 6' 0' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 4' 5' 7' 3' 2' 6' 0' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 4' 5' 7' 3' 2' 6' 0' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 4' 5' 7' 3' 2' 6' 0' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 4' 5' 7' 3' 2' 6' 0' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(guildGUIDBytes' 4' 5' 7' 3' 2' 6' 0' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 4' 7' 1' 5' 0' 6' 2' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 4' 7' 1' 5' 0' 6' 2' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 4' 7' 1' 5' 0' 6' 2' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 4' 7' 1' 5' 0' 6' 2' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 4' 7' 1' 5' 0' 6' 2' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(senderGUIDBytes' 4' 7' 1' 5' 0' 6' 2' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 1' 3' 4' 6' 0' 2' 5' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 1' 3' 4' 6' 0' 2' 5' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 1' 3' 4' 6' 0' 2' 5' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 1' 3' 4' 6' 0' 2' 5' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 1' 3' 4' 6' 0' 2' 5' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(groupGUIDBytes' 1' 3' 4' 6' 0' 2' 5' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 2' 5' 3' 6' 7' 4' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 2' 5' 3' 6' 7' 4' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 2' 5' 3' 6' 7' 4' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 2' 5' 3' 6' 7' 4' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 2' 5' 3' 6' 7' 4' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleServerChatMessage,The following statement contains a magic number: packet.ParseBitStream(receiverGUIDBytes' 2' 5' 3' 6' 7' 4' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleChatPlayerNotFound,The following statement contains a magic number: var len = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleDefenseMessage,The following statement contains a magic number: uint length = packet.ReadBits("Message Length"' 12);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ChatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ChatHandler.cs,HandleNotification,The following statement contains a magic number: var length = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: var attackerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: var victimGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: victimGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: attackerGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: attackerGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: victimGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: victimGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: attackerGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: victimGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: victimGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: attackerGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: victimGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: attackerGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: attackerGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(attackerGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(attackerGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(attackerGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(attackerGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(attackerGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStart,The following statement contains a magic number: packet.ReadXORByte(attackerGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: var victimGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: var attackerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: victimGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: victimGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: attackerGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: attackerGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: attackerGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: attackerGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: attackerGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: victimGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: victimGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: victimGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: victimGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: attackerGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(attackerGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(attackerGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(attackerGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(attackerGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(attackerGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(attackerGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackStartStop,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackSwing,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackSwing,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 7' 0' 3' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackSwing,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 7' 0' 3' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackSwing,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 7' 0' 3' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackSwing,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 7' 0' 3' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackSwing,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 7' 0' 3' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackSwing,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 7' 0' 3' 1' 4' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackSwing,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 1' 3' 2' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackSwing,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 1' 3' 2' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackSwing,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 1' 3' 2' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackSwing,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 1' 3' 2' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackSwing,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 1' 3' 2' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackSwing,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 7' 1' 3' 2' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAttackerStateUpdate,The following statement contains a magic number: if (bit2C)              {                  var bits1C = (int)packet.ReadBits(21);                  packet.ReadInt32("Int18");                  for (var i = 0; i < bits1C; ++i)                  {                      packet.ReadInt32("IntED"' i);                      packet.ReadInt32("IntED"' i);                  }                    packet.ReadInt32("Int10");                  packet.ReadInt32("Int14");              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAIReaction,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAIReaction,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 0' 4' 6' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAIReaction,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 0' 4' 6' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAIReaction,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 0' 4' 6' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAIReaction,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 0' 4' 6' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAIReaction,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 0' 4' 6' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAIReaction,The following statement contains a magic number: packet.StartBitStream(guid' 5' 7' 0' 4' 6' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAIReaction,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAIReaction,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAIReaction,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAIReaction,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAIReaction,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleAIReaction,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleEnvirenmentalDamageLog,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleEnvirenmentalDamageLog,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleEnvirenmentalDamageLog,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleEnvirenmentalDamageLog,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleEnvirenmentalDamageLog,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleEnvirenmentalDamageLog,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleEnvirenmentalDamageLog,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleEnvirenmentalDamageLog,The following statement contains a magic number: if (bit30)              {                  var bits20 = packet.ReadBits(21);                    packet.ReadInt32("Int14");                  for (var i = 0; i < bits20; ++i)                  {                      packet.ReadInt32("IntED"' i);                      packet.ReadInt32("IntED"' i);                  }                    packet.ReadInt32("Int1C");                  packet.ReadInt32("Int18");              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleEnvirenmentalDamageLog,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleEnvirenmentalDamageLog,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleEnvirenmentalDamageLog,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleEnvirenmentalDamageLog,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleEnvirenmentalDamageLog,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleEnvirenmentalDamageLog,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.StartBitStream(guid' 1' 3' 0' 4' 6' 7' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.StartBitStream(guid' 1' 3' 0' 4' 6' 7' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.StartBitStream(guid' 1' 3' 0' 4' 6' 7' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.StartBitStream(guid' 1' 3' 0' 4' 6' 7' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.StartBitStream(guid' 1' 3' 0' 4' 6' 7' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.StartBitStream(guid' 1' 3' 0' 4' 6' 7' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 2' 5' 0' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 2' 5' 0' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 2' 5' 0' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 2' 5' 0' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 2' 5' 0' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleCancelAutoRepeat,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 6' 2' 5' 0' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelRequested,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelProposed,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelProposed,The following statement contains a magic number: packet.StartBitStream(guid' 1' 5' 4' 6' 3' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelProposed,The following statement contains a magic number: packet.StartBitStream(guid' 1' 5' 4' 6' 3' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelProposed,The following statement contains a magic number: packet.StartBitStream(guid' 1' 5' 4' 6' 3' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelProposed,The following statement contains a magic number: packet.StartBitStream(guid' 1' 5' 4' 6' 3' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelProposed,The following statement contains a magic number: packet.StartBitStream(guid' 1' 5' 4' 6' 3' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelProposed,The following statement contains a magic number: packet.StartBitStream(guid' 1' 5' 4' 6' 3' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelProposed,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 5' 7' 1' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelProposed,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 5' 7' 1' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelProposed,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 5' 7' 1' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelProposed,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 5' 7' 1' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelProposed,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 5' 7' 1' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatHandler.cs,HandleDuelProposed,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 2' 5' 7' 1' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: var guidA = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: var guid12 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: guid12[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: guidA[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: guidA[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: guidA[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: guid12[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: guidA[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: guid12[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: guid12[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: guidA[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: guidA[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: guid12[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: if (hasPowerData)                  bits70 = packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: guid12[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(guid12' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(guid12' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(guid12' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(guidA' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(guidA' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(guid12' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(guidA' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(guidA' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(guid12' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(guidA' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(guidA' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellNonMeleeDmgLog,The following statement contains a magic number: packet.ReadXORByte(guid12' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: var targetGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: var casterGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: targetGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: casterGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: var bits3C = (int)packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: targetGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: targetGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: targetGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: casterGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: casterGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: casterGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: casterGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: targetGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: casterGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: if (hasPowerData)                  bits24 = packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: targetGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandlePeriodicAuraLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: if (hasPowerData)                  bits1C = packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellEnergizeLog,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: var casterGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: var targetGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: casterGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: casterGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: targetGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: casterGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: casterGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: targetGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: targetGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: targetGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: casterGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: targetGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: if (hasPowerData)                  bits24 = (int)packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: casterGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: targetGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,HandleSpellHealLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: var casterGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: var targetGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: targetGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: casterGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: targetGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: casterGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: targetGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: targetGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: targetGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: var bits1C = (int)packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: casterGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: casterGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: targetGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: casterGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: casterGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CombatLogHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CombatLogHandler.cs,SpellDispelLog,The following statement contains a magic number: packet.ReadXORByte(targetGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CorpseHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CorpseHandler.cs,HandleCorpseQueryResponse,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CorpseHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CorpseHandler.cs,HandleCorpseQueryResponse,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CorpseHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CorpseHandler.cs,HandleCorpseQueryResponse,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CorpseHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CorpseHandler.cs,HandleCorpseQueryResponse,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CorpseHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CorpseHandler.cs,HandleCorpseQueryResponse,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CorpseHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CorpseHandler.cs,HandleCorpseQueryResponse,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CorpseHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CorpseHandler.cs,HandleCorpseQueryResponse,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CorpseHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CorpseHandler.cs,HandleCorpseQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CorpseHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CorpseHandler.cs,HandleCorpseQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CorpseHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CorpseHandler.cs,HandleCorpseQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CorpseHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CorpseHandler.cs,HandleCorpseQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CorpseHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CorpseHandler.cs,HandleCorpseQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,CorpseHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\CorpseHandler.cs,HandleCorpseQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: var count = packet.ReadBits(19);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][4] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 3' 5' 7' 2' 6' 0' 4' 1);                  }                    guid2[i][5] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][4] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 3' 5' 7' 2' 6' 0' 4' 1);                  }                    guid2[i][5] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][4] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 3' 5' 7' 2' 6' 0' 4' 1);                  }                    guid2[i][5] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][4] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 3' 5' 7' 2' 6' 0' 4' 1);                  }                    guid2[i][5] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][4] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 3' 5' 7' 2' 6' 0' 4' 1);                  }                    guid2[i][5] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][4] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 3' 5' 7' 2' 6' 0' 4' 1);                  }                    guid2[i][5] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][4] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 3' 5' 7' 2' 6' 0' 4' 1);                  }                    guid2[i][5] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][4] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 3' 5' 7' 2' 6' 0' 4' 1);                  }                    guid2[i][5] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][4] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 3' 5' 7' 2' 6' 0' 4' 1);                  }                    guid2[i][5] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][4] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 3' 5' 7' 2' 6' 0' 4' 1);                  }                    guid2[i][5] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][4] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 3' 5' 7' 2' 6' 0' 4' 1);                  }                    guid2[i][5] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][4] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 3' 5' 7' 2' 6' 0' 4' 1);                  }                    guid2[i][5] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][4] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 3' 5' 7' 2' 6' 0' 4' 1);                  }                    guid2[i][5] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][4] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 3' 5' 7' 2' 6' 0' 4' 1);                  }                    guid2[i][5] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][4] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 3' 5' 7' 2' 6' 0' 4' 1);                  }                    guid2[i][5] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  guid1[i] = new byte[NumSlots][];                  guid2[i] = new byte[8];                    guid2[i][4] = packet.ReadBit();                    for (var j = 0; j < NumSlots; j++)                  {                      guid1[i][j] = new byte[8];                      packet.StartBitStream(guid1[i][j]' 3' 5' 7' 2' 6' 0' 4' 1);                  }                    guid2[i][5] = packet.ReadBit();                  bits4[i] = packet.ReadBits(9);                  guid2[i][1] = packet.ReadBit();                  guid2[i][7] = packet.ReadBit();                  bits0[i] = packet.ReadBits(8);                  guid2[i][3] = packet.ReadBit();                  guid2[i][2] = packet.ReadBit();                  guid2[i][6] = packet.ReadBit();                  guid2[i][0] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 2' 3' 7' 1' 6' 5' 0' 4);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 2' 3' 7' 1' 6' 5' 0' 4);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 2' 3' 7' 1' 6' 5' 0' 4);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 2' 3' 7' 1' 6' 5' 0' 4);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 2' 3' 7' 1' 6' 5' 0' 4);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 2' 3' 7' 1' 6' 5' 0' 4);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 2' 3' 7' 1' 6' 5' 0' 4);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 2' 3' 7' 1' 6' 5' 0' 4);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 2' 3' 7' 1' 6' 5' 0' 4);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 2' 3' 7' 1' 6' 5' 0' 4);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 2' 3' 7' 1' 6' 5' 0' 4);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,EquipmentSetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\EquipmentSetHandler.cs,HandleEquipmentSetList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  for (var j = 0; j < NumSlots; j++)                  {                      packet.ParseBitStream(guid1[i][j]' 2' 3' 7' 1' 6' 5' 0' 4);                      packet.WriteGuid("Item GUID"' guid1[i][j]' i' j);                  }                    packet.ReadXORByte(guid2[i]' 7);                  packet.ReadInt32("Index"' i);                  packet.ReadWoWString("Set Name"' bits0[i]' i);                  packet.ReadXORByte(guid2[i]' 2);                  packet.ReadXORByte(guid2[i]' 6);                  packet.ReadXORByte(guid2[i]' 0);                  packet.ReadXORByte(guid2[i]' 3);                  packet.ReadXORByte(guid2[i]' 1);                  packet.ReadXORByte(guid2[i]' 5);                  packet.ReadXORByte(guid2[i]' 4);                  packet.ReadWoWString("Set Icon"' bits4[i]' i);                    packet.WriteGuid("GUID"' guid2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.StartBitStream(guid' 5' 3' 6' 2' 7' 1' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.StartBitStream(guid' 5' 3' 6' 2' 7' 1' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.StartBitStream(guid' 5' 3' 6' 2' 7' 1' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.StartBitStream(guid' 5' 3' 6' 2' 7' 1' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.StartBitStream(guid' 5' 3' 6' 2' 7' 1' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.StartBitStream(guid' 5' 3' 6' 2' 7' 1' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 3' 4' 6' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 3' 4' 6' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 3' 4' 6' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 3' 4' 6' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 3' 4' 6' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGameObjectQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 3' 4' 6' 2' 7' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGameObjectQueryResponse,The following statement contains a magic number: var name = new string[4];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGameObjectQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)                  name[i] = packet.ReadCString("Name"' i);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGameObjectQueryResponse,The following statement contains a magic number: gameObject.Data = new int?[32];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGOUse,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGOUse,The following statement contains a magic number: packet.StartBitStream(guid' 4' 7' 5' 3' 6' 1' 2' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGOUse,The following statement contains a magic number: packet.StartBitStream(guid' 4' 7' 5' 3' 6' 1' 2' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGOUse,The following statement contains a magic number: packet.StartBitStream(guid' 4' 7' 5' 3' 6' 1' 2' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGOUse,The following statement contains a magic number: packet.StartBitStream(guid' 4' 7' 5' 3' 6' 1' 2' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGOUse,The following statement contains a magic number: packet.StartBitStream(guid' 4' 7' 5' 3' 6' 1' 2' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGOUse,The following statement contains a magic number: packet.StartBitStream(guid' 4' 7' 5' 3' 6' 1' 2' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGOUse,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 6' 5' 0' 3' 2' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGOUse,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 6' 5' 0' 3' 2' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGOUse,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 6' 5' 0' 3' 2' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGOUse,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 6' 5' 0' 3' 2' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGOUse,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 6' 5' 0' 3' 2' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GameObjectHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GameObjectHandler.cs,HandleGOUse,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 1' 6' 5' 0' 3' 2' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: var crossRealmGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: crossRealmGuid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: var realmNameLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: crossRealmGuid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: var nameLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: crossRealmGuid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: crossRealmGuid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: crossRealmGuid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: crossRealmGuid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: packet.ReadXORByte(crossRealmGuid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: packet.ReadXORByte(crossRealmGuid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: packet.ReadXORByte(crossRealmGuid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: packet.ReadXORByte(crossRealmGuid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: packet.ReadXORByte(crossRealmGuid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupInvite,The following statement contains a magic number: packet.ReadXORByte(crossRealmGuid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: var inviterGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: var realmName1 = (int)packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: var realmName2 = (int)packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: inviterGuid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: var inviterName = (int)packet.ReadBits(6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: inviterGuid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: inviterGuid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: var bits164 = (int)packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: inviterGuid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: inviterGuid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: inviterGuid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: packet.ReadXORByte(inviterGuid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: packet.ReadXORByte(inviterGuid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: packet.ReadXORByte(inviterGuid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: packet.ReadXORByte(inviterGuid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: packet.ReadXORByte(inviterGuid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleSmsgGroupInvite,The following statement contains a magic number: packet.ReadXORByte(inviterGuid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: var leaderGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: var looterGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: var groupGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: leaderGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: groupGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: leaderGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: leaderGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: var memberCounter = (int)packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCounter; ++i)              {                  memberGUID[i] = new byte[8];                    memberGUID[i][1] = packet.ReadBit();                  memberGUID[i][2] = packet.ReadBit();                  memberGUID[i][5] = packet.ReadBit();                  memberGUID[i][6] = packet.ReadBit();                  memberName[i] = packet.ReadBits(6);                  memberGUID[i][7] = packet.ReadBit();                  memberGUID[i][3] = packet.ReadBit();                  memberGUID[i][0] = packet.ReadBit();                  memberGUID[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCounter; ++i)              {                  memberGUID[i] = new byte[8];                    memberGUID[i][1] = packet.ReadBit();                  memberGUID[i][2] = packet.ReadBit();                  memberGUID[i][5] = packet.ReadBit();                  memberGUID[i][6] = packet.ReadBit();                  memberName[i] = packet.ReadBits(6);                  memberGUID[i][7] = packet.ReadBit();                  memberGUID[i][3] = packet.ReadBit();                  memberGUID[i][0] = packet.ReadBit();                  memberGUID[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCounter; ++i)              {                  memberGUID[i] = new byte[8];                    memberGUID[i][1] = packet.ReadBit();                  memberGUID[i][2] = packet.ReadBit();                  memberGUID[i][5] = packet.ReadBit();                  memberGUID[i][6] = packet.ReadBit();                  memberName[i] = packet.ReadBits(6);                  memberGUID[i][7] = packet.ReadBit();                  memberGUID[i][3] = packet.ReadBit();                  memberGUID[i][0] = packet.ReadBit();                  memberGUID[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCounter; ++i)              {                  memberGUID[i] = new byte[8];                    memberGUID[i][1] = packet.ReadBit();                  memberGUID[i][2] = packet.ReadBit();                  memberGUID[i][5] = packet.ReadBit();                  memberGUID[i][6] = packet.ReadBit();                  memberName[i] = packet.ReadBits(6);                  memberGUID[i][7] = packet.ReadBit();                  memberGUID[i][3] = packet.ReadBit();                  memberGUID[i][0] = packet.ReadBit();                  memberGUID[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCounter; ++i)              {                  memberGUID[i] = new byte[8];                    memberGUID[i][1] = packet.ReadBit();                  memberGUID[i][2] = packet.ReadBit();                  memberGUID[i][5] = packet.ReadBit();                  memberGUID[i][6] = packet.ReadBit();                  memberName[i] = packet.ReadBits(6);                  memberGUID[i][7] = packet.ReadBit();                  memberGUID[i][3] = packet.ReadBit();                  memberGUID[i][0] = packet.ReadBit();                  memberGUID[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCounter; ++i)              {                  memberGUID[i] = new byte[8];                    memberGUID[i][1] = packet.ReadBit();                  memberGUID[i][2] = packet.ReadBit();                  memberGUID[i][5] = packet.ReadBit();                  memberGUID[i][6] = packet.ReadBit();                  memberName[i] = packet.ReadBits(6);                  memberGUID[i][7] = packet.ReadBit();                  memberGUID[i][3] = packet.ReadBit();                  memberGUID[i][0] = packet.ReadBit();                  memberGUID[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCounter; ++i)              {                  memberGUID[i] = new byte[8];                    memberGUID[i][1] = packet.ReadBit();                  memberGUID[i][2] = packet.ReadBit();                  memberGUID[i][5] = packet.ReadBit();                  memberGUID[i][6] = packet.ReadBit();                  memberName[i] = packet.ReadBits(6);                  memberGUID[i][7] = packet.ReadBit();                  memberGUID[i][3] = packet.ReadBit();                  memberGUID[i][0] = packet.ReadBit();                  memberGUID[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCounter; ++i)              {                  memberGUID[i] = new byte[8];                    memberGUID[i][1] = packet.ReadBit();                  memberGUID[i][2] = packet.ReadBit();                  memberGUID[i][5] = packet.ReadBit();                  memberGUID[i][6] = packet.ReadBit();                  memberName[i] = packet.ReadBits(6);                  memberGUID[i][7] = packet.ReadBit();                  memberGUID[i][3] = packet.ReadBit();                  memberGUID[i][0] = packet.ReadBit();                  memberGUID[i][4] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: leaderGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: groupGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (hasLootMode)              {                  looterGUID[6] = packet.ReadBit();                  looterGUID[4] = packet.ReadBit();                  looterGUID[5] = packet.ReadBit();                  looterGUID[2] = packet.ReadBit();                  looterGUID[1] = packet.ReadBit();                  looterGUID[0] = packet.ReadBit();                  looterGUID[7] = packet.ReadBit();                  looterGUID[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (hasLootMode)              {                  looterGUID[6] = packet.ReadBit();                  looterGUID[4] = packet.ReadBit();                  looterGUID[5] = packet.ReadBit();                  looterGUID[2] = packet.ReadBit();                  looterGUID[1] = packet.ReadBit();                  looterGUID[0] = packet.ReadBit();                  looterGUID[7] = packet.ReadBit();                  looterGUID[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (hasLootMode)              {                  looterGUID[6] = packet.ReadBit();                  looterGUID[4] = packet.ReadBit();                  looterGUID[5] = packet.ReadBit();                  looterGUID[2] = packet.ReadBit();                  looterGUID[1] = packet.ReadBit();                  looterGUID[0] = packet.ReadBit();                  looterGUID[7] = packet.ReadBit();                  looterGUID[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (hasLootMode)              {                  looterGUID[6] = packet.ReadBit();                  looterGUID[4] = packet.ReadBit();                  looterGUID[5] = packet.ReadBit();                  looterGUID[2] = packet.ReadBit();                  looterGUID[1] = packet.ReadBit();                  looterGUID[0] = packet.ReadBit();                  looterGUID[7] = packet.ReadBit();                  looterGUID[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (hasLootMode)              {                  looterGUID[6] = packet.ReadBit();                  looterGUID[4] = packet.ReadBit();                  looterGUID[5] = packet.ReadBit();                  looterGUID[2] = packet.ReadBit();                  looterGUID[1] = packet.ReadBit();                  looterGUID[0] = packet.ReadBit();                  looterGUID[7] = packet.ReadBit();                  looterGUID[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (hasLootMode)              {                  looterGUID[6] = packet.ReadBit();                  looterGUID[4] = packet.ReadBit();                  looterGUID[5] = packet.ReadBit();                  looterGUID[2] = packet.ReadBit();                  looterGUID[1] = packet.ReadBit();                  looterGUID[0] = packet.ReadBit();                  looterGUID[7] = packet.ReadBit();                  looterGUID[3] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: groupGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: groupGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: leaderGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: groupGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: leaderGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: groupGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCounter; ++i)              {                  packet.ReadXORByte(memberGUID[i]' 6);                  packet.ReadXORByte(memberGUID[i]' 3);                  packet.ReadByte("LFGrole"' i);                  packet.ReadByte("onlineState"' i);                  packet.ReadXORByte(memberGUID[i]' 7);                  packet.ReadXORByte(memberGUID[i]' 4);                  packet.ReadXORByte(memberGUID[i]' 1);                  packet.ReadWoWString("MemberName"' memberName[i]' i);                  packet.ReadXORByte(memberGUID[i]' 5);                  packet.ReadXORByte(memberGUID[i]' 2);                  packet.ReadByte("groupID"' i);                  packet.ReadXORByte(memberGUID[i]' 0);                  packet.ReadByte("Flags"' i);                  packet.WriteGuid("memberGUID"' memberGUID[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCounter; ++i)              {                  packet.ReadXORByte(memberGUID[i]' 6);                  packet.ReadXORByte(memberGUID[i]' 3);                  packet.ReadByte("LFGrole"' i);                  packet.ReadByte("onlineState"' i);                  packet.ReadXORByte(memberGUID[i]' 7);                  packet.ReadXORByte(memberGUID[i]' 4);                  packet.ReadXORByte(memberGUID[i]' 1);                  packet.ReadWoWString("MemberName"' memberName[i]' i);                  packet.ReadXORByte(memberGUID[i]' 5);                  packet.ReadXORByte(memberGUID[i]' 2);                  packet.ReadByte("groupID"' i);                  packet.ReadXORByte(memberGUID[i]' 0);                  packet.ReadByte("Flags"' i);                  packet.WriteGuid("memberGUID"' memberGUID[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCounter; ++i)              {                  packet.ReadXORByte(memberGUID[i]' 6);                  packet.ReadXORByte(memberGUID[i]' 3);                  packet.ReadByte("LFGrole"' i);                  packet.ReadByte("onlineState"' i);                  packet.ReadXORByte(memberGUID[i]' 7);                  packet.ReadXORByte(memberGUID[i]' 4);                  packet.ReadXORByte(memberGUID[i]' 1);                  packet.ReadWoWString("MemberName"' memberName[i]' i);                  packet.ReadXORByte(memberGUID[i]' 5);                  packet.ReadXORByte(memberGUID[i]' 2);                  packet.ReadByte("groupID"' i);                  packet.ReadXORByte(memberGUID[i]' 0);                  packet.ReadByte("Flags"' i);                  packet.WriteGuid("memberGUID"' memberGUID[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCounter; ++i)              {                  packet.ReadXORByte(memberGUID[i]' 6);                  packet.ReadXORByte(memberGUID[i]' 3);                  packet.ReadByte("LFGrole"' i);                  packet.ReadByte("onlineState"' i);                  packet.ReadXORByte(memberGUID[i]' 7);                  packet.ReadXORByte(memberGUID[i]' 4);                  packet.ReadXORByte(memberGUID[i]' 1);                  packet.ReadWoWString("MemberName"' memberName[i]' i);                  packet.ReadXORByte(memberGUID[i]' 5);                  packet.ReadXORByte(memberGUID[i]' 2);                  packet.ReadByte("groupID"' i);                  packet.ReadXORByte(memberGUID[i]' 0);                  packet.ReadByte("Flags"' i);                  packet.WriteGuid("memberGUID"' memberGUID[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCounter; ++i)              {                  packet.ReadXORByte(memberGUID[i]' 6);                  packet.ReadXORByte(memberGUID[i]' 3);                  packet.ReadByte("LFGrole"' i);                  packet.ReadByte("onlineState"' i);                  packet.ReadXORByte(memberGUID[i]' 7);                  packet.ReadXORByte(memberGUID[i]' 4);                  packet.ReadXORByte(memberGUID[i]' 1);                  packet.ReadWoWString("MemberName"' memberName[i]' i);                  packet.ReadXORByte(memberGUID[i]' 5);                  packet.ReadXORByte(memberGUID[i]' 2);                  packet.ReadByte("groupID"' i);                  packet.ReadXORByte(memberGUID[i]' 0);                  packet.ReadByte("Flags"' i);                  packet.WriteGuid("memberGUID"' memberGUID[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: for (var i = 0; i < memberCounter; ++i)              {                  packet.ReadXORByte(memberGUID[i]' 6);                  packet.ReadXORByte(memberGUID[i]' 3);                  packet.ReadByte("LFGrole"' i);                  packet.ReadByte("onlineState"' i);                  packet.ReadXORByte(memberGUID[i]' 7);                  packet.ReadXORByte(memberGUID[i]' 4);                  packet.ReadXORByte(memberGUID[i]' 1);                  packet.ReadWoWString("MemberName"' memberName[i]' i);                  packet.ReadXORByte(memberGUID[i]' 5);                  packet.ReadXORByte(memberGUID[i]' 2);                  packet.ReadByte("groupID"' i);                  packet.ReadXORByte(memberGUID[i]' 0);                  packet.ReadByte("Flags"' i);                  packet.WriteGuid("memberGUID"' memberGUID[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(leaderGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(leaderGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (hasLootMode)              {                  packet.ReadByte("lootMethod");                  packet.ReadXORByte(looterGUID' 0);                  packet.ReadXORByte(looterGUID' 5);                  packet.ReadXORByte(looterGUID' 4);                  packet.ReadXORByte(looterGUID' 3);                  packet.ReadXORByte(looterGUID' 2);                  packet.ReadByte("lootThreshold");                  packet.ReadXORByte(looterGUID' 7);                  packet.ReadXORByte(looterGUID' 1);                  packet.ReadXORByte(looterGUID' 6);                  packet.WriteGuid("looterGUID"' looterGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (hasLootMode)              {                  packet.ReadByte("lootMethod");                  packet.ReadXORByte(looterGUID' 0);                  packet.ReadXORByte(looterGUID' 5);                  packet.ReadXORByte(looterGUID' 4);                  packet.ReadXORByte(looterGUID' 3);                  packet.ReadXORByte(looterGUID' 2);                  packet.ReadByte("lootThreshold");                  packet.ReadXORByte(looterGUID' 7);                  packet.ReadXORByte(looterGUID' 1);                  packet.ReadXORByte(looterGUID' 6);                  packet.WriteGuid("looterGUID"' looterGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (hasLootMode)              {                  packet.ReadByte("lootMethod");                  packet.ReadXORByte(looterGUID' 0);                  packet.ReadXORByte(looterGUID' 5);                  packet.ReadXORByte(looterGUID' 4);                  packet.ReadXORByte(looterGUID' 3);                  packet.ReadXORByte(looterGUID' 2);                  packet.ReadByte("lootThreshold");                  packet.ReadXORByte(looterGUID' 7);                  packet.ReadXORByte(looterGUID' 1);                  packet.ReadXORByte(looterGUID' 6);                  packet.WriteGuid("looterGUID"' looterGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (hasLootMode)              {                  packet.ReadByte("lootMethod");                  packet.ReadXORByte(looterGUID' 0);                  packet.ReadXORByte(looterGUID' 5);                  packet.ReadXORByte(looterGUID' 4);                  packet.ReadXORByte(looterGUID' 3);                  packet.ReadXORByte(looterGUID' 2);                  packet.ReadByte("lootThreshold");                  packet.ReadXORByte(looterGUID' 7);                  packet.ReadXORByte(looterGUID' 1);                  packet.ReadXORByte(looterGUID' 6);                  packet.WriteGuid("looterGUID"' looterGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (hasLootMode)              {                  packet.ReadByte("lootMethod");                  packet.ReadXORByte(looterGUID' 0);                  packet.ReadXORByte(looterGUID' 5);                  packet.ReadXORByte(looterGUID' 4);                  packet.ReadXORByte(looterGUID' 3);                  packet.ReadXORByte(looterGUID' 2);                  packet.ReadByte("lootThreshold");                  packet.ReadXORByte(looterGUID' 7);                  packet.ReadXORByte(looterGUID' 1);                  packet.ReadXORByte(looterGUID' 6);                  packet.WriteGuid("looterGUID"' looterGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: if (hasLootMode)              {                  packet.ReadByte("lootMethod");                  packet.ReadXORByte(looterGUID' 0);                  packet.ReadXORByte(looterGUID' 5);                  packet.ReadXORByte(looterGUID' 4);                  packet.ReadXORByte(looterGUID' 3);                  packet.ReadXORByte(looterGUID' 2);                  packet.ReadByte("lootThreshold");                  packet.ReadXORByte(looterGUID' 7);                  packet.ReadXORByte(looterGUID' 1);                  packet.ReadXORByte(looterGUID' 6);                  packet.WriteGuid("looterGUID"' looterGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(groupGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(groupGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(groupGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(leaderGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(groupGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(groupGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(groupGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(leaderGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(leaderGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupList,The following statement contains a magic number: packet.ReadXORByte(leaderGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 0' 1' 3' 6' 2' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 0' 1' 3' 6' 2' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 0' 1' 3' 6' 2' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 0' 1' 3' 6' 2' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 0' 1' 3' 6' 2' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 7' 4' 0' 1' 3' 6' 2' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.ReadXORBytes(guid' 3' 6' 5' 2' 1' 4' 0' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.ReadXORBytes(guid' 3' 6' 5' 2' 1' 4' 0' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.ReadXORBytes(guid' 3' 6' 5' 2' 1' 4' 0' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.ReadXORBytes(guid' 3' 6' 5' 2' 1' 4' 0' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.ReadXORBytes(guid' 3' 6' 5' 2' 1' 4' 0' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleRequestPartyMemberStats,The following statement contains a magic number: packet.ReadXORBytes(guid' 3' 6' 5' 2' 1' 4' 0' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandlePartyMemberStats,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandlePartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandlePartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandlePartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 6' 2' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandlePartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 6' 2' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandlePartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 6' 2' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandlePartyMemberStats,The following statement contains a magic number: packet.StartBitStream(guid' 6' 2' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandlePartyMemberStats,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 6' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandlePartyMemberStats,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 6' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandlePartyMemberStats,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 6' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandlePartyMemberStats,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 6' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandlePartyMemberStats,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 6' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandlePartyMemberStats,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 4' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandlePartyMemberStats,The following statement contains a magic number: if (updateFlags.HasFlag(GroupUpdateFlag548.Unk2)) // 0x2              {                  for (var i = 0; i < 2; i++)                      updateFlagPacket.ReadByte("Unk2"' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandlePartyMemberStats,The following statement contains a magic number: if (updateFlags.HasFlag(GroupUpdateFlag548.Phase)) // 0x1000000              {                  updateFlagPacket.ReadInt32("Unk Int32");                    var count = updateFlagPacket.ReadBits("Phase Count"' 23);                  for (var i = 0; i < count; ++i)                      updateFlagPacket.ReadUInt16("Phase Id");              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: var assignerGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: var targetGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: targetGuid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: targetGuid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: targetGuid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: assignerGuid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: targetGuid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: assignerGuid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: targetGuid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: assignerGuid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: assignerGuid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: assignerGuid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: targetGuid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: assignerGuid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: packet.ReadXORByte(assignerGuid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: packet.ReadXORByte(assignerGuid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: packet.ReadXORByte(targetGuid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: packet.ReadXORByte(assignerGuid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: packet.ReadXORByte(targetGuid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: packet.ReadXORByte(assignerGuid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: packet.ReadXORByte(targetGuid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: packet.ReadXORByte(targetGuid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: packet.ReadXORByte(assignerGuid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: packet.ReadXORByte(targetGuid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: packet.ReadXORByte(targetGuid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GroupHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GroupHandler.cs,HandleGroupSetRole,The following statement contains a magic number: packet.ReadXORByte(assignerGuid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: var playerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: var guildGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: playerGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: playerGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: playerGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: guildGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: guildGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: playerGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: playerGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: guildGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: guildGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: playerGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: guildGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: guildGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(guildGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(guildGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(guildGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(guildGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(guildGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(guildGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQuery,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  rankCount = packet.ReadBits(21);                    guid1[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    rankName = new uint[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid1[2] = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    nameLen = packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  rankCount = packet.ReadBits(21);                    guid1[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    rankName = new uint[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid1[2] = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    nameLen = packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  rankCount = packet.ReadBits(21);                    guid1[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    rankName = new uint[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid1[2] = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    nameLen = packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  rankCount = packet.ReadBits(21);                    guid1[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    rankName = new uint[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid1[2] = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    nameLen = packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  rankCount = packet.ReadBits(21);                    guid1[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    rankName = new uint[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid1[2] = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    nameLen = packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  rankCount = packet.ReadBits(21);                    guid1[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    rankName = new uint[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid1[2] = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    nameLen = packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  rankCount = packet.ReadBits(21);                    guid1[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    rankName = new uint[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid1[2] = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    nameLen = packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  rankCount = packet.ReadBits(21);                    guid1[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    rankName = new uint[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid1[2] = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    nameLen = packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  rankCount = packet.ReadBits(21);                    guid1[5] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                    rankName = new uint[rankCount];                  for (var i = 0; i < rankCount; ++i)                      rankName[i] = packet.ReadBits(7);                    guid1[3] = packet.ReadBit();                  guid1[2] = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[6] = packet.ReadBit();                    nameLen = packet.ReadBits(7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadInt32("Emblem Border Style");                  packet.ReadInt32("Emblem Style");                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 7);                  packet.ReadInt32("Emblem Color");                  packet.ReadInt32("Realm Id");                    for (var j = 0; j < rankCount; j++)                  {                      packet.ReadInt32("Rights Order"' j);                      packet.ReadInt32("Creation Order"' j);                      packet.ReadWoWString("Rank Name"' rankName[j]' j);                  }                    packet.ReadWoWString("Guild Name"' nameLen);                    packet.ReadInt32("Emblem Background Color");                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 4);                  packet.ReadInt32("Emblem Border Color");                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadInt32("Emblem Border Style");                  packet.ReadInt32("Emblem Style");                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 7);                  packet.ReadInt32("Emblem Color");                  packet.ReadInt32("Realm Id");                    for (var j = 0; j < rankCount; j++)                  {                      packet.ReadInt32("Rights Order"' j);                      packet.ReadInt32("Creation Order"' j);                      packet.ReadWoWString("Rank Name"' rankName[j]' j);                  }                    packet.ReadWoWString("Guild Name"' nameLen);                    packet.ReadInt32("Emblem Background Color");                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 4);                  packet.ReadInt32("Emblem Border Color");                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadInt32("Emblem Border Style");                  packet.ReadInt32("Emblem Style");                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 7);                  packet.ReadInt32("Emblem Color");                  packet.ReadInt32("Realm Id");                    for (var j = 0; j < rankCount; j++)                  {                      packet.ReadInt32("Rights Order"' j);                      packet.ReadInt32("Creation Order"' j);                      packet.ReadWoWString("Rank Name"' rankName[j]' j);                  }                    packet.ReadWoWString("Guild Name"' nameLen);                    packet.ReadInt32("Emblem Background Color");                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 4);                  packet.ReadInt32("Emblem Border Color");                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadInt32("Emblem Border Style");                  packet.ReadInt32("Emblem Style");                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 7);                  packet.ReadInt32("Emblem Color");                  packet.ReadInt32("Realm Id");                    for (var j = 0; j < rankCount; j++)                  {                      packet.ReadInt32("Rights Order"' j);                      packet.ReadInt32("Creation Order"' j);                      packet.ReadWoWString("Rank Name"' rankName[j]' j);                  }                    packet.ReadWoWString("Guild Name"' nameLen);                    packet.ReadInt32("Emblem Background Color");                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 4);                  packet.ReadInt32("Emblem Border Color");                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadInt32("Emblem Border Style");                  packet.ReadInt32("Emblem Style");                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 7);                  packet.ReadInt32("Emblem Color");                  packet.ReadInt32("Realm Id");                    for (var j = 0; j < rankCount; j++)                  {                      packet.ReadInt32("Rights Order"' j);                      packet.ReadInt32("Creation Order"' j);                      packet.ReadWoWString("Rank Name"' rankName[j]' j);                  }                    packet.ReadWoWString("Guild Name"' nameLen);                    packet.ReadInt32("Emblem Background Color");                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 4);                  packet.ReadInt32("Emblem Border Color");                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: if (hasData)              {                  packet.ReadInt32("Emblem Border Style");                  packet.ReadInt32("Emblem Style");                  packet.ReadXORByte(guid1' 2);                  packet.ReadXORByte(guid1' 7);                  packet.ReadInt32("Emblem Color");                  packet.ReadInt32("Realm Id");                    for (var j = 0; j < rankCount; j++)                  {                      packet.ReadInt32("Rights Order"' j);                      packet.ReadInt32("Creation Order"' j);                      packet.ReadWoWString("Rank Name"' rankName[j]' j);                  }                    packet.ReadWoWString("Guild Name"' nameLen);                    packet.ReadInt32("Emblem Background Color");                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 4);                  packet.ReadInt32("Emblem Border Color");                  packet.ReadXORByte(guid1' 1);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadXORByte(guid1' 3);                    packet.WriteGuid("Guid1"' guid1);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ParseBitStream(guid2' 2' 6' 4' 0' 7' 3' 5' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ParseBitStream(guid2' 2' 6' 4' 0' 7' 3' 5' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ParseBitStream(guid2' 2' 6' 4' 0' 7' 3' 5' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ParseBitStream(guid2' 2' 6' 4' 0' 7' 3' 5' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ParseBitStream(guid2' 2' 6' 4' 0' 7' 3' 5' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: packet.ParseBitStream(guid2' 2' 6' 4' 0' 7' 3' 5' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildRankServer,The following statement contains a magic number: const int guildBankMaxTabs = 8;
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildRankServer,The following statement contains a magic number: var count = packet.ReadBits("Count"' 17);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildRankServer,The following statement contains a magic number: for (var i = 0; i < count; ++i)                  length[i] = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildPlayerSetNote,The following statement contains a magic number: var playerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildPlayerSetNote,The following statement contains a magic number: var noteLength = packet.ReadBits("note length"' 8);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildPlayerSetNote,The following statement contains a magic number: playerGUID[4]  = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildPlayerSetNote,The following statement contains a magic number: playerGUID[2]  = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildPlayerSetNote,The following statement contains a magic number: playerGUID[3]  = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildPlayerSetNote,The following statement contains a magic number: playerGUID[5]  = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildPlayerSetNote,The following statement contains a magic number: playerGUID[6]  = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildPlayerSetNote,The following statement contains a magic number: playerGUID[7]  = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildPlayerSetNote,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildPlayerSetNote,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildPlayerSetNote,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildPlayerSetNote,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildPlayerSetNote,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildPlayerSetNote,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleNewText,The following statement contains a magic number: packet.ReadWoWString("Text"' (int)packet.ReadBits(10));
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildDemote,The following statement contains a magic number: var guid = packet.StartBitStream(3' 6' 0' 2' 7' 5' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildDemote,The following statement contains a magic number: var guid = packet.StartBitStream(3' 6' 0' 2' 7' 5' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildDemote,The following statement contains a magic number: var guid = packet.StartBitStream(3' 6' 0' 2' 7' 5' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildDemote,The following statement contains a magic number: var guid = packet.StartBitStream(3' 6' 0' 2' 7' 5' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildDemote,The following statement contains a magic number: var guid = packet.StartBitStream(3' 6' 0' 2' 7' 5' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildDemote,The following statement contains a magic number: var guid = packet.StartBitStream(3' 6' 0' 2' 7' 5' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildDemote,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 4' 2' 5' 1' 3' 0' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildDemote,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 4' 2' 5' 1' 3' 0' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildDemote,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 4' 2' 5' 1' 3' 0' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildDemote,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 4' 2' 5' 1' 3' 0' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildDemote,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 4' 2' 5' 1' 3' 0' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildDemote,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 4' 2' 5' 1' 3' 0' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildClientSetNote,The following statement contains a magic number: var playerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildClientSetNote,The following statement contains a magic number: var noteLength = packet.ReadBits("note length"' 8);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildClientSetNote,The following statement contains a magic number: playerGUID[4]  = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildClientSetNote,The following statement contains a magic number: playerGUID[2]  = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildClientSetNote,The following statement contains a magic number: playerGUID[3]  = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildClientSetNote,The following statement contains a magic number: playerGUID[5]  = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildClientSetNote,The following statement contains a magic number: playerGUID[6]  = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildClientSetNote,The following statement contains a magic number: playerGUID[7]  = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildClientSetNote,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildClientSetNote,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildClientSetNote,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildClientSetNote,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildClientSetNote,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,GuildHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\GuildHandler.cs,HandleGuildClientSetNote,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,HotfixHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\HotfixHandler.cs,HandleHotfixInfo,The following statement contains a magic number: var count = packet.ReadBits("Count"' 20);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,InstanceHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\InstanceHandler.cs,HandleSaveCufProfiles,The following statement contains a magic number: var count = packet.ReadBits("Count"' 19);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,InstanceHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\InstanceHandler.cs,HandleSaveCufProfiles,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadBit("Talent spec 2"' i);                    // 166                  packet.ReadBit("Main tank and assist"' i);             // 136                  packet.ReadBit("Power bars"' i);                       // 140                  packet.ReadBit("10 player group"' i);                  // 161                  packet.ReadBit("3 player group"' i);                   // 159                  packet.ReadBit("Unk 156"' i);                          // 156                  packet.ReadBit("40 player group"' i);                  // 164                  packet.ReadBit("2 player group"' i);                   // 158                  packet.ReadBit("Keep groups together"' i);             // 134                  packet.ReadBit("Class colors"' i);                     // 142                  packet.ReadBit("25 player group"' i);                  // 163                  packet.ReadBit("Unk 145"' i);                          // 145                  strlen[i] = packet.ReadBits("String length"' 7' i);    // 0                  packet.ReadBit("Pets"' i);                             // 135                  packet.ReadBit("PvP"' i);                              // 167                  packet.ReadBit("Dispellable debuffs"' i);              // 139                  packet.ReadBit("Debuffs"' i);                          // 144                  packet.ReadBit("15 player group"' i);                  // 162                  packet.ReadBit("Unk 157"' i);                          // 157                  packet.ReadBit("Border"' i);                           // 141                  packet.ReadBit("Horizontal Groups"' i);                // 143                  packet.ReadBit("Talent spec 1"' i);                    // 165                  packet.ReadBit("5 player group"' i);                   // 160                  packet.ReadBit("PvE"' i);                              // 168                  packet.ReadBit("Incoming heals"' i);                   // 137                  packet.ReadBit("Aggro highlight"' i);                  // 138              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,InstanceHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\InstanceHandler.cs,HandleLoadCUFProfiles,The following statement contains a magic number: var count = packet.ReadBits("Count"' 19);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,InstanceHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\InstanceHandler.cs,HandleLoadCUFProfiles,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadBit("Talent spec 1"' i);                         // 165                  packet.ReadBit("3 player group"' i);                        // 159                  packet.ReadBit("Unk 157"' i);                               // 157                  packet.ReadBit("10 player group"' i);                       // 161                  packet.ReadBit("40 player group"' i);                       // 164                  packet.ReadBit("Border"' i);                                // 141                  packet.ReadBit("Class colors"' i);                          // 142                  packet.ReadBit("Keep groups together"' i);                  // 134                  packet.ReadBit("Display power bars"' i);                    // 140                  strlen[i] = packet.ReadBits("String length"' 7' i);         // 0                  packet.ReadBit("Pets"' i);                                  // 135                  packet.ReadBit("Aggro highlight"' i);                       // 138                  packet.ReadBit("Unk 145"' i);                               // 145                  packet.ReadBit("PvP"' i);                                   // 167                  packet.ReadBit("Unk 156"' i);                               // 156                  packet.ReadBit("Main tank and assist"' i);                  // 136                  packet.ReadBit("Debuffs"' i);                               // 144                  packet.ReadBit("Horizontal groups"' i);                     // 143                  packet.ReadBit("Talent spec 2"' i);                         // 166                  packet.ReadBit("Incoming heals"' i);                        // 137                  packet.ReadBit("Dispellable debuffs"' i);                   // 139                  packet.ReadBit("25 player group"' i);                       // 163                  packet.ReadBit("PvE"' i);                                   // 168                  packet.ReadBit("5 player group"' i);                        // 160                  packet.ReadBit("15 player group"' i);                       // 162                  packet.ReadBit("2 player group"' i);                        // 158              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: var itemGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: var playerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: itemGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: playerGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: itemGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: playerGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: playerGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: playerGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: playerGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: itemGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: itemGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: itemGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: playerGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: itemGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(itemGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(itemGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(itemGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(itemGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(itemGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(itemGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemEnchantTimeUpdate,The following statement contains a magic number: packet.ReadXORByte(playerGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemRefundInfo,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemRefundInfo,The following statement contains a magic number: packet.StartBitStream(guid' 1' 0' 3' 2' 7' 4' 5' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemRefundInfo,The following statement contains a magic number: packet.StartBitStream(guid' 1' 0' 3' 2' 7' 4' 5' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemRefundInfo,The following statement contains a magic number: packet.StartBitStream(guid' 1' 0' 3' 2' 7' 4' 5' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemRefundInfo,The following statement contains a magic number: packet.StartBitStream(guid' 1' 0' 3' 2' 7' 4' 5' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemRefundInfo,The following statement contains a magic number: packet.StartBitStream(guid' 1' 0' 3' 2' 7' 4' 5' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemRefundInfo,The following statement contains a magic number: packet.StartBitStream(guid' 1' 0' 3' 2' 7' 4' 5' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemRefundInfo,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 7' 5' 1' 0' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemRefundInfo,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 7' 5' 1' 0' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemRefundInfo,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 7' 5' 1' 0' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemRefundInfo,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 7' 5' 1' 0' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemRefundInfo,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 7' 5' 1' 0' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ItemHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ItemHandler.cs,HandleItemRefundInfo,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 7' 5' 1' 0' 6' 4' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: var count = packet.ReadBits("Count"' 18);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  bit2C[i] = packet.ReadBit();                  subjectLength[i] = packet.ReadBits(8);                  bodyLength[i] = packet.ReadBits(13);                  bit24[i] = packet.ReadBit();                  bit1C[i] = packet.ReadBit();                  itemCount[i] = packet.ReadBits(17);                  sender[i] = packet.ReadBit();                  if (sender[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 2' 6' 7' 0' 5' 3' 1' 4);                  }                    bit84[i] = new uint[itemCount[i]];                    for (var j = 0; j < itemCount[i]; ++j)                      bit84[i][j] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  bit2C[i] = packet.ReadBit();                  subjectLength[i] = packet.ReadBits(8);                  bodyLength[i] = packet.ReadBits(13);                  bit24[i] = packet.ReadBit();                  bit1C[i] = packet.ReadBit();                  itemCount[i] = packet.ReadBits(17);                  sender[i] = packet.ReadBit();                  if (sender[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 2' 6' 7' 0' 5' 3' 1' 4);                  }                    bit84[i] = new uint[itemCount[i]];                    for (var j = 0; j < itemCount[i]; ++j)                      bit84[i][j] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  bit2C[i] = packet.ReadBit();                  subjectLength[i] = packet.ReadBits(8);                  bodyLength[i] = packet.ReadBits(13);                  bit24[i] = packet.ReadBit();                  bit1C[i] = packet.ReadBit();                  itemCount[i] = packet.ReadBits(17);                  sender[i] = packet.ReadBit();                  if (sender[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 2' 6' 7' 0' 5' 3' 1' 4);                  }                    bit84[i] = new uint[itemCount[i]];                    for (var j = 0; j < itemCount[i]; ++j)                      bit84[i][j] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  bit2C[i] = packet.ReadBit();                  subjectLength[i] = packet.ReadBits(8);                  bodyLength[i] = packet.ReadBits(13);                  bit24[i] = packet.ReadBit();                  bit1C[i] = packet.ReadBit();                  itemCount[i] = packet.ReadBits(17);                  sender[i] = packet.ReadBit();                  if (sender[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 2' 6' 7' 0' 5' 3' 1' 4);                  }                    bit84[i] = new uint[itemCount[i]];                    for (var j = 0; j < itemCount[i]; ++j)                      bit84[i][j] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  bit2C[i] = packet.ReadBit();                  subjectLength[i] = packet.ReadBits(8);                  bodyLength[i] = packet.ReadBits(13);                  bit24[i] = packet.ReadBit();                  bit1C[i] = packet.ReadBit();                  itemCount[i] = packet.ReadBits(17);                  sender[i] = packet.ReadBit();                  if (sender[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 2' 6' 7' 0' 5' 3' 1' 4);                  }                    bit84[i] = new uint[itemCount[i]];                    for (var j = 0; j < itemCount[i]; ++j)                      bit84[i][j] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  bit2C[i] = packet.ReadBit();                  subjectLength[i] = packet.ReadBits(8);                  bodyLength[i] = packet.ReadBits(13);                  bit24[i] = packet.ReadBit();                  bit1C[i] = packet.ReadBit();                  itemCount[i] = packet.ReadBits(17);                  sender[i] = packet.ReadBit();                  if (sender[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 2' 6' 7' 0' 5' 3' 1' 4);                  }                    bit84[i] = new uint[itemCount[i]];                    for (var j = 0; j < itemCount[i]; ++j)                      bit84[i][j] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  bit2C[i] = packet.ReadBit();                  subjectLength[i] = packet.ReadBits(8);                  bodyLength[i] = packet.ReadBits(13);                  bit24[i] = packet.ReadBit();                  bit1C[i] = packet.ReadBit();                  itemCount[i] = packet.ReadBits(17);                  sender[i] = packet.ReadBit();                  if (sender[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 2' 6' 7' 0' 5' 3' 1' 4);                  }                    bit84[i] = new uint[itemCount[i]];                    for (var j = 0; j < itemCount[i]; ++j)                      bit84[i][j] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  bit2C[i] = packet.ReadBit();                  subjectLength[i] = packet.ReadBits(8);                  bodyLength[i] = packet.ReadBits(13);                  bit24[i] = packet.ReadBit();                  bit1C[i] = packet.ReadBit();                  itemCount[i] = packet.ReadBits(17);                  sender[i] = packet.ReadBit();                  if (sender[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 2' 6' 7' 0' 5' 3' 1' 4);                  }                    bit84[i] = new uint[itemCount[i]];                    for (var j = 0; j < itemCount[i]; ++j)                      bit84[i][j] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  bit2C[i] = packet.ReadBit();                  subjectLength[i] = packet.ReadBits(8);                  bodyLength[i] = packet.ReadBits(13);                  bit24[i] = packet.ReadBit();                  bit1C[i] = packet.ReadBit();                  itemCount[i] = packet.ReadBits(17);                  sender[i] = packet.ReadBit();                  if (sender[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 2' 6' 7' 0' 5' 3' 1' 4);                  }                    bit84[i] = new uint[itemCount[i]];                    for (var j = 0; j < itemCount[i]; ++j)                      bit84[i][j] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  bit2C[i] = packet.ReadBit();                  subjectLength[i] = packet.ReadBits(8);                  bodyLength[i] = packet.ReadBits(13);                  bit24[i] = packet.ReadBit();                  bit1C[i] = packet.ReadBit();                  itemCount[i] = packet.ReadBits(17);                  sender[i] = packet.ReadBit();                  if (sender[i])                  {                      guid[i] = new byte[8];                      packet.StartBitStream(guid[i]' 2' 6' 7' 0' 5' 3' 1' 4);                  }                    bit84[i] = new uint[itemCount[i]];                    for (var j = 0; j < itemCount[i]; ++j)                      bit84[i][j] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                    for (var j = 0; j < itemCount[i]; ++j)                  {                      packet.ReadInt32("GuidLow"' i' j);                        var len = packet.ReadInt32();                        packet.ReadBytes(len);                        packet.ReadInt32("MaxDurability"' i' j);                      packet.ReadInt32("SuffixFactor"' i' j);                      for (var k = 0; k < 8; ++k)                      {                          packet.ReadInt32("EnchantmentDuration"' i' j' k);                          packet.ReadInt32("EnchantmentId"' i' j' k);                          packet.ReadInt32("EnchantmentCharges"' i' j' k);                      }                      packet.ReadInt32("ItemRandomPropertyId"' i' j);                      packet.ReadInt32("SpellCharges"' i' j);                      packet.ReadInt32("Durability"' i' j);                      packet.ReadInt32("Count"' i' j);                      packet.ReadByte("Slot"' i' j);                      packet.AddValue("bit84"' bit84[i][j]' i' j);                      packet.ReadUInt32<ItemId>("Item Id"' i' j);                  }                    packet.ReadWoWString("Body"' bodyLength[i]' i);                  packet.ReadInt32("MessageID"' i);                  if (sender[i])                  {                      packet.ParseBitStream(guid[i]' 4' 0' 5' 3' 1' 7' 2' 6);                      packet.WriteGuid("Guid"' guid[i]);                  }                  packet.ReadInt32("Unk1"' i);                  packet.ReadInt64("COD"' i);                  packet.ReadWoWString("Subject"' subjectLength[i]' i);                  packet.ReadInt32("Unk2"' i);                  packet.ReadSingle("Time"' i);                  packet.ReadInt64("Money"' i);                  packet.ReadInt32("Flags"' i);                    if (bit2C[i])                      packet.ReadInt32("Unk4"' i);                    packet.ReadByte("MessageType"' i);                  packet.ReadInt32("Unk5"' i);                    if (bit24[i])                      packet.ReadInt32("RealmId1"' i);                    if (bit1C[i])                      packet.ReadInt32("RealmId2"' i);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                    for (var j = 0; j < itemCount[i]; ++j)                  {                      packet.ReadInt32("GuidLow"' i' j);                        var len = packet.ReadInt32();                        packet.ReadBytes(len);                        packet.ReadInt32("MaxDurability"' i' j);                      packet.ReadInt32("SuffixFactor"' i' j);                      for (var k = 0; k < 8; ++k)                      {                          packet.ReadInt32("EnchantmentDuration"' i' j' k);                          packet.ReadInt32("EnchantmentId"' i' j' k);                          packet.ReadInt32("EnchantmentCharges"' i' j' k);                      }                      packet.ReadInt32("ItemRandomPropertyId"' i' j);                      packet.ReadInt32("SpellCharges"' i' j);                      packet.ReadInt32("Durability"' i' j);                      packet.ReadInt32("Count"' i' j);                      packet.ReadByte("Slot"' i' j);                      packet.AddValue("bit84"' bit84[i][j]' i' j);                      packet.ReadUInt32<ItemId>("Item Id"' i' j);                  }                    packet.ReadWoWString("Body"' bodyLength[i]' i);                  packet.ReadInt32("MessageID"' i);                  if (sender[i])                  {                      packet.ParseBitStream(guid[i]' 4' 0' 5' 3' 1' 7' 2' 6);                      packet.WriteGuid("Guid"' guid[i]);                  }                  packet.ReadInt32("Unk1"' i);                  packet.ReadInt64("COD"' i);                  packet.ReadWoWString("Subject"' subjectLength[i]' i);                  packet.ReadInt32("Unk2"' i);                  packet.ReadSingle("Time"' i);                  packet.ReadInt64("Money"' i);                  packet.ReadInt32("Flags"' i);                    if (bit2C[i])                      packet.ReadInt32("Unk4"' i);                    packet.ReadByte("MessageType"' i);                  packet.ReadInt32("Unk5"' i);                    if (bit24[i])                      packet.ReadInt32("RealmId1"' i);                    if (bit1C[i])                      packet.ReadInt32("RealmId2"' i);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                    for (var j = 0; j < itemCount[i]; ++j)                  {                      packet.ReadInt32("GuidLow"' i' j);                        var len = packet.ReadInt32();                        packet.ReadBytes(len);                        packet.ReadInt32("MaxDurability"' i' j);                      packet.ReadInt32("SuffixFactor"' i' j);                      for (var k = 0; k < 8; ++k)                      {                          packet.ReadInt32("EnchantmentDuration"' i' j' k);                          packet.ReadInt32("EnchantmentId"' i' j' k);                          packet.ReadInt32("EnchantmentCharges"' i' j' k);                      }                      packet.ReadInt32("ItemRandomPropertyId"' i' j);                      packet.ReadInt32("SpellCharges"' i' j);                      packet.ReadInt32("Durability"' i' j);                      packet.ReadInt32("Count"' i' j);                      packet.ReadByte("Slot"' i' j);                      packet.AddValue("bit84"' bit84[i][j]' i' j);                      packet.ReadUInt32<ItemId>("Item Id"' i' j);                  }                    packet.ReadWoWString("Body"' bodyLength[i]' i);                  packet.ReadInt32("MessageID"' i);                  if (sender[i])                  {                      packet.ParseBitStream(guid[i]' 4' 0' 5' 3' 1' 7' 2' 6);                      packet.WriteGuid("Guid"' guid[i]);                  }                  packet.ReadInt32("Unk1"' i);                  packet.ReadInt64("COD"' i);                  packet.ReadWoWString("Subject"' subjectLength[i]' i);                  packet.ReadInt32("Unk2"' i);                  packet.ReadSingle("Time"' i);                  packet.ReadInt64("Money"' i);                  packet.ReadInt32("Flags"' i);                    if (bit2C[i])                      packet.ReadInt32("Unk4"' i);                    packet.ReadByte("MessageType"' i);                  packet.ReadInt32("Unk5"' i);                    if (bit24[i])                      packet.ReadInt32("RealmId1"' i);                    if (bit1C[i])                      packet.ReadInt32("RealmId2"' i);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                    for (var j = 0; j < itemCount[i]; ++j)                  {                      packet.ReadInt32("GuidLow"' i' j);                        var len = packet.ReadInt32();                        packet.ReadBytes(len);                        packet.ReadInt32("MaxDurability"' i' j);                      packet.ReadInt32("SuffixFactor"' i' j);                      for (var k = 0; k < 8; ++k)                      {                          packet.ReadInt32("EnchantmentDuration"' i' j' k);                          packet.ReadInt32("EnchantmentId"' i' j' k);                          packet.ReadInt32("EnchantmentCharges"' i' j' k);                      }                      packet.ReadInt32("ItemRandomPropertyId"' i' j);                      packet.ReadInt32("SpellCharges"' i' j);                      packet.ReadInt32("Durability"' i' j);                      packet.ReadInt32("Count"' i' j);                      packet.ReadByte("Slot"' i' j);                      packet.AddValue("bit84"' bit84[i][j]' i' j);                      packet.ReadUInt32<ItemId>("Item Id"' i' j);                  }                    packet.ReadWoWString("Body"' bodyLength[i]' i);                  packet.ReadInt32("MessageID"' i);                  if (sender[i])                  {                      packet.ParseBitStream(guid[i]' 4' 0' 5' 3' 1' 7' 2' 6);                      packet.WriteGuid("Guid"' guid[i]);                  }                  packet.ReadInt32("Unk1"' i);                  packet.ReadInt64("COD"' i);                  packet.ReadWoWString("Subject"' subjectLength[i]' i);                  packet.ReadInt32("Unk2"' i);                  packet.ReadSingle("Time"' i);                  packet.ReadInt64("Money"' i);                  packet.ReadInt32("Flags"' i);                    if (bit2C[i])                      packet.ReadInt32("Unk4"' i);                    packet.ReadByte("MessageType"' i);                  packet.ReadInt32("Unk5"' i);                    if (bit24[i])                      packet.ReadInt32("RealmId1"' i);                    if (bit1C[i])                      packet.ReadInt32("RealmId2"' i);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                    for (var j = 0; j < itemCount[i]; ++j)                  {                      packet.ReadInt32("GuidLow"' i' j);                        var len = packet.ReadInt32();                        packet.ReadBytes(len);                        packet.ReadInt32("MaxDurability"' i' j);                      packet.ReadInt32("SuffixFactor"' i' j);                      for (var k = 0; k < 8; ++k)                      {                          packet.ReadInt32("EnchantmentDuration"' i' j' k);                          packet.ReadInt32("EnchantmentId"' i' j' k);                          packet.ReadInt32("EnchantmentCharges"' i' j' k);                      }                      packet.ReadInt32("ItemRandomPropertyId"' i' j);                      packet.ReadInt32("SpellCharges"' i' j);                      packet.ReadInt32("Durability"' i' j);                      packet.ReadInt32("Count"' i' j);                      packet.ReadByte("Slot"' i' j);                      packet.AddValue("bit84"' bit84[i][j]' i' j);                      packet.ReadUInt32<ItemId>("Item Id"' i' j);                  }                    packet.ReadWoWString("Body"' bodyLength[i]' i);                  packet.ReadInt32("MessageID"' i);                  if (sender[i])                  {                      packet.ParseBitStream(guid[i]' 4' 0' 5' 3' 1' 7' 2' 6);                      packet.WriteGuid("Guid"' guid[i]);                  }                  packet.ReadInt32("Unk1"' i);                  packet.ReadInt64("COD"' i);                  packet.ReadWoWString("Subject"' subjectLength[i]' i);                  packet.ReadInt32("Unk2"' i);                  packet.ReadSingle("Time"' i);                  packet.ReadInt64("Money"' i);                  packet.ReadInt32("Flags"' i);                    if (bit2C[i])                      packet.ReadInt32("Unk4"' i);                    packet.ReadByte("MessageType"' i);                  packet.ReadInt32("Unk5"' i);                    if (bit24[i])                      packet.ReadInt32("RealmId1"' i);                    if (bit1C[i])                      packet.ReadInt32("RealmId2"' i);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                    for (var j = 0; j < itemCount[i]; ++j)                  {                      packet.ReadInt32("GuidLow"' i' j);                        var len = packet.ReadInt32();                        packet.ReadBytes(len);                        packet.ReadInt32("MaxDurability"' i' j);                      packet.ReadInt32("SuffixFactor"' i' j);                      for (var k = 0; k < 8; ++k)                      {                          packet.ReadInt32("EnchantmentDuration"' i' j' k);                          packet.ReadInt32("EnchantmentId"' i' j' k);                          packet.ReadInt32("EnchantmentCharges"' i' j' k);                      }                      packet.ReadInt32("ItemRandomPropertyId"' i' j);                      packet.ReadInt32("SpellCharges"' i' j);                      packet.ReadInt32("Durability"' i' j);                      packet.ReadInt32("Count"' i' j);                      packet.ReadByte("Slot"' i' j);                      packet.AddValue("bit84"' bit84[i][j]' i' j);                      packet.ReadUInt32<ItemId>("Item Id"' i' j);                  }                    packet.ReadWoWString("Body"' bodyLength[i]' i);                  packet.ReadInt32("MessageID"' i);                  if (sender[i])                  {                      packet.ParseBitStream(guid[i]' 4' 0' 5' 3' 1' 7' 2' 6);                      packet.WriteGuid("Guid"' guid[i]);                  }                  packet.ReadInt32("Unk1"' i);                  packet.ReadInt64("COD"' i);                  packet.ReadWoWString("Subject"' subjectLength[i]' i);                  packet.ReadInt32("Unk2"' i);                  packet.ReadSingle("Time"' i);                  packet.ReadInt64("Money"' i);                  packet.ReadInt32("Flags"' i);                    if (bit2C[i])                      packet.ReadInt32("Unk4"' i);                    packet.ReadByte("MessageType"' i);                  packet.ReadInt32("Unk5"' i);                    if (bit24[i])                      packet.ReadInt32("RealmId1"' i);                    if (bit1C[i])                      packet.ReadInt32("RealmId2"' i);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailListResult,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                    for (var j = 0; j < itemCount[i]; ++j)                  {                      packet.ReadInt32("GuidLow"' i' j);                        var len = packet.ReadInt32();                        packet.ReadBytes(len);                        packet.ReadInt32("MaxDurability"' i' j);                      packet.ReadInt32("SuffixFactor"' i' j);                      for (var k = 0; k < 8; ++k)                      {                          packet.ReadInt32("EnchantmentDuration"' i' j' k);                          packet.ReadInt32("EnchantmentId"' i' j' k);                          packet.ReadInt32("EnchantmentCharges"' i' j' k);                      }                      packet.ReadInt32("ItemRandomPropertyId"' i' j);                      packet.ReadInt32("SpellCharges"' i' j);                      packet.ReadInt32("Durability"' i' j);                      packet.ReadInt32("Count"' i' j);                      packet.ReadByte("Slot"' i' j);                      packet.AddValue("bit84"' bit84[i][j]' i' j);                      packet.ReadUInt32<ItemId>("Item Id"' i' j);                  }                    packet.ReadWoWString("Body"' bodyLength[i]' i);                  packet.ReadInt32("MessageID"' i);                  if (sender[i])                  {                      packet.ParseBitStream(guid[i]' 4' 0' 5' 3' 1' 7' 2' 6);                      packet.WriteGuid("Guid"' guid[i]);                  }                  packet.ReadInt32("Unk1"' i);                  packet.ReadInt64("COD"' i);                  packet.ReadWoWString("Subject"' subjectLength[i]' i);                  packet.ReadInt32("Unk2"' i);                  packet.ReadSingle("Time"' i);                  packet.ReadInt64("Money"' i);                  packet.ReadInt32("Flags"' i);                    if (bit2C[i])                      packet.ReadInt32("Unk4"' i);                    packet.ReadByte("MessageType"' i);                  packet.ReadInt32("Unk5"' i);                    if (bit24[i])                      packet.ReadInt32("RealmId1"' i);                    if (bit1C[i])                      packet.ReadInt32("RealmId2"' i);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailReturnToSender,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailReturnToSender,The following statement contains a magic number: packet.StartBitStream(guid' 2' 0' 4' 6' 3' 1' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailReturnToSender,The following statement contains a magic number: packet.StartBitStream(guid' 2' 0' 4' 6' 3' 1' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailReturnToSender,The following statement contains a magic number: packet.StartBitStream(guid' 2' 0' 4' 6' 3' 1' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailReturnToSender,The following statement contains a magic number: packet.StartBitStream(guid' 2' 0' 4' 6' 3' 1' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailReturnToSender,The following statement contains a magic number: packet.StartBitStream(guid' 2' 0' 4' 6' 3' 1' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailReturnToSender,The following statement contains a magic number: packet.StartBitStream(guid' 2' 0' 4' 6' 3' 1' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailReturnToSender,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 6' 2' 0' 3' 1' 4' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailReturnToSender,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 6' 2' 0' 3' 1' 4' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailReturnToSender,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 6' 2' 0' 3' 1' 4' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailReturnToSender,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 6' 2' 0' 3' 1' 4' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailReturnToSender,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 6' 2' 0' 3' 1' 4' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MailHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MailHandler.cs,HandleMailReturnToSender,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 6' 2' 0' 3' 1' 4' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: var counter = (int)packet.ReadBits("List count"' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  accountId[i] = new byte[8];                  playerGUID[i] = new byte[8];                  guildGUID[i] = new byte[8];                    accountId[i][2] = packet.ReadBit();                  playerGUID[i][2] = packet.ReadBit();                  accountId[i][7] = packet.ReadBit();                  guildGUID[i][5] = packet.ReadBit();                  guildNameLength[i] = packet.ReadBits(7);                  accountId[i][1] = packet.ReadBit();                  accountId[i][5] = packet.ReadBit();                  guildGUID[i][7] = packet.ReadBit();                  playerGUID[i][5] = packet.ReadBit();                  bitED[i] = packet.ReadBit();                  guildGUID[i][1] = packet.ReadBit();                  playerGUID[i][6] = packet.ReadBit();                  guildGUID[i][2] = packet.ReadBit();                  playerGUID[i][4] = packet.ReadBit();                  guildGUID[i][0] = packet.ReadBit();                  guildGUID[i][3] = packet.ReadBit();                  accountId[i][6] = packet.ReadBit();                  bit214[i] = packet.ReadBit();                  playerGUID[i][1] = packet.ReadBit();                  guildGUID[i][4] = packet.ReadBit();                  accountId[i][0] = packet.ReadBit();                    bits14[i] = new uint[5];                  for (var j = 0; j < 5; ++j)                      bits14[i][j] = packet.ReadBits(7);                    playerGUID[i][3] = packet.ReadBit();                  guildGUID[i][6] = packet.ReadBit();                  playerGUID[i][0] = packet.ReadBit();                  accountId[i][4] = packet.ReadBit();                  accountId[i][3] = packet.ReadBit();                  playerGUID[i][7] = packet.ReadBit();                  playerNameLength[i] = packet.ReadBits(6);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(playerGUID[i]' 1);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 4);                  packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 1);                  packet.ReadXORByte(playerGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 2);                  packet.ReadXORByte(guildGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 6);                  packet.ReadInt32("Unk1"' i);                  packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadByteE<Class>("Class"' i);                  packet.ReadXORByte(accountId[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 2);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 3);                  packet.ReadByteE<Race>("Race"' i);                  packet.ReadXORByte(guildGUID[i]' 7);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 5);                  packet.ReadXORByte(accountId[i]' 0);                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadByte("Level"' i);                  packet.ReadInt32<ZoneId>("Zone Id"' i);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(playerGUID[i]' 1);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 4);                  packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 1);                  packet.ReadXORByte(playerGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 2);                  packet.ReadXORByte(guildGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 6);                  packet.ReadInt32("Unk1"' i);                  packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadByteE<Class>("Class"' i);                  packet.ReadXORByte(accountId[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 2);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 3);                  packet.ReadByteE<Race>("Race"' i);                  packet.ReadXORByte(guildGUID[i]' 7);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 5);                  packet.ReadXORByte(accountId[i]' 0);                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadByte("Level"' i);                  packet.ReadInt32<ZoneId>("Zone Id"' i);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(playerGUID[i]' 1);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 4);                  packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 1);                  packet.ReadXORByte(playerGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 2);                  packet.ReadXORByte(guildGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 6);                  packet.ReadInt32("Unk1"' i);                  packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadByteE<Class>("Class"' i);                  packet.ReadXORByte(accountId[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 2);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 3);                  packet.ReadByteE<Race>("Race"' i);                  packet.ReadXORByte(guildGUID[i]' 7);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 5);                  packet.ReadXORByte(accountId[i]' 0);                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadByte("Level"' i);                  packet.ReadInt32<ZoneId>("Zone Id"' i);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(playerGUID[i]' 1);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 4);                  packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 1);                  packet.ReadXORByte(playerGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 2);                  packet.ReadXORByte(guildGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 6);                  packet.ReadInt32("Unk1"' i);                  packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadByteE<Class>("Class"' i);                  packet.ReadXORByte(accountId[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 2);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 3);                  packet.ReadByteE<Race>("Race"' i);                  packet.ReadXORByte(guildGUID[i]' 7);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 5);                  packet.ReadXORByte(accountId[i]' 0);                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadByte("Level"' i);                  packet.ReadInt32<ZoneId>("Zone Id"' i);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(playerGUID[i]' 1);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 4);                  packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 1);                  packet.ReadXORByte(playerGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 2);                  packet.ReadXORByte(guildGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 6);                  packet.ReadInt32("Unk1"' i);                  packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadByteE<Class>("Class"' i);                  packet.ReadXORByte(accountId[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 2);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 3);                  packet.ReadByteE<Race>("Race"' i);                  packet.ReadXORByte(guildGUID[i]' 7);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 5);                  packet.ReadXORByte(accountId[i]' 0);                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadByte("Level"' i);                  packet.ReadInt32<ZoneId>("Zone Id"' i);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(playerGUID[i]' 1);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 4);                  packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 1);                  packet.ReadXORByte(playerGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 2);                  packet.ReadXORByte(guildGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 6);                  packet.ReadInt32("Unk1"' i);                  packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadByteE<Class>("Class"' i);                  packet.ReadXORByte(accountId[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 2);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 3);                  packet.ReadByteE<Race>("Race"' i);                  packet.ReadXORByte(guildGUID[i]' 7);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 5);                  packet.ReadXORByte(accountId[i]' 0);                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadByte("Level"' i);                  packet.ReadInt32<ZoneId>("Zone Id"' i);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(playerGUID[i]' 1);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 4);                  packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 1);                  packet.ReadXORByte(playerGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 2);                  packet.ReadXORByte(guildGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 6);                  packet.ReadInt32("Unk1"' i);                  packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadByteE<Class>("Class"' i);                  packet.ReadXORByte(accountId[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 2);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 3);                  packet.ReadByteE<Race>("Race"' i);                  packet.ReadXORByte(guildGUID[i]' 7);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 5);                  packet.ReadXORByte(accountId[i]' 0);                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadByte("Level"' i);                  packet.ReadInt32<ZoneId>("Zone Id"' i);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(playerGUID[i]' 1);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 4);                  packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 1);                  packet.ReadXORByte(playerGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 2);                  packet.ReadXORByte(guildGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 6);                  packet.ReadInt32("Unk1"' i);                  packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadByteE<Class>("Class"' i);                  packet.ReadXORByte(accountId[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 2);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 3);                  packet.ReadByteE<Race>("Race"' i);                  packet.ReadXORByte(guildGUID[i]' 7);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 5);                  packet.ReadXORByte(accountId[i]' 0);                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadByte("Level"' i);                  packet.ReadInt32<ZoneId>("Zone Id"' i);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(playerGUID[i]' 1);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 4);                  packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 1);                  packet.ReadXORByte(playerGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 2);                  packet.ReadXORByte(guildGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 6);                  packet.ReadInt32("Unk1"' i);                  packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadByteE<Class>("Class"' i);                  packet.ReadXORByte(accountId[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 2);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 3);                  packet.ReadByteE<Race>("Race"' i);                  packet.ReadXORByte(guildGUID[i]' 7);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 5);                  packet.ReadXORByte(accountId[i]' 0);                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadByte("Level"' i);                  packet.ReadInt32<ZoneId>("Zone Id"' i);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(playerGUID[i]' 1);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 4);                  packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 1);                  packet.ReadXORByte(playerGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 2);                  packet.ReadXORByte(guildGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 6);                  packet.ReadInt32("Unk1"' i);                  packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadByteE<Class>("Class"' i);                  packet.ReadXORByte(accountId[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 2);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 3);                  packet.ReadByteE<Race>("Race"' i);                  packet.ReadXORByte(guildGUID[i]' 7);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 5);                  packet.ReadXORByte(accountId[i]' 0);                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadByte("Level"' i);                  packet.ReadInt32<ZoneId>("Zone Id"' i);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(playerGUID[i]' 1);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 4);                  packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 1);                  packet.ReadXORByte(playerGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 2);                  packet.ReadXORByte(guildGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 6);                  packet.ReadInt32("Unk1"' i);                  packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadByteE<Class>("Class"' i);                  packet.ReadXORByte(accountId[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 2);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 3);                  packet.ReadByteE<Race>("Race"' i);                  packet.ReadXORByte(guildGUID[i]' 7);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 5);                  packet.ReadXORByte(accountId[i]' 0);                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadByte("Level"' i);                  packet.ReadInt32<ZoneId>("Zone Id"' i);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(playerGUID[i]' 1);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 4);                  packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 1);                  packet.ReadXORByte(playerGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 2);                  packet.ReadXORByte(guildGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 6);                  packet.ReadInt32("Unk1"' i);                  packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadByteE<Class>("Class"' i);                  packet.ReadXORByte(accountId[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 2);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 3);                  packet.ReadByteE<Race>("Race"' i);                  packet.ReadXORByte(guildGUID[i]' 7);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 5);                  packet.ReadXORByte(accountId[i]' 0);                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadByte("Level"' i);                  packet.ReadInt32<ZoneId>("Zone Id"' i);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(playerGUID[i]' 1);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 4);                  packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 1);                  packet.ReadXORByte(playerGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 2);                  packet.ReadXORByte(guildGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 6);                  packet.ReadInt32("Unk1"' i);                  packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadByteE<Class>("Class"' i);                  packet.ReadXORByte(accountId[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 2);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 3);                  packet.ReadByteE<Race>("Race"' i);                  packet.ReadXORByte(guildGUID[i]' 7);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 5);                  packet.ReadXORByte(accountId[i]' 0);                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadByte("Level"' i);                  packet.ReadInt32<ZoneId>("Zone Id"' i);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(playerGUID[i]' 1);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 4);                  packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 1);                  packet.ReadXORByte(playerGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 2);                  packet.ReadXORByte(guildGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 6);                  packet.ReadInt32("Unk1"' i);                  packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadByteE<Class>("Class"' i);                  packet.ReadXORByte(accountId[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 2);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 3);                  packet.ReadByteE<Race>("Race"' i);                  packet.ReadXORByte(guildGUID[i]' 7);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 5);                  packet.ReadXORByte(accountId[i]' 0);                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadByte("Level"' i);                  packet.ReadInt32<ZoneId>("Zone Id"' i);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(playerGUID[i]' 1);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 4);                  packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 1);                  packet.ReadXORByte(playerGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 2);                  packet.ReadXORByte(guildGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 6);                  packet.ReadInt32("Unk1"' i);                  packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadByteE<Class>("Class"' i);                  packet.ReadXORByte(accountId[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 2);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 3);                  packet.ReadByteE<Race>("Race"' i);                  packet.ReadXORByte(guildGUID[i]' 7);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 5);                  packet.ReadXORByte(accountId[i]' 0);                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadByte("Level"' i);                  packet.ReadInt32<ZoneId>("Zone Id"' i);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(playerGUID[i]' 1);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 4);                  packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 1);                  packet.ReadXORByte(playerGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 2);                  packet.ReadXORByte(guildGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 6);                  packet.ReadInt32("Unk1"' i);                  packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadByteE<Class>("Class"' i);                  packet.ReadXORByte(accountId[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 2);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 3);                  packet.ReadByteE<Race>("Race"' i);                  packet.ReadXORByte(guildGUID[i]' 7);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 5);                  packet.ReadXORByte(accountId[i]' 0);                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadByte("Level"' i);                  packet.ReadInt32<ZoneId>("Zone Id"' i);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(playerGUID[i]' 1);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 4);                  packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 1);                  packet.ReadXORByte(playerGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 2);                  packet.ReadXORByte(guildGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 6);                  packet.ReadInt32("Unk1"' i);                  packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadByteE<Class>("Class"' i);                  packet.ReadXORByte(accountId[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 2);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 3);                  packet.ReadByteE<Race>("Race"' i);                  packet.ReadXORByte(guildGUID[i]' 7);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 5);                  packet.ReadXORByte(accountId[i]' 0);                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadByte("Level"' i);                  packet.ReadInt32<ZoneId>("Zone Id"' i);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(playerGUID[i]' 1);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 4);                  packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 1);                  packet.ReadXORByte(playerGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 2);                  packet.ReadXORByte(guildGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 6);                  packet.ReadInt32("Unk1"' i);                  packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadByteE<Class>("Class"' i);                  packet.ReadXORByte(accountId[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 2);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 3);                  packet.ReadByteE<Race>("Race"' i);                  packet.ReadXORByte(guildGUID[i]' 7);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 5);                  packet.ReadXORByte(accountId[i]' 0);                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadByte("Level"' i);                  packet.ReadInt32<ZoneId>("Zone Id"' i);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWho,The following statement contains a magic number: for (var i = 0; i < counter; ++i)              {                  packet.ReadXORByte(playerGUID[i]' 1);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 7);                  packet.ReadInt32("RealmID"' i);                  packet.ReadXORByte(playerGUID[i]' 4);                  packet.ReadWoWString("Player Name"' playerNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 1);                  packet.ReadXORByte(playerGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 2);                  packet.ReadXORByte(guildGUID[i]' 0);                  packet.ReadXORByte(guildGUID[i]' 4);                  packet.ReadXORByte(playerGUID[i]' 3);                  packet.ReadXORByte(guildGUID[i]' 6);                  packet.ReadInt32("Unk1"' i);                  packet.ReadWoWString("Guild Name"' guildNameLength[i]' i);                  packet.ReadXORByte(guildGUID[i]' 3);                  packet.ReadXORByte(accountId[i]' 4);                  packet.ReadByteE<Class>("Class"' i);                  packet.ReadXORByte(accountId[i]' 7);                  packet.ReadXORByte(playerGUID[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 2);                    for (var j = 0; j < 5; ++j)                      packet.ReadWoWString("String14"' bits14[i][j]);                    packet.ReadXORByte(accountId[i]' 2);                  packet.ReadXORByte(accountId[i]' 3);                  packet.ReadByteE<Race>("Race"' i);                  packet.ReadXORByte(guildGUID[i]' 7);                  packet.ReadXORByte(accountId[i]' 1);                  packet.ReadXORByte(accountId[i]' 5);                  packet.ReadXORByte(accountId[i]' 6);                  packet.ReadXORByte(playerGUID[i]' 5);                  packet.ReadXORByte(accountId[i]' 0);                  packet.ReadByteE<Gender>("Gender"' i);                  packet.ReadXORByte(guildGUID[i]' 5);                  packet.ReadByte("Level"' i);                  packet.ReadInt32<ZoneId>("Zone Id"' i);                    packet.WriteGuid("PlayerGUID"' playerGUID[i]' i);                  packet.WriteGuid("GuildGUID"' guildGUID[i]' i);                  packet.AddValue("Account"' BitConverter.ToUInt64(accountId[i]' 0)' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(7' 6' 5' 4' 3' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(7' 6' 5' 4' 3' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(7' 6' 5' 4' 3' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(7' 6' 5' 4' 3' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(7' 6' 5' 4' 3' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: var guid = packet.StartBitStream(7' 6' 5' 4' 3' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 7' 3' 5' 1' 4' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 7' 3' 5' 1' 4' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 7' 3' 5' 1' 4' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 7' 3' 5' 1' 4' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 7' 3' 5' 1' 4' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSetSelection,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 7' 3' 5' 1' 4' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWhoRequest,The following statement contains a magic number: var bits1AB = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWhoRequest,The following statement contains a magic number: var PlayerNameLen = packet.ReadBits(6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWhoRequest,The following statement contains a magic number: var zones = packet.ReadBits(4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWhoRequest,The following statement contains a magic number: var bits73 = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWhoRequest,The following statement contains a magic number: var guildNameLen = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWhoRequest,The following statement contains a magic number: var patterns = packet.ReadBits(3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleWhoRequest,The following statement contains a magic number: for (var i = 0; i < patterns; ++i)                  bits2B8[i] = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSpellClick,The following statement contains a magic number: var guidBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSpellClick,The following statement contains a magic number: packet.StartBitStream(guidBytes' 7' 4' 0' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSpellClick,The following statement contains a magic number: packet.StartBitStream(guidBytes' 7' 4' 0' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSpellClick,The following statement contains a magic number: packet.StartBitStream(guidBytes' 7' 4' 0' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSpellClick,The following statement contains a magic number: packet.StartBitStream(guidBytes' 7' 4' 0' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSpellClick,The following statement contains a magic number: packet.StartBitStream(guidBytes' 7' 4' 0' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSpellClick,The following statement contains a magic number: packet.StartBitStream(guidBytes' 1' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSpellClick,The following statement contains a magic number: packet.ParseBitStream(guidBytes' 6' 1' 5' 4' 7' 2' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSpellClick,The following statement contains a magic number: packet.ParseBitStream(guidBytes' 6' 1' 5' 4' 7' 2' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSpellClick,The following statement contains a magic number: packet.ParseBitStream(guidBytes' 6' 1' 5' 4' 7' 2' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSpellClick,The following statement contains a magic number: packet.ParseBitStream(guidBytes' 6' 1' 5' 4' 7' 2' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSpellClick,The following statement contains a magic number: packet.ParseBitStream(guidBytes' 6' 1' 5' 4' 7' 2' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleSpellClick,The following statement contains a magic number: packet.ParseBitStream(guidBytes' 6' 1' 5' 4' 7' 2' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 7' 6' 0' 5' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 7' 6' 0' 5' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 7' 6' 0' 5' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 7' 6' 0' 5' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 7' 6' 0' 5' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.StartBitStream(guid' 2' 3' 7' 6' 0' 5' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 4' 7' 5' 0' 6' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 4' 7' 5' 0' 6' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 4' 7' 5' 0' 6' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 4' 7' 5' 0' 6' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 4' 7' 5' 0' 6' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlaySound,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 4' 7' 5' 0' 6' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: packet.ReadXORBytes(guid1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: packet.ReadXORBytes(guid1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: packet.ReadXORBytes(guid2' 2' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: packet.ReadXORBytes(guid2' 2' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: packet.ReadXORBytes(guid1' 7' 5' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: packet.ReadXORBytes(guid1' 7' 5' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: packet.ReadXORBytes(guid1' 7' 5' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: packet.ReadXORBytes(guid2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: packet.ReadXORBytes(guid2' 4' 7' 0' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: packet.ReadXORBytes(guid2' 4' 7' 0' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandlePlayObjectSound,The following statement contains a magic number: packet.ReadXORBytes(guid2' 4' 7' 0' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActivateTaxiReply,The following statement contains a magic number: packet.ReadBitsE<TaxiError>("Result"' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActivateTaxi,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActivateTaxi,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 1' 2' 5' 6' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActivateTaxi,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 1' 2' 5' 6' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActivateTaxi,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 1' 2' 5' 6' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActivateTaxi,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 1' 2' 5' 6' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActivateTaxi,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 1' 2' 5' 6' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActivateTaxi,The following statement contains a magic number: packet.StartBitStream(guid' 4' 0' 1' 2' 5' 6' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActivateTaxi,The following statement contains a magic number: packet.ReadXORBytes(guid' 1' 0' 6' 5' 2' 4' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActivateTaxi,The following statement contains a magic number: packet.ReadXORBytes(guid' 1' 0' 6' 5' 2' 4' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActivateTaxi,The following statement contains a magic number: packet.ReadXORBytes(guid' 1' 0' 6' 5' 2' 4' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActivateTaxi,The following statement contains a magic number: packet.ReadXORBytes(guid' 1' 0' 6' 5' 2' 4' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActivateTaxi,The following statement contains a magic number: packet.ReadXORBytes(guid' 1' 0' 6' 5' 2' 4' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActivateTaxi,The following statement contains a magic number: packet.ReadXORBytes(guid' 1' 0' 6' 5' 2' 4' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleTaxiStatusQuery,The following statement contains a magic number: var guid = packet.StartBitStream(7' 1' 0' 4' 2' 5' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleTaxiStatusQuery,The following statement contains a magic number: var guid = packet.StartBitStream(7' 1' 0' 4' 2' 5' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleTaxiStatusQuery,The following statement contains a magic number: var guid = packet.StartBitStream(7' 1' 0' 4' 2' 5' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleTaxiStatusQuery,The following statement contains a magic number: var guid = packet.StartBitStream(7' 1' 0' 4' 2' 5' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleTaxiStatusQuery,The following statement contains a magic number: var guid = packet.StartBitStream(7' 1' 0' 4' 2' 5' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleTaxiStatusQuery,The following statement contains a magic number: var guid = packet.StartBitStream(7' 1' 0' 4' 2' 5' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleTaxiStatusQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 3' 7' 5' 2' 6' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleTaxiStatusQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 3' 7' 5' 2' 6' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleTaxiStatusQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 3' 7' 5' 2' 6' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleTaxiStatusQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 3' 7' 5' 2' 6' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleTaxiStatusQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 3' 7' 5' 2' 6' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleTaxiStatusQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 3' 7' 5' 2' 6' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleShowTaxiNodes434,The following statement contains a magic number: var guid = packet.StartBitStream(3' 0' 4' 2' 1' 7' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleShowTaxiNodes434,The following statement contains a magic number: var guid = packet.StartBitStream(3' 0' 4' 2' 1' 7' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleShowTaxiNodes434,The following statement contains a magic number: var guid = packet.StartBitStream(3' 0' 4' 2' 1' 7' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleShowTaxiNodes434,The following statement contains a magic number: var guid = packet.StartBitStream(3' 0' 4' 2' 1' 7' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleShowTaxiNodes434,The following statement contains a magic number: var guid = packet.StartBitStream(3' 0' 4' 2' 1' 7' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleShowTaxiNodes434,The following statement contains a magic number: var guid = packet.StartBitStream(3' 0' 4' 2' 1' 7' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleShowTaxiNodes434,The following statement contains a magic number: var count = packet.ReadBits("Count"' 24);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleShowTaxiNodes434,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleShowTaxiNodes434,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 6' 1' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleShowTaxiNodes434,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 6' 1' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleShowTaxiNodes434,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 6' 1' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleShowTaxiNodes434,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 6' 1' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleShowTaxiNodes434,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 2' 6' 1' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActiaveTaxiExpress,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActiaveTaxiExpress,The following statement contains a magic number: packet.StartBitStream(guid' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActiaveTaxiExpress,The following statement contains a magic number: packet.StartBitStream(guid' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActiaveTaxiExpress,The following statement contains a magic number: var count = packet.ReadBits("Count"' 22);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActiaveTaxiExpress,The following statement contains a magic number: packet.StartBitStream(guid' 2' 0' 4' 3' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActiaveTaxiExpress,The following statement contains a magic number: packet.StartBitStream(guid' 2' 0' 4' 3' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActiaveTaxiExpress,The following statement contains a magic number: packet.StartBitStream(guid' 2' 0' 4' 3' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActiaveTaxiExpress,The following statement contains a magic number: packet.StartBitStream(guid' 2' 0' 4' 3' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActiaveTaxiExpress,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 7' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActiaveTaxiExpress,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 7' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActiaveTaxiExpress,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 3' 6' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActiaveTaxiExpress,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 3' 6' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActiaveTaxiExpress,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 3' 6' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MiscellaneousHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MiscellaneousHandler.cs,HandleActiaveTaxiExpress,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 5' 3' 6' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: var transportGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following statement contains a magic number: foreach (var movementInfo in movementStatusElements)              {                  switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(0' 3' 1' 4' 6' 2' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(0' 3' 1' 4' 6' 2' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(0' 3' 1' 4' 6' 2' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(0' 3' 1' 4' 6' 2' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(0' 3' 1' 4' 6' 2' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var guid = packet.StartBitStream(0' 3' 1' 4' 6' 2' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 3' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 3' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 3' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: var count = packet.ReadUInt32() / 2;
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: count = packet.ReadUInt32() / 2;
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: count = packet.ReadUInt32() / 2;
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: count = packet.ReadUInt32() / 2;
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandlePhaseShift,The following statement contains a magic number: packet.ParseBitStream(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var factingTargetGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var ownerGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var splineType = (int)packet.ReadBits(3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 6' 4' 3' 0' 5' 7' 1' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 6' 4' 3' 0' 5' 7' 1' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 6' 4' 3' 0' 5' 7' 1' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 6' 4' 3' 0' 5' 7' 1' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 6' 4' 3' 0' 5' 7' 1' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 6' 4' 3' 0' 5' 7' 1' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)                  packet.StartBitStream(factingTargetGUID' 6' 4' 3' 0' 5' 7' 1' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var splineCount = (int)packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: ownerGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: ownerGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: ownerGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: ownerGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: var bits124 = (int)packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: ownerGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 1' 3' 0' 6' 4' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 1' 3' 0' 6' 4' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 1' 3' 0' 6' 4' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 1' 3' 0' 6' 4' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 1' 3' 0' 6' 4' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.StartBitStream(guid2' 7' 1' 3' 0' 6' 4' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (bit176)              {                  packet.ReadBits("bits74"' 2);                  bits84 = packet.ReadBits(22);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (bit176)              {                  packet.ReadBits("bits74"' 2);                  bits84 = packet.ReadBits(22);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: ownerGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ParseBitStream(guid2' 6' 4' 1' 7' 0' 3' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ParseBitStream(guid2' 6' 4' 1' 7' 0' 3' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ParseBitStream(guid2' 6' 4' 1' 7' 0' 3' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ParseBitStream(guid2' 6' 4' 1' 7' 0' 3' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ParseBitStream(guid2' 6' 4' 1' 7' 0' 3' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ParseBitStream(guid2' 6' 4' 1' 7' 0' 3' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 5' 7' 0' 4' 3' 2' 6' 1);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 5' 7' 0' 4' 3' 2' 6' 1);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 5' 7' 0' 4' 3' 2' 6' 1);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 5' 7' 0' 4' 3' 2' 6' 1);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 5' 7' 0' 4' 3' 2' 6' 1);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 5' 7' 0' 4' 3' 2' 6' 1);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 3)              {                  packet.ParseBitStream(factingTargetGUID' 5' 7' 0' 4' 3' 2' 6' 1);                  packet.WriteGuid("Facting Target GUID"' factingTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORByte(ownerGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 4)                  packet.ReadSingle("Facing Angle");
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORByte(ownerGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORByte(ownerGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: if (splineType == 2)              {                  packet.ReadSingle("Float48");   // +48                  packet.ReadSingle("Float49");   // +49                  packet.ReadSingle("Float50");   // +50              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORByte(ownerGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORByte(ownerGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMonsterMove,The following statement contains a magic number: packet.ReadXORByte(ownerGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetRunBackSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(7' 1' 0' 2' 4' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetRunBackSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(7' 1' 0' 2' 4' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetRunBackSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(7' 1' 0' 2' 4' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetRunBackSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(7' 1' 0' 2' 4' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetRunBackSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(7' 1' 0' 2' 4' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetRunBackSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(7' 1' 0' 2' 4' 3' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetRunBackSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetRunBackSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetRunBackSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetRunBackSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetRunBackSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetRunBackSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(5' 0' 6' 3' 7' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(5' 0' 6' 3' 7' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(5' 0' 6' 3' 7' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(5' 0' 6' 3' 7' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(5' 0' 6' 3' 7' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(5' 0' 6' 3' 7' 2' 4' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimBackSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(5' 0' 4' 2' 1' 3' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimBackSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(5' 0' 4' 2' 1' 3' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimBackSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(5' 0' 4' 2' 1' 3' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimBackSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(5' 0' 4' 2' 1' 3' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimBackSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(5' 0' 4' 2' 1' 3' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimBackSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(5' 0' 4' 2' 1' 3' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimBackSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimBackSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimBackSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimBackSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimBackSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetSwimBackSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetFlightBackSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(2' 7' 6' 4' 0' 1' 5' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetFlightBackSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(2' 7' 6' 4' 0' 1' 5' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetFlightBackSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(2' 7' 6' 4' 0' 1' 5' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetFlightBackSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(2' 7' 6' 4' 0' 1' 5' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetFlightBackSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(2' 7' 6' 4' 0' 1' 5' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetFlightBackSpeed434,The following statement contains a magic number: var guid = packet.StartBitStream(2' 7' 6' 4' 0' 1' 5' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetFlightBackSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetFlightBackSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetFlightBackSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetFlightBackSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetFlightBackSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveSetFlightBackSpeed434,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 2' 7' 1' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 2' 7' 1' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 2' 7' 1' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 2' 7' 1' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 2' 7' 1' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.StartBitStream(guid' 6' 4' 2' 7' 1' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 7' 5' 1' 4' 6' 0' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 7' 5' 1' 4' 6' 0' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 7' 5' 1' 4' 6' 0' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 7' 5' 1' 4' 6' 0' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 7' 5' 1' 4' 6' 0' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleFlightSplineSync,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 7' 5' 1' 4' 6' 0' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveTimeSkipped,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveTimeSkipped,The following statement contains a magic number: packet.StartBitStream(guid' 5' 0' 7' 4' 1' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveTimeSkipped,The following statement contains a magic number: packet.StartBitStream(guid' 5' 0' 7' 4' 1' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveTimeSkipped,The following statement contains a magic number: packet.StartBitStream(guid' 5' 0' 7' 4' 1' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveTimeSkipped,The following statement contains a magic number: packet.StartBitStream(guid' 5' 0' 7' 4' 1' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveTimeSkipped,The following statement contains a magic number: packet.StartBitStream(guid' 5' 0' 7' 4' 1' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveTimeSkipped,The following statement contains a magic number: packet.StartBitStream(guid' 5' 0' 7' 4' 1' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveTimeSkipped,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 0' 7' 4' 1' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveTimeSkipped,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 0' 7' 4' 1' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveTimeSkipped,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 0' 7' 4' 1' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveTimeSkipped,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 0' 7' 4' 1' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveTimeSkipped,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 0' 7' 4' 1' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleMoveTimeSkipped,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 0' 7' 4' 1' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetFlightSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(1' 4' 7' 3' 2' 6' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetFlightSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(1' 4' 7' 3' 2' 6' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetFlightSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(1' 4' 7' 3' 2' 6' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetFlightSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(1' 4' 7' 3' 2' 6' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetFlightSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(1' 4' 7' 3' 2' 6' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetFlightSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(1' 4' 7' 3' 2' 6' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetFlightSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 0' 6' 2' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetFlightSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 0' 6' 2' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetFlightSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 0' 6' 2' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetFlightSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 0' 6' 2' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetFlightSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 0' 6' 2' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetFlightSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 0' 6' 2' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(3' 0' 1' 4' 7' 5' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(3' 0' 1' 4' 7' 5' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(3' 0' 1' 4' 7' 5' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(3' 0' 1' 4' 7' 5' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(3' 0' 1' 4' 7' 5' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(3' 0' 1' 4' 7' 5' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunSpeed,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunSpeed,The following statement contains a magic number: packet.ReadXORBytes(guid' 1' 5' 3' 7' 6' 2' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunSpeed,The following statement contains a magic number: packet.ReadXORBytes(guid' 1' 5' 3' 7' 6' 2' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunSpeed,The following statement contains a magic number: packet.ReadXORBytes(guid' 1' 5' 3' 7' 6' 2' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunSpeed,The following statement contains a magic number: packet.ReadXORBytes(guid' 1' 5' 3' 7' 6' 2' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunSpeed,The following statement contains a magic number: packet.ReadXORBytes(guid' 1' 5' 3' 7' 6' 2' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunBackSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(7' 4' 0' 3' 2' 5' 6' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunBackSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(7' 4' 0' 3' 2' 5' 6' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunBackSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(7' 4' 0' 3' 2' 5' 6' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunBackSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(7' 4' 0' 3' 2' 5' 6' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunBackSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(7' 4' 0' 3' 2' 5' 6' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunBackSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(7' 4' 0' 3' 2' 5' 6' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunBackSpeed,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 4' 1' 5' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunBackSpeed,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 4' 1' 5' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunBackSpeed,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 4' 1' 5' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunBackSpeed,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 4' 1' 5' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunBackSpeed,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 4' 1' 5' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetRunBackSpeed,The following statement contains a magic number: packet.ReadXORBytes(guid' 6' 4' 1' 5' 2' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetSwimSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(5' 6' 7' 3' 4' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetSwimSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(5' 6' 7' 3' 4' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetSwimSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(5' 6' 7' 3' 4' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetSwimSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(5' 6' 7' 3' 4' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetSwimSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(5' 6' 7' 3' 4' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetSwimSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(5' 6' 7' 3' 4' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetSwimSpeed,The following statement contains a magic number: packet.ReadXORBytes(guid' 4' 1' 6' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetSwimSpeed,The following statement contains a magic number: packet.ReadXORBytes(guid' 4' 1' 6' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetSwimSpeed,The following statement contains a magic number: packet.ReadXORBytes(guid' 4' 1' 6' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetSwimSpeed,The following statement contains a magic number: packet.ReadXORBytes(guid' 4' 1' 6' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetSwimSpeed,The following statement contains a magic number: packet.ReadXORBytes(guid' 5' 0' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetSwimSpeed,The following statement contains a magic number: packet.ReadXORBytes(guid' 5' 0' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(4' 1' 7' 6' 3' 2' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(4' 1' 7' 6' 3' 2' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(4' 1' 7' 6' 3' 2' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(4' 1' 7' 6' 3' 2' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(4' 1' 7' 6' 3' 2' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: var guid = packet.StartBitStream(4' 1' 7' 6' 3' 2' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 3' 1' 0' 6' 5' 4' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 3' 1' 0' 6' 5' 4' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 3' 1' 0' 6' 5' 4' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 3' 1' 0' 6' 5' 4' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 3' 1' 0' 6' 5' 4' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleSplineSetWalkSpeed,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 3' 1' 0' 6' 5' 4' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 2' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 0' 3' 6' 5' 1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 0' 3' 6' 5' 1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 0' 3' 6' 5' 1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 0' 3' 6' 5' 1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 7' 4' 2' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 7' 4' 2' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 7' 4' 2' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 7' 4' 2' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 7' 4' 2' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,HandleClientControlUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 5' 7' 4' 2' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4' 0' 3' 6' 7' 5' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4' 0' 3' 6' 7' 5' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4' 0' 3' 6' 7' 5' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4' 0' 3' 6' 7' 5' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4' 0' 3' 6' 7' 5' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.StartBitStream(guid' 2' 4' 0' 3' 6' 7' 5' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 7' 1' 0' 5' 3' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 7' 1' 0' 5' 3' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 7' 1' 0' 5' 3' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 7' 1' 0' 5' 3' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 7' 1' 0' 5' 3' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleGossipHello,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 7' 1' 0' 5' 3' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 1' 4' 7' 5' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 1' 4' 7' 5' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 1' 4' 7' 5' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 1' 4' 7' 5' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.StartBitStream(guid' 3' 0' 1' 4' 7' 5' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: var bits8 = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossipSelectOption,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: var guidBytes = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: uint questgossips = packet.ReadBits(19);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: for (int i = 0; i < questgossips; ++i)              {                  packet.ReadBit("Change Icon"' i);                  titleLen[i] = packet.ReadBits(9);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: guidBytes[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: guidBytes[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: guidBytes[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: uint amountOfOptions = packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: guidBytes[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: guidBytes[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: for (int i = 0; i < amountOfOptions; ++i)              {                  boxTextLen[i] = packet.ReadBits(12);                  optionTextLen[i] = packet.ReadBits(12);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: for (int i = 0; i < amountOfOptions; ++i)              {                  boxTextLen[i] = packet.ReadBits(12);                  optionTextLen[i] = packet.ReadBits(12);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: guidBytes[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcGossip,The following statement contains a magic number: packet.ReadXORByte(guidBytes' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 4' 5' 1' 7' 0' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 4' 5' 1' 7' 0' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 4' 5' 1' 7' 0' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 4' 5' 1' 7' 0' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 4' 5' 1' 7' 0' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 4' 5' 1' 7' 0' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 0' 2' 5' 1' 7' 3' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 0' 2' 5' 1' 7' 3' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 0' 2' 5' 1' 7' 3' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 0' 2' 5' 1' 7' 3' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 0' 2' 5' 1' 7' 3' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 0' 2' 5' 1' 7' 3' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcTextUpdate,The following statement contains a magic number: npcText.Probabilities = new float[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcTextUpdate,The following statement contains a magic number: npcText.BroadcastTextId = new uint[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcTextUpdate,The following statement contains a magic number: for (int i = 0; i < 8; ++i)                  npcText.Probabilities[i] = pkt.ReadSingle("Probability"' i);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcTextUpdate,The following statement contains a magic number: for (int i = 0; i < 8; ++i)                  npcText.BroadcastTextId[i] = pkt.ReadUInt32("Broadcast Text Id"' i);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: var hostileGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: var victimGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: victimGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: hostileGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: victimGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: victimGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: hostileGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: hostileGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: hostileGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: victimGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: victimGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: victimGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: hostileGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: hostileGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: packet.ReadXORByte(hostileGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: packet.ReadXORByte(hostileGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: packet.ReadXORByte(hostileGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: packet.ReadXORByte(hostileGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: packet.ReadXORByte(hostileGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: packet.ReadXORByte(victimGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleRemoveThreatlist,The following statement contains a magic number: packet.ReadXORByte(hostileGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClearThreatlist,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClearThreatlist,The following statement contains a magic number: packet.StartBitStream(guid' 6' 7' 4' 5' 2' 1' 0' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClearThreatlist,The following statement contains a magic number: packet.StartBitStream(guid' 6' 7' 4' 5' 2' 1' 0' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClearThreatlist,The following statement contains a magic number: packet.StartBitStream(guid' 6' 7' 4' 5' 2' 1' 0' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClearThreatlist,The following statement contains a magic number: packet.StartBitStream(guid' 6' 7' 4' 5' 2' 1' 0' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClearThreatlist,The following statement contains a magic number: packet.StartBitStream(guid' 6' 7' 4' 5' 2' 1' 0' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClearThreatlist,The following statement contains a magic number: packet.StartBitStream(guid' 6' 7' 4' 5' 2' 1' 0' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClearThreatlist,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 4' 3' 2' 1' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClearThreatlist,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 4' 3' 2' 1' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClearThreatlist,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 4' 3' 2' 1' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClearThreatlist,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 4' 3' 2' 1' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClearThreatlist,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 4' 3' 2' 1' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClearThreatlist,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 0' 4' 3' 2' 1' 6' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 1' 3' 7' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 1' 3' 7' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 1' 3' 7' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 1' 3' 7' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 1' 3' 7' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: var count = packet.ReadBits("Size"' 21);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  hostileGUID[i] = new byte[8];                  packet.StartBitStream(hostileGUID[i]' 2' 3' 6' 5' 1' 4' 0' 7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  hostileGUID[i] = new byte[8];                  packet.StartBitStream(hostileGUID[i]' 2' 3' 6' 5' 1' 4' 0' 7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  hostileGUID[i] = new byte[8];                  packet.StartBitStream(hostileGUID[i]' 2' 3' 6' 5' 1' 4' 0' 7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  hostileGUID[i] = new byte[8];                  packet.StartBitStream(hostileGUID[i]' 2' 3' 6' 5' 1' 4' 0' 7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  hostileGUID[i] = new byte[8];                  packet.StartBitStream(hostileGUID[i]' 2' 3' 6' 5' 1' 4' 0' 7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  hostileGUID[i] = new byte[8];                  packet.StartBitStream(hostileGUID[i]' 2' 3' 6' 5' 1' 4' 0' 7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  hostileGUID[i] = new byte[8];                  packet.StartBitStream(hostileGUID[i]' 2' 3' 6' 5' 1' 4' 0' 7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ParseBitStream(hostileGUID[i]' 6' 7' 0' 1' 2' 5' 3' 4);                  packet.ReadUInt32("Threat"' i);                  packet.WriteGuid("Hostile"' hostileGUID[i]' i);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ParseBitStream(hostileGUID[i]' 6' 7' 0' 1' 2' 5' 3' 4);                  packet.ReadUInt32("Threat"' i);                  packet.WriteGuid("Hostile"' hostileGUID[i]' i);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ParseBitStream(hostileGUID[i]' 6' 7' 0' 1' 2' 5' 3' 4);                  packet.ReadUInt32("Threat"' i);                  packet.WriteGuid("Hostile"' hostileGUID[i]' i);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ParseBitStream(hostileGUID[i]' 6' 7' 0' 1' 2' 5' 3' 4);                  packet.ReadUInt32("Threat"' i);                  packet.WriteGuid("Hostile"' hostileGUID[i]' i);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ParseBitStream(hostileGUID[i]' 6' 7' 0' 1' 2' 5' 3' 4);                  packet.ReadUInt32("Threat"' i);                  packet.WriteGuid("Hostile"' hostileGUID[i]' i);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ParseBitStream(hostileGUID[i]' 6' 7' 0' 1' 2' 5' 3' 4);                  packet.ReadUInt32("Threat"' i);                  packet.WriteGuid("Hostile"' hostileGUID[i]' i);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 4' 2' 3' 5' 6' 0' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 4' 2' 3' 5' 6' 0' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 4' 2' 3' 5' 6' 0' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 4' 2' 3' 5' 6' 0' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 4' 2' 3' 5' 6' 0' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleThreatlistUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 4' 2' 3' 5' 6' 0' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClientTrainerList,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClientTrainerList,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 7' 6' 1' 4' 5' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClientTrainerList,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 7' 6' 1' 4' 5' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClientTrainerList,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 7' 6' 1' 4' 5' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClientTrainerList,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 7' 6' 1' 4' 5' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClientTrainerList,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 7' 6' 1' 4' 5' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClientTrainerList,The following statement contains a magic number: packet.StartBitStream(guid' 0' 2' 7' 6' 1' 4' 5' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClientTrainerList,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 7' 5' 1' 0' 2' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClientTrainerList,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 7' 5' 1' 0' 2' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClientTrainerList,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 7' 5' 1' 0' 2' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClientTrainerList,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 7' 5' 1' 0' 2' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClientTrainerList,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 7' 5' 1' 0' 2' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleClientTrainerList,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 6' 7' 5' 1' 0' 2' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: int count = (int)packet.ReadBits("Spells"' 19);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: uint titleLen = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  TrainerSpell trainerSpell = new TrainerSpell                  {                      ReqLevel = packet.ReadByte("ReqLevel"' i)'                      MoneyCost = packet.ReadUInt32("MoneyCost"' i)'                      SpellId = packet.ReadUInt32<SpellId>("SpellID"' i)'                      ReqAbility = new uint[3]                  };                    for (int j = 0; j < 3; ++j)                      trainerSpell.ReqAbility[j] = packet.ReadUInt32("ReqAbility"' i' j);                    trainerSpell.ReqSkillLine = packet.ReadUInt32("ReqSkillLine"' i);                  trainerSpell.ReqSkillRank = packet.ReadUInt32("ReqSkillRank"' i);                  packet.ReadByteE<TrainerSpellState>("Usable"' i);                    tempList.Add(trainerSpell);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  TrainerSpell trainerSpell = new TrainerSpell                  {                      ReqLevel = packet.ReadByte("ReqLevel"' i)'                      MoneyCost = packet.ReadUInt32("MoneyCost"' i)'                      SpellId = packet.ReadUInt32<SpellId>("SpellID"' i)'                      ReqAbility = new uint[3]                  };                    for (int j = 0; j < 3; ++j)                      trainerSpell.ReqAbility[j] = packet.ReadUInt32("ReqAbility"' i' j);                    trainerSpell.ReqSkillLine = packet.ReadUInt32("ReqSkillLine"' i);                  trainerSpell.ReqSkillRank = packet.ReadUInt32("ReqSkillRank"' i);                  packet.ReadByteE<TrainerSpellState>("Usable"' i);                    tempList.Add(trainerSpell);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleServerTrainerList,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcListInventory,The following statement contains a magic number: var guid = packet.StartBitStream(6' 7' 3' 1' 2' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcListInventory,The following statement contains a magic number: var guid = packet.StartBitStream(6' 7' 3' 1' 2' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcListInventory,The following statement contains a magic number: var guid = packet.StartBitStream(6' 7' 3' 1' 2' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcListInventory,The following statement contains a magic number: var guid = packet.StartBitStream(6' 7' 3' 1' 2' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcListInventory,The following statement contains a magic number: var guid = packet.StartBitStream(6' 7' 3' 1' 2' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcListInventory,The following statement contains a magic number: var guid = packet.StartBitStream(6' 7' 3' 1' 2' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcListInventory,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 7' 1' 6' 4' 3' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcListInventory,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 7' 1' 6' 4' 3' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcListInventory,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 7' 1' 6' 4' 3' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcListInventory,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 7' 1' 6' 4' 3' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcListInventory,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 7' 1' 6' 4' 3' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleNpcListInventory,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 7' 1' 6' 4' 3' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: uint count = packet.ReadBits(18);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  NpcVendor vendor = new NpcVendor();                    packet.AddValue("unkBit"' unkBit[i]' i);                    packet.ReadInt32("Max Durability"' i);   // +16                  packet.ReadInt32("Price"' i);   // +20                  vendor.Type = packet.ReadUInt32("Type"' i);    // +4                  int maxCount = packet.ReadInt32("Max Count"' i);     // +24                  vendor.MaxCount = maxCount == -1 ? 0 : (uint)maxCount; // TDB                  packet.ReadInt32("Display ID"' i);    // +12                  uint buyCount = packet.ReadUInt32("Buy Count"' i);    // +28                    if (vendor.Type == 2)                      vendor.MaxCount = buyCount;                    vendor.Item = packet.ReadInt32<ItemId>("Item ID"' i);   // +8                    if (hasExtendedCost[i])                      vendor.ExtendedCost = packet.ReadUInt32("Extended Cost"' i);    // +36                    packet.ReadInt32("Item Upgrade ID"' i);   // +32                    if (hasCondition[i])                      vendor.PlayerConditionID = packet.ReadUInt32("Condition ID"' i);    // +40                    vendor.Slot = packet.ReadInt32("Item Position"' i);    // +0                  tempList.Add(vendor);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 7' 0' 6' 2' 1' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 7' 0' 6' 2' 1' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 7' 0' 6' 2' 1' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 7' 0' 6' 2' 1' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 7' 0' 6' 2' 1' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleVendorInventoryList,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 7' 0' 6' 2' 1' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: var newHighestGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: newHighestGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: newHighestGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: newHighestGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: newHighestGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: newHighestGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: var count = packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  hostileGUID[i] = new byte[8];                    packet.StartBitStream(hostileGUID[i]' 6' 1' 0' 2' 7' 4' 3' 5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  hostileGUID[i] = new byte[8];                    packet.StartBitStream(hostileGUID[i]' 6' 1' 0' 2' 7' 4' 3' 5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  hostileGUID[i] = new byte[8];                    packet.StartBitStream(hostileGUID[i]' 6' 1' 0' 2' 7' 4' 3' 5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  hostileGUID[i] = new byte[8];                    packet.StartBitStream(hostileGUID[i]' 6' 1' 0' 2' 7' 4' 3' 5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  hostileGUID[i] = new byte[8];                    packet.StartBitStream(hostileGUID[i]' 6' 1' 0' 2' 7' 4' 3' 5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  hostileGUID[i] = new byte[8];                    packet.StartBitStream(hostileGUID[i]' 6' 1' 0' 2' 7' 4' 3' 5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  hostileGUID[i] = new byte[8];                    packet.StartBitStream(hostileGUID[i]' 6' 1' 0' 2' 7' 4' 3' 5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: newHighestGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(newHighestGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  packet.ReadXORByte(hostileGUID[i]' 6);                  packet.ReadInt32("Threat"' i);                  packet.ReadXORByte(hostileGUID[i]' 4);                  packet.ReadXORByte(hostileGUID[i]' 0);                  packet.ReadXORByte(hostileGUID[i]' 3);                  packet.ReadXORByte(hostileGUID[i]' 5);                  packet.ReadXORByte(hostileGUID[i]' 2);                  packet.ReadXORByte(hostileGUID[i]' 1);                  packet.ReadXORByte(hostileGUID[i]' 7);                    packet.WriteGuid("Hostile"' hostileGUID[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  packet.ReadXORByte(hostileGUID[i]' 6);                  packet.ReadInt32("Threat"' i);                  packet.ReadXORByte(hostileGUID[i]' 4);                  packet.ReadXORByte(hostileGUID[i]' 0);                  packet.ReadXORByte(hostileGUID[i]' 3);                  packet.ReadXORByte(hostileGUID[i]' 5);                  packet.ReadXORByte(hostileGUID[i]' 2);                  packet.ReadXORByte(hostileGUID[i]' 1);                  packet.ReadXORByte(hostileGUID[i]' 7);                    packet.WriteGuid("Hostile"' hostileGUID[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  packet.ReadXORByte(hostileGUID[i]' 6);                  packet.ReadInt32("Threat"' i);                  packet.ReadXORByte(hostileGUID[i]' 4);                  packet.ReadXORByte(hostileGUID[i]' 0);                  packet.ReadXORByte(hostileGUID[i]' 3);                  packet.ReadXORByte(hostileGUID[i]' 5);                  packet.ReadXORByte(hostileGUID[i]' 2);                  packet.ReadXORByte(hostileGUID[i]' 1);                  packet.ReadXORByte(hostileGUID[i]' 7);                    packet.WriteGuid("Hostile"' hostileGUID[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  packet.ReadXORByte(hostileGUID[i]' 6);                  packet.ReadInt32("Threat"' i);                  packet.ReadXORByte(hostileGUID[i]' 4);                  packet.ReadXORByte(hostileGUID[i]' 0);                  packet.ReadXORByte(hostileGUID[i]' 3);                  packet.ReadXORByte(hostileGUID[i]' 5);                  packet.ReadXORByte(hostileGUID[i]' 2);                  packet.ReadXORByte(hostileGUID[i]' 1);                  packet.ReadXORByte(hostileGUID[i]' 7);                    packet.WriteGuid("Hostile"' hostileGUID[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  packet.ReadXORByte(hostileGUID[i]' 6);                  packet.ReadInt32("Threat"' i);                  packet.ReadXORByte(hostileGUID[i]' 4);                  packet.ReadXORByte(hostileGUID[i]' 0);                  packet.ReadXORByte(hostileGUID[i]' 3);                  packet.ReadXORByte(hostileGUID[i]' 5);                  packet.ReadXORByte(hostileGUID[i]' 2);                  packet.ReadXORByte(hostileGUID[i]' 1);                  packet.ReadXORByte(hostileGUID[i]' 7);                    packet.WriteGuid("Hostile"' hostileGUID[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  packet.ReadXORByte(hostileGUID[i]' 6);                  packet.ReadInt32("Threat"' i);                  packet.ReadXORByte(hostileGUID[i]' 4);                  packet.ReadXORByte(hostileGUID[i]' 0);                  packet.ReadXORByte(hostileGUID[i]' 3);                  packet.ReadXORByte(hostileGUID[i]' 5);                  packet.ReadXORByte(hostileGUID[i]' 2);                  packet.ReadXORByte(hostileGUID[i]' 1);                  packet.ReadXORByte(hostileGUID[i]' 7);                    packet.WriteGuid("Hostile"' hostileGUID[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(newHighestGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(newHighestGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(newHighestGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(newHighestGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(newHighestGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,NpcHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\NpcHandler.cs,HandleHighestThreatlistUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: var number = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: number[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: number[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: number[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: number[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: number[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: number[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(number' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(number' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(number' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(number' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(number' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(number' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQuery,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQueryResponse,The following statement contains a magic number: const int maxDeclinedNameCases = 5;
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQueryResponse,The following statement contains a magic number: for (var i = 0; i < maxDeclinedNameCases; ++i)                  declinedNameLen[i] = (int)packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetNameQueryResponse,The following statement contains a magic number: var len = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetSpells,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetSpells,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetSpells,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetSpells,The following statement contains a magic number: var bits44 = (int)packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetSpells,The following statement contains a magic number: var bits28 = (int)packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetSpells,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetSpells,The following statement contains a magic number: var bits10 = (int)packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetSpells,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetSpells,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetSpells,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetSpells,The following statement contains a magic number: const int maxCreatureSpells = 10;
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetSpells,The following statement contains a magic number: for (var i = 0; i < maxCreatureSpells; i++) // Read pet/vehicle spell ids              {                  var spell16 = packet.ReadUInt16();                  var spell8 = packet.ReadByte();                  var spellId = spell16 + (spell8 << 16);                  var slot = packet.ReadByte();                    if (spellId <= 4)                      packet.AddValue("Action"' spellId' i);                  else                      packet.AddValue("Spell"' StoreGetters.GetName(StoreNameType.Spell' spellId)' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetSpells,The following statement contains a magic number: for (var i = 0; i < maxCreatureSpells; i++) // Read pet/vehicle spell ids              {                  var spell16 = packet.ReadUInt16();                  var spell8 = packet.ReadByte();                  var spellId = spell16 + (spell8 << 16);                  var slot = packet.ReadByte();                    if (spellId <= 4)                      packet.AddValue("Action"' spellId' i);                  else                      packet.AddValue("Spell"' StoreGetters.GetName(StoreNameType.Spell' spellId)' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetSpells,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetSpells,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetSpells,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetSpells,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetSpells,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetSpells,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: guid2[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: guid2[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: guid2[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: guid2[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: guid2[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: guid2[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: packet.ReadXORByte(guid2' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: packet.ReadXORByte(guid2' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: packet.ReadXORByte(guid2' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: packet.ReadXORByte(guid2' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: packet.ReadXORByte(guid2' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: packet.ReadXORByte(guid2' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetAction,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: var guid3 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: var guid4 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: var petGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: var transportGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: var guid20 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: petGuid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: var archeologyCounter = packet.ReadBits(2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: petGuid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: petGuid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: petGuid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: petGuid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: for (var i = 0; i < archeologyCounter; ++i)                  packet.ReadBits("archeologyType"' 2' i);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: petGuid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  hasOrientation = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  bit388 = packet.ReadBit(); // v2 + 388                  guid20[5] = packet.ReadBit();               // v2 + 261                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasMovementFlags2 = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasFallData = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasUnkMovementField = !packet.ReadBit();    // v2 + 408                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                  bit389 = packet.ReadBit();                  // v2 + 389                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasTransport = packet.ReadBit(); // v2 + 344                  guid20[0] = packet.ReadBit();               // v2 + 263                  unkMovementLoopCounter = packet.ReadBits(22);                    if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[4] = packet.ReadBit();    // v2 + 301                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[3] = packet.ReadBit();    // v2 + 299                  }                    guid20[1] = packet.ReadBit();               // v2 + 257                    if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);                    guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  bit412 = packet.ReadBit();                  // v2 + 412                  hasPitch = !packet.ReadBit();                  guid20[4] = packet.ReadBit(); // v2 + 260                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  hasOrientation = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  bit388 = packet.ReadBit(); // v2 + 388                  guid20[5] = packet.ReadBit();               // v2 + 261                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasMovementFlags2 = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasFallData = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasUnkMovementField = !packet.ReadBit();    // v2 + 408                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                  bit389 = packet.ReadBit();                  // v2 + 389                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasTransport = packet.ReadBit(); // v2 + 344                  guid20[0] = packet.ReadBit();               // v2 + 263                  unkMovementLoopCounter = packet.ReadBits(22);                    if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[4] = packet.ReadBit();    // v2 + 301                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[3] = packet.ReadBit();    // v2 + 299                  }                    guid20[1] = packet.ReadBit();               // v2 + 257                    if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);                    guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  bit412 = packet.ReadBit();                  // v2 + 412                  hasPitch = !packet.ReadBit();                  guid20[4] = packet.ReadBit(); // v2 + 260                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  hasOrientation = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  bit388 = packet.ReadBit(); // v2 + 388                  guid20[5] = packet.ReadBit();               // v2 + 261                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasMovementFlags2 = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasFallData = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasUnkMovementField = !packet.ReadBit();    // v2 + 408                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                  bit389 = packet.ReadBit();                  // v2 + 389                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasTransport = packet.ReadBit(); // v2 + 344                  guid20[0] = packet.ReadBit();               // v2 + 263                  unkMovementLoopCounter = packet.ReadBits(22);                    if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[4] = packet.ReadBit();    // v2 + 301                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[3] = packet.ReadBit();    // v2 + 299                  }                    guid20[1] = packet.ReadBit();               // v2 + 257                    if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);                    guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  bit412 = packet.ReadBit();                  // v2 + 412                  hasPitch = !packet.ReadBit();                  guid20[4] = packet.ReadBit(); // v2 + 260                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  hasOrientation = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  bit388 = packet.ReadBit(); // v2 + 388                  guid20[5] = packet.ReadBit();               // v2 + 261                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasMovementFlags2 = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasFallData = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasUnkMovementField = !packet.ReadBit();    // v2 + 408                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                  bit389 = packet.ReadBit();                  // v2 + 389                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasTransport = packet.ReadBit(); // v2 + 344                  guid20[0] = packet.ReadBit();               // v2 + 263                  unkMovementLoopCounter = packet.ReadBits(22);                    if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[4] = packet.ReadBit();    // v2 + 301                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[3] = packet.ReadBit();    // v2 + 299                  }                    guid20[1] = packet.ReadBit();               // v2 + 257                    if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);                    guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  bit412 = packet.ReadBit();                  // v2 + 412                  hasPitch = !packet.ReadBit();                  guid20[4] = packet.ReadBit(); // v2 + 260                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  hasOrientation = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  bit388 = packet.ReadBit(); // v2 + 388                  guid20[5] = packet.ReadBit();               // v2 + 261                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasMovementFlags2 = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasFallData = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasUnkMovementField = !packet.ReadBit();    // v2 + 408                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                  bit389 = packet.ReadBit();                  // v2 + 389                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasTransport = packet.ReadBit(); // v2 + 344                  guid20[0] = packet.ReadBit();               // v2 + 263                  unkMovementLoopCounter = packet.ReadBits(22);                    if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[4] = packet.ReadBit();    // v2 + 301                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[3] = packet.ReadBit();    // v2 + 299                  }                    guid20[1] = packet.ReadBit();               // v2 + 257                    if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);                    guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  bit412 = packet.ReadBit();                  // v2 + 412                  hasPitch = !packet.ReadBit();                  guid20[4] = packet.ReadBit(); // v2 + 260                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  hasOrientation = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  bit388 = packet.ReadBit(); // v2 + 388                  guid20[5] = packet.ReadBit();               // v2 + 261                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasMovementFlags2 = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasFallData = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasUnkMovementField = !packet.ReadBit();    // v2 + 408                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                  bit389 = packet.ReadBit();                  // v2 + 389                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasTransport = packet.ReadBit(); // v2 + 344                  guid20[0] = packet.ReadBit();               // v2 + 263                  unkMovementLoopCounter = packet.ReadBits(22);                    if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[4] = packet.ReadBit();    // v2 + 301                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[3] = packet.ReadBit();    // v2 + 299                  }                    guid20[1] = packet.ReadBit();               // v2 + 257                    if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);                    guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  bit412 = packet.ReadBit();                  // v2 + 412                  hasPitch = !packet.ReadBit();                  guid20[4] = packet.ReadBit(); // v2 + 260                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  hasOrientation = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  bit388 = packet.ReadBit(); // v2 + 388                  guid20[5] = packet.ReadBit();               // v2 + 261                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasMovementFlags2 = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasFallData = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasUnkMovementField = !packet.ReadBit();    // v2 + 408                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                  bit389 = packet.ReadBit();                  // v2 + 389                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasTransport = packet.ReadBit(); // v2 + 344                  guid20[0] = packet.ReadBit();               // v2 + 263                  unkMovementLoopCounter = packet.ReadBits(22);                    if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[4] = packet.ReadBit();    // v2 + 301                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[3] = packet.ReadBit();    // v2 + 299                  }                    guid20[1] = packet.ReadBit();               // v2 + 257                    if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);                    guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  bit412 = packet.ReadBit();                  // v2 + 412                  hasPitch = !packet.ReadBit();                  guid20[4] = packet.ReadBit(); // v2 + 260                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  hasOrientation = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  bit388 = packet.ReadBit(); // v2 + 388                  guid20[5] = packet.ReadBit();               // v2 + 261                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasMovementFlags2 = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasFallData = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasUnkMovementField = !packet.ReadBit();    // v2 + 408                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                  bit389 = packet.ReadBit();                  // v2 + 389                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasTransport = packet.ReadBit(); // v2 + 344                  guid20[0] = packet.ReadBit();               // v2 + 263                  unkMovementLoopCounter = packet.ReadBits(22);                    if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[4] = packet.ReadBit();    // v2 + 301                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[3] = packet.ReadBit();    // v2 + 299                  }                    guid20[1] = packet.ReadBit();               // v2 + 257                    if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);                    guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  bit412 = packet.ReadBit();                  // v2 + 412                  hasPitch = !packet.ReadBit();                  guid20[4] = packet.ReadBit(); // v2 + 260                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  hasOrientation = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  bit388 = packet.ReadBit(); // v2 + 388                  guid20[5] = packet.ReadBit();               // v2 + 261                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasMovementFlags2 = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasFallData = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasUnkMovementField = !packet.ReadBit();    // v2 + 408                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                  bit389 = packet.ReadBit();                  // v2 + 389                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasTransport = packet.ReadBit(); // v2 + 344                  guid20[0] = packet.ReadBit();               // v2 + 263                  unkMovementLoopCounter = packet.ReadBits(22);                    if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[4] = packet.ReadBit();    // v2 + 301                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[3] = packet.ReadBit();    // v2 + 299                  }                    guid20[1] = packet.ReadBit();               // v2 + 257                    if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);                    guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  bit412 = packet.ReadBit();                  // v2 + 412                  hasPitch = !packet.ReadBit();                  guid20[4] = packet.ReadBit(); // v2 + 260                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  hasOrientation = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  bit388 = packet.ReadBit(); // v2 + 388                  guid20[5] = packet.ReadBit();               // v2 + 261                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasMovementFlags2 = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasFallData = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasUnkMovementField = !packet.ReadBit();    // v2 + 408                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                  bit389 = packet.ReadBit();                  // v2 + 389                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasTransport = packet.ReadBit(); // v2 + 344                  guid20[0] = packet.ReadBit();               // v2 + 263                  unkMovementLoopCounter = packet.ReadBits(22);                    if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[4] = packet.ReadBit();    // v2 + 301                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[3] = packet.ReadBit();    // v2 + 299                  }                    guid20[1] = packet.ReadBit();               // v2 + 257                    if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);                    guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  bit412 = packet.ReadBit();                  // v2 + 412                  hasPitch = !packet.ReadBit();                  guid20[4] = packet.ReadBit(); // v2 + 260                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  hasOrientation = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  bit388 = packet.ReadBit(); // v2 + 388                  guid20[5] = packet.ReadBit();               // v2 + 261                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasMovementFlags2 = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasFallData = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasUnkMovementField = !packet.ReadBit();    // v2 + 408                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                  bit389 = packet.ReadBit();                  // v2 + 389                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasTransport = packet.ReadBit(); // v2 + 344                  guid20[0] = packet.ReadBit();               // v2 + 263                  unkMovementLoopCounter = packet.ReadBits(22);                    if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[4] = packet.ReadBit();    // v2 + 301                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[3] = packet.ReadBit();    // v2 + 299                  }                    guid20[1] = packet.ReadBit();               // v2 + 257                    if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);                    guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  bit412 = packet.ReadBit();                  // v2 + 412                  hasPitch = !packet.ReadBit();                  guid20[4] = packet.ReadBit(); // v2 + 260                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  hasOrientation = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  bit388 = packet.ReadBit(); // v2 + 388                  guid20[5] = packet.ReadBit();               // v2 + 261                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasMovementFlags2 = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasFallData = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasUnkMovementField = !packet.ReadBit();    // v2 + 408                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                  bit389 = packet.ReadBit();                  // v2 + 389                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasTransport = packet.ReadBit(); // v2 + 344                  guid20[0] = packet.ReadBit();               // v2 + 263                  unkMovementLoopCounter = packet.ReadBits(22);                    if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[4] = packet.ReadBit();    // v2 + 301                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[3] = packet.ReadBit();    // v2 + 299                  }                    guid20[1] = packet.ReadBit();               // v2 + 257                    if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);                    guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  bit412 = packet.ReadBit();                  // v2 + 412                  hasPitch = !packet.ReadBit();                  guid20[4] = packet.ReadBit(); // v2 + 260                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  hasOrientation = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  bit388 = packet.ReadBit(); // v2 + 388                  guid20[5] = packet.ReadBit();               // v2 + 261                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasMovementFlags2 = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasFallData = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasUnkMovementField = !packet.ReadBit();    // v2 + 408                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                  bit389 = packet.ReadBit();                  // v2 + 389                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasTransport = packet.ReadBit(); // v2 + 344                  guid20[0] = packet.ReadBit();               // v2 + 263                  unkMovementLoopCounter = packet.ReadBits(22);                    if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[4] = packet.ReadBit();    // v2 + 301                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[3] = packet.ReadBit();    // v2 + 299                  }                    guid20[1] = packet.ReadBit();               // v2 + 257                    if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);                    guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  bit412 = packet.ReadBit();                  // v2 + 412                  hasPitch = !packet.ReadBit();                  guid20[4] = packet.ReadBit(); // v2 + 260                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  hasOrientation = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  bit388 = packet.ReadBit(); // v2 + 388                  guid20[5] = packet.ReadBit();               // v2 + 261                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasMovementFlags2 = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasFallData = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasUnkMovementField = !packet.ReadBit();    // v2 + 408                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                  bit389 = packet.ReadBit();                  // v2 + 389                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasTransport = packet.ReadBit(); // v2 + 344                  guid20[0] = packet.ReadBit();               // v2 + 263                  unkMovementLoopCounter = packet.ReadBits(22);                    if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[4] = packet.ReadBit();    // v2 + 301                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[3] = packet.ReadBit();    // v2 + 299                  }                    guid20[1] = packet.ReadBit();               // v2 + 257                    if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);                    guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  bit412 = packet.ReadBit();                  // v2 + 412                  hasPitch = !packet.ReadBit();                  guid20[4] = packet.ReadBit(); // v2 + 260                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  hasOrientation = !packet.ReadBit();                  hasSplineElevation = !packet.ReadBit();                  bit388 = packet.ReadBit(); // v2 + 388                  guid20[5] = packet.ReadBit();               // v2 + 261                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasMovementFlags2 = !packet.ReadBit();                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasFallData = packet.ReadBit();                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasUnkMovementField = !packet.ReadBit();    // v2 + 408                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                  bit389 = packet.ReadBit();                  // v2 + 389                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasTransport = packet.ReadBit(); // v2 + 344                  guid20[0] = packet.ReadBit();               // v2 + 263                  unkMovementLoopCounter = packet.ReadBits(22);                    if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[4] = packet.ReadBit();    // v2 + 301                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[3] = packet.ReadBit();    // v2 + 299                  }                    guid20[1] = packet.ReadBit();               // v2 + 257                    if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);                    guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  bit412 = packet.ReadBit();                  // v2 + 412                  hasPitch = !packet.ReadBit();                  guid20[4] = packet.ReadBit(); // v2 + 260                    if (hasFallData)                      hasFallDirection = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(guid2' 2' 0' 1' 4' 5' 6' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(guid2' 2' 0' 1' 4' 5' 6' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(guid2' 2' 0' 1' 4' 5' 6' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(guid2' 2' 0' 1' 4' 5' 6' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(guid2' 2' 0' 1' 4' 5' 6' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(guid2' 2' 0' 1' 4' 5' 6' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasCastFlags)                  packet.ReadBits("hasCastFlags"' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 4' 7' 0' 6' 1' 5' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 4' 7' 0' 6' 1' 5' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 4' 7' 0' 6' 1' 5' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 4' 7' 0' 6' 1' 5' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 4' 7' 0' 6' 1' 5' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.StartBitStream(guid1' 2' 4' 7' 0' 6' 1' 5' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasTargetMask)                  packet.ReadBitsE<TargetFlag>("Target Flags"' 20);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasTargetString)                  targetString = packet.ReadBits("hasTargetString"' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasSrcLocation)                  packet.StartBitStream(guid4' 2' 0' 3' 1' 6' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasSrcLocation)                  packet.StartBitStream(guid4' 2' 0' 3' 1' 6' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasSrcLocation)                  packet.StartBitStream(guid4' 2' 0' 3' 1' 6' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasSrcLocation)                  packet.StartBitStream(guid4' 2' 0' 3' 1' 6' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasSrcLocation)                  packet.StartBitStream(guid4' 2' 0' 3' 1' 6' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasSrcLocation)                  packet.StartBitStream(guid4' 2' 0' 3' 1' 6' 7' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.StartBitStream(guid3' 6' 0' 3' 4' 2' 1' 5' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.StartBitStream(guid3' 6' 0' 3' 4' 2' 1' 5' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.StartBitStream(guid3' 6' 0' 3' 4' 2' 1' 5' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.StartBitStream(guid3' 6' 0' 3' 4' 2' 1' 5' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.StartBitStream(guid3' 6' 0' 3' 4' 2' 1' 5' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.StartBitStream(guid3' 6' 0' 3' 4' 2' 1' 5' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.ReadXORBytes(petGuid' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.ReadXORBytes(petGuid' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.ReadXORBytes(petGuid' 2' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.ReadXORBytes(petGuid' 1' 7' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.ReadXORBytes(petGuid' 1' 7' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.ReadXORBytes(petGuid' 1' 7' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasDestLocation)              {                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Position Z");                  packet.ReadSingle("Position Y");                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 0);                    packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasDestLocation)              {                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Position Z");                  packet.ReadSingle("Position Y");                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 0);                    packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasDestLocation)              {                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Position Z");                  packet.ReadSingle("Position Y");                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 0);                    packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasDestLocation)              {                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Position Z");                  packet.ReadSingle("Position Y");                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 0);                    packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasDestLocation)              {                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Position Z");                  packet.ReadSingle("Position Y");                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 0);                    packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasDestLocation)              {                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Position Z");                  packet.ReadSingle("Position Y");                  packet.ReadXORByte(guid2' 6);                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(guid2' 2);                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 0);                    packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    if (hasTransport)                  {                      if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadSingle("O");          // v2 + 304                      packet.ReadSingle("Z");          // v2 + 312                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadInt32("Transport Time");     // v2 + 324                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadSingle("X");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadXORByte(transportGUID' 0);   // v2 + 296                      packet.ReadSingle("Y");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("CosAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("SinAngle");                      }                      packet.ReadInt32("FallTime");                  }                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 6);      // v2 + 262                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 1);      // v2 + 257                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadXORByte(guid20' 0);      // v2 + 256                  packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    if (hasTransport)                  {                      if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadSingle("O");          // v2 + 304                      packet.ReadSingle("Z");          // v2 + 312                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadInt32("Transport Time");     // v2 + 324                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadSingle("X");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadXORByte(transportGUID' 0);   // v2 + 296                      packet.ReadSingle("Y");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("CosAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("SinAngle");                      }                      packet.ReadInt32("FallTime");                  }                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 6);      // v2 + 262                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 1);      // v2 + 257                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadXORByte(guid20' 0);      // v2 + 256                  packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    if (hasTransport)                  {                      if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadSingle("O");          // v2 + 304                      packet.ReadSingle("Z");          // v2 + 312                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadInt32("Transport Time");     // v2 + 324                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadSingle("X");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadXORByte(transportGUID' 0);   // v2 + 296                      packet.ReadSingle("Y");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("CosAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("SinAngle");                      }                      packet.ReadInt32("FallTime");                  }                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 6);      // v2 + 262                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 1);      // v2 + 257                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadXORByte(guid20' 0);      // v2 + 256                  packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    if (hasTransport)                  {                      if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadSingle("O");          // v2 + 304                      packet.ReadSingle("Z");          // v2 + 312                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadInt32("Transport Time");     // v2 + 324                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadSingle("X");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadXORByte(transportGUID' 0);   // v2 + 296                      packet.ReadSingle("Y");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("CosAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("SinAngle");                      }                      packet.ReadInt32("FallTime");                  }                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 6);      // v2 + 262                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 1);      // v2 + 257                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadXORByte(guid20' 0);      // v2 + 256                  packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    if (hasTransport)                  {                      if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadSingle("O");          // v2 + 304                      packet.ReadSingle("Z");          // v2 + 312                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadInt32("Transport Time");     // v2 + 324                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadSingle("X");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadXORByte(transportGUID' 0);   // v2 + 296                      packet.ReadSingle("Y");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("CosAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("SinAngle");                      }                      packet.ReadInt32("FallTime");                  }                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 6);      // v2 + 262                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 1);      // v2 + 257                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadXORByte(guid20' 0);      // v2 + 256                  packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    if (hasTransport)                  {                      if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadSingle("O");          // v2 + 304                      packet.ReadSingle("Z");          // v2 + 312                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadInt32("Transport Time");     // v2 + 324                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadSingle("X");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadXORByte(transportGUID' 0);   // v2 + 296                      packet.ReadSingle("Y");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("CosAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("SinAngle");                      }                      packet.ReadInt32("FallTime");                  }                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 6);      // v2 + 262                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 1);      // v2 + 257                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadXORByte(guid20' 0);      // v2 + 256                  packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    if (hasTransport)                  {                      if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadSingle("O");          // v2 + 304                      packet.ReadSingle("Z");          // v2 + 312                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadInt32("Transport Time");     // v2 + 324                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadSingle("X");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadXORByte(transportGUID' 0);   // v2 + 296                      packet.ReadSingle("Y");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("CosAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("SinAngle");                      }                      packet.ReadInt32("FallTime");                  }                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 6);      // v2 + 262                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 1);      // v2 + 257                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadXORByte(guid20' 0);      // v2 + 256                  packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    if (hasTransport)                  {                      if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadSingle("O");          // v2 + 304                      packet.ReadSingle("Z");          // v2 + 312                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadInt32("Transport Time");     // v2 + 324                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadSingle("X");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadXORByte(transportGUID' 0);   // v2 + 296                      packet.ReadSingle("Y");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("CosAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("SinAngle");                      }                      packet.ReadInt32("FallTime");                  }                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 6);      // v2 + 262                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 1);      // v2 + 257                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadXORByte(guid20' 0);      // v2 + 256                  packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    if (hasTransport)                  {                      if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadSingle("O");          // v2 + 304                      packet.ReadSingle("Z");          // v2 + 312                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadInt32("Transport Time");     // v2 + 324                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadSingle("X");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadXORByte(transportGUID' 0);   // v2 + 296                      packet.ReadSingle("Y");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("CosAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("SinAngle");                      }                      packet.ReadInt32("FallTime");                  }                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 6);      // v2 + 262                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 1);      // v2 + 257                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadXORByte(guid20' 0);      // v2 + 256                  packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    if (hasTransport)                  {                      if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadSingle("O");          // v2 + 304                      packet.ReadSingle("Z");          // v2 + 312                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadInt32("Transport Time");     // v2 + 324                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadSingle("X");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadXORByte(transportGUID' 0);   // v2 + 296                      packet.ReadSingle("Y");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("CosAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("SinAngle");                      }                      packet.ReadInt32("FallTime");                  }                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 6);      // v2 + 262                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 1);      // v2 + 257                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadXORByte(guid20' 0);      // v2 + 256                  packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    if (hasTransport)                  {                      if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadSingle("O");          // v2 + 304                      packet.ReadSingle("Z");          // v2 + 312                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadInt32("Transport Time");     // v2 + 324                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadSingle("X");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadXORByte(transportGUID' 0);   // v2 + 296                      packet.ReadSingle("Y");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("CosAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("SinAngle");                      }                      packet.ReadInt32("FallTime");                  }                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 6);      // v2 + 262                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 1);      // v2 + 257                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadXORByte(guid20' 0);      // v2 + 256                  packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasMovement)              {                  if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    if (hasTransport)                  {                      if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadSingle("O");          // v2 + 304                      packet.ReadSingle("Z");          // v2 + 312                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadInt32("Transport Time");     // v2 + 324                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadSingle("X");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadXORByte(transportGUID' 0);   // v2 + 296                      packet.ReadSingle("Y");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("CosAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("SinAngle");                      }                      packet.ReadInt32("FallTime");                  }                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 6);      // v2 + 262                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 1);      // v2 + 257                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadXORByte(guid20' 0);      // v2 + 256                  packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasSrcLocation)              {                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 7);                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid4' 5);                  packet.ReadSingle("Position X");                  packet.ReadSingle("Position Y");                    packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasSrcLocation)              {                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 7);                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid4' 5);                  packet.ReadSingle("Position X");                  packet.ReadSingle("Position Y");                    packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasSrcLocation)              {                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 7);                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid4' 5);                  packet.ReadSingle("Position X");                  packet.ReadSingle("Position Y");                    packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasSrcLocation)              {                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 7);                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid4' 5);                  packet.ReadSingle("Position X");                  packet.ReadSingle("Position Y");                    packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasSrcLocation)              {                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 7);                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid4' 5);                  packet.ReadSingle("Position X");                  packet.ReadSingle("Position Y");                    packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: if (hasSrcLocation)              {                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 7);                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid4' 5);                  packet.ReadSingle("Position X");                  packet.ReadSingle("Position Y");                    packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid1' 1' 2' 5' 7' 4' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid1' 1' 2' 5' 7' 4' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid1' 1' 2' 5' 7' 4' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid1' 1' 2' 5' 7' 4' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid1' 1' 2' 5' 7' 4' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid1' 1' 2' 5' 7' 4' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid3' 1' 5' 7' 3' 0' 2' 4' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid3' 1' 5' 7' 3' 0' 2' 4' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid3' 1' 5' 7' 3' 0' 2' 4' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid3' 1' 5' 7' 3' 0' 2' 4' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid3' 1' 5' 7' 3' 0' 2' 4' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,PetHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\PetHandler.cs,HandlePetCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid3' 1' 5' 7' 3' 0' 2' 4' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.ModelIDs = new uint?[4];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.KillCredits = new uint?[2];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: uint bits24 = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: uint qItemCount = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: int bits1C = (int)packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: var stringLens = new int[4][];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][0] = (int)packet.ReadBits(11);                  stringLens[i][1] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][0] = (int)packet.ReadBits(11);                  stringLens[i][1] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][0] = (int)packet.ReadBits(11);                  stringLens[i][1] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  stringLens[i] = new int[2];                  stringLens[i][0] = (int)packet.ReadBits(11);                  stringLens[i][1] = (int)packet.ReadBits(11);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: uint bits2C = packet.ReadBits(6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.ModelIDs[3] = packet.ReadUInt32();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: creature.ModelIDs[2] = packet.ReadUInt32();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: var name = new string[4];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: var femaleName = new string[4];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; ++i)              {                  if (stringLens[i][1] > 1)                      femaleName[i] = packet.ReadCString("Female Name"' i);                  if (stringLens[i][0] > 1)                      name[i] = packet.ReadCString("Name"' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; ++i)                  packet.AddValue("Display ID"' creature.ModelIDs[i]' i);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (int i = 0; i < 2; ++i)                  packet.AddValue("Kill Credit"' creature.KillCredits[i]' i);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: var count = packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 6' 3' 0' 1' 4' 5' 7' 2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 6' 3' 0' 1' 4' 5' 7' 2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 6' 3' 0' 1' 4' 5' 7' 2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 6' 3' 0' 1' 4' 5' 7' 2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 6' 3' 0' 1' 4' 5' 7' 2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 6' 3' 0' 1' 4' 5' 7' 2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guids[i] = new byte[8];                  packet.StartBitStream(guids[i]' 6' 3' 0' 1' 4' 5' 7' 2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guids[i]' 1);                    packet.ReadInt32("Entry"' i);                    packet.ReadXORByte(guids[i]' 0);                  packet.ReadXORByte(guids[i]' 5);                  packet.ReadXORByte(guids[i]' 6);                  packet.ReadXORByte(guids[i]' 4);                  packet.ReadXORByte(guids[i]' 7);                  packet.ReadXORByte(guids[i]' 2);                  packet.ReadXORByte(guids[i]' 3);                    packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guids[i]' 1);                    packet.ReadInt32("Entry"' i);                    packet.ReadXORByte(guids[i]' 0);                  packet.ReadXORByte(guids[i]' 5);                  packet.ReadXORByte(guids[i]' 6);                  packet.ReadXORByte(guids[i]' 4);                  packet.ReadXORByte(guids[i]' 7);                  packet.ReadXORByte(guids[i]' 2);                  packet.ReadXORByte(guids[i]' 3);                    packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guids[i]' 1);                    packet.ReadInt32("Entry"' i);                    packet.ReadXORByte(guids[i]' 0);                  packet.ReadXORByte(guids[i]' 5);                  packet.ReadXORByte(guids[i]' 6);                  packet.ReadXORByte(guids[i]' 4);                  packet.ReadXORByte(guids[i]' 7);                  packet.ReadXORByte(guids[i]' 2);                  packet.ReadXORByte(guids[i]' 3);                    packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guids[i]' 1);                    packet.ReadInt32("Entry"' i);                    packet.ReadXORByte(guids[i]' 0);                  packet.ReadXORByte(guids[i]' 5);                  packet.ReadXORByte(guids[i]' 6);                  packet.ReadXORByte(guids[i]' 4);                  packet.ReadXORByte(guids[i]' 7);                  packet.ReadXORByte(guids[i]' 2);                  packet.ReadXORByte(guids[i]' 3);                    packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guids[i]' 1);                    packet.ReadInt32("Entry"' i);                    packet.ReadXORByte(guids[i]' 0);                  packet.ReadXORByte(guids[i]' 5);                  packet.ReadXORByte(guids[i]' 6);                  packet.ReadXORByte(guids[i]' 4);                  packet.ReadXORByte(guids[i]' 7);                  packet.ReadXORByte(guids[i]' 2);                  packet.ReadXORByte(guids[i]' 3);                    packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleDBQueryBulk,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guids[i]' 1);                    packet.ReadInt32("Entry"' i);                    packet.ReadXORByte(guids[i]' 0);                  packet.ReadXORByte(guids[i]' 5);                  packet.ReadXORByte(guids[i]' 6);                  packet.ReadXORByte(guids[i]' 4);                  packet.ReadXORByte(guids[i]' 7);                  packet.ReadXORByte(guids[i]' 2);                  packet.ReadXORByte(guids[i]' 3);                    packet.WriteGuid("Guid"' guids[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: var guid4 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: var guid5 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: guid1[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: guid1[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: guid1[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: guid1[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: guid1[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: guid1[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid1' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid1' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid1' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: packet.ReadXORByte(guid1' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: if (hasData == 0)              {                  guid4[2] = packet.ReadBit();                  guid4[7] = packet.ReadBit();                  guid5[7] = packet.ReadBit();                  guid5[2] = packet.ReadBit();                  guid5[0] = packet.ReadBit();                  bit18 = packet.ReadBit();                    guid4[4] = packet.ReadBit();                  guid5[5] = packet.ReadBit();                  guid4[1] = packet.ReadBit();                  guid4[3] = packet.ReadBit();                  guid4[0] = packet.ReadBit();                    var count = new int[5];                  for (var i = 0; i < 5; ++i)                      count[i] = (int)packet.ReadBits(7);                    guid5[6] = packet.ReadBit();                  guid5[3] = packet.ReadBit();                  guid4[5] = packet.ReadBit();                  guid5[1] = packet.ReadBit();                  guid5[4] = packet.ReadBit();                    var nameLen = (int)packet.ReadBits(6);                    guid4[6] = packet.ReadBit();                    packet.ReadXORByte(guid5' 6);                  packet.ReadXORByte(guid5' 0);                  packet.ReadWoWString("Name"' nameLen);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid5' 3);                  packet.ReadXORByte(guid4' 4);                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid5' 4);                  packet.ReadXORByte(guid5' 2);                  packet.ReadXORByte(guid4' 7);                    for (var i = 0; i < 5; ++i)                      packet.ReadWoWString("Name Declined"' count[i]' i);                    packet.ReadXORByte(guid4' 6);                  packet.ReadXORByte(guid5' 7);                  packet.ReadXORByte(guid5' 1);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid5' 5);                  packet.ReadXORByte(guid4' 0);                    packet.WriteGuid("Guid4"' guid4);                  packet.WriteGuid("Guid5"' guid5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 5' 1' 2' 6' 3' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 5' 1' 2' 6' 3' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 5' 1' 2' 6' 3' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 5' 1' 2' 6' 3' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 5' 1' 2' 6' 3' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandleNameQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 7' 5' 1' 2' 6' 3' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 3' 7' 6' 4' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 3' 7' 6' 4' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 3' 7' 6' 4' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 3' 7' 6' 4' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 3' 7' 6' 4' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.StartBitStream(guid' 2' 1' 3' 7' 6' 4' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 6' 3' 5' 1' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 6' 3' 5' 1' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 6' 3' 5' 1' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 6' 3' 5' 1' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 6' 3' 5' 1' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandlePageTextQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 6' 3' 5' 1' 7' 4' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QueryHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QueryHandler.cs,HandlePageTextResponse,The following statement contains a magic number: uint textLen = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusQuery,The following statement contains a magic number: var guid = packet.StartBitStream(4' 3' 2' 1' 0' 5' 7' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusQuery,The following statement contains a magic number: var guid = packet.StartBitStream(4' 3' 2' 1' 0' 5' 7' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusQuery,The following statement contains a magic number: var guid = packet.StartBitStream(4' 3' 2' 1' 0' 5' 7' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusQuery,The following statement contains a magic number: var guid = packet.StartBitStream(4' 3' 2' 1' 0' 5' 7' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusQuery,The following statement contains a magic number: var guid = packet.StartBitStream(4' 3' 2' 1' 0' 5' 7' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusQuery,The following statement contains a magic number: var guid = packet.StartBitStream(4' 3' 2' 1' 0' 5' 7' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 7' 4' 0' 2' 1' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 7' 4' 0' 2' 1' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 7' 4' 0' 2' 1' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 7' 4' 0' 2' 1' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 7' 4' 0' 2' 1' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 7' 4' 0' 2' 1' 6' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatus,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatus,The following statement contains a magic number: packet.StartBitStream(guid' 1' 7' 4' 2' 5' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatus,The following statement contains a magic number: packet.StartBitStream(guid' 1' 7' 4' 2' 5' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatus,The following statement contains a magic number: packet.StartBitStream(guid' 1' 7' 4' 2' 5' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatus,The following statement contains a magic number: packet.StartBitStream(guid' 1' 7' 4' 2' 5' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatus,The following statement contains a magic number: packet.StartBitStream(guid' 1' 7' 4' 2' 5' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatus,The following statement contains a magic number: packet.StartBitStream(guid' 1' 7' 4' 2' 5' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatus,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatus,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatus,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatus,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatus,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatus,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusMultiple,The following statement contains a magic number: var count = packet.ReadBits("Count"' 21);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusMultiple,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                    packet.StartBitStream(guid[i]' 4' 0' 3' 6' 5' 7' 1' 2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusMultiple,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                    packet.StartBitStream(guid[i]' 4' 0' 3' 6' 5' 7' 1' 2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusMultiple,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                    packet.StartBitStream(guid[i]' 4' 0' 3' 6' 5' 7' 1' 2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusMultiple,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                    packet.StartBitStream(guid[i]' 4' 0' 3' 6' 5' 7' 1' 2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusMultiple,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                    packet.StartBitStream(guid[i]' 4' 0' 3' 6' 5' 7' 1' 2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusMultiple,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                    packet.StartBitStream(guid[i]' 4' 0' 3' 6' 5' 7' 1' 2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusMultiple,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  guid[i] = new byte[8];                    packet.StartBitStream(guid[i]' 4' 0' 3' 6' 5' 7' 1' 2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusMultiple,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadInt32E<QuestGiverStatus4x>("Status");                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 0);                    packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusMultiple,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadInt32E<QuestGiverStatus4x>("Status");                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 0);                    packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusMultiple,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadInt32E<QuestGiverStatus4x>("Status");                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 0);                    packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusMultiple,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadInt32E<QuestGiverStatus4x>("Status");                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 0);                    packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusMultiple,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadInt32E<QuestGiverStatus4x>("Status");                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 0);                    packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverStatusMultiple,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadInt32E<QuestGiverStatus4x>("Status");                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadXORByte(guid[i]' 0);                    packet.WriteGuid("Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 2' 7' 6' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 2' 7' 6' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 2' 7' 6' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 2' 7' 6' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 2' 7' 6' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.StartBitStream(guid' 0' 5' 2' 7' 6' 4' 1' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 7' 5' 2' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 7' 5' 2' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 7' 5' 2' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 7' 5' 2' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 7' 5' 2' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQuery,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 7' 5' 2' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: if (questIsntAutoComplete)              {                  var questTurnTextWindowLen = packet.ReadBits(10); // +2113                  var questTitleLen = packet.ReadBits(9); // +30                  var questCompletedTextLen = packet.ReadBits(11); // +2433                  var questDetailsLen = packet.ReadBits(12); // +908                  var questTurnTargetNameLen = packet.ReadBits(8); // +2369                  var questGiverTargetNameLen = packet.ReadBits(8); // +2049                  var questGiverTextWindowLen = packet.ReadBits(10); // +1793                  var questEndTextLen = packet.ReadBits(9); // +1658                  var questObjectivesCount = packet.ReadBits("Objectives Count"' 19);                  var questObjectivesLen = packet.ReadBits(12); // +158                    uint['] objectivesCounts = new uint[questObjectivesCount' 2];                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      objectivesCounts[i' 1] = packet.ReadBits(8); // +2949 + 20 objectives texts                      objectivesCounts[i' 0] = packet.ReadBits(22); // +2949 + 0 objectives visuals                  }                    packet.ResetBitReader();                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      packet.ReadUInt32("Requirement Count "' i); // +2949 + 12                      packet.ReadUInt32("Objective ID"' i); // +2949 + 0                      packet.ReadWoWString("Objective Text"' objectivesCounts[i' 1]' i); // +2949 + 20                      packet.ReadUInt32("Unk2 UInt32"' i); // +2949 + 16                      packet.ReadByte("Objective"' i); // +2949 + 5                      var reqType = packet.ReadByteE<QuestRequirementType>("Requirement Type"' i); // +2949 + 4                        // +2949 + 8                      switch (reqType)                      {                          case QuestRequirementType.CreatureKill:                          case QuestRequirementType.CreatureInteract:                          case QuestRequirementType.PetBattleDefeatCreature:                              packet.ReadInt32<UnitId>("Required Creature ID"' i);                              break;                          case QuestRequirementType.Item:                              packet.ReadInt32<ItemId>("Required Item ID"' i);                              break;                          case QuestRequirementType.GameObject:                              packet.ReadInt32<GOId>("Required GameObject ID"' i);                              break;                          case QuestRequirementType.Currency:                              packet.ReadUInt32("Required Currency ID"' i);                              break;                          case QuestRequirementType.Spell:                              packet.ReadInt32<SpellId>("Required Spell ID"' i);                              break;                          case QuestRequirementType.FactionRepHigher:                          case QuestRequirementType.FactionRepLower:                              packet.ReadUInt32("Required Faction ID"' i);                              break;                          case QuestRequirementType.PetBattleDefeatSpecies:                              packet.ReadUInt32("Required Species ID"' i);                              break;                          default:                              packet.ReadInt32("Required ID"' i);                              break;                      }                        for (var j = 0; j < objectivesCounts[i' 0]; j++)                          packet.ReadUInt32("Objective Visual ID"' i' j);                  }                    packet.ReadUInt32("Required Source Item ID 1"); // +2960                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2980                  packet.ReadUInt32("Reward ItemID 3"); // +2955                  packet.ReadUInt32("Reward ItemID Count2"); // +2957                  packet.ReadUInt32("int2973"); // +2975                    QuestTemplate quest = new QuestTemplate                  {                      QuestType = QuestType.Normal                  };                    quest.RewardCurrencyID = new uint?[4];                  quest.RewardCurrencyCount = new uint?[4];                  for (int i = 0; i < 4; ++i)                  {                      quest.RewardCurrencyID[i] = packet.ReadUInt32("Reward Currency ID"' i); // +3001 + 16                      quest.RewardCurrencyCount[i] = packet.ReadUInt32("Reward Currency Count"' i); // +3001 + 0                  }                    packet.ReadUInt32("CharTittleID"); // +1787                  packet.ReadSingle("Point Y"); // +28                  quest.SoundTurnIn = packet.ReadUInt32("Sound TurnIn"); // +2947                    const int repCount = 5;                  quest.RewardFactionID = new uint?[repCount];                  quest.RewardFactionValue = new int?[repCount];                  quest.RewardFactionOverride = new int?[repCount];                    for (var i = 0; i < repCount; i++)                  {                      quest.RewardFactionValue[i] = packet.ReadInt32("Reward Reputation ID"' i); // +2986 + 20                      quest.RewardFactionOverride[i] = (int)packet.ReadUInt32("Reward Reputation ID Override"' i); // +2986 + 0                      quest.RewardFactionID[i] = packet.ReadUInt32("Reward Faction ID"' i); // +2986 + 400                  }                    quest.RewardMoney = packet.ReadInt32("Reward Money"); // +16                  packet.ReadUInt32("EmoteOnComplete"); // +2981                  packet.ReadUInt32("Reward Choice ItemID Count5"); // +2972                  packet.ReadUInt32("MinimapTargetMask"); // +25                  quest.AreaDescription = packet.ReadWoWString("QuestEndText"' questEndTextLen); // +1658                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2971                  quest.RewardBonusMoney = packet.ReadUInt32("Reward Money Max Level"); // +18                  packet.ReadUInt32("Reward Item1 ID"); // +2952                  quest.QuestCompletionLog = packet.ReadWoWString("QuestCompletedText"' questCompletedTextLen); // +2433                  packet.ReadInt32("Reward Choice ItemID 4"); // +2977                  packet.ReadUInt32("RewardHonorAddition"); // +21                  quest.QuestGiverTextWindow = packet.ReadWoWString("QuestGiverTextWindow"' questGiverTextWindowLen); // +1793                  quest.LogDescription = packet.ReadWoWString("QuestObjectives"' questObjectivesLen); // +158                  packet.ReadUInt32("RewArenaPoints"); // +1790                  packet.ReadUInt32("Reward Choice ItemID 6"); // +2983                  quest.SuggestedGroupNum = packet.ReadUInt32("Suggested Players"); // +13                  packet.ReadUInt32("RepObjectiveFaction"); // +6                  packet.ReadUInt32("Required Source Item ID 2"); // +2961                  packet.ReadUInt32("Reward ItemID 2"); // +2953                  packet.ReadUInt32("MinLevel"); // +10                  packet.ReadUInt32("Reward Choice ItemID Count3"); // +2945                  packet.ReadUInt32("PointOpt"); // +29                    // +8                  quest.QuestLevel = packet.ReadInt32("Level"); // +8                    packet.ReadUInt32("RepObjectiveFaction2"); // +7                  packet.ReadUInt32("Required Source Item ID Count 3"); // +2966                  packet.ReadUInt32("XPId"); // +17                  quest.QuestDescription = packet.ReadWoWString("QuestDetails"' questDetailsLen); // +908                  packet.ReadUInt32("Reward ItemID Count1"); // +2956                  packet.ReadUInt32("Reward Choice ItemID Count6"); // +2984                  packet.ReadUInt32("Reward ItemID Count3"); // +2958                  packet.ReadUInt32("RewardSpellCasted"); // +20                  packet.ReadUInt32("dword2E80"); // +2976                  quest.QuestTurnTargetName = packet.ReadWoWString("QuestTurnTargetName"' questTurnTargetNameLen); // +2369                  packet.ReadUInt32("dword2E74"); // +2973                  packet.ReadUInt32("Required Source Item ID Count 2"); // +2965                  packet.ReadUInt32("Required Source Item ID 3"); // +2962                  packet.ReadUInt32("RewSkillPoints"); // +1792                  quest.LogTitle = packet.ReadWoWString("QuestTitle"' questTitleLen); // +30                  quest.QuestInfoID = packet.ReadInt32E<QuestInfo>("Type"); // +12                  packet.ReadUInt32("RepObjectiveValue2"); // +15                  packet.ReadUInt32("unk11"); // +2982                  packet.ReadUInt32("PlayersSlain"); // +1788                  packet.ReadUInt32("PointMapId"); // +26                  packet.ReadUInt32("NextQuestInChain"); // +14                  packet.ReadUInt32("Reward Choice ItemID 1"); // +2968                  quest.QuestGiverTargetName = packet.ReadWoWString("QuestGiverTargetName"' questGiverTargetNameLen); // +2049                  packet.ReadUInt32("dword2E8C"); // +2979                  packet.ReadUInt32("Required Source Item ID 4"); // +2963                  packet.ReadSingle("Point X"); // +27                  packet.ReadUInt32("Reward Choice ItemID 3"); // +2974                  packet.ReadUInt32("unk"); // +2970                  packet.ReadUInt32("Reward ItemID Count4"); // +2959                  quest.SoundAccept = packet.ReadUInt32("Sound Accept"); // +2946                  packet.ReadUInt32("Reward ItemID 3"); // +2954                  packet.ReadSingle("RewardHonorMultiplier"); // +22                  packet.ReadUInt32("RequiredSpellID"); // +1786                  packet.ReadWoWString("QuestTurnTextWindow"' questTurnTextWindowLen); // +2113                  packet.ReadUInt32("Reward Choice ItemID Count4"); // +2978                  packet.ReadUInt32("Required Source Item ID Count 1"); // +2964                  quest.QuestSortID = packet.ReadInt32E<QuestSort>("Sort"); // +11                  packet.ReadUInt32("BonusTalents"); // +1789                  packet.ReadUInt32("Reward Choice ItemID Count1"); // +2969                  packet.ReadUInt32("Rewarded Spell"); // +19                  packet.ReadUInt32("RewSkillID"); // +1791                  packet.ReadUInt32("unk9"); // +2985                  packet.ReadUInt32("unk10"); // +2967                  quest.Flags = packet.ReadUInt32E<QuestFlags>("Flags"); // +24                  packet.ReadUInt32("Suggested Players"); // +9                  packet.ReadUInt32("SourceItemID"); // +23                    packet.AddSniffData(StoreNameType.Quest' id.Key' "QUERY_RESPONSE");                    Storage.QuestTemplates.Add(quest' packet.TimeSpan);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: if (questIsntAutoComplete)              {                  var questTurnTextWindowLen = packet.ReadBits(10); // +2113                  var questTitleLen = packet.ReadBits(9); // +30                  var questCompletedTextLen = packet.ReadBits(11); // +2433                  var questDetailsLen = packet.ReadBits(12); // +908                  var questTurnTargetNameLen = packet.ReadBits(8); // +2369                  var questGiverTargetNameLen = packet.ReadBits(8); // +2049                  var questGiverTextWindowLen = packet.ReadBits(10); // +1793                  var questEndTextLen = packet.ReadBits(9); // +1658                  var questObjectivesCount = packet.ReadBits("Objectives Count"' 19);                  var questObjectivesLen = packet.ReadBits(12); // +158                    uint['] objectivesCounts = new uint[questObjectivesCount' 2];                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      objectivesCounts[i' 1] = packet.ReadBits(8); // +2949 + 20 objectives texts                      objectivesCounts[i' 0] = packet.ReadBits(22); // +2949 + 0 objectives visuals                  }                    packet.ResetBitReader();                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      packet.ReadUInt32("Requirement Count "' i); // +2949 + 12                      packet.ReadUInt32("Objective ID"' i); // +2949 + 0                      packet.ReadWoWString("Objective Text"' objectivesCounts[i' 1]' i); // +2949 + 20                      packet.ReadUInt32("Unk2 UInt32"' i); // +2949 + 16                      packet.ReadByte("Objective"' i); // +2949 + 5                      var reqType = packet.ReadByteE<QuestRequirementType>("Requirement Type"' i); // +2949 + 4                        // +2949 + 8                      switch (reqType)                      {                          case QuestRequirementType.CreatureKill:                          case QuestRequirementType.CreatureInteract:                          case QuestRequirementType.PetBattleDefeatCreature:                              packet.ReadInt32<UnitId>("Required Creature ID"' i);                              break;                          case QuestRequirementType.Item:                              packet.ReadInt32<ItemId>("Required Item ID"' i);                              break;                          case QuestRequirementType.GameObject:                              packet.ReadInt32<GOId>("Required GameObject ID"' i);                              break;                          case QuestRequirementType.Currency:                              packet.ReadUInt32("Required Currency ID"' i);                              break;                          case QuestRequirementType.Spell:                              packet.ReadInt32<SpellId>("Required Spell ID"' i);                              break;                          case QuestRequirementType.FactionRepHigher:                          case QuestRequirementType.FactionRepLower:                              packet.ReadUInt32("Required Faction ID"' i);                              break;                          case QuestRequirementType.PetBattleDefeatSpecies:                              packet.ReadUInt32("Required Species ID"' i);                              break;                          default:                              packet.ReadInt32("Required ID"' i);                              break;                      }                        for (var j = 0; j < objectivesCounts[i' 0]; j++)                          packet.ReadUInt32("Objective Visual ID"' i' j);                  }                    packet.ReadUInt32("Required Source Item ID 1"); // +2960                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2980                  packet.ReadUInt32("Reward ItemID 3"); // +2955                  packet.ReadUInt32("Reward ItemID Count2"); // +2957                  packet.ReadUInt32("int2973"); // +2975                    QuestTemplate quest = new QuestTemplate                  {                      QuestType = QuestType.Normal                  };                    quest.RewardCurrencyID = new uint?[4];                  quest.RewardCurrencyCount = new uint?[4];                  for (int i = 0; i < 4; ++i)                  {                      quest.RewardCurrencyID[i] = packet.ReadUInt32("Reward Currency ID"' i); // +3001 + 16                      quest.RewardCurrencyCount[i] = packet.ReadUInt32("Reward Currency Count"' i); // +3001 + 0                  }                    packet.ReadUInt32("CharTittleID"); // +1787                  packet.ReadSingle("Point Y"); // +28                  quest.SoundTurnIn = packet.ReadUInt32("Sound TurnIn"); // +2947                    const int repCount = 5;                  quest.RewardFactionID = new uint?[repCount];                  quest.RewardFactionValue = new int?[repCount];                  quest.RewardFactionOverride = new int?[repCount];                    for (var i = 0; i < repCount; i++)                  {                      quest.RewardFactionValue[i] = packet.ReadInt32("Reward Reputation ID"' i); // +2986 + 20                      quest.RewardFactionOverride[i] = (int)packet.ReadUInt32("Reward Reputation ID Override"' i); // +2986 + 0                      quest.RewardFactionID[i] = packet.ReadUInt32("Reward Faction ID"' i); // +2986 + 400                  }                    quest.RewardMoney = packet.ReadInt32("Reward Money"); // +16                  packet.ReadUInt32("EmoteOnComplete"); // +2981                  packet.ReadUInt32("Reward Choice ItemID Count5"); // +2972                  packet.ReadUInt32("MinimapTargetMask"); // +25                  quest.AreaDescription = packet.ReadWoWString("QuestEndText"' questEndTextLen); // +1658                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2971                  quest.RewardBonusMoney = packet.ReadUInt32("Reward Money Max Level"); // +18                  packet.ReadUInt32("Reward Item1 ID"); // +2952                  quest.QuestCompletionLog = packet.ReadWoWString("QuestCompletedText"' questCompletedTextLen); // +2433                  packet.ReadInt32("Reward Choice ItemID 4"); // +2977                  packet.ReadUInt32("RewardHonorAddition"); // +21                  quest.QuestGiverTextWindow = packet.ReadWoWString("QuestGiverTextWindow"' questGiverTextWindowLen); // +1793                  quest.LogDescription = packet.ReadWoWString("QuestObjectives"' questObjectivesLen); // +158                  packet.ReadUInt32("RewArenaPoints"); // +1790                  packet.ReadUInt32("Reward Choice ItemID 6"); // +2983                  quest.SuggestedGroupNum = packet.ReadUInt32("Suggested Players"); // +13                  packet.ReadUInt32("RepObjectiveFaction"); // +6                  packet.ReadUInt32("Required Source Item ID 2"); // +2961                  packet.ReadUInt32("Reward ItemID 2"); // +2953                  packet.ReadUInt32("MinLevel"); // +10                  packet.ReadUInt32("Reward Choice ItemID Count3"); // +2945                  packet.ReadUInt32("PointOpt"); // +29                    // +8                  quest.QuestLevel = packet.ReadInt32("Level"); // +8                    packet.ReadUInt32("RepObjectiveFaction2"); // +7                  packet.ReadUInt32("Required Source Item ID Count 3"); // +2966                  packet.ReadUInt32("XPId"); // +17                  quest.QuestDescription = packet.ReadWoWString("QuestDetails"' questDetailsLen); // +908                  packet.ReadUInt32("Reward ItemID Count1"); // +2956                  packet.ReadUInt32("Reward Choice ItemID Count6"); // +2984                  packet.ReadUInt32("Reward ItemID Count3"); // +2958                  packet.ReadUInt32("RewardSpellCasted"); // +20                  packet.ReadUInt32("dword2E80"); // +2976                  quest.QuestTurnTargetName = packet.ReadWoWString("QuestTurnTargetName"' questTurnTargetNameLen); // +2369                  packet.ReadUInt32("dword2E74"); // +2973                  packet.ReadUInt32("Required Source Item ID Count 2"); // +2965                  packet.ReadUInt32("Required Source Item ID 3"); // +2962                  packet.ReadUInt32("RewSkillPoints"); // +1792                  quest.LogTitle = packet.ReadWoWString("QuestTitle"' questTitleLen); // +30                  quest.QuestInfoID = packet.ReadInt32E<QuestInfo>("Type"); // +12                  packet.ReadUInt32("RepObjectiveValue2"); // +15                  packet.ReadUInt32("unk11"); // +2982                  packet.ReadUInt32("PlayersSlain"); // +1788                  packet.ReadUInt32("PointMapId"); // +26                  packet.ReadUInt32("NextQuestInChain"); // +14                  packet.ReadUInt32("Reward Choice ItemID 1"); // +2968                  quest.QuestGiverTargetName = packet.ReadWoWString("QuestGiverTargetName"' questGiverTargetNameLen); // +2049                  packet.ReadUInt32("dword2E8C"); // +2979                  packet.ReadUInt32("Required Source Item ID 4"); // +2963                  packet.ReadSingle("Point X"); // +27                  packet.ReadUInt32("Reward Choice ItemID 3"); // +2974                  packet.ReadUInt32("unk"); // +2970                  packet.ReadUInt32("Reward ItemID Count4"); // +2959                  quest.SoundAccept = packet.ReadUInt32("Sound Accept"); // +2946                  packet.ReadUInt32("Reward ItemID 3"); // +2954                  packet.ReadSingle("RewardHonorMultiplier"); // +22                  packet.ReadUInt32("RequiredSpellID"); // +1786                  packet.ReadWoWString("QuestTurnTextWindow"' questTurnTextWindowLen); // +2113                  packet.ReadUInt32("Reward Choice ItemID Count4"); // +2978                  packet.ReadUInt32("Required Source Item ID Count 1"); // +2964                  quest.QuestSortID = packet.ReadInt32E<QuestSort>("Sort"); // +11                  packet.ReadUInt32("BonusTalents"); // +1789                  packet.ReadUInt32("Reward Choice ItemID Count1"); // +2969                  packet.ReadUInt32("Rewarded Spell"); // +19                  packet.ReadUInt32("RewSkillID"); // +1791                  packet.ReadUInt32("unk9"); // +2985                  packet.ReadUInt32("unk10"); // +2967                  quest.Flags = packet.ReadUInt32E<QuestFlags>("Flags"); // +24                  packet.ReadUInt32("Suggested Players"); // +9                  packet.ReadUInt32("SourceItemID"); // +23                    packet.AddSniffData(StoreNameType.Quest' id.Key' "QUERY_RESPONSE");                    Storage.QuestTemplates.Add(quest' packet.TimeSpan);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: if (questIsntAutoComplete)              {                  var questTurnTextWindowLen = packet.ReadBits(10); // +2113                  var questTitleLen = packet.ReadBits(9); // +30                  var questCompletedTextLen = packet.ReadBits(11); // +2433                  var questDetailsLen = packet.ReadBits(12); // +908                  var questTurnTargetNameLen = packet.ReadBits(8); // +2369                  var questGiverTargetNameLen = packet.ReadBits(8); // +2049                  var questGiverTextWindowLen = packet.ReadBits(10); // +1793                  var questEndTextLen = packet.ReadBits(9); // +1658                  var questObjectivesCount = packet.ReadBits("Objectives Count"' 19);                  var questObjectivesLen = packet.ReadBits(12); // +158                    uint['] objectivesCounts = new uint[questObjectivesCount' 2];                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      objectivesCounts[i' 1] = packet.ReadBits(8); // +2949 + 20 objectives texts                      objectivesCounts[i' 0] = packet.ReadBits(22); // +2949 + 0 objectives visuals                  }                    packet.ResetBitReader();                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      packet.ReadUInt32("Requirement Count "' i); // +2949 + 12                      packet.ReadUInt32("Objective ID"' i); // +2949 + 0                      packet.ReadWoWString("Objective Text"' objectivesCounts[i' 1]' i); // +2949 + 20                      packet.ReadUInt32("Unk2 UInt32"' i); // +2949 + 16                      packet.ReadByte("Objective"' i); // +2949 + 5                      var reqType = packet.ReadByteE<QuestRequirementType>("Requirement Type"' i); // +2949 + 4                        // +2949 + 8                      switch (reqType)                      {                          case QuestRequirementType.CreatureKill:                          case QuestRequirementType.CreatureInteract:                          case QuestRequirementType.PetBattleDefeatCreature:                              packet.ReadInt32<UnitId>("Required Creature ID"' i);                              break;                          case QuestRequirementType.Item:                              packet.ReadInt32<ItemId>("Required Item ID"' i);                              break;                          case QuestRequirementType.GameObject:                              packet.ReadInt32<GOId>("Required GameObject ID"' i);                              break;                          case QuestRequirementType.Currency:                              packet.ReadUInt32("Required Currency ID"' i);                              break;                          case QuestRequirementType.Spell:                              packet.ReadInt32<SpellId>("Required Spell ID"' i);                              break;                          case QuestRequirementType.FactionRepHigher:                          case QuestRequirementType.FactionRepLower:                              packet.ReadUInt32("Required Faction ID"' i);                              break;                          case QuestRequirementType.PetBattleDefeatSpecies:                              packet.ReadUInt32("Required Species ID"' i);                              break;                          default:                              packet.ReadInt32("Required ID"' i);                              break;                      }                        for (var j = 0; j < objectivesCounts[i' 0]; j++)                          packet.ReadUInt32("Objective Visual ID"' i' j);                  }                    packet.ReadUInt32("Required Source Item ID 1"); // +2960                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2980                  packet.ReadUInt32("Reward ItemID 3"); // +2955                  packet.ReadUInt32("Reward ItemID Count2"); // +2957                  packet.ReadUInt32("int2973"); // +2975                    QuestTemplate quest = new QuestTemplate                  {                      QuestType = QuestType.Normal                  };                    quest.RewardCurrencyID = new uint?[4];                  quest.RewardCurrencyCount = new uint?[4];                  for (int i = 0; i < 4; ++i)                  {                      quest.RewardCurrencyID[i] = packet.ReadUInt32("Reward Currency ID"' i); // +3001 + 16                      quest.RewardCurrencyCount[i] = packet.ReadUInt32("Reward Currency Count"' i); // +3001 + 0                  }                    packet.ReadUInt32("CharTittleID"); // +1787                  packet.ReadSingle("Point Y"); // +28                  quest.SoundTurnIn = packet.ReadUInt32("Sound TurnIn"); // +2947                    const int repCount = 5;                  quest.RewardFactionID = new uint?[repCount];                  quest.RewardFactionValue = new int?[repCount];                  quest.RewardFactionOverride = new int?[repCount];                    for (var i = 0; i < repCount; i++)                  {                      quest.RewardFactionValue[i] = packet.ReadInt32("Reward Reputation ID"' i); // +2986 + 20                      quest.RewardFactionOverride[i] = (int)packet.ReadUInt32("Reward Reputation ID Override"' i); // +2986 + 0                      quest.RewardFactionID[i] = packet.ReadUInt32("Reward Faction ID"' i); // +2986 + 400                  }                    quest.RewardMoney = packet.ReadInt32("Reward Money"); // +16                  packet.ReadUInt32("EmoteOnComplete"); // +2981                  packet.ReadUInt32("Reward Choice ItemID Count5"); // +2972                  packet.ReadUInt32("MinimapTargetMask"); // +25                  quest.AreaDescription = packet.ReadWoWString("QuestEndText"' questEndTextLen); // +1658                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2971                  quest.RewardBonusMoney = packet.ReadUInt32("Reward Money Max Level"); // +18                  packet.ReadUInt32("Reward Item1 ID"); // +2952                  quest.QuestCompletionLog = packet.ReadWoWString("QuestCompletedText"' questCompletedTextLen); // +2433                  packet.ReadInt32("Reward Choice ItemID 4"); // +2977                  packet.ReadUInt32("RewardHonorAddition"); // +21                  quest.QuestGiverTextWindow = packet.ReadWoWString("QuestGiverTextWindow"' questGiverTextWindowLen); // +1793                  quest.LogDescription = packet.ReadWoWString("QuestObjectives"' questObjectivesLen); // +158                  packet.ReadUInt32("RewArenaPoints"); // +1790                  packet.ReadUInt32("Reward Choice ItemID 6"); // +2983                  quest.SuggestedGroupNum = packet.ReadUInt32("Suggested Players"); // +13                  packet.ReadUInt32("RepObjectiveFaction"); // +6                  packet.ReadUInt32("Required Source Item ID 2"); // +2961                  packet.ReadUInt32("Reward ItemID 2"); // +2953                  packet.ReadUInt32("MinLevel"); // +10                  packet.ReadUInt32("Reward Choice ItemID Count3"); // +2945                  packet.ReadUInt32("PointOpt"); // +29                    // +8                  quest.QuestLevel = packet.ReadInt32("Level"); // +8                    packet.ReadUInt32("RepObjectiveFaction2"); // +7                  packet.ReadUInt32("Required Source Item ID Count 3"); // +2966                  packet.ReadUInt32("XPId"); // +17                  quest.QuestDescription = packet.ReadWoWString("QuestDetails"' questDetailsLen); // +908                  packet.ReadUInt32("Reward ItemID Count1"); // +2956                  packet.ReadUInt32("Reward Choice ItemID Count6"); // +2984                  packet.ReadUInt32("Reward ItemID Count3"); // +2958                  packet.ReadUInt32("RewardSpellCasted"); // +20                  packet.ReadUInt32("dword2E80"); // +2976                  quest.QuestTurnTargetName = packet.ReadWoWString("QuestTurnTargetName"' questTurnTargetNameLen); // +2369                  packet.ReadUInt32("dword2E74"); // +2973                  packet.ReadUInt32("Required Source Item ID Count 2"); // +2965                  packet.ReadUInt32("Required Source Item ID 3"); // +2962                  packet.ReadUInt32("RewSkillPoints"); // +1792                  quest.LogTitle = packet.ReadWoWString("QuestTitle"' questTitleLen); // +30                  quest.QuestInfoID = packet.ReadInt32E<QuestInfo>("Type"); // +12                  packet.ReadUInt32("RepObjectiveValue2"); // +15                  packet.ReadUInt32("unk11"); // +2982                  packet.ReadUInt32("PlayersSlain"); // +1788                  packet.ReadUInt32("PointMapId"); // +26                  packet.ReadUInt32("NextQuestInChain"); // +14                  packet.ReadUInt32("Reward Choice ItemID 1"); // +2968                  quest.QuestGiverTargetName = packet.ReadWoWString("QuestGiverTargetName"' questGiverTargetNameLen); // +2049                  packet.ReadUInt32("dword2E8C"); // +2979                  packet.ReadUInt32("Required Source Item ID 4"); // +2963                  packet.ReadSingle("Point X"); // +27                  packet.ReadUInt32("Reward Choice ItemID 3"); // +2974                  packet.ReadUInt32("unk"); // +2970                  packet.ReadUInt32("Reward ItemID Count4"); // +2959                  quest.SoundAccept = packet.ReadUInt32("Sound Accept"); // +2946                  packet.ReadUInt32("Reward ItemID 3"); // +2954                  packet.ReadSingle("RewardHonorMultiplier"); // +22                  packet.ReadUInt32("RequiredSpellID"); // +1786                  packet.ReadWoWString("QuestTurnTextWindow"' questTurnTextWindowLen); // +2113                  packet.ReadUInt32("Reward Choice ItemID Count4"); // +2978                  packet.ReadUInt32("Required Source Item ID Count 1"); // +2964                  quest.QuestSortID = packet.ReadInt32E<QuestSort>("Sort"); // +11                  packet.ReadUInt32("BonusTalents"); // +1789                  packet.ReadUInt32("Reward Choice ItemID Count1"); // +2969                  packet.ReadUInt32("Rewarded Spell"); // +19                  packet.ReadUInt32("RewSkillID"); // +1791                  packet.ReadUInt32("unk9"); // +2985                  packet.ReadUInt32("unk10"); // +2967                  quest.Flags = packet.ReadUInt32E<QuestFlags>("Flags"); // +24                  packet.ReadUInt32("Suggested Players"); // +9                  packet.ReadUInt32("SourceItemID"); // +23                    packet.AddSniffData(StoreNameType.Quest' id.Key' "QUERY_RESPONSE");                    Storage.QuestTemplates.Add(quest' packet.TimeSpan);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: if (questIsntAutoComplete)              {                  var questTurnTextWindowLen = packet.ReadBits(10); // +2113                  var questTitleLen = packet.ReadBits(9); // +30                  var questCompletedTextLen = packet.ReadBits(11); // +2433                  var questDetailsLen = packet.ReadBits(12); // +908                  var questTurnTargetNameLen = packet.ReadBits(8); // +2369                  var questGiverTargetNameLen = packet.ReadBits(8); // +2049                  var questGiverTextWindowLen = packet.ReadBits(10); // +1793                  var questEndTextLen = packet.ReadBits(9); // +1658                  var questObjectivesCount = packet.ReadBits("Objectives Count"' 19);                  var questObjectivesLen = packet.ReadBits(12); // +158                    uint['] objectivesCounts = new uint[questObjectivesCount' 2];                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      objectivesCounts[i' 1] = packet.ReadBits(8); // +2949 + 20 objectives texts                      objectivesCounts[i' 0] = packet.ReadBits(22); // +2949 + 0 objectives visuals                  }                    packet.ResetBitReader();                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      packet.ReadUInt32("Requirement Count "' i); // +2949 + 12                      packet.ReadUInt32("Objective ID"' i); // +2949 + 0                      packet.ReadWoWString("Objective Text"' objectivesCounts[i' 1]' i); // +2949 + 20                      packet.ReadUInt32("Unk2 UInt32"' i); // +2949 + 16                      packet.ReadByte("Objective"' i); // +2949 + 5                      var reqType = packet.ReadByteE<QuestRequirementType>("Requirement Type"' i); // +2949 + 4                        // +2949 + 8                      switch (reqType)                      {                          case QuestRequirementType.CreatureKill:                          case QuestRequirementType.CreatureInteract:                          case QuestRequirementType.PetBattleDefeatCreature:                              packet.ReadInt32<UnitId>("Required Creature ID"' i);                              break;                          case QuestRequirementType.Item:                              packet.ReadInt32<ItemId>("Required Item ID"' i);                              break;                          case QuestRequirementType.GameObject:                              packet.ReadInt32<GOId>("Required GameObject ID"' i);                              break;                          case QuestRequirementType.Currency:                              packet.ReadUInt32("Required Currency ID"' i);                              break;                          case QuestRequirementType.Spell:                              packet.ReadInt32<SpellId>("Required Spell ID"' i);                              break;                          case QuestRequirementType.FactionRepHigher:                          case QuestRequirementType.FactionRepLower:                              packet.ReadUInt32("Required Faction ID"' i);                              break;                          case QuestRequirementType.PetBattleDefeatSpecies:                              packet.ReadUInt32("Required Species ID"' i);                              break;                          default:                              packet.ReadInt32("Required ID"' i);                              break;                      }                        for (var j = 0; j < objectivesCounts[i' 0]; j++)                          packet.ReadUInt32("Objective Visual ID"' i' j);                  }                    packet.ReadUInt32("Required Source Item ID 1"); // +2960                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2980                  packet.ReadUInt32("Reward ItemID 3"); // +2955                  packet.ReadUInt32("Reward ItemID Count2"); // +2957                  packet.ReadUInt32("int2973"); // +2975                    QuestTemplate quest = new QuestTemplate                  {                      QuestType = QuestType.Normal                  };                    quest.RewardCurrencyID = new uint?[4];                  quest.RewardCurrencyCount = new uint?[4];                  for (int i = 0; i < 4; ++i)                  {                      quest.RewardCurrencyID[i] = packet.ReadUInt32("Reward Currency ID"' i); // +3001 + 16                      quest.RewardCurrencyCount[i] = packet.ReadUInt32("Reward Currency Count"' i); // +3001 + 0                  }                    packet.ReadUInt32("CharTittleID"); // +1787                  packet.ReadSingle("Point Y"); // +28                  quest.SoundTurnIn = packet.ReadUInt32("Sound TurnIn"); // +2947                    const int repCount = 5;                  quest.RewardFactionID = new uint?[repCount];                  quest.RewardFactionValue = new int?[repCount];                  quest.RewardFactionOverride = new int?[repCount];                    for (var i = 0; i < repCount; i++)                  {                      quest.RewardFactionValue[i] = packet.ReadInt32("Reward Reputation ID"' i); // +2986 + 20                      quest.RewardFactionOverride[i] = (int)packet.ReadUInt32("Reward Reputation ID Override"' i); // +2986 + 0                      quest.RewardFactionID[i] = packet.ReadUInt32("Reward Faction ID"' i); // +2986 + 400                  }                    quest.RewardMoney = packet.ReadInt32("Reward Money"); // +16                  packet.ReadUInt32("EmoteOnComplete"); // +2981                  packet.ReadUInt32("Reward Choice ItemID Count5"); // +2972                  packet.ReadUInt32("MinimapTargetMask"); // +25                  quest.AreaDescription = packet.ReadWoWString("QuestEndText"' questEndTextLen); // +1658                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2971                  quest.RewardBonusMoney = packet.ReadUInt32("Reward Money Max Level"); // +18                  packet.ReadUInt32("Reward Item1 ID"); // +2952                  quest.QuestCompletionLog = packet.ReadWoWString("QuestCompletedText"' questCompletedTextLen); // +2433                  packet.ReadInt32("Reward Choice ItemID 4"); // +2977                  packet.ReadUInt32("RewardHonorAddition"); // +21                  quest.QuestGiverTextWindow = packet.ReadWoWString("QuestGiverTextWindow"' questGiverTextWindowLen); // +1793                  quest.LogDescription = packet.ReadWoWString("QuestObjectives"' questObjectivesLen); // +158                  packet.ReadUInt32("RewArenaPoints"); // +1790                  packet.ReadUInt32("Reward Choice ItemID 6"); // +2983                  quest.SuggestedGroupNum = packet.ReadUInt32("Suggested Players"); // +13                  packet.ReadUInt32("RepObjectiveFaction"); // +6                  packet.ReadUInt32("Required Source Item ID 2"); // +2961                  packet.ReadUInt32("Reward ItemID 2"); // +2953                  packet.ReadUInt32("MinLevel"); // +10                  packet.ReadUInt32("Reward Choice ItemID Count3"); // +2945                  packet.ReadUInt32("PointOpt"); // +29                    // +8                  quest.QuestLevel = packet.ReadInt32("Level"); // +8                    packet.ReadUInt32("RepObjectiveFaction2"); // +7                  packet.ReadUInt32("Required Source Item ID Count 3"); // +2966                  packet.ReadUInt32("XPId"); // +17                  quest.QuestDescription = packet.ReadWoWString("QuestDetails"' questDetailsLen); // +908                  packet.ReadUInt32("Reward ItemID Count1"); // +2956                  packet.ReadUInt32("Reward Choice ItemID Count6"); // +2984                  packet.ReadUInt32("Reward ItemID Count3"); // +2958                  packet.ReadUInt32("RewardSpellCasted"); // +20                  packet.ReadUInt32("dword2E80"); // +2976                  quest.QuestTurnTargetName = packet.ReadWoWString("QuestTurnTargetName"' questTurnTargetNameLen); // +2369                  packet.ReadUInt32("dword2E74"); // +2973                  packet.ReadUInt32("Required Source Item ID Count 2"); // +2965                  packet.ReadUInt32("Required Source Item ID 3"); // +2962                  packet.ReadUInt32("RewSkillPoints"); // +1792                  quest.LogTitle = packet.ReadWoWString("QuestTitle"' questTitleLen); // +30                  quest.QuestInfoID = packet.ReadInt32E<QuestInfo>("Type"); // +12                  packet.ReadUInt32("RepObjectiveValue2"); // +15                  packet.ReadUInt32("unk11"); // +2982                  packet.ReadUInt32("PlayersSlain"); // +1788                  packet.ReadUInt32("PointMapId"); // +26                  packet.ReadUInt32("NextQuestInChain"); // +14                  packet.ReadUInt32("Reward Choice ItemID 1"); // +2968                  quest.QuestGiverTargetName = packet.ReadWoWString("QuestGiverTargetName"' questGiverTargetNameLen); // +2049                  packet.ReadUInt32("dword2E8C"); // +2979                  packet.ReadUInt32("Required Source Item ID 4"); // +2963                  packet.ReadSingle("Point X"); // +27                  packet.ReadUInt32("Reward Choice ItemID 3"); // +2974                  packet.ReadUInt32("unk"); // +2970                  packet.ReadUInt32("Reward ItemID Count4"); // +2959                  quest.SoundAccept = packet.ReadUInt32("Sound Accept"); // +2946                  packet.ReadUInt32("Reward ItemID 3"); // +2954                  packet.ReadSingle("RewardHonorMultiplier"); // +22                  packet.ReadUInt32("RequiredSpellID"); // +1786                  packet.ReadWoWString("QuestTurnTextWindow"' questTurnTextWindowLen); // +2113                  packet.ReadUInt32("Reward Choice ItemID Count4"); // +2978                  packet.ReadUInt32("Required Source Item ID Count 1"); // +2964                  quest.QuestSortID = packet.ReadInt32E<QuestSort>("Sort"); // +11                  packet.ReadUInt32("BonusTalents"); // +1789                  packet.ReadUInt32("Reward Choice ItemID Count1"); // +2969                  packet.ReadUInt32("Rewarded Spell"); // +19                  packet.ReadUInt32("RewSkillID"); // +1791                  packet.ReadUInt32("unk9"); // +2985                  packet.ReadUInt32("unk10"); // +2967                  quest.Flags = packet.ReadUInt32E<QuestFlags>("Flags"); // +24                  packet.ReadUInt32("Suggested Players"); // +9                  packet.ReadUInt32("SourceItemID"); // +23                    packet.AddSniffData(StoreNameType.Quest' id.Key' "QUERY_RESPONSE");                    Storage.QuestTemplates.Add(quest' packet.TimeSpan);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: if (questIsntAutoComplete)              {                  var questTurnTextWindowLen = packet.ReadBits(10); // +2113                  var questTitleLen = packet.ReadBits(9); // +30                  var questCompletedTextLen = packet.ReadBits(11); // +2433                  var questDetailsLen = packet.ReadBits(12); // +908                  var questTurnTargetNameLen = packet.ReadBits(8); // +2369                  var questGiverTargetNameLen = packet.ReadBits(8); // +2049                  var questGiverTextWindowLen = packet.ReadBits(10); // +1793                  var questEndTextLen = packet.ReadBits(9); // +1658                  var questObjectivesCount = packet.ReadBits("Objectives Count"' 19);                  var questObjectivesLen = packet.ReadBits(12); // +158                    uint['] objectivesCounts = new uint[questObjectivesCount' 2];                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      objectivesCounts[i' 1] = packet.ReadBits(8); // +2949 + 20 objectives texts                      objectivesCounts[i' 0] = packet.ReadBits(22); // +2949 + 0 objectives visuals                  }                    packet.ResetBitReader();                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      packet.ReadUInt32("Requirement Count "' i); // +2949 + 12                      packet.ReadUInt32("Objective ID"' i); // +2949 + 0                      packet.ReadWoWString("Objective Text"' objectivesCounts[i' 1]' i); // +2949 + 20                      packet.ReadUInt32("Unk2 UInt32"' i); // +2949 + 16                      packet.ReadByte("Objective"' i); // +2949 + 5                      var reqType = packet.ReadByteE<QuestRequirementType>("Requirement Type"' i); // +2949 + 4                        // +2949 + 8                      switch (reqType)                      {                          case QuestRequirementType.CreatureKill:                          case QuestRequirementType.CreatureInteract:                          case QuestRequirementType.PetBattleDefeatCreature:                              packet.ReadInt32<UnitId>("Required Creature ID"' i);                              break;                          case QuestRequirementType.Item:                              packet.ReadInt32<ItemId>("Required Item ID"' i);                              break;                          case QuestRequirementType.GameObject:                              packet.ReadInt32<GOId>("Required GameObject ID"' i);                              break;                          case QuestRequirementType.Currency:                              packet.ReadUInt32("Required Currency ID"' i);                              break;                          case QuestRequirementType.Spell:                              packet.ReadInt32<SpellId>("Required Spell ID"' i);                              break;                          case QuestRequirementType.FactionRepHigher:                          case QuestRequirementType.FactionRepLower:                              packet.ReadUInt32("Required Faction ID"' i);                              break;                          case QuestRequirementType.PetBattleDefeatSpecies:                              packet.ReadUInt32("Required Species ID"' i);                              break;                          default:                              packet.ReadInt32("Required ID"' i);                              break;                      }                        for (var j = 0; j < objectivesCounts[i' 0]; j++)                          packet.ReadUInt32("Objective Visual ID"' i' j);                  }                    packet.ReadUInt32("Required Source Item ID 1"); // +2960                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2980                  packet.ReadUInt32("Reward ItemID 3"); // +2955                  packet.ReadUInt32("Reward ItemID Count2"); // +2957                  packet.ReadUInt32("int2973"); // +2975                    QuestTemplate quest = new QuestTemplate                  {                      QuestType = QuestType.Normal                  };                    quest.RewardCurrencyID = new uint?[4];                  quest.RewardCurrencyCount = new uint?[4];                  for (int i = 0; i < 4; ++i)                  {                      quest.RewardCurrencyID[i] = packet.ReadUInt32("Reward Currency ID"' i); // +3001 + 16                      quest.RewardCurrencyCount[i] = packet.ReadUInt32("Reward Currency Count"' i); // +3001 + 0                  }                    packet.ReadUInt32("CharTittleID"); // +1787                  packet.ReadSingle("Point Y"); // +28                  quest.SoundTurnIn = packet.ReadUInt32("Sound TurnIn"); // +2947                    const int repCount = 5;                  quest.RewardFactionID = new uint?[repCount];                  quest.RewardFactionValue = new int?[repCount];                  quest.RewardFactionOverride = new int?[repCount];                    for (var i = 0; i < repCount; i++)                  {                      quest.RewardFactionValue[i] = packet.ReadInt32("Reward Reputation ID"' i); // +2986 + 20                      quest.RewardFactionOverride[i] = (int)packet.ReadUInt32("Reward Reputation ID Override"' i); // +2986 + 0                      quest.RewardFactionID[i] = packet.ReadUInt32("Reward Faction ID"' i); // +2986 + 400                  }                    quest.RewardMoney = packet.ReadInt32("Reward Money"); // +16                  packet.ReadUInt32("EmoteOnComplete"); // +2981                  packet.ReadUInt32("Reward Choice ItemID Count5"); // +2972                  packet.ReadUInt32("MinimapTargetMask"); // +25                  quest.AreaDescription = packet.ReadWoWString("QuestEndText"' questEndTextLen); // +1658                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2971                  quest.RewardBonusMoney = packet.ReadUInt32("Reward Money Max Level"); // +18                  packet.ReadUInt32("Reward Item1 ID"); // +2952                  quest.QuestCompletionLog = packet.ReadWoWString("QuestCompletedText"' questCompletedTextLen); // +2433                  packet.ReadInt32("Reward Choice ItemID 4"); // +2977                  packet.ReadUInt32("RewardHonorAddition"); // +21                  quest.QuestGiverTextWindow = packet.ReadWoWString("QuestGiverTextWindow"' questGiverTextWindowLen); // +1793                  quest.LogDescription = packet.ReadWoWString("QuestObjectives"' questObjectivesLen); // +158                  packet.ReadUInt32("RewArenaPoints"); // +1790                  packet.ReadUInt32("Reward Choice ItemID 6"); // +2983                  quest.SuggestedGroupNum = packet.ReadUInt32("Suggested Players"); // +13                  packet.ReadUInt32("RepObjectiveFaction"); // +6                  packet.ReadUInt32("Required Source Item ID 2"); // +2961                  packet.ReadUInt32("Reward ItemID 2"); // +2953                  packet.ReadUInt32("MinLevel"); // +10                  packet.ReadUInt32("Reward Choice ItemID Count3"); // +2945                  packet.ReadUInt32("PointOpt"); // +29                    // +8                  quest.QuestLevel = packet.ReadInt32("Level"); // +8                    packet.ReadUInt32("RepObjectiveFaction2"); // +7                  packet.ReadUInt32("Required Source Item ID Count 3"); // +2966                  packet.ReadUInt32("XPId"); // +17                  quest.QuestDescription = packet.ReadWoWString("QuestDetails"' questDetailsLen); // +908                  packet.ReadUInt32("Reward ItemID Count1"); // +2956                  packet.ReadUInt32("Reward Choice ItemID Count6"); // +2984                  packet.ReadUInt32("Reward ItemID Count3"); // +2958                  packet.ReadUInt32("RewardSpellCasted"); // +20                  packet.ReadUInt32("dword2E80"); // +2976                  quest.QuestTurnTargetName = packet.ReadWoWString("QuestTurnTargetName"' questTurnTargetNameLen); // +2369                  packet.ReadUInt32("dword2E74"); // +2973                  packet.ReadUInt32("Required Source Item ID Count 2"); // +2965                  packet.ReadUInt32("Required Source Item ID 3"); // +2962                  packet.ReadUInt32("RewSkillPoints"); // +1792                  quest.LogTitle = packet.ReadWoWString("QuestTitle"' questTitleLen); // +30                  quest.QuestInfoID = packet.ReadInt32E<QuestInfo>("Type"); // +12                  packet.ReadUInt32("RepObjectiveValue2"); // +15                  packet.ReadUInt32("unk11"); // +2982                  packet.ReadUInt32("PlayersSlain"); // +1788                  packet.ReadUInt32("PointMapId"); // +26                  packet.ReadUInt32("NextQuestInChain"); // +14                  packet.ReadUInt32("Reward Choice ItemID 1"); // +2968                  quest.QuestGiverTargetName = packet.ReadWoWString("QuestGiverTargetName"' questGiverTargetNameLen); // +2049                  packet.ReadUInt32("dword2E8C"); // +2979                  packet.ReadUInt32("Required Source Item ID 4"); // +2963                  packet.ReadSingle("Point X"); // +27                  packet.ReadUInt32("Reward Choice ItemID 3"); // +2974                  packet.ReadUInt32("unk"); // +2970                  packet.ReadUInt32("Reward ItemID Count4"); // +2959                  quest.SoundAccept = packet.ReadUInt32("Sound Accept"); // +2946                  packet.ReadUInt32("Reward ItemID 3"); // +2954                  packet.ReadSingle("RewardHonorMultiplier"); // +22                  packet.ReadUInt32("RequiredSpellID"); // +1786                  packet.ReadWoWString("QuestTurnTextWindow"' questTurnTextWindowLen); // +2113                  packet.ReadUInt32("Reward Choice ItemID Count4"); // +2978                  packet.ReadUInt32("Required Source Item ID Count 1"); // +2964                  quest.QuestSortID = packet.ReadInt32E<QuestSort>("Sort"); // +11                  packet.ReadUInt32("BonusTalents"); // +1789                  packet.ReadUInt32("Reward Choice ItemID Count1"); // +2969                  packet.ReadUInt32("Rewarded Spell"); // +19                  packet.ReadUInt32("RewSkillID"); // +1791                  packet.ReadUInt32("unk9"); // +2985                  packet.ReadUInt32("unk10"); // +2967                  quest.Flags = packet.ReadUInt32E<QuestFlags>("Flags"); // +24                  packet.ReadUInt32("Suggested Players"); // +9                  packet.ReadUInt32("SourceItemID"); // +23                    packet.AddSniffData(StoreNameType.Quest' id.Key' "QUERY_RESPONSE");                    Storage.QuestTemplates.Add(quest' packet.TimeSpan);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: if (questIsntAutoComplete)              {                  var questTurnTextWindowLen = packet.ReadBits(10); // +2113                  var questTitleLen = packet.ReadBits(9); // +30                  var questCompletedTextLen = packet.ReadBits(11); // +2433                  var questDetailsLen = packet.ReadBits(12); // +908                  var questTurnTargetNameLen = packet.ReadBits(8); // +2369                  var questGiverTargetNameLen = packet.ReadBits(8); // +2049                  var questGiverTextWindowLen = packet.ReadBits(10); // +1793                  var questEndTextLen = packet.ReadBits(9); // +1658                  var questObjectivesCount = packet.ReadBits("Objectives Count"' 19);                  var questObjectivesLen = packet.ReadBits(12); // +158                    uint['] objectivesCounts = new uint[questObjectivesCount' 2];                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      objectivesCounts[i' 1] = packet.ReadBits(8); // +2949 + 20 objectives texts                      objectivesCounts[i' 0] = packet.ReadBits(22); // +2949 + 0 objectives visuals                  }                    packet.ResetBitReader();                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      packet.ReadUInt32("Requirement Count "' i); // +2949 + 12                      packet.ReadUInt32("Objective ID"' i); // +2949 + 0                      packet.ReadWoWString("Objective Text"' objectivesCounts[i' 1]' i); // +2949 + 20                      packet.ReadUInt32("Unk2 UInt32"' i); // +2949 + 16                      packet.ReadByte("Objective"' i); // +2949 + 5                      var reqType = packet.ReadByteE<QuestRequirementType>("Requirement Type"' i); // +2949 + 4                        // +2949 + 8                      switch (reqType)                      {                          case QuestRequirementType.CreatureKill:                          case QuestRequirementType.CreatureInteract:                          case QuestRequirementType.PetBattleDefeatCreature:                              packet.ReadInt32<UnitId>("Required Creature ID"' i);                              break;                          case QuestRequirementType.Item:                              packet.ReadInt32<ItemId>("Required Item ID"' i);                              break;                          case QuestRequirementType.GameObject:                              packet.ReadInt32<GOId>("Required GameObject ID"' i);                              break;                          case QuestRequirementType.Currency:                              packet.ReadUInt32("Required Currency ID"' i);                              break;                          case QuestRequirementType.Spell:                              packet.ReadInt32<SpellId>("Required Spell ID"' i);                              break;                          case QuestRequirementType.FactionRepHigher:                          case QuestRequirementType.FactionRepLower:                              packet.ReadUInt32("Required Faction ID"' i);                              break;                          case QuestRequirementType.PetBattleDefeatSpecies:                              packet.ReadUInt32("Required Species ID"' i);                              break;                          default:                              packet.ReadInt32("Required ID"' i);                              break;                      }                        for (var j = 0; j < objectivesCounts[i' 0]; j++)                          packet.ReadUInt32("Objective Visual ID"' i' j);                  }                    packet.ReadUInt32("Required Source Item ID 1"); // +2960                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2980                  packet.ReadUInt32("Reward ItemID 3"); // +2955                  packet.ReadUInt32("Reward ItemID Count2"); // +2957                  packet.ReadUInt32("int2973"); // +2975                    QuestTemplate quest = new QuestTemplate                  {                      QuestType = QuestType.Normal                  };                    quest.RewardCurrencyID = new uint?[4];                  quest.RewardCurrencyCount = new uint?[4];                  for (int i = 0; i < 4; ++i)                  {                      quest.RewardCurrencyID[i] = packet.ReadUInt32("Reward Currency ID"' i); // +3001 + 16                      quest.RewardCurrencyCount[i] = packet.ReadUInt32("Reward Currency Count"' i); // +3001 + 0                  }                    packet.ReadUInt32("CharTittleID"); // +1787                  packet.ReadSingle("Point Y"); // +28                  quest.SoundTurnIn = packet.ReadUInt32("Sound TurnIn"); // +2947                    const int repCount = 5;                  quest.RewardFactionID = new uint?[repCount];                  quest.RewardFactionValue = new int?[repCount];                  quest.RewardFactionOverride = new int?[repCount];                    for (var i = 0; i < repCount; i++)                  {                      quest.RewardFactionValue[i] = packet.ReadInt32("Reward Reputation ID"' i); // +2986 + 20                      quest.RewardFactionOverride[i] = (int)packet.ReadUInt32("Reward Reputation ID Override"' i); // +2986 + 0                      quest.RewardFactionID[i] = packet.ReadUInt32("Reward Faction ID"' i); // +2986 + 400                  }                    quest.RewardMoney = packet.ReadInt32("Reward Money"); // +16                  packet.ReadUInt32("EmoteOnComplete"); // +2981                  packet.ReadUInt32("Reward Choice ItemID Count5"); // +2972                  packet.ReadUInt32("MinimapTargetMask"); // +25                  quest.AreaDescription = packet.ReadWoWString("QuestEndText"' questEndTextLen); // +1658                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2971                  quest.RewardBonusMoney = packet.ReadUInt32("Reward Money Max Level"); // +18                  packet.ReadUInt32("Reward Item1 ID"); // +2952                  quest.QuestCompletionLog = packet.ReadWoWString("QuestCompletedText"' questCompletedTextLen); // +2433                  packet.ReadInt32("Reward Choice ItemID 4"); // +2977                  packet.ReadUInt32("RewardHonorAddition"); // +21                  quest.QuestGiverTextWindow = packet.ReadWoWString("QuestGiverTextWindow"' questGiverTextWindowLen); // +1793                  quest.LogDescription = packet.ReadWoWString("QuestObjectives"' questObjectivesLen); // +158                  packet.ReadUInt32("RewArenaPoints"); // +1790                  packet.ReadUInt32("Reward Choice ItemID 6"); // +2983                  quest.SuggestedGroupNum = packet.ReadUInt32("Suggested Players"); // +13                  packet.ReadUInt32("RepObjectiveFaction"); // +6                  packet.ReadUInt32("Required Source Item ID 2"); // +2961                  packet.ReadUInt32("Reward ItemID 2"); // +2953                  packet.ReadUInt32("MinLevel"); // +10                  packet.ReadUInt32("Reward Choice ItemID Count3"); // +2945                  packet.ReadUInt32("PointOpt"); // +29                    // +8                  quest.QuestLevel = packet.ReadInt32("Level"); // +8                    packet.ReadUInt32("RepObjectiveFaction2"); // +7                  packet.ReadUInt32("Required Source Item ID Count 3"); // +2966                  packet.ReadUInt32("XPId"); // +17                  quest.QuestDescription = packet.ReadWoWString("QuestDetails"' questDetailsLen); // +908                  packet.ReadUInt32("Reward ItemID Count1"); // +2956                  packet.ReadUInt32("Reward Choice ItemID Count6"); // +2984                  packet.ReadUInt32("Reward ItemID Count3"); // +2958                  packet.ReadUInt32("RewardSpellCasted"); // +20                  packet.ReadUInt32("dword2E80"); // +2976                  quest.QuestTurnTargetName = packet.ReadWoWString("QuestTurnTargetName"' questTurnTargetNameLen); // +2369                  packet.ReadUInt32("dword2E74"); // +2973                  packet.ReadUInt32("Required Source Item ID Count 2"); // +2965                  packet.ReadUInt32("Required Source Item ID 3"); // +2962                  packet.ReadUInt32("RewSkillPoints"); // +1792                  quest.LogTitle = packet.ReadWoWString("QuestTitle"' questTitleLen); // +30                  quest.QuestInfoID = packet.ReadInt32E<QuestInfo>("Type"); // +12                  packet.ReadUInt32("RepObjectiveValue2"); // +15                  packet.ReadUInt32("unk11"); // +2982                  packet.ReadUInt32("PlayersSlain"); // +1788                  packet.ReadUInt32("PointMapId"); // +26                  packet.ReadUInt32("NextQuestInChain"); // +14                  packet.ReadUInt32("Reward Choice ItemID 1"); // +2968                  quest.QuestGiverTargetName = packet.ReadWoWString("QuestGiverTargetName"' questGiverTargetNameLen); // +2049                  packet.ReadUInt32("dword2E8C"); // +2979                  packet.ReadUInt32("Required Source Item ID 4"); // +2963                  packet.ReadSingle("Point X"); // +27                  packet.ReadUInt32("Reward Choice ItemID 3"); // +2974                  packet.ReadUInt32("unk"); // +2970                  packet.ReadUInt32("Reward ItemID Count4"); // +2959                  quest.SoundAccept = packet.ReadUInt32("Sound Accept"); // +2946                  packet.ReadUInt32("Reward ItemID 3"); // +2954                  packet.ReadSingle("RewardHonorMultiplier"); // +22                  packet.ReadUInt32("RequiredSpellID"); // +1786                  packet.ReadWoWString("QuestTurnTextWindow"' questTurnTextWindowLen); // +2113                  packet.ReadUInt32("Reward Choice ItemID Count4"); // +2978                  packet.ReadUInt32("Required Source Item ID Count 1"); // +2964                  quest.QuestSortID = packet.ReadInt32E<QuestSort>("Sort"); // +11                  packet.ReadUInt32("BonusTalents"); // +1789                  packet.ReadUInt32("Reward Choice ItemID Count1"); // +2969                  packet.ReadUInt32("Rewarded Spell"); // +19                  packet.ReadUInt32("RewSkillID"); // +1791                  packet.ReadUInt32("unk9"); // +2985                  packet.ReadUInt32("unk10"); // +2967                  quest.Flags = packet.ReadUInt32E<QuestFlags>("Flags"); // +24                  packet.ReadUInt32("Suggested Players"); // +9                  packet.ReadUInt32("SourceItemID"); // +23                    packet.AddSniffData(StoreNameType.Quest' id.Key' "QUERY_RESPONSE");                    Storage.QuestTemplates.Add(quest' packet.TimeSpan);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: if (questIsntAutoComplete)              {                  var questTurnTextWindowLen = packet.ReadBits(10); // +2113                  var questTitleLen = packet.ReadBits(9); // +30                  var questCompletedTextLen = packet.ReadBits(11); // +2433                  var questDetailsLen = packet.ReadBits(12); // +908                  var questTurnTargetNameLen = packet.ReadBits(8); // +2369                  var questGiverTargetNameLen = packet.ReadBits(8); // +2049                  var questGiverTextWindowLen = packet.ReadBits(10); // +1793                  var questEndTextLen = packet.ReadBits(9); // +1658                  var questObjectivesCount = packet.ReadBits("Objectives Count"' 19);                  var questObjectivesLen = packet.ReadBits(12); // +158                    uint['] objectivesCounts = new uint[questObjectivesCount' 2];                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      objectivesCounts[i' 1] = packet.ReadBits(8); // +2949 + 20 objectives texts                      objectivesCounts[i' 0] = packet.ReadBits(22); // +2949 + 0 objectives visuals                  }                    packet.ResetBitReader();                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      packet.ReadUInt32("Requirement Count "' i); // +2949 + 12                      packet.ReadUInt32("Objective ID"' i); // +2949 + 0                      packet.ReadWoWString("Objective Text"' objectivesCounts[i' 1]' i); // +2949 + 20                      packet.ReadUInt32("Unk2 UInt32"' i); // +2949 + 16                      packet.ReadByte("Objective"' i); // +2949 + 5                      var reqType = packet.ReadByteE<QuestRequirementType>("Requirement Type"' i); // +2949 + 4                        // +2949 + 8                      switch (reqType)                      {                          case QuestRequirementType.CreatureKill:                          case QuestRequirementType.CreatureInteract:                          case QuestRequirementType.PetBattleDefeatCreature:                              packet.ReadInt32<UnitId>("Required Creature ID"' i);                              break;                          case QuestRequirementType.Item:                              packet.ReadInt32<ItemId>("Required Item ID"' i);                              break;                          case QuestRequirementType.GameObject:                              packet.ReadInt32<GOId>("Required GameObject ID"' i);                              break;                          case QuestRequirementType.Currency:                              packet.ReadUInt32("Required Currency ID"' i);                              break;                          case QuestRequirementType.Spell:                              packet.ReadInt32<SpellId>("Required Spell ID"' i);                              break;                          case QuestRequirementType.FactionRepHigher:                          case QuestRequirementType.FactionRepLower:                              packet.ReadUInt32("Required Faction ID"' i);                              break;                          case QuestRequirementType.PetBattleDefeatSpecies:                              packet.ReadUInt32("Required Species ID"' i);                              break;                          default:                              packet.ReadInt32("Required ID"' i);                              break;                      }                        for (var j = 0; j < objectivesCounts[i' 0]; j++)                          packet.ReadUInt32("Objective Visual ID"' i' j);                  }                    packet.ReadUInt32("Required Source Item ID 1"); // +2960                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2980                  packet.ReadUInt32("Reward ItemID 3"); // +2955                  packet.ReadUInt32("Reward ItemID Count2"); // +2957                  packet.ReadUInt32("int2973"); // +2975                    QuestTemplate quest = new QuestTemplate                  {                      QuestType = QuestType.Normal                  };                    quest.RewardCurrencyID = new uint?[4];                  quest.RewardCurrencyCount = new uint?[4];                  for (int i = 0; i < 4; ++i)                  {                      quest.RewardCurrencyID[i] = packet.ReadUInt32("Reward Currency ID"' i); // +3001 + 16                      quest.RewardCurrencyCount[i] = packet.ReadUInt32("Reward Currency Count"' i); // +3001 + 0                  }                    packet.ReadUInt32("CharTittleID"); // +1787                  packet.ReadSingle("Point Y"); // +28                  quest.SoundTurnIn = packet.ReadUInt32("Sound TurnIn"); // +2947                    const int repCount = 5;                  quest.RewardFactionID = new uint?[repCount];                  quest.RewardFactionValue = new int?[repCount];                  quest.RewardFactionOverride = new int?[repCount];                    for (var i = 0; i < repCount; i++)                  {                      quest.RewardFactionValue[i] = packet.ReadInt32("Reward Reputation ID"' i); // +2986 + 20                      quest.RewardFactionOverride[i] = (int)packet.ReadUInt32("Reward Reputation ID Override"' i); // +2986 + 0                      quest.RewardFactionID[i] = packet.ReadUInt32("Reward Faction ID"' i); // +2986 + 400                  }                    quest.RewardMoney = packet.ReadInt32("Reward Money"); // +16                  packet.ReadUInt32("EmoteOnComplete"); // +2981                  packet.ReadUInt32("Reward Choice ItemID Count5"); // +2972                  packet.ReadUInt32("MinimapTargetMask"); // +25                  quest.AreaDescription = packet.ReadWoWString("QuestEndText"' questEndTextLen); // +1658                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2971                  quest.RewardBonusMoney = packet.ReadUInt32("Reward Money Max Level"); // +18                  packet.ReadUInt32("Reward Item1 ID"); // +2952                  quest.QuestCompletionLog = packet.ReadWoWString("QuestCompletedText"' questCompletedTextLen); // +2433                  packet.ReadInt32("Reward Choice ItemID 4"); // +2977                  packet.ReadUInt32("RewardHonorAddition"); // +21                  quest.QuestGiverTextWindow = packet.ReadWoWString("QuestGiverTextWindow"' questGiverTextWindowLen); // +1793                  quest.LogDescription = packet.ReadWoWString("QuestObjectives"' questObjectivesLen); // +158                  packet.ReadUInt32("RewArenaPoints"); // +1790                  packet.ReadUInt32("Reward Choice ItemID 6"); // +2983                  quest.SuggestedGroupNum = packet.ReadUInt32("Suggested Players"); // +13                  packet.ReadUInt32("RepObjectiveFaction"); // +6                  packet.ReadUInt32("Required Source Item ID 2"); // +2961                  packet.ReadUInt32("Reward ItemID 2"); // +2953                  packet.ReadUInt32("MinLevel"); // +10                  packet.ReadUInt32("Reward Choice ItemID Count3"); // +2945                  packet.ReadUInt32("PointOpt"); // +29                    // +8                  quest.QuestLevel = packet.ReadInt32("Level"); // +8                    packet.ReadUInt32("RepObjectiveFaction2"); // +7                  packet.ReadUInt32("Required Source Item ID Count 3"); // +2966                  packet.ReadUInt32("XPId"); // +17                  quest.QuestDescription = packet.ReadWoWString("QuestDetails"' questDetailsLen); // +908                  packet.ReadUInt32("Reward ItemID Count1"); // +2956                  packet.ReadUInt32("Reward Choice ItemID Count6"); // +2984                  packet.ReadUInt32("Reward ItemID Count3"); // +2958                  packet.ReadUInt32("RewardSpellCasted"); // +20                  packet.ReadUInt32("dword2E80"); // +2976                  quest.QuestTurnTargetName = packet.ReadWoWString("QuestTurnTargetName"' questTurnTargetNameLen); // +2369                  packet.ReadUInt32("dword2E74"); // +2973                  packet.ReadUInt32("Required Source Item ID Count 2"); // +2965                  packet.ReadUInt32("Required Source Item ID 3"); // +2962                  packet.ReadUInt32("RewSkillPoints"); // +1792                  quest.LogTitle = packet.ReadWoWString("QuestTitle"' questTitleLen); // +30                  quest.QuestInfoID = packet.ReadInt32E<QuestInfo>("Type"); // +12                  packet.ReadUInt32("RepObjectiveValue2"); // +15                  packet.ReadUInt32("unk11"); // +2982                  packet.ReadUInt32("PlayersSlain"); // +1788                  packet.ReadUInt32("PointMapId"); // +26                  packet.ReadUInt32("NextQuestInChain"); // +14                  packet.ReadUInt32("Reward Choice ItemID 1"); // +2968                  quest.QuestGiverTargetName = packet.ReadWoWString("QuestGiverTargetName"' questGiverTargetNameLen); // +2049                  packet.ReadUInt32("dword2E8C"); // +2979                  packet.ReadUInt32("Required Source Item ID 4"); // +2963                  packet.ReadSingle("Point X"); // +27                  packet.ReadUInt32("Reward Choice ItemID 3"); // +2974                  packet.ReadUInt32("unk"); // +2970                  packet.ReadUInt32("Reward ItemID Count4"); // +2959                  quest.SoundAccept = packet.ReadUInt32("Sound Accept"); // +2946                  packet.ReadUInt32("Reward ItemID 3"); // +2954                  packet.ReadSingle("RewardHonorMultiplier"); // +22                  packet.ReadUInt32("RequiredSpellID"); // +1786                  packet.ReadWoWString("QuestTurnTextWindow"' questTurnTextWindowLen); // +2113                  packet.ReadUInt32("Reward Choice ItemID Count4"); // +2978                  packet.ReadUInt32("Required Source Item ID Count 1"); // +2964                  quest.QuestSortID = packet.ReadInt32E<QuestSort>("Sort"); // +11                  packet.ReadUInt32("BonusTalents"); // +1789                  packet.ReadUInt32("Reward Choice ItemID Count1"); // +2969                  packet.ReadUInt32("Rewarded Spell"); // +19                  packet.ReadUInt32("RewSkillID"); // +1791                  packet.ReadUInt32("unk9"); // +2985                  packet.ReadUInt32("unk10"); // +2967                  quest.Flags = packet.ReadUInt32E<QuestFlags>("Flags"); // +24                  packet.ReadUInt32("Suggested Players"); // +9                  packet.ReadUInt32("SourceItemID"); // +23                    packet.AddSniffData(StoreNameType.Quest' id.Key' "QUERY_RESPONSE");                    Storage.QuestTemplates.Add(quest' packet.TimeSpan);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: if (questIsntAutoComplete)              {                  var questTurnTextWindowLen = packet.ReadBits(10); // +2113                  var questTitleLen = packet.ReadBits(9); // +30                  var questCompletedTextLen = packet.ReadBits(11); // +2433                  var questDetailsLen = packet.ReadBits(12); // +908                  var questTurnTargetNameLen = packet.ReadBits(8); // +2369                  var questGiverTargetNameLen = packet.ReadBits(8); // +2049                  var questGiverTextWindowLen = packet.ReadBits(10); // +1793                  var questEndTextLen = packet.ReadBits(9); // +1658                  var questObjectivesCount = packet.ReadBits("Objectives Count"' 19);                  var questObjectivesLen = packet.ReadBits(12); // +158                    uint['] objectivesCounts = new uint[questObjectivesCount' 2];                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      objectivesCounts[i' 1] = packet.ReadBits(8); // +2949 + 20 objectives texts                      objectivesCounts[i' 0] = packet.ReadBits(22); // +2949 + 0 objectives visuals                  }                    packet.ResetBitReader();                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      packet.ReadUInt32("Requirement Count "' i); // +2949 + 12                      packet.ReadUInt32("Objective ID"' i); // +2949 + 0                      packet.ReadWoWString("Objective Text"' objectivesCounts[i' 1]' i); // +2949 + 20                      packet.ReadUInt32("Unk2 UInt32"' i); // +2949 + 16                      packet.ReadByte("Objective"' i); // +2949 + 5                      var reqType = packet.ReadByteE<QuestRequirementType>("Requirement Type"' i); // +2949 + 4                        // +2949 + 8                      switch (reqType)                      {                          case QuestRequirementType.CreatureKill:                          case QuestRequirementType.CreatureInteract:                          case QuestRequirementType.PetBattleDefeatCreature:                              packet.ReadInt32<UnitId>("Required Creature ID"' i);                              break;                          case QuestRequirementType.Item:                              packet.ReadInt32<ItemId>("Required Item ID"' i);                              break;                          case QuestRequirementType.GameObject:                              packet.ReadInt32<GOId>("Required GameObject ID"' i);                              break;                          case QuestRequirementType.Currency:                              packet.ReadUInt32("Required Currency ID"' i);                              break;                          case QuestRequirementType.Spell:                              packet.ReadInt32<SpellId>("Required Spell ID"' i);                              break;                          case QuestRequirementType.FactionRepHigher:                          case QuestRequirementType.FactionRepLower:                              packet.ReadUInt32("Required Faction ID"' i);                              break;                          case QuestRequirementType.PetBattleDefeatSpecies:                              packet.ReadUInt32("Required Species ID"' i);                              break;                          default:                              packet.ReadInt32("Required ID"' i);                              break;                      }                        for (var j = 0; j < objectivesCounts[i' 0]; j++)                          packet.ReadUInt32("Objective Visual ID"' i' j);                  }                    packet.ReadUInt32("Required Source Item ID 1"); // +2960                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2980                  packet.ReadUInt32("Reward ItemID 3"); // +2955                  packet.ReadUInt32("Reward ItemID Count2"); // +2957                  packet.ReadUInt32("int2973"); // +2975                    QuestTemplate quest = new QuestTemplate                  {                      QuestType = QuestType.Normal                  };                    quest.RewardCurrencyID = new uint?[4];                  quest.RewardCurrencyCount = new uint?[4];                  for (int i = 0; i < 4; ++i)                  {                      quest.RewardCurrencyID[i] = packet.ReadUInt32("Reward Currency ID"' i); // +3001 + 16                      quest.RewardCurrencyCount[i] = packet.ReadUInt32("Reward Currency Count"' i); // +3001 + 0                  }                    packet.ReadUInt32("CharTittleID"); // +1787                  packet.ReadSingle("Point Y"); // +28                  quest.SoundTurnIn = packet.ReadUInt32("Sound TurnIn"); // +2947                    const int repCount = 5;                  quest.RewardFactionID = new uint?[repCount];                  quest.RewardFactionValue = new int?[repCount];                  quest.RewardFactionOverride = new int?[repCount];                    for (var i = 0; i < repCount; i++)                  {                      quest.RewardFactionValue[i] = packet.ReadInt32("Reward Reputation ID"' i); // +2986 + 20                      quest.RewardFactionOverride[i] = (int)packet.ReadUInt32("Reward Reputation ID Override"' i); // +2986 + 0                      quest.RewardFactionID[i] = packet.ReadUInt32("Reward Faction ID"' i); // +2986 + 400                  }                    quest.RewardMoney = packet.ReadInt32("Reward Money"); // +16                  packet.ReadUInt32("EmoteOnComplete"); // +2981                  packet.ReadUInt32("Reward Choice ItemID Count5"); // +2972                  packet.ReadUInt32("MinimapTargetMask"); // +25                  quest.AreaDescription = packet.ReadWoWString("QuestEndText"' questEndTextLen); // +1658                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2971                  quest.RewardBonusMoney = packet.ReadUInt32("Reward Money Max Level"); // +18                  packet.ReadUInt32("Reward Item1 ID"); // +2952                  quest.QuestCompletionLog = packet.ReadWoWString("QuestCompletedText"' questCompletedTextLen); // +2433                  packet.ReadInt32("Reward Choice ItemID 4"); // +2977                  packet.ReadUInt32("RewardHonorAddition"); // +21                  quest.QuestGiverTextWindow = packet.ReadWoWString("QuestGiverTextWindow"' questGiverTextWindowLen); // +1793                  quest.LogDescription = packet.ReadWoWString("QuestObjectives"' questObjectivesLen); // +158                  packet.ReadUInt32("RewArenaPoints"); // +1790                  packet.ReadUInt32("Reward Choice ItemID 6"); // +2983                  quest.SuggestedGroupNum = packet.ReadUInt32("Suggested Players"); // +13                  packet.ReadUInt32("RepObjectiveFaction"); // +6                  packet.ReadUInt32("Required Source Item ID 2"); // +2961                  packet.ReadUInt32("Reward ItemID 2"); // +2953                  packet.ReadUInt32("MinLevel"); // +10                  packet.ReadUInt32("Reward Choice ItemID Count3"); // +2945                  packet.ReadUInt32("PointOpt"); // +29                    // +8                  quest.QuestLevel = packet.ReadInt32("Level"); // +8                    packet.ReadUInt32("RepObjectiveFaction2"); // +7                  packet.ReadUInt32("Required Source Item ID Count 3"); // +2966                  packet.ReadUInt32("XPId"); // +17                  quest.QuestDescription = packet.ReadWoWString("QuestDetails"' questDetailsLen); // +908                  packet.ReadUInt32("Reward ItemID Count1"); // +2956                  packet.ReadUInt32("Reward Choice ItemID Count6"); // +2984                  packet.ReadUInt32("Reward ItemID Count3"); // +2958                  packet.ReadUInt32("RewardSpellCasted"); // +20                  packet.ReadUInt32("dword2E80"); // +2976                  quest.QuestTurnTargetName = packet.ReadWoWString("QuestTurnTargetName"' questTurnTargetNameLen); // +2369                  packet.ReadUInt32("dword2E74"); // +2973                  packet.ReadUInt32("Required Source Item ID Count 2"); // +2965                  packet.ReadUInt32("Required Source Item ID 3"); // +2962                  packet.ReadUInt32("RewSkillPoints"); // +1792                  quest.LogTitle = packet.ReadWoWString("QuestTitle"' questTitleLen); // +30                  quest.QuestInfoID = packet.ReadInt32E<QuestInfo>("Type"); // +12                  packet.ReadUInt32("RepObjectiveValue2"); // +15                  packet.ReadUInt32("unk11"); // +2982                  packet.ReadUInt32("PlayersSlain"); // +1788                  packet.ReadUInt32("PointMapId"); // +26                  packet.ReadUInt32("NextQuestInChain"); // +14                  packet.ReadUInt32("Reward Choice ItemID 1"); // +2968                  quest.QuestGiverTargetName = packet.ReadWoWString("QuestGiverTargetName"' questGiverTargetNameLen); // +2049                  packet.ReadUInt32("dword2E8C"); // +2979                  packet.ReadUInt32("Required Source Item ID 4"); // +2963                  packet.ReadSingle("Point X"); // +27                  packet.ReadUInt32("Reward Choice ItemID 3"); // +2974                  packet.ReadUInt32("unk"); // +2970                  packet.ReadUInt32("Reward ItemID Count4"); // +2959                  quest.SoundAccept = packet.ReadUInt32("Sound Accept"); // +2946                  packet.ReadUInt32("Reward ItemID 3"); // +2954                  packet.ReadSingle("RewardHonorMultiplier"); // +22                  packet.ReadUInt32("RequiredSpellID"); // +1786                  packet.ReadWoWString("QuestTurnTextWindow"' questTurnTextWindowLen); // +2113                  packet.ReadUInt32("Reward Choice ItemID Count4"); // +2978                  packet.ReadUInt32("Required Source Item ID Count 1"); // +2964                  quest.QuestSortID = packet.ReadInt32E<QuestSort>("Sort"); // +11                  packet.ReadUInt32("BonusTalents"); // +1789                  packet.ReadUInt32("Reward Choice ItemID Count1"); // +2969                  packet.ReadUInt32("Rewarded Spell"); // +19                  packet.ReadUInt32("RewSkillID"); // +1791                  packet.ReadUInt32("unk9"); // +2985                  packet.ReadUInt32("unk10"); // +2967                  quest.Flags = packet.ReadUInt32E<QuestFlags>("Flags"); // +24                  packet.ReadUInt32("Suggested Players"); // +9                  packet.ReadUInt32("SourceItemID"); // +23                    packet.AddSniffData(StoreNameType.Quest' id.Key' "QUERY_RESPONSE");                    Storage.QuestTemplates.Add(quest' packet.TimeSpan);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: if (questIsntAutoComplete)              {                  var questTurnTextWindowLen = packet.ReadBits(10); // +2113                  var questTitleLen = packet.ReadBits(9); // +30                  var questCompletedTextLen = packet.ReadBits(11); // +2433                  var questDetailsLen = packet.ReadBits(12); // +908                  var questTurnTargetNameLen = packet.ReadBits(8); // +2369                  var questGiverTargetNameLen = packet.ReadBits(8); // +2049                  var questGiverTextWindowLen = packet.ReadBits(10); // +1793                  var questEndTextLen = packet.ReadBits(9); // +1658                  var questObjectivesCount = packet.ReadBits("Objectives Count"' 19);                  var questObjectivesLen = packet.ReadBits(12); // +158                    uint['] objectivesCounts = new uint[questObjectivesCount' 2];                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      objectivesCounts[i' 1] = packet.ReadBits(8); // +2949 + 20 objectives texts                      objectivesCounts[i' 0] = packet.ReadBits(22); // +2949 + 0 objectives visuals                  }                    packet.ResetBitReader();                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      packet.ReadUInt32("Requirement Count "' i); // +2949 + 12                      packet.ReadUInt32("Objective ID"' i); // +2949 + 0                      packet.ReadWoWString("Objective Text"' objectivesCounts[i' 1]' i); // +2949 + 20                      packet.ReadUInt32("Unk2 UInt32"' i); // +2949 + 16                      packet.ReadByte("Objective"' i); // +2949 + 5                      var reqType = packet.ReadByteE<QuestRequirementType>("Requirement Type"' i); // +2949 + 4                        // +2949 + 8                      switch (reqType)                      {                          case QuestRequirementType.CreatureKill:                          case QuestRequirementType.CreatureInteract:                          case QuestRequirementType.PetBattleDefeatCreature:                              packet.ReadInt32<UnitId>("Required Creature ID"' i);                              break;                          case QuestRequirementType.Item:                              packet.ReadInt32<ItemId>("Required Item ID"' i);                              break;                          case QuestRequirementType.GameObject:                              packet.ReadInt32<GOId>("Required GameObject ID"' i);                              break;                          case QuestRequirementType.Currency:                              packet.ReadUInt32("Required Currency ID"' i);                              break;                          case QuestRequirementType.Spell:                              packet.ReadInt32<SpellId>("Required Spell ID"' i);                              break;                          case QuestRequirementType.FactionRepHigher:                          case QuestRequirementType.FactionRepLower:                              packet.ReadUInt32("Required Faction ID"' i);                              break;                          case QuestRequirementType.PetBattleDefeatSpecies:                              packet.ReadUInt32("Required Species ID"' i);                              break;                          default:                              packet.ReadInt32("Required ID"' i);                              break;                      }                        for (var j = 0; j < objectivesCounts[i' 0]; j++)                          packet.ReadUInt32("Objective Visual ID"' i' j);                  }                    packet.ReadUInt32("Required Source Item ID 1"); // +2960                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2980                  packet.ReadUInt32("Reward ItemID 3"); // +2955                  packet.ReadUInt32("Reward ItemID Count2"); // +2957                  packet.ReadUInt32("int2973"); // +2975                    QuestTemplate quest = new QuestTemplate                  {                      QuestType = QuestType.Normal                  };                    quest.RewardCurrencyID = new uint?[4];                  quest.RewardCurrencyCount = new uint?[4];                  for (int i = 0; i < 4; ++i)                  {                      quest.RewardCurrencyID[i] = packet.ReadUInt32("Reward Currency ID"' i); // +3001 + 16                      quest.RewardCurrencyCount[i] = packet.ReadUInt32("Reward Currency Count"' i); // +3001 + 0                  }                    packet.ReadUInt32("CharTittleID"); // +1787                  packet.ReadSingle("Point Y"); // +28                  quest.SoundTurnIn = packet.ReadUInt32("Sound TurnIn"); // +2947                    const int repCount = 5;                  quest.RewardFactionID = new uint?[repCount];                  quest.RewardFactionValue = new int?[repCount];                  quest.RewardFactionOverride = new int?[repCount];                    for (var i = 0; i < repCount; i++)                  {                      quest.RewardFactionValue[i] = packet.ReadInt32("Reward Reputation ID"' i); // +2986 + 20                      quest.RewardFactionOverride[i] = (int)packet.ReadUInt32("Reward Reputation ID Override"' i); // +2986 + 0                      quest.RewardFactionID[i] = packet.ReadUInt32("Reward Faction ID"' i); // +2986 + 400                  }                    quest.RewardMoney = packet.ReadInt32("Reward Money"); // +16                  packet.ReadUInt32("EmoteOnComplete"); // +2981                  packet.ReadUInt32("Reward Choice ItemID Count5"); // +2972                  packet.ReadUInt32("MinimapTargetMask"); // +25                  quest.AreaDescription = packet.ReadWoWString("QuestEndText"' questEndTextLen); // +1658                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2971                  quest.RewardBonusMoney = packet.ReadUInt32("Reward Money Max Level"); // +18                  packet.ReadUInt32("Reward Item1 ID"); // +2952                  quest.QuestCompletionLog = packet.ReadWoWString("QuestCompletedText"' questCompletedTextLen); // +2433                  packet.ReadInt32("Reward Choice ItemID 4"); // +2977                  packet.ReadUInt32("RewardHonorAddition"); // +21                  quest.QuestGiverTextWindow = packet.ReadWoWString("QuestGiverTextWindow"' questGiverTextWindowLen); // +1793                  quest.LogDescription = packet.ReadWoWString("QuestObjectives"' questObjectivesLen); // +158                  packet.ReadUInt32("RewArenaPoints"); // +1790                  packet.ReadUInt32("Reward Choice ItemID 6"); // +2983                  quest.SuggestedGroupNum = packet.ReadUInt32("Suggested Players"); // +13                  packet.ReadUInt32("RepObjectiveFaction"); // +6                  packet.ReadUInt32("Required Source Item ID 2"); // +2961                  packet.ReadUInt32("Reward ItemID 2"); // +2953                  packet.ReadUInt32("MinLevel"); // +10                  packet.ReadUInt32("Reward Choice ItemID Count3"); // +2945                  packet.ReadUInt32("PointOpt"); // +29                    // +8                  quest.QuestLevel = packet.ReadInt32("Level"); // +8                    packet.ReadUInt32("RepObjectiveFaction2"); // +7                  packet.ReadUInt32("Required Source Item ID Count 3"); // +2966                  packet.ReadUInt32("XPId"); // +17                  quest.QuestDescription = packet.ReadWoWString("QuestDetails"' questDetailsLen); // +908                  packet.ReadUInt32("Reward ItemID Count1"); // +2956                  packet.ReadUInt32("Reward Choice ItemID Count6"); // +2984                  packet.ReadUInt32("Reward ItemID Count3"); // +2958                  packet.ReadUInt32("RewardSpellCasted"); // +20                  packet.ReadUInt32("dword2E80"); // +2976                  quest.QuestTurnTargetName = packet.ReadWoWString("QuestTurnTargetName"' questTurnTargetNameLen); // +2369                  packet.ReadUInt32("dword2E74"); // +2973                  packet.ReadUInt32("Required Source Item ID Count 2"); // +2965                  packet.ReadUInt32("Required Source Item ID 3"); // +2962                  packet.ReadUInt32("RewSkillPoints"); // +1792                  quest.LogTitle = packet.ReadWoWString("QuestTitle"' questTitleLen); // +30                  quest.QuestInfoID = packet.ReadInt32E<QuestInfo>("Type"); // +12                  packet.ReadUInt32("RepObjectiveValue2"); // +15                  packet.ReadUInt32("unk11"); // +2982                  packet.ReadUInt32("PlayersSlain"); // +1788                  packet.ReadUInt32("PointMapId"); // +26                  packet.ReadUInt32("NextQuestInChain"); // +14                  packet.ReadUInt32("Reward Choice ItemID 1"); // +2968                  quest.QuestGiverTargetName = packet.ReadWoWString("QuestGiverTargetName"' questGiverTargetNameLen); // +2049                  packet.ReadUInt32("dword2E8C"); // +2979                  packet.ReadUInt32("Required Source Item ID 4"); // +2963                  packet.ReadSingle("Point X"); // +27                  packet.ReadUInt32("Reward Choice ItemID 3"); // +2974                  packet.ReadUInt32("unk"); // +2970                  packet.ReadUInt32("Reward ItemID Count4"); // +2959                  quest.SoundAccept = packet.ReadUInt32("Sound Accept"); // +2946                  packet.ReadUInt32("Reward ItemID 3"); // +2954                  packet.ReadSingle("RewardHonorMultiplier"); // +22                  packet.ReadUInt32("RequiredSpellID"); // +1786                  packet.ReadWoWString("QuestTurnTextWindow"' questTurnTextWindowLen); // +2113                  packet.ReadUInt32("Reward Choice ItemID Count4"); // +2978                  packet.ReadUInt32("Required Source Item ID Count 1"); // +2964                  quest.QuestSortID = packet.ReadInt32E<QuestSort>("Sort"); // +11                  packet.ReadUInt32("BonusTalents"); // +1789                  packet.ReadUInt32("Reward Choice ItemID Count1"); // +2969                  packet.ReadUInt32("Rewarded Spell"); // +19                  packet.ReadUInt32("RewSkillID"); // +1791                  packet.ReadUInt32("unk9"); // +2985                  packet.ReadUInt32("unk10"); // +2967                  quest.Flags = packet.ReadUInt32E<QuestFlags>("Flags"); // +24                  packet.ReadUInt32("Suggested Players"); // +9                  packet.ReadUInt32("SourceItemID"); // +23                    packet.AddSniffData(StoreNameType.Quest' id.Key' "QUERY_RESPONSE");                    Storage.QuestTemplates.Add(quest' packet.TimeSpan);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: if (questIsntAutoComplete)              {                  var questTurnTextWindowLen = packet.ReadBits(10); // +2113                  var questTitleLen = packet.ReadBits(9); // +30                  var questCompletedTextLen = packet.ReadBits(11); // +2433                  var questDetailsLen = packet.ReadBits(12); // +908                  var questTurnTargetNameLen = packet.ReadBits(8); // +2369                  var questGiverTargetNameLen = packet.ReadBits(8); // +2049                  var questGiverTextWindowLen = packet.ReadBits(10); // +1793                  var questEndTextLen = packet.ReadBits(9); // +1658                  var questObjectivesCount = packet.ReadBits("Objectives Count"' 19);                  var questObjectivesLen = packet.ReadBits(12); // +158                    uint['] objectivesCounts = new uint[questObjectivesCount' 2];                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      objectivesCounts[i' 1] = packet.ReadBits(8); // +2949 + 20 objectives texts                      objectivesCounts[i' 0] = packet.ReadBits(22); // +2949 + 0 objectives visuals                  }                    packet.ResetBitReader();                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      packet.ReadUInt32("Requirement Count "' i); // +2949 + 12                      packet.ReadUInt32("Objective ID"' i); // +2949 + 0                      packet.ReadWoWString("Objective Text"' objectivesCounts[i' 1]' i); // +2949 + 20                      packet.ReadUInt32("Unk2 UInt32"' i); // +2949 + 16                      packet.ReadByte("Objective"' i); // +2949 + 5                      var reqType = packet.ReadByteE<QuestRequirementType>("Requirement Type"' i); // +2949 + 4                        // +2949 + 8                      switch (reqType)                      {                          case QuestRequirementType.CreatureKill:                          case QuestRequirementType.CreatureInteract:                          case QuestRequirementType.PetBattleDefeatCreature:                              packet.ReadInt32<UnitId>("Required Creature ID"' i);                              break;                          case QuestRequirementType.Item:                              packet.ReadInt32<ItemId>("Required Item ID"' i);                              break;                          case QuestRequirementType.GameObject:                              packet.ReadInt32<GOId>("Required GameObject ID"' i);                              break;                          case QuestRequirementType.Currency:                              packet.ReadUInt32("Required Currency ID"' i);                              break;                          case QuestRequirementType.Spell:                              packet.ReadInt32<SpellId>("Required Spell ID"' i);                              break;                          case QuestRequirementType.FactionRepHigher:                          case QuestRequirementType.FactionRepLower:                              packet.ReadUInt32("Required Faction ID"' i);                              break;                          case QuestRequirementType.PetBattleDefeatSpecies:                              packet.ReadUInt32("Required Species ID"' i);                              break;                          default:                              packet.ReadInt32("Required ID"' i);                              break;                      }                        for (var j = 0; j < objectivesCounts[i' 0]; j++)                          packet.ReadUInt32("Objective Visual ID"' i' j);                  }                    packet.ReadUInt32("Required Source Item ID 1"); // +2960                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2980                  packet.ReadUInt32("Reward ItemID 3"); // +2955                  packet.ReadUInt32("Reward ItemID Count2"); // +2957                  packet.ReadUInt32("int2973"); // +2975                    QuestTemplate quest = new QuestTemplate                  {                      QuestType = QuestType.Normal                  };                    quest.RewardCurrencyID = new uint?[4];                  quest.RewardCurrencyCount = new uint?[4];                  for (int i = 0; i < 4; ++i)                  {                      quest.RewardCurrencyID[i] = packet.ReadUInt32("Reward Currency ID"' i); // +3001 + 16                      quest.RewardCurrencyCount[i] = packet.ReadUInt32("Reward Currency Count"' i); // +3001 + 0                  }                    packet.ReadUInt32("CharTittleID"); // +1787                  packet.ReadSingle("Point Y"); // +28                  quest.SoundTurnIn = packet.ReadUInt32("Sound TurnIn"); // +2947                    const int repCount = 5;                  quest.RewardFactionID = new uint?[repCount];                  quest.RewardFactionValue = new int?[repCount];                  quest.RewardFactionOverride = new int?[repCount];                    for (var i = 0; i < repCount; i++)                  {                      quest.RewardFactionValue[i] = packet.ReadInt32("Reward Reputation ID"' i); // +2986 + 20                      quest.RewardFactionOverride[i] = (int)packet.ReadUInt32("Reward Reputation ID Override"' i); // +2986 + 0                      quest.RewardFactionID[i] = packet.ReadUInt32("Reward Faction ID"' i); // +2986 + 400                  }                    quest.RewardMoney = packet.ReadInt32("Reward Money"); // +16                  packet.ReadUInt32("EmoteOnComplete"); // +2981                  packet.ReadUInt32("Reward Choice ItemID Count5"); // +2972                  packet.ReadUInt32("MinimapTargetMask"); // +25                  quest.AreaDescription = packet.ReadWoWString("QuestEndText"' questEndTextLen); // +1658                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2971                  quest.RewardBonusMoney = packet.ReadUInt32("Reward Money Max Level"); // +18                  packet.ReadUInt32("Reward Item1 ID"); // +2952                  quest.QuestCompletionLog = packet.ReadWoWString("QuestCompletedText"' questCompletedTextLen); // +2433                  packet.ReadInt32("Reward Choice ItemID 4"); // +2977                  packet.ReadUInt32("RewardHonorAddition"); // +21                  quest.QuestGiverTextWindow = packet.ReadWoWString("QuestGiverTextWindow"' questGiverTextWindowLen); // +1793                  quest.LogDescription = packet.ReadWoWString("QuestObjectives"' questObjectivesLen); // +158                  packet.ReadUInt32("RewArenaPoints"); // +1790                  packet.ReadUInt32("Reward Choice ItemID 6"); // +2983                  quest.SuggestedGroupNum = packet.ReadUInt32("Suggested Players"); // +13                  packet.ReadUInt32("RepObjectiveFaction"); // +6                  packet.ReadUInt32("Required Source Item ID 2"); // +2961                  packet.ReadUInt32("Reward ItemID 2"); // +2953                  packet.ReadUInt32("MinLevel"); // +10                  packet.ReadUInt32("Reward Choice ItemID Count3"); // +2945                  packet.ReadUInt32("PointOpt"); // +29                    // +8                  quest.QuestLevel = packet.ReadInt32("Level"); // +8                    packet.ReadUInt32("RepObjectiveFaction2"); // +7                  packet.ReadUInt32("Required Source Item ID Count 3"); // +2966                  packet.ReadUInt32("XPId"); // +17                  quest.QuestDescription = packet.ReadWoWString("QuestDetails"' questDetailsLen); // +908                  packet.ReadUInt32("Reward ItemID Count1"); // +2956                  packet.ReadUInt32("Reward Choice ItemID Count6"); // +2984                  packet.ReadUInt32("Reward ItemID Count3"); // +2958                  packet.ReadUInt32("RewardSpellCasted"); // +20                  packet.ReadUInt32("dword2E80"); // +2976                  quest.QuestTurnTargetName = packet.ReadWoWString("QuestTurnTargetName"' questTurnTargetNameLen); // +2369                  packet.ReadUInt32("dword2E74"); // +2973                  packet.ReadUInt32("Required Source Item ID Count 2"); // +2965                  packet.ReadUInt32("Required Source Item ID 3"); // +2962                  packet.ReadUInt32("RewSkillPoints"); // +1792                  quest.LogTitle = packet.ReadWoWString("QuestTitle"' questTitleLen); // +30                  quest.QuestInfoID = packet.ReadInt32E<QuestInfo>("Type"); // +12                  packet.ReadUInt32("RepObjectiveValue2"); // +15                  packet.ReadUInt32("unk11"); // +2982                  packet.ReadUInt32("PlayersSlain"); // +1788                  packet.ReadUInt32("PointMapId"); // +26                  packet.ReadUInt32("NextQuestInChain"); // +14                  packet.ReadUInt32("Reward Choice ItemID 1"); // +2968                  quest.QuestGiverTargetName = packet.ReadWoWString("QuestGiverTargetName"' questGiverTargetNameLen); // +2049                  packet.ReadUInt32("dword2E8C"); // +2979                  packet.ReadUInt32("Required Source Item ID 4"); // +2963                  packet.ReadSingle("Point X"); // +27                  packet.ReadUInt32("Reward Choice ItemID 3"); // +2974                  packet.ReadUInt32("unk"); // +2970                  packet.ReadUInt32("Reward ItemID Count4"); // +2959                  quest.SoundAccept = packet.ReadUInt32("Sound Accept"); // +2946                  packet.ReadUInt32("Reward ItemID 3"); // +2954                  packet.ReadSingle("RewardHonorMultiplier"); // +22                  packet.ReadUInt32("RequiredSpellID"); // +1786                  packet.ReadWoWString("QuestTurnTextWindow"' questTurnTextWindowLen); // +2113                  packet.ReadUInt32("Reward Choice ItemID Count4"); // +2978                  packet.ReadUInt32("Required Source Item ID Count 1"); // +2964                  quest.QuestSortID = packet.ReadInt32E<QuestSort>("Sort"); // +11                  packet.ReadUInt32("BonusTalents"); // +1789                  packet.ReadUInt32("Reward Choice ItemID Count1"); // +2969                  packet.ReadUInt32("Rewarded Spell"); // +19                  packet.ReadUInt32("RewSkillID"); // +1791                  packet.ReadUInt32("unk9"); // +2985                  packet.ReadUInt32("unk10"); // +2967                  quest.Flags = packet.ReadUInt32E<QuestFlags>("Flags"); // +24                  packet.ReadUInt32("Suggested Players"); // +9                  packet.ReadUInt32("SourceItemID"); // +23                    packet.AddSniffData(StoreNameType.Quest' id.Key' "QUERY_RESPONSE");                    Storage.QuestTemplates.Add(quest' packet.TimeSpan);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: if (questIsntAutoComplete)              {                  var questTurnTextWindowLen = packet.ReadBits(10); // +2113                  var questTitleLen = packet.ReadBits(9); // +30                  var questCompletedTextLen = packet.ReadBits(11); // +2433                  var questDetailsLen = packet.ReadBits(12); // +908                  var questTurnTargetNameLen = packet.ReadBits(8); // +2369                  var questGiverTargetNameLen = packet.ReadBits(8); // +2049                  var questGiverTextWindowLen = packet.ReadBits(10); // +1793                  var questEndTextLen = packet.ReadBits(9); // +1658                  var questObjectivesCount = packet.ReadBits("Objectives Count"' 19);                  var questObjectivesLen = packet.ReadBits(12); // +158                    uint['] objectivesCounts = new uint[questObjectivesCount' 2];                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      objectivesCounts[i' 1] = packet.ReadBits(8); // +2949 + 20 objectives texts                      objectivesCounts[i' 0] = packet.ReadBits(22); // +2949 + 0 objectives visuals                  }                    packet.ResetBitReader();                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      packet.ReadUInt32("Requirement Count "' i); // +2949 + 12                      packet.ReadUInt32("Objective ID"' i); // +2949 + 0                      packet.ReadWoWString("Objective Text"' objectivesCounts[i' 1]' i); // +2949 + 20                      packet.ReadUInt32("Unk2 UInt32"' i); // +2949 + 16                      packet.ReadByte("Objective"' i); // +2949 + 5                      var reqType = packet.ReadByteE<QuestRequirementType>("Requirement Type"' i); // +2949 + 4                        // +2949 + 8                      switch (reqType)                      {                          case QuestRequirementType.CreatureKill:                          case QuestRequirementType.CreatureInteract:                          case QuestRequirementType.PetBattleDefeatCreature:                              packet.ReadInt32<UnitId>("Required Creature ID"' i);                              break;                          case QuestRequirementType.Item:                              packet.ReadInt32<ItemId>("Required Item ID"' i);                              break;                          case QuestRequirementType.GameObject:                              packet.ReadInt32<GOId>("Required GameObject ID"' i);                              break;                          case QuestRequirementType.Currency:                              packet.ReadUInt32("Required Currency ID"' i);                              break;                          case QuestRequirementType.Spell:                              packet.ReadInt32<SpellId>("Required Spell ID"' i);                              break;                          case QuestRequirementType.FactionRepHigher:                          case QuestRequirementType.FactionRepLower:                              packet.ReadUInt32("Required Faction ID"' i);                              break;                          case QuestRequirementType.PetBattleDefeatSpecies:                              packet.ReadUInt32("Required Species ID"' i);                              break;                          default:                              packet.ReadInt32("Required ID"' i);                              break;                      }                        for (var j = 0; j < objectivesCounts[i' 0]; j++)                          packet.ReadUInt32("Objective Visual ID"' i' j);                  }                    packet.ReadUInt32("Required Source Item ID 1"); // +2960                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2980                  packet.ReadUInt32("Reward ItemID 3"); // +2955                  packet.ReadUInt32("Reward ItemID Count2"); // +2957                  packet.ReadUInt32("int2973"); // +2975                    QuestTemplate quest = new QuestTemplate                  {                      QuestType = QuestType.Normal                  };                    quest.RewardCurrencyID = new uint?[4];                  quest.RewardCurrencyCount = new uint?[4];                  for (int i = 0; i < 4; ++i)                  {                      quest.RewardCurrencyID[i] = packet.ReadUInt32("Reward Currency ID"' i); // +3001 + 16                      quest.RewardCurrencyCount[i] = packet.ReadUInt32("Reward Currency Count"' i); // +3001 + 0                  }                    packet.ReadUInt32("CharTittleID"); // +1787                  packet.ReadSingle("Point Y"); // +28                  quest.SoundTurnIn = packet.ReadUInt32("Sound TurnIn"); // +2947                    const int repCount = 5;                  quest.RewardFactionID = new uint?[repCount];                  quest.RewardFactionValue = new int?[repCount];                  quest.RewardFactionOverride = new int?[repCount];                    for (var i = 0; i < repCount; i++)                  {                      quest.RewardFactionValue[i] = packet.ReadInt32("Reward Reputation ID"' i); // +2986 + 20                      quest.RewardFactionOverride[i] = (int)packet.ReadUInt32("Reward Reputation ID Override"' i); // +2986 + 0                      quest.RewardFactionID[i] = packet.ReadUInt32("Reward Faction ID"' i); // +2986 + 400                  }                    quest.RewardMoney = packet.ReadInt32("Reward Money"); // +16                  packet.ReadUInt32("EmoteOnComplete"); // +2981                  packet.ReadUInt32("Reward Choice ItemID Count5"); // +2972                  packet.ReadUInt32("MinimapTargetMask"); // +25                  quest.AreaDescription = packet.ReadWoWString("QuestEndText"' questEndTextLen); // +1658                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2971                  quest.RewardBonusMoney = packet.ReadUInt32("Reward Money Max Level"); // +18                  packet.ReadUInt32("Reward Item1 ID"); // +2952                  quest.QuestCompletionLog = packet.ReadWoWString("QuestCompletedText"' questCompletedTextLen); // +2433                  packet.ReadInt32("Reward Choice ItemID 4"); // +2977                  packet.ReadUInt32("RewardHonorAddition"); // +21                  quest.QuestGiverTextWindow = packet.ReadWoWString("QuestGiverTextWindow"' questGiverTextWindowLen); // +1793                  quest.LogDescription = packet.ReadWoWString("QuestObjectives"' questObjectivesLen); // +158                  packet.ReadUInt32("RewArenaPoints"); // +1790                  packet.ReadUInt32("Reward Choice ItemID 6"); // +2983                  quest.SuggestedGroupNum = packet.ReadUInt32("Suggested Players"); // +13                  packet.ReadUInt32("RepObjectiveFaction"); // +6                  packet.ReadUInt32("Required Source Item ID 2"); // +2961                  packet.ReadUInt32("Reward ItemID 2"); // +2953                  packet.ReadUInt32("MinLevel"); // +10                  packet.ReadUInt32("Reward Choice ItemID Count3"); // +2945                  packet.ReadUInt32("PointOpt"); // +29                    // +8                  quest.QuestLevel = packet.ReadInt32("Level"); // +8                    packet.ReadUInt32("RepObjectiveFaction2"); // +7                  packet.ReadUInt32("Required Source Item ID Count 3"); // +2966                  packet.ReadUInt32("XPId"); // +17                  quest.QuestDescription = packet.ReadWoWString("QuestDetails"' questDetailsLen); // +908                  packet.ReadUInt32("Reward ItemID Count1"); // +2956                  packet.ReadUInt32("Reward Choice ItemID Count6"); // +2984                  packet.ReadUInt32("Reward ItemID Count3"); // +2958                  packet.ReadUInt32("RewardSpellCasted"); // +20                  packet.ReadUInt32("dword2E80"); // +2976                  quest.QuestTurnTargetName = packet.ReadWoWString("QuestTurnTargetName"' questTurnTargetNameLen); // +2369                  packet.ReadUInt32("dword2E74"); // +2973                  packet.ReadUInt32("Required Source Item ID Count 2"); // +2965                  packet.ReadUInt32("Required Source Item ID 3"); // +2962                  packet.ReadUInt32("RewSkillPoints"); // +1792                  quest.LogTitle = packet.ReadWoWString("QuestTitle"' questTitleLen); // +30                  quest.QuestInfoID = packet.ReadInt32E<QuestInfo>("Type"); // +12                  packet.ReadUInt32("RepObjectiveValue2"); // +15                  packet.ReadUInt32("unk11"); // +2982                  packet.ReadUInt32("PlayersSlain"); // +1788                  packet.ReadUInt32("PointMapId"); // +26                  packet.ReadUInt32("NextQuestInChain"); // +14                  packet.ReadUInt32("Reward Choice ItemID 1"); // +2968                  quest.QuestGiverTargetName = packet.ReadWoWString("QuestGiverTargetName"' questGiverTargetNameLen); // +2049                  packet.ReadUInt32("dword2E8C"); // +2979                  packet.ReadUInt32("Required Source Item ID 4"); // +2963                  packet.ReadSingle("Point X"); // +27                  packet.ReadUInt32("Reward Choice ItemID 3"); // +2974                  packet.ReadUInt32("unk"); // +2970                  packet.ReadUInt32("Reward ItemID Count4"); // +2959                  quest.SoundAccept = packet.ReadUInt32("Sound Accept"); // +2946                  packet.ReadUInt32("Reward ItemID 3"); // +2954                  packet.ReadSingle("RewardHonorMultiplier"); // +22                  packet.ReadUInt32("RequiredSpellID"); // +1786                  packet.ReadWoWString("QuestTurnTextWindow"' questTurnTextWindowLen); // +2113                  packet.ReadUInt32("Reward Choice ItemID Count4"); // +2978                  packet.ReadUInt32("Required Source Item ID Count 1"); // +2964                  quest.QuestSortID = packet.ReadInt32E<QuestSort>("Sort"); // +11                  packet.ReadUInt32("BonusTalents"); // +1789                  packet.ReadUInt32("Reward Choice ItemID Count1"); // +2969                  packet.ReadUInt32("Rewarded Spell"); // +19                  packet.ReadUInt32("RewSkillID"); // +1791                  packet.ReadUInt32("unk9"); // +2985                  packet.ReadUInt32("unk10"); // +2967                  quest.Flags = packet.ReadUInt32E<QuestFlags>("Flags"); // +24                  packet.ReadUInt32("Suggested Players"); // +9                  packet.ReadUInt32("SourceItemID"); // +23                    packet.AddSniffData(StoreNameType.Quest' id.Key' "QUERY_RESPONSE");                    Storage.QuestTemplates.Add(quest' packet.TimeSpan);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: if (questIsntAutoComplete)              {                  var questTurnTextWindowLen = packet.ReadBits(10); // +2113                  var questTitleLen = packet.ReadBits(9); // +30                  var questCompletedTextLen = packet.ReadBits(11); // +2433                  var questDetailsLen = packet.ReadBits(12); // +908                  var questTurnTargetNameLen = packet.ReadBits(8); // +2369                  var questGiverTargetNameLen = packet.ReadBits(8); // +2049                  var questGiverTextWindowLen = packet.ReadBits(10); // +1793                  var questEndTextLen = packet.ReadBits(9); // +1658                  var questObjectivesCount = packet.ReadBits("Objectives Count"' 19);                  var questObjectivesLen = packet.ReadBits(12); // +158                    uint['] objectivesCounts = new uint[questObjectivesCount' 2];                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      objectivesCounts[i' 1] = packet.ReadBits(8); // +2949 + 20 objectives texts                      objectivesCounts[i' 0] = packet.ReadBits(22); // +2949 + 0 objectives visuals                  }                    packet.ResetBitReader();                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      packet.ReadUInt32("Requirement Count "' i); // +2949 + 12                      packet.ReadUInt32("Objective ID"' i); // +2949 + 0                      packet.ReadWoWString("Objective Text"' objectivesCounts[i' 1]' i); // +2949 + 20                      packet.ReadUInt32("Unk2 UInt32"' i); // +2949 + 16                      packet.ReadByte("Objective"' i); // +2949 + 5                      var reqType = packet.ReadByteE<QuestRequirementType>("Requirement Type"' i); // +2949 + 4                        // +2949 + 8                      switch (reqType)                      {                          case QuestRequirementType.CreatureKill:                          case QuestRequirementType.CreatureInteract:                          case QuestRequirementType.PetBattleDefeatCreature:                              packet.ReadInt32<UnitId>("Required Creature ID"' i);                              break;                          case QuestRequirementType.Item:                              packet.ReadInt32<ItemId>("Required Item ID"' i);                              break;                          case QuestRequirementType.GameObject:                              packet.ReadInt32<GOId>("Required GameObject ID"' i);                              break;                          case QuestRequirementType.Currency:                              packet.ReadUInt32("Required Currency ID"' i);                              break;                          case QuestRequirementType.Spell:                              packet.ReadInt32<SpellId>("Required Spell ID"' i);                              break;                          case QuestRequirementType.FactionRepHigher:                          case QuestRequirementType.FactionRepLower:                              packet.ReadUInt32("Required Faction ID"' i);                              break;                          case QuestRequirementType.PetBattleDefeatSpecies:                              packet.ReadUInt32("Required Species ID"' i);                              break;                          default:                              packet.ReadInt32("Required ID"' i);                              break;                      }                        for (var j = 0; j < objectivesCounts[i' 0]; j++)                          packet.ReadUInt32("Objective Visual ID"' i' j);                  }                    packet.ReadUInt32("Required Source Item ID 1"); // +2960                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2980                  packet.ReadUInt32("Reward ItemID 3"); // +2955                  packet.ReadUInt32("Reward ItemID Count2"); // +2957                  packet.ReadUInt32("int2973"); // +2975                    QuestTemplate quest = new QuestTemplate                  {                      QuestType = QuestType.Normal                  };                    quest.RewardCurrencyID = new uint?[4];                  quest.RewardCurrencyCount = new uint?[4];                  for (int i = 0; i < 4; ++i)                  {                      quest.RewardCurrencyID[i] = packet.ReadUInt32("Reward Currency ID"' i); // +3001 + 16                      quest.RewardCurrencyCount[i] = packet.ReadUInt32("Reward Currency Count"' i); // +3001 + 0                  }                    packet.ReadUInt32("CharTittleID"); // +1787                  packet.ReadSingle("Point Y"); // +28                  quest.SoundTurnIn = packet.ReadUInt32("Sound TurnIn"); // +2947                    const int repCount = 5;                  quest.RewardFactionID = new uint?[repCount];                  quest.RewardFactionValue = new int?[repCount];                  quest.RewardFactionOverride = new int?[repCount];                    for (var i = 0; i < repCount; i++)                  {                      quest.RewardFactionValue[i] = packet.ReadInt32("Reward Reputation ID"' i); // +2986 + 20                      quest.RewardFactionOverride[i] = (int)packet.ReadUInt32("Reward Reputation ID Override"' i); // +2986 + 0                      quest.RewardFactionID[i] = packet.ReadUInt32("Reward Faction ID"' i); // +2986 + 400                  }                    quest.RewardMoney = packet.ReadInt32("Reward Money"); // +16                  packet.ReadUInt32("EmoteOnComplete"); // +2981                  packet.ReadUInt32("Reward Choice ItemID Count5"); // +2972                  packet.ReadUInt32("MinimapTargetMask"); // +25                  quest.AreaDescription = packet.ReadWoWString("QuestEndText"' questEndTextLen); // +1658                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2971                  quest.RewardBonusMoney = packet.ReadUInt32("Reward Money Max Level"); // +18                  packet.ReadUInt32("Reward Item1 ID"); // +2952                  quest.QuestCompletionLog = packet.ReadWoWString("QuestCompletedText"' questCompletedTextLen); // +2433                  packet.ReadInt32("Reward Choice ItemID 4"); // +2977                  packet.ReadUInt32("RewardHonorAddition"); // +21                  quest.QuestGiverTextWindow = packet.ReadWoWString("QuestGiverTextWindow"' questGiverTextWindowLen); // +1793                  quest.LogDescription = packet.ReadWoWString("QuestObjectives"' questObjectivesLen); // +158                  packet.ReadUInt32("RewArenaPoints"); // +1790                  packet.ReadUInt32("Reward Choice ItemID 6"); // +2983                  quest.SuggestedGroupNum = packet.ReadUInt32("Suggested Players"); // +13                  packet.ReadUInt32("RepObjectiveFaction"); // +6                  packet.ReadUInt32("Required Source Item ID 2"); // +2961                  packet.ReadUInt32("Reward ItemID 2"); // +2953                  packet.ReadUInt32("MinLevel"); // +10                  packet.ReadUInt32("Reward Choice ItemID Count3"); // +2945                  packet.ReadUInt32("PointOpt"); // +29                    // +8                  quest.QuestLevel = packet.ReadInt32("Level"); // +8                    packet.ReadUInt32("RepObjectiveFaction2"); // +7                  packet.ReadUInt32("Required Source Item ID Count 3"); // +2966                  packet.ReadUInt32("XPId"); // +17                  quest.QuestDescription = packet.ReadWoWString("QuestDetails"' questDetailsLen); // +908                  packet.ReadUInt32("Reward ItemID Count1"); // +2956                  packet.ReadUInt32("Reward Choice ItemID Count6"); // +2984                  packet.ReadUInt32("Reward ItemID Count3"); // +2958                  packet.ReadUInt32("RewardSpellCasted"); // +20                  packet.ReadUInt32("dword2E80"); // +2976                  quest.QuestTurnTargetName = packet.ReadWoWString("QuestTurnTargetName"' questTurnTargetNameLen); // +2369                  packet.ReadUInt32("dword2E74"); // +2973                  packet.ReadUInt32("Required Source Item ID Count 2"); // +2965                  packet.ReadUInt32("Required Source Item ID 3"); // +2962                  packet.ReadUInt32("RewSkillPoints"); // +1792                  quest.LogTitle = packet.ReadWoWString("QuestTitle"' questTitleLen); // +30                  quest.QuestInfoID = packet.ReadInt32E<QuestInfo>("Type"); // +12                  packet.ReadUInt32("RepObjectiveValue2"); // +15                  packet.ReadUInt32("unk11"); // +2982                  packet.ReadUInt32("PlayersSlain"); // +1788                  packet.ReadUInt32("PointMapId"); // +26                  packet.ReadUInt32("NextQuestInChain"); // +14                  packet.ReadUInt32("Reward Choice ItemID 1"); // +2968                  quest.QuestGiverTargetName = packet.ReadWoWString("QuestGiverTargetName"' questGiverTargetNameLen); // +2049                  packet.ReadUInt32("dword2E8C"); // +2979                  packet.ReadUInt32("Required Source Item ID 4"); // +2963                  packet.ReadSingle("Point X"); // +27                  packet.ReadUInt32("Reward Choice ItemID 3"); // +2974                  packet.ReadUInt32("unk"); // +2970                  packet.ReadUInt32("Reward ItemID Count4"); // +2959                  quest.SoundAccept = packet.ReadUInt32("Sound Accept"); // +2946                  packet.ReadUInt32("Reward ItemID 3"); // +2954                  packet.ReadSingle("RewardHonorMultiplier"); // +22                  packet.ReadUInt32("RequiredSpellID"); // +1786                  packet.ReadWoWString("QuestTurnTextWindow"' questTurnTextWindowLen); // +2113                  packet.ReadUInt32("Reward Choice ItemID Count4"); // +2978                  packet.ReadUInt32("Required Source Item ID Count 1"); // +2964                  quest.QuestSortID = packet.ReadInt32E<QuestSort>("Sort"); // +11                  packet.ReadUInt32("BonusTalents"); // +1789                  packet.ReadUInt32("Reward Choice ItemID Count1"); // +2969                  packet.ReadUInt32("Rewarded Spell"); // +19                  packet.ReadUInt32("RewSkillID"); // +1791                  packet.ReadUInt32("unk9"); // +2985                  packet.ReadUInt32("unk10"); // +2967                  quest.Flags = packet.ReadUInt32E<QuestFlags>("Flags"); // +24                  packet.ReadUInt32("Suggested Players"); // +9                  packet.ReadUInt32("SourceItemID"); // +23                    packet.AddSniffData(StoreNameType.Quest' id.Key' "QUERY_RESPONSE");                    Storage.QuestTemplates.Add(quest' packet.TimeSpan);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: if (questIsntAutoComplete)              {                  var questTurnTextWindowLen = packet.ReadBits(10); // +2113                  var questTitleLen = packet.ReadBits(9); // +30                  var questCompletedTextLen = packet.ReadBits(11); // +2433                  var questDetailsLen = packet.ReadBits(12); // +908                  var questTurnTargetNameLen = packet.ReadBits(8); // +2369                  var questGiverTargetNameLen = packet.ReadBits(8); // +2049                  var questGiverTextWindowLen = packet.ReadBits(10); // +1793                  var questEndTextLen = packet.ReadBits(9); // +1658                  var questObjectivesCount = packet.ReadBits("Objectives Count"' 19);                  var questObjectivesLen = packet.ReadBits(12); // +158                    uint['] objectivesCounts = new uint[questObjectivesCount' 2];                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      objectivesCounts[i' 1] = packet.ReadBits(8); // +2949 + 20 objectives texts                      objectivesCounts[i' 0] = packet.ReadBits(22); // +2949 + 0 objectives visuals                  }                    packet.ResetBitReader();                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      packet.ReadUInt32("Requirement Count "' i); // +2949 + 12                      packet.ReadUInt32("Objective ID"' i); // +2949 + 0                      packet.ReadWoWString("Objective Text"' objectivesCounts[i' 1]' i); // +2949 + 20                      packet.ReadUInt32("Unk2 UInt32"' i); // +2949 + 16                      packet.ReadByte("Objective"' i); // +2949 + 5                      var reqType = packet.ReadByteE<QuestRequirementType>("Requirement Type"' i); // +2949 + 4                        // +2949 + 8                      switch (reqType)                      {                          case QuestRequirementType.CreatureKill:                          case QuestRequirementType.CreatureInteract:                          case QuestRequirementType.PetBattleDefeatCreature:                              packet.ReadInt32<UnitId>("Required Creature ID"' i);                              break;                          case QuestRequirementType.Item:                              packet.ReadInt32<ItemId>("Required Item ID"' i);                              break;                          case QuestRequirementType.GameObject:                              packet.ReadInt32<GOId>("Required GameObject ID"' i);                              break;                          case QuestRequirementType.Currency:                              packet.ReadUInt32("Required Currency ID"' i);                              break;                          case QuestRequirementType.Spell:                              packet.ReadInt32<SpellId>("Required Spell ID"' i);                              break;                          case QuestRequirementType.FactionRepHigher:                          case QuestRequirementType.FactionRepLower:                              packet.ReadUInt32("Required Faction ID"' i);                              break;                          case QuestRequirementType.PetBattleDefeatSpecies:                              packet.ReadUInt32("Required Species ID"' i);                              break;                          default:                              packet.ReadInt32("Required ID"' i);                              break;                      }                        for (var j = 0; j < objectivesCounts[i' 0]; j++)                          packet.ReadUInt32("Objective Visual ID"' i' j);                  }                    packet.ReadUInt32("Required Source Item ID 1"); // +2960                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2980                  packet.ReadUInt32("Reward ItemID 3"); // +2955                  packet.ReadUInt32("Reward ItemID Count2"); // +2957                  packet.ReadUInt32("int2973"); // +2975                    QuestTemplate quest = new QuestTemplate                  {                      QuestType = QuestType.Normal                  };                    quest.RewardCurrencyID = new uint?[4];                  quest.RewardCurrencyCount = new uint?[4];                  for (int i = 0; i < 4; ++i)                  {                      quest.RewardCurrencyID[i] = packet.ReadUInt32("Reward Currency ID"' i); // +3001 + 16                      quest.RewardCurrencyCount[i] = packet.ReadUInt32("Reward Currency Count"' i); // +3001 + 0                  }                    packet.ReadUInt32("CharTittleID"); // +1787                  packet.ReadSingle("Point Y"); // +28                  quest.SoundTurnIn = packet.ReadUInt32("Sound TurnIn"); // +2947                    const int repCount = 5;                  quest.RewardFactionID = new uint?[repCount];                  quest.RewardFactionValue = new int?[repCount];                  quest.RewardFactionOverride = new int?[repCount];                    for (var i = 0; i < repCount; i++)                  {                      quest.RewardFactionValue[i] = packet.ReadInt32("Reward Reputation ID"' i); // +2986 + 20                      quest.RewardFactionOverride[i] = (int)packet.ReadUInt32("Reward Reputation ID Override"' i); // +2986 + 0                      quest.RewardFactionID[i] = packet.ReadUInt32("Reward Faction ID"' i); // +2986 + 400                  }                    quest.RewardMoney = packet.ReadInt32("Reward Money"); // +16                  packet.ReadUInt32("EmoteOnComplete"); // +2981                  packet.ReadUInt32("Reward Choice ItemID Count5"); // +2972                  packet.ReadUInt32("MinimapTargetMask"); // +25                  quest.AreaDescription = packet.ReadWoWString("QuestEndText"' questEndTextLen); // +1658                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2971                  quest.RewardBonusMoney = packet.ReadUInt32("Reward Money Max Level"); // +18                  packet.ReadUInt32("Reward Item1 ID"); // +2952                  quest.QuestCompletionLog = packet.ReadWoWString("QuestCompletedText"' questCompletedTextLen); // +2433                  packet.ReadInt32("Reward Choice ItemID 4"); // +2977                  packet.ReadUInt32("RewardHonorAddition"); // +21                  quest.QuestGiverTextWindow = packet.ReadWoWString("QuestGiverTextWindow"' questGiverTextWindowLen); // +1793                  quest.LogDescription = packet.ReadWoWString("QuestObjectives"' questObjectivesLen); // +158                  packet.ReadUInt32("RewArenaPoints"); // +1790                  packet.ReadUInt32("Reward Choice ItemID 6"); // +2983                  quest.SuggestedGroupNum = packet.ReadUInt32("Suggested Players"); // +13                  packet.ReadUInt32("RepObjectiveFaction"); // +6                  packet.ReadUInt32("Required Source Item ID 2"); // +2961                  packet.ReadUInt32("Reward ItemID 2"); // +2953                  packet.ReadUInt32("MinLevel"); // +10                  packet.ReadUInt32("Reward Choice ItemID Count3"); // +2945                  packet.ReadUInt32("PointOpt"); // +29                    // +8                  quest.QuestLevel = packet.ReadInt32("Level"); // +8                    packet.ReadUInt32("RepObjectiveFaction2"); // +7                  packet.ReadUInt32("Required Source Item ID Count 3"); // +2966                  packet.ReadUInt32("XPId"); // +17                  quest.QuestDescription = packet.ReadWoWString("QuestDetails"' questDetailsLen); // +908                  packet.ReadUInt32("Reward ItemID Count1"); // +2956                  packet.ReadUInt32("Reward Choice ItemID Count6"); // +2984                  packet.ReadUInt32("Reward ItemID Count3"); // +2958                  packet.ReadUInt32("RewardSpellCasted"); // +20                  packet.ReadUInt32("dword2E80"); // +2976                  quest.QuestTurnTargetName = packet.ReadWoWString("QuestTurnTargetName"' questTurnTargetNameLen); // +2369                  packet.ReadUInt32("dword2E74"); // +2973                  packet.ReadUInt32("Required Source Item ID Count 2"); // +2965                  packet.ReadUInt32("Required Source Item ID 3"); // +2962                  packet.ReadUInt32("RewSkillPoints"); // +1792                  quest.LogTitle = packet.ReadWoWString("QuestTitle"' questTitleLen); // +30                  quest.QuestInfoID = packet.ReadInt32E<QuestInfo>("Type"); // +12                  packet.ReadUInt32("RepObjectiveValue2"); // +15                  packet.ReadUInt32("unk11"); // +2982                  packet.ReadUInt32("PlayersSlain"); // +1788                  packet.ReadUInt32("PointMapId"); // +26                  packet.ReadUInt32("NextQuestInChain"); // +14                  packet.ReadUInt32("Reward Choice ItemID 1"); // +2968                  quest.QuestGiverTargetName = packet.ReadWoWString("QuestGiverTargetName"' questGiverTargetNameLen); // +2049                  packet.ReadUInt32("dword2E8C"); // +2979                  packet.ReadUInt32("Required Source Item ID 4"); // +2963                  packet.ReadSingle("Point X"); // +27                  packet.ReadUInt32("Reward Choice ItemID 3"); // +2974                  packet.ReadUInt32("unk"); // +2970                  packet.ReadUInt32("Reward ItemID Count4"); // +2959                  quest.SoundAccept = packet.ReadUInt32("Sound Accept"); // +2946                  packet.ReadUInt32("Reward ItemID 3"); // +2954                  packet.ReadSingle("RewardHonorMultiplier"); // +22                  packet.ReadUInt32("RequiredSpellID"); // +1786                  packet.ReadWoWString("QuestTurnTextWindow"' questTurnTextWindowLen); // +2113                  packet.ReadUInt32("Reward Choice ItemID Count4"); // +2978                  packet.ReadUInt32("Required Source Item ID Count 1"); // +2964                  quest.QuestSortID = packet.ReadInt32E<QuestSort>("Sort"); // +11                  packet.ReadUInt32("BonusTalents"); // +1789                  packet.ReadUInt32("Reward Choice ItemID Count1"); // +2969                  packet.ReadUInt32("Rewarded Spell"); // +19                  packet.ReadUInt32("RewSkillID"); // +1791                  packet.ReadUInt32("unk9"); // +2985                  packet.ReadUInt32("unk10"); // +2967                  quest.Flags = packet.ReadUInt32E<QuestFlags>("Flags"); // +24                  packet.ReadUInt32("Suggested Players"); // +9                  packet.ReadUInt32("SourceItemID"); // +23                    packet.AddSniffData(StoreNameType.Quest' id.Key' "QUERY_RESPONSE");                    Storage.QuestTemplates.Add(quest' packet.TimeSpan);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: if (questIsntAutoComplete)              {                  var questTurnTextWindowLen = packet.ReadBits(10); // +2113                  var questTitleLen = packet.ReadBits(9); // +30                  var questCompletedTextLen = packet.ReadBits(11); // +2433                  var questDetailsLen = packet.ReadBits(12); // +908                  var questTurnTargetNameLen = packet.ReadBits(8); // +2369                  var questGiverTargetNameLen = packet.ReadBits(8); // +2049                  var questGiverTextWindowLen = packet.ReadBits(10); // +1793                  var questEndTextLen = packet.ReadBits(9); // +1658                  var questObjectivesCount = packet.ReadBits("Objectives Count"' 19);                  var questObjectivesLen = packet.ReadBits(12); // +158                    uint['] objectivesCounts = new uint[questObjectivesCount' 2];                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      objectivesCounts[i' 1] = packet.ReadBits(8); // +2949 + 20 objectives texts                      objectivesCounts[i' 0] = packet.ReadBits(22); // +2949 + 0 objectives visuals                  }                    packet.ResetBitReader();                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      packet.ReadUInt32("Requirement Count "' i); // +2949 + 12                      packet.ReadUInt32("Objective ID"' i); // +2949 + 0                      packet.ReadWoWString("Objective Text"' objectivesCounts[i' 1]' i); // +2949 + 20                      packet.ReadUInt32("Unk2 UInt32"' i); // +2949 + 16                      packet.ReadByte("Objective"' i); // +2949 + 5                      var reqType = packet.ReadByteE<QuestRequirementType>("Requirement Type"' i); // +2949 + 4                        // +2949 + 8                      switch (reqType)                      {                          case QuestRequirementType.CreatureKill:                          case QuestRequirementType.CreatureInteract:                          case QuestRequirementType.PetBattleDefeatCreature:                              packet.ReadInt32<UnitId>("Required Creature ID"' i);                              break;                          case QuestRequirementType.Item:                              packet.ReadInt32<ItemId>("Required Item ID"' i);                              break;                          case QuestRequirementType.GameObject:                              packet.ReadInt32<GOId>("Required GameObject ID"' i);                              break;                          case QuestRequirementType.Currency:                              packet.ReadUInt32("Required Currency ID"' i);                              break;                          case QuestRequirementType.Spell:                              packet.ReadInt32<SpellId>("Required Spell ID"' i);                              break;                          case QuestRequirementType.FactionRepHigher:                          case QuestRequirementType.FactionRepLower:                              packet.ReadUInt32("Required Faction ID"' i);                              break;                          case QuestRequirementType.PetBattleDefeatSpecies:                              packet.ReadUInt32("Required Species ID"' i);                              break;                          default:                              packet.ReadInt32("Required ID"' i);                              break;                      }                        for (var j = 0; j < objectivesCounts[i' 0]; j++)                          packet.ReadUInt32("Objective Visual ID"' i' j);                  }                    packet.ReadUInt32("Required Source Item ID 1"); // +2960                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2980                  packet.ReadUInt32("Reward ItemID 3"); // +2955                  packet.ReadUInt32("Reward ItemID Count2"); // +2957                  packet.ReadUInt32("int2973"); // +2975                    QuestTemplate quest = new QuestTemplate                  {                      QuestType = QuestType.Normal                  };                    quest.RewardCurrencyID = new uint?[4];                  quest.RewardCurrencyCount = new uint?[4];                  for (int i = 0; i < 4; ++i)                  {                      quest.RewardCurrencyID[i] = packet.ReadUInt32("Reward Currency ID"' i); // +3001 + 16                      quest.RewardCurrencyCount[i] = packet.ReadUInt32("Reward Currency Count"' i); // +3001 + 0                  }                    packet.ReadUInt32("CharTittleID"); // +1787                  packet.ReadSingle("Point Y"); // +28                  quest.SoundTurnIn = packet.ReadUInt32("Sound TurnIn"); // +2947                    const int repCount = 5;                  quest.RewardFactionID = new uint?[repCount];                  quest.RewardFactionValue = new int?[repCount];                  quest.RewardFactionOverride = new int?[repCount];                    for (var i = 0; i < repCount; i++)                  {                      quest.RewardFactionValue[i] = packet.ReadInt32("Reward Reputation ID"' i); // +2986 + 20                      quest.RewardFactionOverride[i] = (int)packet.ReadUInt32("Reward Reputation ID Override"' i); // +2986 + 0                      quest.RewardFactionID[i] = packet.ReadUInt32("Reward Faction ID"' i); // +2986 + 400                  }                    quest.RewardMoney = packet.ReadInt32("Reward Money"); // +16                  packet.ReadUInt32("EmoteOnComplete"); // +2981                  packet.ReadUInt32("Reward Choice ItemID Count5"); // +2972                  packet.ReadUInt32("MinimapTargetMask"); // +25                  quest.AreaDescription = packet.ReadWoWString("QuestEndText"' questEndTextLen); // +1658                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2971                  quest.RewardBonusMoney = packet.ReadUInt32("Reward Money Max Level"); // +18                  packet.ReadUInt32("Reward Item1 ID"); // +2952                  quest.QuestCompletionLog = packet.ReadWoWString("QuestCompletedText"' questCompletedTextLen); // +2433                  packet.ReadInt32("Reward Choice ItemID 4"); // +2977                  packet.ReadUInt32("RewardHonorAddition"); // +21                  quest.QuestGiverTextWindow = packet.ReadWoWString("QuestGiverTextWindow"' questGiverTextWindowLen); // +1793                  quest.LogDescription = packet.ReadWoWString("QuestObjectives"' questObjectivesLen); // +158                  packet.ReadUInt32("RewArenaPoints"); // +1790                  packet.ReadUInt32("Reward Choice ItemID 6"); // +2983                  quest.SuggestedGroupNum = packet.ReadUInt32("Suggested Players"); // +13                  packet.ReadUInt32("RepObjectiveFaction"); // +6                  packet.ReadUInt32("Required Source Item ID 2"); // +2961                  packet.ReadUInt32("Reward ItemID 2"); // +2953                  packet.ReadUInt32("MinLevel"); // +10                  packet.ReadUInt32("Reward Choice ItemID Count3"); // +2945                  packet.ReadUInt32("PointOpt"); // +29                    // +8                  quest.QuestLevel = packet.ReadInt32("Level"); // +8                    packet.ReadUInt32("RepObjectiveFaction2"); // +7                  packet.ReadUInt32("Required Source Item ID Count 3"); // +2966                  packet.ReadUInt32("XPId"); // +17                  quest.QuestDescription = packet.ReadWoWString("QuestDetails"' questDetailsLen); // +908                  packet.ReadUInt32("Reward ItemID Count1"); // +2956                  packet.ReadUInt32("Reward Choice ItemID Count6"); // +2984                  packet.ReadUInt32("Reward ItemID Count3"); // +2958                  packet.ReadUInt32("RewardSpellCasted"); // +20                  packet.ReadUInt32("dword2E80"); // +2976                  quest.QuestTurnTargetName = packet.ReadWoWString("QuestTurnTargetName"' questTurnTargetNameLen); // +2369                  packet.ReadUInt32("dword2E74"); // +2973                  packet.ReadUInt32("Required Source Item ID Count 2"); // +2965                  packet.ReadUInt32("Required Source Item ID 3"); // +2962                  packet.ReadUInt32("RewSkillPoints"); // +1792                  quest.LogTitle = packet.ReadWoWString("QuestTitle"' questTitleLen); // +30                  quest.QuestInfoID = packet.ReadInt32E<QuestInfo>("Type"); // +12                  packet.ReadUInt32("RepObjectiveValue2"); // +15                  packet.ReadUInt32("unk11"); // +2982                  packet.ReadUInt32("PlayersSlain"); // +1788                  packet.ReadUInt32("PointMapId"); // +26                  packet.ReadUInt32("NextQuestInChain"); // +14                  packet.ReadUInt32("Reward Choice ItemID 1"); // +2968                  quest.QuestGiverTargetName = packet.ReadWoWString("QuestGiverTargetName"' questGiverTargetNameLen); // +2049                  packet.ReadUInt32("dword2E8C"); // +2979                  packet.ReadUInt32("Required Source Item ID 4"); // +2963                  packet.ReadSingle("Point X"); // +27                  packet.ReadUInt32("Reward Choice ItemID 3"); // +2974                  packet.ReadUInt32("unk"); // +2970                  packet.ReadUInt32("Reward ItemID Count4"); // +2959                  quest.SoundAccept = packet.ReadUInt32("Sound Accept"); // +2946                  packet.ReadUInt32("Reward ItemID 3"); // +2954                  packet.ReadSingle("RewardHonorMultiplier"); // +22                  packet.ReadUInt32("RequiredSpellID"); // +1786                  packet.ReadWoWString("QuestTurnTextWindow"' questTurnTextWindowLen); // +2113                  packet.ReadUInt32("Reward Choice ItemID Count4"); // +2978                  packet.ReadUInt32("Required Source Item ID Count 1"); // +2964                  quest.QuestSortID = packet.ReadInt32E<QuestSort>("Sort"); // +11                  packet.ReadUInt32("BonusTalents"); // +1789                  packet.ReadUInt32("Reward Choice ItemID Count1"); // +2969                  packet.ReadUInt32("Rewarded Spell"); // +19                  packet.ReadUInt32("RewSkillID"); // +1791                  packet.ReadUInt32("unk9"); // +2985                  packet.ReadUInt32("unk10"); // +2967                  quest.Flags = packet.ReadUInt32E<QuestFlags>("Flags"); // +24                  packet.ReadUInt32("Suggested Players"); // +9                  packet.ReadUInt32("SourceItemID"); // +23                    packet.AddSniffData(StoreNameType.Quest' id.Key' "QUERY_RESPONSE");                    Storage.QuestTemplates.Add(quest' packet.TimeSpan);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: if (questIsntAutoComplete)              {                  var questTurnTextWindowLen = packet.ReadBits(10); // +2113                  var questTitleLen = packet.ReadBits(9); // +30                  var questCompletedTextLen = packet.ReadBits(11); // +2433                  var questDetailsLen = packet.ReadBits(12); // +908                  var questTurnTargetNameLen = packet.ReadBits(8); // +2369                  var questGiverTargetNameLen = packet.ReadBits(8); // +2049                  var questGiverTextWindowLen = packet.ReadBits(10); // +1793                  var questEndTextLen = packet.ReadBits(9); // +1658                  var questObjectivesCount = packet.ReadBits("Objectives Count"' 19);                  var questObjectivesLen = packet.ReadBits(12); // +158                    uint['] objectivesCounts = new uint[questObjectivesCount' 2];                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      objectivesCounts[i' 1] = packet.ReadBits(8); // +2949 + 20 objectives texts                      objectivesCounts[i' 0] = packet.ReadBits(22); // +2949 + 0 objectives visuals                  }                    packet.ResetBitReader();                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      packet.ReadUInt32("Requirement Count "' i); // +2949 + 12                      packet.ReadUInt32("Objective ID"' i); // +2949 + 0                      packet.ReadWoWString("Objective Text"' objectivesCounts[i' 1]' i); // +2949 + 20                      packet.ReadUInt32("Unk2 UInt32"' i); // +2949 + 16                      packet.ReadByte("Objective"' i); // +2949 + 5                      var reqType = packet.ReadByteE<QuestRequirementType>("Requirement Type"' i); // +2949 + 4                        // +2949 + 8                      switch (reqType)                      {                          case QuestRequirementType.CreatureKill:                          case QuestRequirementType.CreatureInteract:                          case QuestRequirementType.PetBattleDefeatCreature:                              packet.ReadInt32<UnitId>("Required Creature ID"' i);                              break;                          case QuestRequirementType.Item:                              packet.ReadInt32<ItemId>("Required Item ID"' i);                              break;                          case QuestRequirementType.GameObject:                              packet.ReadInt32<GOId>("Required GameObject ID"' i);                              break;                          case QuestRequirementType.Currency:                              packet.ReadUInt32("Required Currency ID"' i);                              break;                          case QuestRequirementType.Spell:                              packet.ReadInt32<SpellId>("Required Spell ID"' i);                              break;                          case QuestRequirementType.FactionRepHigher:                          case QuestRequirementType.FactionRepLower:                              packet.ReadUInt32("Required Faction ID"' i);                              break;                          case QuestRequirementType.PetBattleDefeatSpecies:                              packet.ReadUInt32("Required Species ID"' i);                              break;                          default:                              packet.ReadInt32("Required ID"' i);                              break;                      }                        for (var j = 0; j < objectivesCounts[i' 0]; j++)                          packet.ReadUInt32("Objective Visual ID"' i' j);                  }                    packet.ReadUInt32("Required Source Item ID 1"); // +2960                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2980                  packet.ReadUInt32("Reward ItemID 3"); // +2955                  packet.ReadUInt32("Reward ItemID Count2"); // +2957                  packet.ReadUInt32("int2973"); // +2975                    QuestTemplate quest = new QuestTemplate                  {                      QuestType = QuestType.Normal                  };                    quest.RewardCurrencyID = new uint?[4];                  quest.RewardCurrencyCount = new uint?[4];                  for (int i = 0; i < 4; ++i)                  {                      quest.RewardCurrencyID[i] = packet.ReadUInt32("Reward Currency ID"' i); // +3001 + 16                      quest.RewardCurrencyCount[i] = packet.ReadUInt32("Reward Currency Count"' i); // +3001 + 0                  }                    packet.ReadUInt32("CharTittleID"); // +1787                  packet.ReadSingle("Point Y"); // +28                  quest.SoundTurnIn = packet.ReadUInt32("Sound TurnIn"); // +2947                    const int repCount = 5;                  quest.RewardFactionID = new uint?[repCount];                  quest.RewardFactionValue = new int?[repCount];                  quest.RewardFactionOverride = new int?[repCount];                    for (var i = 0; i < repCount; i++)                  {                      quest.RewardFactionValue[i] = packet.ReadInt32("Reward Reputation ID"' i); // +2986 + 20                      quest.RewardFactionOverride[i] = (int)packet.ReadUInt32("Reward Reputation ID Override"' i); // +2986 + 0                      quest.RewardFactionID[i] = packet.ReadUInt32("Reward Faction ID"' i); // +2986 + 400                  }                    quest.RewardMoney = packet.ReadInt32("Reward Money"); // +16                  packet.ReadUInt32("EmoteOnComplete"); // +2981                  packet.ReadUInt32("Reward Choice ItemID Count5"); // +2972                  packet.ReadUInt32("MinimapTargetMask"); // +25                  quest.AreaDescription = packet.ReadWoWString("QuestEndText"' questEndTextLen); // +1658                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2971                  quest.RewardBonusMoney = packet.ReadUInt32("Reward Money Max Level"); // +18                  packet.ReadUInt32("Reward Item1 ID"); // +2952                  quest.QuestCompletionLog = packet.ReadWoWString("QuestCompletedText"' questCompletedTextLen); // +2433                  packet.ReadInt32("Reward Choice ItemID 4"); // +2977                  packet.ReadUInt32("RewardHonorAddition"); // +21                  quest.QuestGiverTextWindow = packet.ReadWoWString("QuestGiverTextWindow"' questGiverTextWindowLen); // +1793                  quest.LogDescription = packet.ReadWoWString("QuestObjectives"' questObjectivesLen); // +158                  packet.ReadUInt32("RewArenaPoints"); // +1790                  packet.ReadUInt32("Reward Choice ItemID 6"); // +2983                  quest.SuggestedGroupNum = packet.ReadUInt32("Suggested Players"); // +13                  packet.ReadUInt32("RepObjectiveFaction"); // +6                  packet.ReadUInt32("Required Source Item ID 2"); // +2961                  packet.ReadUInt32("Reward ItemID 2"); // +2953                  packet.ReadUInt32("MinLevel"); // +10                  packet.ReadUInt32("Reward Choice ItemID Count3"); // +2945                  packet.ReadUInt32("PointOpt"); // +29                    // +8                  quest.QuestLevel = packet.ReadInt32("Level"); // +8                    packet.ReadUInt32("RepObjectiveFaction2"); // +7                  packet.ReadUInt32("Required Source Item ID Count 3"); // +2966                  packet.ReadUInt32("XPId"); // +17                  quest.QuestDescription = packet.ReadWoWString("QuestDetails"' questDetailsLen); // +908                  packet.ReadUInt32("Reward ItemID Count1"); // +2956                  packet.ReadUInt32("Reward Choice ItemID Count6"); // +2984                  packet.ReadUInt32("Reward ItemID Count3"); // +2958                  packet.ReadUInt32("RewardSpellCasted"); // +20                  packet.ReadUInt32("dword2E80"); // +2976                  quest.QuestTurnTargetName = packet.ReadWoWString("QuestTurnTargetName"' questTurnTargetNameLen); // +2369                  packet.ReadUInt32("dword2E74"); // +2973                  packet.ReadUInt32("Required Source Item ID Count 2"); // +2965                  packet.ReadUInt32("Required Source Item ID 3"); // +2962                  packet.ReadUInt32("RewSkillPoints"); // +1792                  quest.LogTitle = packet.ReadWoWString("QuestTitle"' questTitleLen); // +30                  quest.QuestInfoID = packet.ReadInt32E<QuestInfo>("Type"); // +12                  packet.ReadUInt32("RepObjectiveValue2"); // +15                  packet.ReadUInt32("unk11"); // +2982                  packet.ReadUInt32("PlayersSlain"); // +1788                  packet.ReadUInt32("PointMapId"); // +26                  packet.ReadUInt32("NextQuestInChain"); // +14                  packet.ReadUInt32("Reward Choice ItemID 1"); // +2968                  quest.QuestGiverTargetName = packet.ReadWoWString("QuestGiverTargetName"' questGiverTargetNameLen); // +2049                  packet.ReadUInt32("dword2E8C"); // +2979                  packet.ReadUInt32("Required Source Item ID 4"); // +2963                  packet.ReadSingle("Point X"); // +27                  packet.ReadUInt32("Reward Choice ItemID 3"); // +2974                  packet.ReadUInt32("unk"); // +2970                  packet.ReadUInt32("Reward ItemID Count4"); // +2959                  quest.SoundAccept = packet.ReadUInt32("Sound Accept"); // +2946                  packet.ReadUInt32("Reward ItemID 3"); // +2954                  packet.ReadSingle("RewardHonorMultiplier"); // +22                  packet.ReadUInt32("RequiredSpellID"); // +1786                  packet.ReadWoWString("QuestTurnTextWindow"' questTurnTextWindowLen); // +2113                  packet.ReadUInt32("Reward Choice ItemID Count4"); // +2978                  packet.ReadUInt32("Required Source Item ID Count 1"); // +2964                  quest.QuestSortID = packet.ReadInt32E<QuestSort>("Sort"); // +11                  packet.ReadUInt32("BonusTalents"); // +1789                  packet.ReadUInt32("Reward Choice ItemID Count1"); // +2969                  packet.ReadUInt32("Rewarded Spell"); // +19                  packet.ReadUInt32("RewSkillID"); // +1791                  packet.ReadUInt32("unk9"); // +2985                  packet.ReadUInt32("unk10"); // +2967                  quest.Flags = packet.ReadUInt32E<QuestFlags>("Flags"); // +24                  packet.ReadUInt32("Suggested Players"); // +9                  packet.ReadUInt32("SourceItemID"); // +23                    packet.AddSniffData(StoreNameType.Quest' id.Key' "QUERY_RESPONSE");                    Storage.QuestTemplates.Add(quest' packet.TimeSpan);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: if (questIsntAutoComplete)              {                  var questTurnTextWindowLen = packet.ReadBits(10); // +2113                  var questTitleLen = packet.ReadBits(9); // +30                  var questCompletedTextLen = packet.ReadBits(11); // +2433                  var questDetailsLen = packet.ReadBits(12); // +908                  var questTurnTargetNameLen = packet.ReadBits(8); // +2369                  var questGiverTargetNameLen = packet.ReadBits(8); // +2049                  var questGiverTextWindowLen = packet.ReadBits(10); // +1793                  var questEndTextLen = packet.ReadBits(9); // +1658                  var questObjectivesCount = packet.ReadBits("Objectives Count"' 19);                  var questObjectivesLen = packet.ReadBits(12); // +158                    uint['] objectivesCounts = new uint[questObjectivesCount' 2];                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      objectivesCounts[i' 1] = packet.ReadBits(8); // +2949 + 20 objectives texts                      objectivesCounts[i' 0] = packet.ReadBits(22); // +2949 + 0 objectives visuals                  }                    packet.ResetBitReader();                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      packet.ReadUInt32("Requirement Count "' i); // +2949 + 12                      packet.ReadUInt32("Objective ID"' i); // +2949 + 0                      packet.ReadWoWString("Objective Text"' objectivesCounts[i' 1]' i); // +2949 + 20                      packet.ReadUInt32("Unk2 UInt32"' i); // +2949 + 16                      packet.ReadByte("Objective"' i); // +2949 + 5                      var reqType = packet.ReadByteE<QuestRequirementType>("Requirement Type"' i); // +2949 + 4                        // +2949 + 8                      switch (reqType)                      {                          case QuestRequirementType.CreatureKill:                          case QuestRequirementType.CreatureInteract:                          case QuestRequirementType.PetBattleDefeatCreature:                              packet.ReadInt32<UnitId>("Required Creature ID"' i);                              break;                          case QuestRequirementType.Item:                              packet.ReadInt32<ItemId>("Required Item ID"' i);                              break;                          case QuestRequirementType.GameObject:                              packet.ReadInt32<GOId>("Required GameObject ID"' i);                              break;                          case QuestRequirementType.Currency:                              packet.ReadUInt32("Required Currency ID"' i);                              break;                          case QuestRequirementType.Spell:                              packet.ReadInt32<SpellId>("Required Spell ID"' i);                              break;                          case QuestRequirementType.FactionRepHigher:                          case QuestRequirementType.FactionRepLower:                              packet.ReadUInt32("Required Faction ID"' i);                              break;                          case QuestRequirementType.PetBattleDefeatSpecies:                              packet.ReadUInt32("Required Species ID"' i);                              break;                          default:                              packet.ReadInt32("Required ID"' i);                              break;                      }                        for (var j = 0; j < objectivesCounts[i' 0]; j++)                          packet.ReadUInt32("Objective Visual ID"' i' j);                  }                    packet.ReadUInt32("Required Source Item ID 1"); // +2960                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2980                  packet.ReadUInt32("Reward ItemID 3"); // +2955                  packet.ReadUInt32("Reward ItemID Count2"); // +2957                  packet.ReadUInt32("int2973"); // +2975                    QuestTemplate quest = new QuestTemplate                  {                      QuestType = QuestType.Normal                  };                    quest.RewardCurrencyID = new uint?[4];                  quest.RewardCurrencyCount = new uint?[4];                  for (int i = 0; i < 4; ++i)                  {                      quest.RewardCurrencyID[i] = packet.ReadUInt32("Reward Currency ID"' i); // +3001 + 16                      quest.RewardCurrencyCount[i] = packet.ReadUInt32("Reward Currency Count"' i); // +3001 + 0                  }                    packet.ReadUInt32("CharTittleID"); // +1787                  packet.ReadSingle("Point Y"); // +28                  quest.SoundTurnIn = packet.ReadUInt32("Sound TurnIn"); // +2947                    const int repCount = 5;                  quest.RewardFactionID = new uint?[repCount];                  quest.RewardFactionValue = new int?[repCount];                  quest.RewardFactionOverride = new int?[repCount];                    for (var i = 0; i < repCount; i++)                  {                      quest.RewardFactionValue[i] = packet.ReadInt32("Reward Reputation ID"' i); // +2986 + 20                      quest.RewardFactionOverride[i] = (int)packet.ReadUInt32("Reward Reputation ID Override"' i); // +2986 + 0                      quest.RewardFactionID[i] = packet.ReadUInt32("Reward Faction ID"' i); // +2986 + 400                  }                    quest.RewardMoney = packet.ReadInt32("Reward Money"); // +16                  packet.ReadUInt32("EmoteOnComplete"); // +2981                  packet.ReadUInt32("Reward Choice ItemID Count5"); // +2972                  packet.ReadUInt32("MinimapTargetMask"); // +25                  quest.AreaDescription = packet.ReadWoWString("QuestEndText"' questEndTextLen); // +1658                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2971                  quest.RewardBonusMoney = packet.ReadUInt32("Reward Money Max Level"); // +18                  packet.ReadUInt32("Reward Item1 ID"); // +2952                  quest.QuestCompletionLog = packet.ReadWoWString("QuestCompletedText"' questCompletedTextLen); // +2433                  packet.ReadInt32("Reward Choice ItemID 4"); // +2977                  packet.ReadUInt32("RewardHonorAddition"); // +21                  quest.QuestGiverTextWindow = packet.ReadWoWString("QuestGiverTextWindow"' questGiverTextWindowLen); // +1793                  quest.LogDescription = packet.ReadWoWString("QuestObjectives"' questObjectivesLen); // +158                  packet.ReadUInt32("RewArenaPoints"); // +1790                  packet.ReadUInt32("Reward Choice ItemID 6"); // +2983                  quest.SuggestedGroupNum = packet.ReadUInt32("Suggested Players"); // +13                  packet.ReadUInt32("RepObjectiveFaction"); // +6                  packet.ReadUInt32("Required Source Item ID 2"); // +2961                  packet.ReadUInt32("Reward ItemID 2"); // +2953                  packet.ReadUInt32("MinLevel"); // +10                  packet.ReadUInt32("Reward Choice ItemID Count3"); // +2945                  packet.ReadUInt32("PointOpt"); // +29                    // +8                  quest.QuestLevel = packet.ReadInt32("Level"); // +8                    packet.ReadUInt32("RepObjectiveFaction2"); // +7                  packet.ReadUInt32("Required Source Item ID Count 3"); // +2966                  packet.ReadUInt32("XPId"); // +17                  quest.QuestDescription = packet.ReadWoWString("QuestDetails"' questDetailsLen); // +908                  packet.ReadUInt32("Reward ItemID Count1"); // +2956                  packet.ReadUInt32("Reward Choice ItemID Count6"); // +2984                  packet.ReadUInt32("Reward ItemID Count3"); // +2958                  packet.ReadUInt32("RewardSpellCasted"); // +20                  packet.ReadUInt32("dword2E80"); // +2976                  quest.QuestTurnTargetName = packet.ReadWoWString("QuestTurnTargetName"' questTurnTargetNameLen); // +2369                  packet.ReadUInt32("dword2E74"); // +2973                  packet.ReadUInt32("Required Source Item ID Count 2"); // +2965                  packet.ReadUInt32("Required Source Item ID 3"); // +2962                  packet.ReadUInt32("RewSkillPoints"); // +1792                  quest.LogTitle = packet.ReadWoWString("QuestTitle"' questTitleLen); // +30                  quest.QuestInfoID = packet.ReadInt32E<QuestInfo>("Type"); // +12                  packet.ReadUInt32("RepObjectiveValue2"); // +15                  packet.ReadUInt32("unk11"); // +2982                  packet.ReadUInt32("PlayersSlain"); // +1788                  packet.ReadUInt32("PointMapId"); // +26                  packet.ReadUInt32("NextQuestInChain"); // +14                  packet.ReadUInt32("Reward Choice ItemID 1"); // +2968                  quest.QuestGiverTargetName = packet.ReadWoWString("QuestGiverTargetName"' questGiverTargetNameLen); // +2049                  packet.ReadUInt32("dword2E8C"); // +2979                  packet.ReadUInt32("Required Source Item ID 4"); // +2963                  packet.ReadSingle("Point X"); // +27                  packet.ReadUInt32("Reward Choice ItemID 3"); // +2974                  packet.ReadUInt32("unk"); // +2970                  packet.ReadUInt32("Reward ItemID Count4"); // +2959                  quest.SoundAccept = packet.ReadUInt32("Sound Accept"); // +2946                  packet.ReadUInt32("Reward ItemID 3"); // +2954                  packet.ReadSingle("RewardHonorMultiplier"); // +22                  packet.ReadUInt32("RequiredSpellID"); // +1786                  packet.ReadWoWString("QuestTurnTextWindow"' questTurnTextWindowLen); // +2113                  packet.ReadUInt32("Reward Choice ItemID Count4"); // +2978                  packet.ReadUInt32("Required Source Item ID Count 1"); // +2964                  quest.QuestSortID = packet.ReadInt32E<QuestSort>("Sort"); // +11                  packet.ReadUInt32("BonusTalents"); // +1789                  packet.ReadUInt32("Reward Choice ItemID Count1"); // +2969                  packet.ReadUInt32("Rewarded Spell"); // +19                  packet.ReadUInt32("RewSkillID"); // +1791                  packet.ReadUInt32("unk9"); // +2985                  packet.ReadUInt32("unk10"); // +2967                  quest.Flags = packet.ReadUInt32E<QuestFlags>("Flags"); // +24                  packet.ReadUInt32("Suggested Players"); // +9                  packet.ReadUInt32("SourceItemID"); // +23                    packet.AddSniffData(StoreNameType.Quest' id.Key' "QUERY_RESPONSE");                    Storage.QuestTemplates.Add(quest' packet.TimeSpan);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: if (questIsntAutoComplete)              {                  var questTurnTextWindowLen = packet.ReadBits(10); // +2113                  var questTitleLen = packet.ReadBits(9); // +30                  var questCompletedTextLen = packet.ReadBits(11); // +2433                  var questDetailsLen = packet.ReadBits(12); // +908                  var questTurnTargetNameLen = packet.ReadBits(8); // +2369                  var questGiverTargetNameLen = packet.ReadBits(8); // +2049                  var questGiverTextWindowLen = packet.ReadBits(10); // +1793                  var questEndTextLen = packet.ReadBits(9); // +1658                  var questObjectivesCount = packet.ReadBits("Objectives Count"' 19);                  var questObjectivesLen = packet.ReadBits(12); // +158                    uint['] objectivesCounts = new uint[questObjectivesCount' 2];                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      objectivesCounts[i' 1] = packet.ReadBits(8); // +2949 + 20 objectives texts                      objectivesCounts[i' 0] = packet.ReadBits(22); // +2949 + 0 objectives visuals                  }                    packet.ResetBitReader();                    for (var i = 0; i < questObjectivesCount; ++i)                  {                      packet.ReadUInt32("Requirement Count "' i); // +2949 + 12                      packet.ReadUInt32("Objective ID"' i); // +2949 + 0                      packet.ReadWoWString("Objective Text"' objectivesCounts[i' 1]' i); // +2949 + 20                      packet.ReadUInt32("Unk2 UInt32"' i); // +2949 + 16                      packet.ReadByte("Objective"' i); // +2949 + 5                      var reqType = packet.ReadByteE<QuestRequirementType>("Requirement Type"' i); // +2949 + 4                        // +2949 + 8                      switch (reqType)                      {                          case QuestRequirementType.CreatureKill:                          case QuestRequirementType.CreatureInteract:                          case QuestRequirementType.PetBattleDefeatCreature:                              packet.ReadInt32<UnitId>("Required Creature ID"' i);                              break;                          case QuestRequirementType.Item:                              packet.ReadInt32<ItemId>("Required Item ID"' i);                              break;                          case QuestRequirementType.GameObject:                              packet.ReadInt32<GOId>("Required GameObject ID"' i);                              break;                          case QuestRequirementType.Currency:                              packet.ReadUInt32("Required Currency ID"' i);                              break;                          case QuestRequirementType.Spell:                              packet.ReadInt32<SpellId>("Required Spell ID"' i);                              break;                          case QuestRequirementType.FactionRepHigher:                          case QuestRequirementType.FactionRepLower:                              packet.ReadUInt32("Required Faction ID"' i);                              break;                          case QuestRequirementType.PetBattleDefeatSpecies:                              packet.ReadUInt32("Required Species ID"' i);                              break;                          default:                              packet.ReadInt32("Required ID"' i);                              break;                      }                        for (var j = 0; j < objectivesCounts[i' 0]; j++)                          packet.ReadUInt32("Objective Visual ID"' i' j);                  }                    packet.ReadUInt32("Required Source Item ID 1"); // +2960                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2980                  packet.ReadUInt32("Reward ItemID 3"); // +2955                  packet.ReadUInt32("Reward ItemID Count2"); // +2957                  packet.ReadUInt32("int2973"); // +2975                    QuestTemplate quest = new QuestTemplate                  {                      QuestType = QuestType.Normal                  };                    quest.RewardCurrencyID = new uint?[4];                  quest.RewardCurrencyCount = new uint?[4];                  for (int i = 0; i < 4; ++i)                  {                      quest.RewardCurrencyID[i] = packet.ReadUInt32("Reward Currency ID"' i); // +3001 + 16                      quest.RewardCurrencyCount[i] = packet.ReadUInt32("Reward Currency Count"' i); // +3001 + 0                  }                    packet.ReadUInt32("CharTittleID"); // +1787                  packet.ReadSingle("Point Y"); // +28                  quest.SoundTurnIn = packet.ReadUInt32("Sound TurnIn"); // +2947                    const int repCount = 5;                  quest.RewardFactionID = new uint?[repCount];                  quest.RewardFactionValue = new int?[repCount];                  quest.RewardFactionOverride = new int?[repCount];                    for (var i = 0; i < repCount; i++)                  {                      quest.RewardFactionValue[i] = packet.ReadInt32("Reward Reputation ID"' i); // +2986 + 20                      quest.RewardFactionOverride[i] = (int)packet.ReadUInt32("Reward Reputation ID Override"' i); // +2986 + 0                      quest.RewardFactionID[i] = packet.ReadUInt32("Reward Faction ID"' i); // +2986 + 400                  }                    quest.RewardMoney = packet.ReadInt32("Reward Money"); // +16                  packet.ReadUInt32("EmoteOnComplete"); // +2981                  packet.ReadUInt32("Reward Choice ItemID Count5"); // +2972                  packet.ReadUInt32("MinimapTargetMask"); // +25                  quest.AreaDescription = packet.ReadWoWString("QuestEndText"' questEndTextLen); // +1658                  packet.ReadUInt32("Reward Choice ItemID 2"); // +2971                  quest.RewardBonusMoney = packet.ReadUInt32("Reward Money Max Level"); // +18                  packet.ReadUInt32("Reward Item1 ID"); // +2952                  quest.QuestCompletionLog = packet.ReadWoWString("QuestCompletedText"' questCompletedTextLen); // +2433                  packet.ReadInt32("Reward Choice ItemID 4"); // +2977                  packet.ReadUInt32("RewardHonorAddition"); // +21                  quest.QuestGiverTextWindow = packet.ReadWoWString("QuestGiverTextWindow"' questGiverTextWindowLen); // +1793                  quest.LogDescription = packet.ReadWoWString("QuestObjectives"' questObjectivesLen); // +158                  packet.ReadUInt32("RewArenaPoints"); // +1790                  packet.ReadUInt32("Reward Choice ItemID 6"); // +2983                  quest.SuggestedGroupNum = packet.ReadUInt32("Suggested Players"); // +13                  packet.ReadUInt32("RepObjectiveFaction"); // +6                  packet.ReadUInt32("Required Source Item ID 2"); // +2961                  packet.ReadUInt32("Reward ItemID 2"); // +2953                  packet.ReadUInt32("MinLevel"); // +10                  packet.ReadUInt32("Reward Choice ItemID Count3"); // +2945                  packet.ReadUInt32("PointOpt"); // +29                    // +8                  quest.QuestLevel = packet.ReadInt32("Level"); // +8                    packet.ReadUInt32("RepObjectiveFaction2"); // +7                  packet.ReadUInt32("Required Source Item ID Count 3"); // +2966                  packet.ReadUInt32("XPId"); // +17                  quest.QuestDescription = packet.ReadWoWString("QuestDetails"' questDetailsLen); // +908                  packet.ReadUInt32("Reward ItemID Count1"); // +2956                  packet.ReadUInt32("Reward Choice ItemID Count6"); // +2984                  packet.ReadUInt32("Reward ItemID Count3"); // +2958                  packet.ReadUInt32("RewardSpellCasted"); // +20                  packet.ReadUInt32("dword2E80"); // +2976                  quest.QuestTurnTargetName = packet.ReadWoWString("QuestTurnTargetName"' questTurnTargetNameLen); // +2369                  packet.ReadUInt32("dword2E74"); // +2973                  packet.ReadUInt32("Required Source Item ID Count 2"); // +2965                  packet.ReadUInt32("Required Source Item ID 3"); // +2962                  packet.ReadUInt32("RewSkillPoints"); // +1792                  quest.LogTitle = packet.ReadWoWString("QuestTitle"' questTitleLen); // +30                  quest.QuestInfoID = packet.ReadInt32E<QuestInfo>("Type"); // +12                  packet.ReadUInt32("RepObjectiveValue2"); // +15                  packet.ReadUInt32("unk11"); // +2982                  packet.ReadUInt32("PlayersSlain"); // +1788                  packet.ReadUInt32("PointMapId"); // +26                  packet.ReadUInt32("NextQuestInChain"); // +14                  packet.ReadUInt32("Reward Choice ItemID 1"); // +2968                  quest.QuestGiverTargetName = packet.ReadWoWString("QuestGiverTargetName"' questGiverTargetNameLen); // +2049                  packet.ReadUInt32("dword2E8C"); // +2979                  packet.ReadUInt32("Required Source Item ID 4"); // +2963                  packet.ReadSingle("Point X"); // +27                  packet.ReadUInt32("Reward Choice ItemID 3"); // +2974                  packet.ReadUInt32("unk"); // +2970                  packet.ReadUInt32("Reward ItemID Count4"); // +2959                  quest.SoundAccept = packet.ReadUInt32("Sound Accept"); // +2946                  packet.ReadUInt32("Reward ItemID 3"); // +2954                  packet.ReadSingle("RewardHonorMultiplier"); // +22                  packet.ReadUInt32("RequiredSpellID"); // +1786                  packet.ReadWoWString("QuestTurnTextWindow"' questTurnTextWindowLen); // +2113                  packet.ReadUInt32("Reward Choice ItemID Count4"); // +2978                  packet.ReadUInt32("Required Source Item ID Count 1"); // +2964                  quest.QuestSortID = packet.ReadInt32E<QuestSort>("Sort"); // +11                  packet.ReadUInt32("BonusTalents"); // +1789                  packet.ReadUInt32("Reward Choice ItemID Count1"); // +2969                  packet.ReadUInt32("Rewarded Spell"); // +19                  packet.ReadUInt32("RewSkillID"); // +1791                  packet.ReadUInt32("unk9"); // +2985                  packet.ReadUInt32("unk10"); // +2967                  quest.Flags = packet.ReadUInt32E<QuestFlags>("Flags"); // +24                  packet.ReadUInt32("Suggested Players"); // +9                  packet.ReadUInt32("SourceItemID"); // +23                    packet.AddSniffData(StoreNameType.Quest' id.Key' "QUERY_RESPONSE");                    Storage.QuestTemplates.Add(quest' packet.TimeSpan);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestPoiQueryResponse,The following statement contains a magic number: uint count = packet.ReadBits("Count"' 20);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestPoiQueryResponse,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  poiCounter[i] = packet.ReadBits("POI Counter"' 18' i);                  pointsSize[i] = new uint[poiCounter[i]];                    for (int j = 0; j < poiCounter[i]; ++j)                      pointsSize[i][j] = packet.ReadBits("Points Counter"' 21' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestPoiQueryResponse,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  poiCounter[i] = packet.ReadBits("POI Counter"' 18' i);                  pointsSize[i] = new uint[poiCounter[i]];                    for (int j = 0; j < poiCounter[i]; ++j)                      pointsSize[i][j] = packet.ReadBits("Points Counter"' 21' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverHello,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverHello,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 7' 3' 4' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverHello,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 7' 3' 4' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverHello,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 7' 3' 4' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverHello,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 7' 3' 4' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverHello,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 7' 3' 4' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverHello,The following statement contains a magic number: packet.StartBitStream(guid' 5' 6' 7' 3' 4' 2' 1' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverHello,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 7' 3' 6' 0' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverHello,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 7' 3' 6' 0' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverHello,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 7' 3' 6' 0' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverHello,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 7' 3' 6' 0' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverHello,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 7' 3' 6' 0' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverHello,The following statement contains a magic number: packet.ParseBitStream(guid' 4' 1' 7' 3' 6' 0' 5' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverQuestList,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverQuestList,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverQuestList,The following statement contains a magic number: var titleLen = packet.ReadBits(11);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverQuestList,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverQuestList,The following statement contains a magic number: var count = packet.ReadBits(19);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverQuestList,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  packet.ReadBit("marker"' i); // 0: yellow ! mark   1: blue ? mark                  questTitleLen[i] = packet.ReadBits(9);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverQuestList,The following statement contains a magic number: packet.StartBitStream(guid' 1' 3' 4' 5' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverQuestList,The following statement contains a magic number: packet.StartBitStream(guid' 1' 3' 4' 5' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverQuestList,The following statement contains a magic number: packet.StartBitStream(guid' 1' 3' 4' 5' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverQuestList,The following statement contains a magic number: packet.StartBitStream(guid' 1' 3' 4' 5' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverQuestList,The following statement contains a magic number: packet.ReadXORBytes(guid' 1' 0' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverQuestList,The following statement contains a magic number: packet.ReadXORBytes(guid' 1' 0' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverQuestList,The following statement contains a magic number: packet.ReadXORBytes(guid' 5' 3' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverQuestList,The following statement contains a magic number: packet.ReadXORBytes(guid' 5' 3' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverQuestList,The following statement contains a magic number: packet.ReadXORBytes(guid' 5' 3' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestgiverQuestList,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestUpdateAdd,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestUpdateAdd,The following statement contains a magic number: packet.StartBitStream(guid' 0' 4' 2' 6' 1' 5' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestUpdateAdd,The following statement contains a magic number: packet.StartBitStream(guid' 0' 4' 2' 6' 1' 5' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestUpdateAdd,The following statement contains a magic number: packet.StartBitStream(guid' 0' 4' 2' 6' 1' 5' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestUpdateAdd,The following statement contains a magic number: packet.StartBitStream(guid' 0' 4' 2' 6' 1' 5' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestUpdateAdd,The following statement contains a magic number: packet.StartBitStream(guid' 0' 4' 2' 6' 1' 5' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestUpdateAdd,The following statement contains a magic number: packet.StartBitStream(guid' 0' 4' 2' 6' 1' 5' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestUpdateAdd,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 7' 3' 0' 4' 5' 1' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestUpdateAdd,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 7' 3' 0' 4' 5' 1' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestUpdateAdd,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 7' 3' 0' 4' 5' 1' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestUpdateAdd,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 7' 3' 0' 4' 5' 1' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestUpdateAdd,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 7' 3' 0' 4' 5' 1' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestUpdateAdd,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 7' 3' 0' 4' 5' 1' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The following statement contains a magic number: for (var i = 0; i < 5; i++)              {                  packet.ReadUInt32("RewardFactionId"' i);                  packet.ReadUInt32("RewardFactionValueId"' i);                  packet.ReadUInt32("RewardFactionValueIdOverride"' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The following statement contains a magic number: for (var i = 0; i < 4; i++)              {                  packet.ReadUInt32("CurrencyId"' i);                  packet.ReadUInt32("CurrencyCount"' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The following statement contains a magic number: var questTurnTextWindow = packet.ReadBits(10);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The following statement contains a magic number: var questGiverTargetName = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The following statement contains a magic number: var emoteCount = packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The following statement contains a magic number: var questTitle = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The following statement contains a magic number: var questTurnTargetName = packet.ReadBits(8);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The following statement contains a magic number: var questGiverTextWindow = packet.ReadBits(10);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The following statement contains a magic number: var questOfferRewardText = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The following statement contains a magic number: packet.ParseBitStream(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 7' 6' 4' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 7' 6' 4' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 7' 6' 4' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestOfferReward,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 7' 6' 4' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: var countCurrencies = packet.ReadBits("Number of Required Currencies"' 21);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.StartBitStream(guid' 2' 5' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.StartBitStream(guid' 2' 5' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: var titleLen = packet.ReadBits(9);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: var textLen = packet.ReadBits(12);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.StartBitStream(guid' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: var countItems = packet.ReadBits("Number of Required Items"' 20);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.StartBitStream(guid' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.StartBitStream(guid' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.StartBitStream(guid' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestItems,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestReward,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestReward,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 2' 4' 0' 5' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestReward,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 2' 4' 0' 5' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestReward,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 2' 4' 0' 5' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestReward,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 2' 4' 0' 5' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestReward,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 2' 4' 0' 5' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestReward,The following statement contains a magic number: packet.StartBitStream(guid' 6' 3' 1' 2' 4' 0' 5' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestReward,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 0' 7' 6' 2' 1' 5' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestReward,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 0' 7' 6' 2' 1' 5' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestReward,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 0' 7' 6' 2' 1' 5' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestReward,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 0' 7' 6' 2' 1' 5' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestReward,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 0' 7' 6' 2' 1' 5' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestRequestReward,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 0' 7' 6' 2' 1' 5' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestChooseReward,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestChooseReward,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestChooseReward,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestChooseReward,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestChooseReward,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestChooseReward,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestChooseReward,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestChooseReward,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 2' 5' 7' 0' 3' 6' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestChooseReward,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 2' 5' 7' 0' 3' 6' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestChooseReward,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 2' 5' 7' 0' 3' 6' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestChooseReward,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 2' 5' 7' 0' 3' 6' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestChooseReward,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 2' 5' 7' 0' 3' 6' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestChooseReward,The following statement contains a magic number: packet.ParseBitStream(guid' 1' 2' 5' 7' 0' 3' 6' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestCompleteQuest,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestCompleteQuest,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestCompleteQuest,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestCompleteQuest,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestCompleteQuest,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestCompleteQuest,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestCompleteQuest,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestCompleteQuest,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 2' 1' 4' 3' 6' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestCompleteQuest,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 2' 1' 4' 3' 6' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestCompleteQuest,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 2' 1' 4' 3' 6' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestCompleteQuest,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 2' 1' 4' 3' 6' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestCompleteQuest,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 2' 1' 4' 3' 6' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestCompleteQuest,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 2' 1' 4' 3' 6' 7' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,QuestHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\QuestHandler.cs,HandleQuestPoiQuery,The following statement contains a magic number: var count = packet.ReadBits("Count"' 22);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,ReputationHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\ReputationHandler.cs,HandleForcedReactions,The following statement contains a magic number: var counter = packet.ReadBits("Factions"' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandleMessageOfTheDay,The following statement contains a magic number: var lineCount = packet.ReadBits("Line Count"' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandleMessageOfTheDay,The following statement contains a magic number: for (var i = 0; i < lineCount; i++)                  lineLength[i] = (int)packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.StartBitStream(guid' 1' 4' 7' 3' 2' 6' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.StartBitStream(guid' 1' 4' 7' 3' 2' 6' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.StartBitStream(guid' 1' 4' 7' 3' 2' 6' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.StartBitStream(guid' 1' 4' 7' 3' 2' 6' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.StartBitStream(guid' 1' 4' 7' 3' 2' 6' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.StartBitStream(guid' 1' 4' 7' 3' 2' 6' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 0' 6' 2' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 0' 6' 2' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 0' 6' 2' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 0' 6' 2' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 0' 6' 2' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandlePlayerLogin,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 1' 0' 6' 2' 4' 7' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandleSetTimeZoneInformation,The following statement contains a magic number: var len1 = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandleSetTimeZoneInformation,The following statement contains a magic number: var len2 = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandleLogoutComplete,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandleLogoutComplete,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 1' 4' 6' 7' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandleLogoutComplete,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 1' 4' 6' 7' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandleLogoutComplete,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 1' 4' 6' 7' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandleLogoutComplete,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 1' 4' 6' 7' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandleLogoutComplete,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 1' 4' 6' 7' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandleLogoutComplete,The following statement contains a magic number: packet.StartBitStream(guid' 3' 2' 1' 4' 6' 7' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandleLogoutComplete,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 4' 1' 2' 7' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandleLogoutComplete,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 4' 1' 2' 7' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandleLogoutComplete,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 4' 1' 2' 7' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandleLogoutComplete,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 4' 1' 2' 7' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandleLogoutComplete,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 4' 1' 2' 7' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SessionHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SessionHandler.cs,HandleLogoutComplete,The following statement contains a magic number: packet.ParseBitStream(guid' 6' 4' 1' 2' 7' 3' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid3 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid4 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var transportGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var guid20 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: var archeologyCounter = packet.ReadBits(2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: for (var i = 0; i < archeologyCounter; ++i)                  packet.ReadBits("archeologyType"' 2' i);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid1' 5' 4' 2' 7' 1' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid1' 5' 4' 2' 7' 1' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid1' 5' 4' 2' 7' 1' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid1' 5' 4' 2' 7' 1' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid1' 5' 4' 2' 7' 1' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid1' 5' 4' 2' 7' 1' 6' 3' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(guid2' 1' 3' 5' 0' 2' 6' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(guid2' 1' 3' 5' 0' 2' 6' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(guid2' 1' 3' 5' 0' 2' 6' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(guid2' 1' 3' 5' 0' 2' 6' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(guid2' 1' 3' 5' 0' 2' 6' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(guid2' 1' 3' 5' 0' 2' 6' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  unkMovementLoopCounter = packet.ReadBits(22);                    bit388 = packet.ReadBit(); // v2 + 388                  guid20[4] = packet.ReadBit(); // v2 + 260                    hasTransport = packet.ReadBit(); // v2 + 344                  if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[3] = packet.ReadBit();    // v2 + 299                      transportGUID[5] = packet.ReadBit();    // v2 + 301                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                  }                    bit389 = packet.ReadBit();                  // v2 + 389                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasOrientation = !packet.ReadBit();                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasSplineElevation = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  guid20[0] = packet.ReadBit();               // v2 + 263                  bit412 = packet.ReadBit();                  // v2 + 412                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasUnkMovementField = !packet.ReadBit();    // v2 + 264                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                    guid20[1] = packet.ReadBit();               // v2 + 257                  guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  guid20[5] = packet.ReadBit();               // v2 + 261                    hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMovementFlags2 = !packet.ReadBit();                  if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  unkMovementLoopCounter = packet.ReadBits(22);                    bit388 = packet.ReadBit(); // v2 + 388                  guid20[4] = packet.ReadBit(); // v2 + 260                    hasTransport = packet.ReadBit(); // v2 + 344                  if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[3] = packet.ReadBit();    // v2 + 299                      transportGUID[5] = packet.ReadBit();    // v2 + 301                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                  }                    bit389 = packet.ReadBit();                  // v2 + 389                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasOrientation = !packet.ReadBit();                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasSplineElevation = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  guid20[0] = packet.ReadBit();               // v2 + 263                  bit412 = packet.ReadBit();                  // v2 + 412                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasUnkMovementField = !packet.ReadBit();    // v2 + 264                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                    guid20[1] = packet.ReadBit();               // v2 + 257                  guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  guid20[5] = packet.ReadBit();               // v2 + 261                    hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMovementFlags2 = !packet.ReadBit();                  if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  unkMovementLoopCounter = packet.ReadBits(22);                    bit388 = packet.ReadBit(); // v2 + 388                  guid20[4] = packet.ReadBit(); // v2 + 260                    hasTransport = packet.ReadBit(); // v2 + 344                  if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[3] = packet.ReadBit();    // v2 + 299                      transportGUID[5] = packet.ReadBit();    // v2 + 301                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                  }                    bit389 = packet.ReadBit();                  // v2 + 389                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasOrientation = !packet.ReadBit();                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasSplineElevation = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  guid20[0] = packet.ReadBit();               // v2 + 263                  bit412 = packet.ReadBit();                  // v2 + 412                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasUnkMovementField = !packet.ReadBit();    // v2 + 264                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                    guid20[1] = packet.ReadBit();               // v2 + 257                  guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  guid20[5] = packet.ReadBit();               // v2 + 261                    hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMovementFlags2 = !packet.ReadBit();                  if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  unkMovementLoopCounter = packet.ReadBits(22);                    bit388 = packet.ReadBit(); // v2 + 388                  guid20[4] = packet.ReadBit(); // v2 + 260                    hasTransport = packet.ReadBit(); // v2 + 344                  if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[3] = packet.ReadBit();    // v2 + 299                      transportGUID[5] = packet.ReadBit();    // v2 + 301                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                  }                    bit389 = packet.ReadBit();                  // v2 + 389                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasOrientation = !packet.ReadBit();                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasSplineElevation = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  guid20[0] = packet.ReadBit();               // v2 + 263                  bit412 = packet.ReadBit();                  // v2 + 412                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasUnkMovementField = !packet.ReadBit();    // v2 + 264                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                    guid20[1] = packet.ReadBit();               // v2 + 257                  guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  guid20[5] = packet.ReadBit();               // v2 + 261                    hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMovementFlags2 = !packet.ReadBit();                  if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  unkMovementLoopCounter = packet.ReadBits(22);                    bit388 = packet.ReadBit(); // v2 + 388                  guid20[4] = packet.ReadBit(); // v2 + 260                    hasTransport = packet.ReadBit(); // v2 + 344                  if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[3] = packet.ReadBit();    // v2 + 299                      transportGUID[5] = packet.ReadBit();    // v2 + 301                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                  }                    bit389 = packet.ReadBit();                  // v2 + 389                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasOrientation = !packet.ReadBit();                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasSplineElevation = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  guid20[0] = packet.ReadBit();               // v2 + 263                  bit412 = packet.ReadBit();                  // v2 + 412                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasUnkMovementField = !packet.ReadBit();    // v2 + 264                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                    guid20[1] = packet.ReadBit();               // v2 + 257                  guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  guid20[5] = packet.ReadBit();               // v2 + 261                    hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMovementFlags2 = !packet.ReadBit();                  if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  unkMovementLoopCounter = packet.ReadBits(22);                    bit388 = packet.ReadBit(); // v2 + 388                  guid20[4] = packet.ReadBit(); // v2 + 260                    hasTransport = packet.ReadBit(); // v2 + 344                  if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[3] = packet.ReadBit();    // v2 + 299                      transportGUID[5] = packet.ReadBit();    // v2 + 301                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                  }                    bit389 = packet.ReadBit();                  // v2 + 389                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasOrientation = !packet.ReadBit();                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasSplineElevation = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  guid20[0] = packet.ReadBit();               // v2 + 263                  bit412 = packet.ReadBit();                  // v2 + 412                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasUnkMovementField = !packet.ReadBit();    // v2 + 264                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                    guid20[1] = packet.ReadBit();               // v2 + 257                  guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  guid20[5] = packet.ReadBit();               // v2 + 261                    hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMovementFlags2 = !packet.ReadBit();                  if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  unkMovementLoopCounter = packet.ReadBits(22);                    bit388 = packet.ReadBit(); // v2 + 388                  guid20[4] = packet.ReadBit(); // v2 + 260                    hasTransport = packet.ReadBit(); // v2 + 344                  if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[3] = packet.ReadBit();    // v2 + 299                      transportGUID[5] = packet.ReadBit();    // v2 + 301                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                  }                    bit389 = packet.ReadBit();                  // v2 + 389                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasOrientation = !packet.ReadBit();                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasSplineElevation = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  guid20[0] = packet.ReadBit();               // v2 + 263                  bit412 = packet.ReadBit();                  // v2 + 412                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasUnkMovementField = !packet.ReadBit();    // v2 + 264                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                    guid20[1] = packet.ReadBit();               // v2 + 257                  guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  guid20[5] = packet.ReadBit();               // v2 + 261                    hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMovementFlags2 = !packet.ReadBit();                  if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  unkMovementLoopCounter = packet.ReadBits(22);                    bit388 = packet.ReadBit(); // v2 + 388                  guid20[4] = packet.ReadBit(); // v2 + 260                    hasTransport = packet.ReadBit(); // v2 + 344                  if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[3] = packet.ReadBit();    // v2 + 299                      transportGUID[5] = packet.ReadBit();    // v2 + 301                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                  }                    bit389 = packet.ReadBit();                  // v2 + 389                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasOrientation = !packet.ReadBit();                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasSplineElevation = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  guid20[0] = packet.ReadBit();               // v2 + 263                  bit412 = packet.ReadBit();                  // v2 + 412                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasUnkMovementField = !packet.ReadBit();    // v2 + 264                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                    guid20[1] = packet.ReadBit();               // v2 + 257                  guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  guid20[5] = packet.ReadBit();               // v2 + 261                    hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMovementFlags2 = !packet.ReadBit();                  if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  unkMovementLoopCounter = packet.ReadBits(22);                    bit388 = packet.ReadBit(); // v2 + 388                  guid20[4] = packet.ReadBit(); // v2 + 260                    hasTransport = packet.ReadBit(); // v2 + 344                  if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[3] = packet.ReadBit();    // v2 + 299                      transportGUID[5] = packet.ReadBit();    // v2 + 301                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                  }                    bit389 = packet.ReadBit();                  // v2 + 389                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasOrientation = !packet.ReadBit();                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasSplineElevation = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  guid20[0] = packet.ReadBit();               // v2 + 263                  bit412 = packet.ReadBit();                  // v2 + 412                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasUnkMovementField = !packet.ReadBit();    // v2 + 264                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                    guid20[1] = packet.ReadBit();               // v2 + 257                  guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  guid20[5] = packet.ReadBit();               // v2 + 261                    hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMovementFlags2 = !packet.ReadBit();                  if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  unkMovementLoopCounter = packet.ReadBits(22);                    bit388 = packet.ReadBit(); // v2 + 388                  guid20[4] = packet.ReadBit(); // v2 + 260                    hasTransport = packet.ReadBit(); // v2 + 344                  if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[3] = packet.ReadBit();    // v2 + 299                      transportGUID[5] = packet.ReadBit();    // v2 + 301                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                  }                    bit389 = packet.ReadBit();                  // v2 + 389                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasOrientation = !packet.ReadBit();                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasSplineElevation = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  guid20[0] = packet.ReadBit();               // v2 + 263                  bit412 = packet.ReadBit();                  // v2 + 412                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasUnkMovementField = !packet.ReadBit();    // v2 + 264                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                    guid20[1] = packet.ReadBit();               // v2 + 257                  guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  guid20[5] = packet.ReadBit();               // v2 + 261                    hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMovementFlags2 = !packet.ReadBit();                  if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  unkMovementLoopCounter = packet.ReadBits(22);                    bit388 = packet.ReadBit(); // v2 + 388                  guid20[4] = packet.ReadBit(); // v2 + 260                    hasTransport = packet.ReadBit(); // v2 + 344                  if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[3] = packet.ReadBit();    // v2 + 299                      transportGUID[5] = packet.ReadBit();    // v2 + 301                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                  }                    bit389 = packet.ReadBit();                  // v2 + 389                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasOrientation = !packet.ReadBit();                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasSplineElevation = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  guid20[0] = packet.ReadBit();               // v2 + 263                  bit412 = packet.ReadBit();                  // v2 + 412                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasUnkMovementField = !packet.ReadBit();    // v2 + 264                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                    guid20[1] = packet.ReadBit();               // v2 + 257                  guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  guid20[5] = packet.ReadBit();               // v2 + 261                    hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMovementFlags2 = !packet.ReadBit();                  if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  unkMovementLoopCounter = packet.ReadBits(22);                    bit388 = packet.ReadBit(); // v2 + 388                  guid20[4] = packet.ReadBit(); // v2 + 260                    hasTransport = packet.ReadBit(); // v2 + 344                  if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[3] = packet.ReadBit();    // v2 + 299                      transportGUID[5] = packet.ReadBit();    // v2 + 301                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                  }                    bit389 = packet.ReadBit();                  // v2 + 389                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasOrientation = !packet.ReadBit();                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasSplineElevation = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  guid20[0] = packet.ReadBit();               // v2 + 263                  bit412 = packet.ReadBit();                  // v2 + 412                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasUnkMovementField = !packet.ReadBit();    // v2 + 264                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                    guid20[1] = packet.ReadBit();               // v2 + 257                  guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  guid20[5] = packet.ReadBit();               // v2 + 261                    hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMovementFlags2 = !packet.ReadBit();                  if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  unkMovementLoopCounter = packet.ReadBits(22);                    bit388 = packet.ReadBit(); // v2 + 388                  guid20[4] = packet.ReadBit(); // v2 + 260                    hasTransport = packet.ReadBit(); // v2 + 344                  if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[3] = packet.ReadBit();    // v2 + 299                      transportGUID[5] = packet.ReadBit();    // v2 + 301                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                  }                    bit389 = packet.ReadBit();                  // v2 + 389                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasOrientation = !packet.ReadBit();                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasSplineElevation = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  guid20[0] = packet.ReadBit();               // v2 + 263                  bit412 = packet.ReadBit();                  // v2 + 412                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasUnkMovementField = !packet.ReadBit();    // v2 + 264                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                    guid20[1] = packet.ReadBit();               // v2 + 257                  guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  guid20[5] = packet.ReadBit();               // v2 + 261                    hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMovementFlags2 = !packet.ReadBit();                  if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  unkMovementLoopCounter = packet.ReadBits(22);                    bit388 = packet.ReadBit(); // v2 + 388                  guid20[4] = packet.ReadBit(); // v2 + 260                    hasTransport = packet.ReadBit(); // v2 + 344                  if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[3] = packet.ReadBit();    // v2 + 299                      transportGUID[5] = packet.ReadBit();    // v2 + 301                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                  }                    bit389 = packet.ReadBit();                  // v2 + 389                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasOrientation = !packet.ReadBit();                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasSplineElevation = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  guid20[0] = packet.ReadBit();               // v2 + 263                  bit412 = packet.ReadBit();                  // v2 + 412                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasUnkMovementField = !packet.ReadBit();    // v2 + 264                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                    guid20[1] = packet.ReadBit();               // v2 + 257                  guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  guid20[5] = packet.ReadBit();               // v2 + 261                    hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMovementFlags2 = !packet.ReadBit();                  if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  unkMovementLoopCounter = packet.ReadBits(22);                    bit388 = packet.ReadBit(); // v2 + 388                  guid20[4] = packet.ReadBit(); // v2 + 260                    hasTransport = packet.ReadBit(); // v2 + 344                  if (hasTransport)                  {                      hasTransportTime2 = packet.ReadBit();   // v2 + 332                      transportGUID[7] = packet.ReadBit();    // v2 + 303                      transportGUID[5] = packet.ReadBit();    // v2 + 300                      transportGUID[1] = packet.ReadBit();    // v2 + 297                      transportGUID[0] = packet.ReadBit();    // v2 + 296                      transportGUID[6] = packet.ReadBit();    // v2 + 302                      transportGUID[3] = packet.ReadBit();    // v2 + 299                      transportGUID[5] = packet.ReadBit();    // v2 + 301                      hasTransportTime3 = packet.ReadBit();   // v2 + 340                      transportGUID[2] = packet.ReadBit();    // v2 + 2980                  }                    bit389 = packet.ReadBit();                  // v2 + 389                  guid20[7] = packet.ReadBit();               // v2 + 263                  hasOrientation = !packet.ReadBit();                  guid20[6] = packet.ReadBit();               // v2 + 263                  hasSplineElevation = !packet.ReadBit();                  hasPitch = !packet.ReadBit();                  guid20[0] = packet.ReadBit();               // v2 + 263                  bit412 = packet.ReadBit();                  // v2 + 412                  hasMovementFlags = !packet.ReadBit();       // v2 + 264                  hasTimestamp = !packet.ReadBit();           // v2 + bit272                  hasUnkMovementField = !packet.ReadBit();    // v2 + 264                    if (hasMovementFlags)                      packet.ReadBits("hasMovementFlags"' 30);                    guid20[1] = packet.ReadBit();               // v2 + 257                  guid20[3] = packet.ReadBit();               // v2 + 259                  guid20[2] = packet.ReadBit();               // v2 + 258                  guid20[5] = packet.ReadBit();               // v2 + 261                    hasFallData = packet.ReadBit();                  if (hasFallData)                      hasFallDirection = packet.ReadBit();                    hasMovementFlags2 = !packet.ReadBit();                  if (hasMovementFlags2)                      packet.ReadBits("hasMovementFlags2"' 13);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid3' 1' 0' 7' 4' 6' 5' 3' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid3' 1' 0' 7' 4' 6' 5' 3' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid3' 1' 0' 7' 4' 6' 5' 3' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid3' 1' 0' 7' 4' 6' 5' 3' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid3' 1' 0' 7' 4' 6' 5' 3' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.StartBitStream(guid3' 1' 0' 7' 4' 6' 5' 3' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasSrcLocation)                  packet.StartBitStream(guid4' 4' 5' 3' 0' 7' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasSrcLocation)                  packet.StartBitStream(guid4' 4' 5' 3' 0' 7' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasSrcLocation)                  packet.StartBitStream(guid4' 4' 5' 3' 0' 7' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasSrcLocation)                  packet.StartBitStream(guid4' 4' 5' 3' 0' 7' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasSrcLocation)                  packet.StartBitStream(guid4' 4' 5' 3' 0' 7' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasSrcLocation)                  packet.StartBitStream(guid4' 4' 5' 3' 0' 7' 1' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasTargetMask)                  packet.ReadBitsE<TargetFlag>("Target Flags"' 20);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasCastFlags)                  packet.ReadBits("hasCastFlags"' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasTargetString)                  targetString = packet.ReadBits("hasTargetString"' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 0);      // v2 + 256                    if (hasTransport)                  {                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadSingle("float304");          // v2 + 304                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                        if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                          packet.ReadSingle("float312");          // v2 + 312                      packet.ReadSingle("float308");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                      packet.ReadSingle("float316");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadXORByte(transportGUID' 0);   // v2 + 296                        packet.ReadInt32("Transport Time");     // v2 + 324                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadInt32("FallTime");                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("SinAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("CosAngle");                      }                  }                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.ReadXORByte(guid20' 6);      // v2 + 262                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 1);      // v2 + 257                    if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 0);      // v2 + 256                    if (hasTransport)                  {                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadSingle("float304");          // v2 + 304                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                        if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                          packet.ReadSingle("float312");          // v2 + 312                      packet.ReadSingle("float308");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                      packet.ReadSingle("float316");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadXORByte(transportGUID' 0);   // v2 + 296                        packet.ReadInt32("Transport Time");     // v2 + 324                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadInt32("FallTime");                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("SinAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("CosAngle");                      }                  }                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.ReadXORByte(guid20' 6);      // v2 + 262                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 1);      // v2 + 257                    if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 0);      // v2 + 256                    if (hasTransport)                  {                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadSingle("float304");          // v2 + 304                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                        if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                          packet.ReadSingle("float312");          // v2 + 312                      packet.ReadSingle("float308");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                      packet.ReadSingle("float316");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadXORByte(transportGUID' 0);   // v2 + 296                        packet.ReadInt32("Transport Time");     // v2 + 324                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadInt32("FallTime");                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("SinAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("CosAngle");                      }                  }                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.ReadXORByte(guid20' 6);      // v2 + 262                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 1);      // v2 + 257                    if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 0);      // v2 + 256                    if (hasTransport)                  {                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadSingle("float304");          // v2 + 304                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                        if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                          packet.ReadSingle("float312");          // v2 + 312                      packet.ReadSingle("float308");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                      packet.ReadSingle("float316");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadXORByte(transportGUID' 0);   // v2 + 296                        packet.ReadInt32("Transport Time");     // v2 + 324                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadInt32("FallTime");                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("SinAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("CosAngle");                      }                  }                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.ReadXORByte(guid20' 6);      // v2 + 262                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 1);      // v2 + 257                    if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 0);      // v2 + 256                    if (hasTransport)                  {                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadSingle("float304");          // v2 + 304                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                        if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                          packet.ReadSingle("float312");          // v2 + 312                      packet.ReadSingle("float308");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                      packet.ReadSingle("float316");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadXORByte(transportGUID' 0);   // v2 + 296                        packet.ReadInt32("Transport Time");     // v2 + 324                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadInt32("FallTime");                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("SinAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("CosAngle");                      }                  }                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.ReadXORByte(guid20' 6);      // v2 + 262                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 1);      // v2 + 257                    if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 0);      // v2 + 256                    if (hasTransport)                  {                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadSingle("float304");          // v2 + 304                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                        if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                          packet.ReadSingle("float312");          // v2 + 312                      packet.ReadSingle("float308");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                      packet.ReadSingle("float316");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadXORByte(transportGUID' 0);   // v2 + 296                        packet.ReadInt32("Transport Time");     // v2 + 324                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadInt32("FallTime");                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("SinAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("CosAngle");                      }                  }                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.ReadXORByte(guid20' 6);      // v2 + 262                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 1);      // v2 + 257                    if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 0);      // v2 + 256                    if (hasTransport)                  {                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadSingle("float304");          // v2 + 304                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                        if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                          packet.ReadSingle("float312");          // v2 + 312                      packet.ReadSingle("float308");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                      packet.ReadSingle("float316");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadXORByte(transportGUID' 0);   // v2 + 296                        packet.ReadInt32("Transport Time");     // v2 + 324                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadInt32("FallTime");                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("SinAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("CosAngle");                      }                  }                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.ReadXORByte(guid20' 6);      // v2 + 262                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 1);      // v2 + 257                    if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 0);      // v2 + 256                    if (hasTransport)                  {                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadSingle("float304");          // v2 + 304                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                        if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                          packet.ReadSingle("float312");          // v2 + 312                      packet.ReadSingle("float308");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                      packet.ReadSingle("float316");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadXORByte(transportGUID' 0);   // v2 + 296                        packet.ReadInt32("Transport Time");     // v2 + 324                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadInt32("FallTime");                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("SinAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("CosAngle");                      }                  }                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.ReadXORByte(guid20' 6);      // v2 + 262                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 1);      // v2 + 257                    if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 0);      // v2 + 256                    if (hasTransport)                  {                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadSingle("float304");          // v2 + 304                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                        if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                          packet.ReadSingle("float312");          // v2 + 312                      packet.ReadSingle("float308");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                      packet.ReadSingle("float316");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadXORByte(transportGUID' 0);   // v2 + 296                        packet.ReadInt32("Transport Time");     // v2 + 324                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadInt32("FallTime");                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("SinAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("CosAngle");                      }                  }                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.ReadXORByte(guid20' 6);      // v2 + 262                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 1);      // v2 + 257                    if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 0);      // v2 + 256                    if (hasTransport)                  {                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadSingle("float304");          // v2 + 304                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                        if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                          packet.ReadSingle("float312");          // v2 + 312                      packet.ReadSingle("float308");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                      packet.ReadSingle("float316");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadXORByte(transportGUID' 0);   // v2 + 296                        packet.ReadInt32("Transport Time");     // v2 + 324                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadInt32("FallTime");                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("SinAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("CosAngle");                      }                  }                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.ReadXORByte(guid20' 6);      // v2 + 262                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 1);      // v2 + 257                    if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 0);      // v2 + 256                    if (hasTransport)                  {                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadSingle("float304");          // v2 + 304                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                        if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                          packet.ReadSingle("float312");          // v2 + 312                      packet.ReadSingle("float308");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                      packet.ReadSingle("float316");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadXORByte(transportGUID' 0);   // v2 + 296                        packet.ReadInt32("Transport Time");     // v2 + 324                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadInt32("FallTime");                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("SinAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("CosAngle");                      }                  }                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.ReadXORByte(guid20' 6);      // v2 + 262                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 1);      // v2 + 257                    if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasMovement)              {                  packet.ReadSingle("Position X");      // v2 + 276                  packet.ReadXORByte(guid20' 0);      // v2 + 256                    if (hasTransport)                  {                      packet.ReadXORByte(transportGUID' 2);   // v2 + 298                      packet.ReadByte("Transport Seat");      // v2 + 320                      packet.ReadXORByte(transportGUID' 3);   // v2 + 299                      packet.ReadXORByte(transportGUID' 7);   // v2 + 303                      packet.ReadSingle("float304");          // v2 + 304                      packet.ReadXORByte(transportGUID' 5);   // v2 + 301                        if (hasTransportTime3)                          packet.ReadInt32("hasTransportTime3");                          packet.ReadSingle("float312");          // v2 + 312                      packet.ReadSingle("float308");          // v2 + 308                      packet.ReadXORByte(transportGUID' 6);   // v2 + 302                      packet.ReadXORByte(transportGUID' 1);   // v2 + 297                      packet.ReadSingle("float316");          // v2 + 316                      packet.ReadXORByte(transportGUID' 4);   // v2 + 300                        if (hasTransportTime2)                          packet.ReadInt32("hasTransportTime2");                        packet.ReadXORByte(transportGUID' 0);   // v2 + 296                        packet.ReadInt32("Transport Time");     // v2 + 324                        packet.WriteGuid("Transport GUID"' transportGUID);                  }                    packet.ReadXORByte(guid20' 5);      // v2 + 256                    if (hasFallData)                  {                      packet.ReadInt32("FallTime");                      packet.ReadSingle("Z Speed");                        if (hasFallDirection)                      {                          packet.ReadSingle("SinAngle");                          packet.ReadSingle("XY Speed");                          packet.ReadSingle("CosAngle");                      }                  }                    if (hasSplineElevation)                      packet.ReadSingle("SplineElevation");   // v2 + 384                    packet.ReadXORByte(guid20' 6);      // v2 + 262                    if (hasUnkMovementField)                      packet.ReadInt32("Int408");     // v2 + 408                    packet.ReadXORByte(guid20' 4);      // v2 + 260                    if (hasOrientation)                      packet.ReadSingle("Orientation");   // v2 + 288                    if (hasTimestamp)                      packet.ReadInt32("hasTimestamp");   // v2 + 288                    packet.ReadXORByte(guid20' 1);      // v2 + 257                    if (hasPitch)                      packet.ReadSingle("Pitch");     // v2 + 352                    packet.ReadXORByte(guid20' 3);      // v2 + 260                    for (var i = 0; i < unkMovementLoopCounter; ++i)                      packet.ReadInt32("MovementLoopCounter"' i);                    packet.ReadSingle("Position Y");    // v2 + 280                  packet.ReadXORByte(guid20' 7);      // v2 + 260                  packet.ReadSingle("Position Z");    // v2 + 284                  packet.ReadXORByte(guid20' 2);      // v2 + 258                    packet.WriteGuid("Guid20"' guid20);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid3' 4' 2' 1' 5' 7' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid3' 4' 2' 1' 5' 7' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid3' 4' 2' 1' 5' 7' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid3' 4' 2' 1' 5' 7' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid3' 4' 2' 1' 5' 7' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid3' 4' 2' 1' 5' 7' 3' 6' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasDestLocation)              {                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Position Y");                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 6);                    packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasDestLocation)              {                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Position Y");                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 6);                    packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasDestLocation)              {                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Position Y");                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 6);                    packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasDestLocation)              {                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Position Y");                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 6);                    packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasDestLocation)              {                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Position Y");                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 6);                    packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasDestLocation)              {                  packet.ReadXORByte(guid2' 2);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(guid2' 4);                  packet.ReadXORByte(guid2' 1);                  packet.ReadXORByte(guid2' 0);                  packet.ReadXORByte(guid2' 3);                  packet.ReadSingle("Position Y");                  packet.ReadXORByte(guid2' 7);                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(guid2' 5);                  packet.ReadXORByte(guid2' 6);                    packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid1' 3' 4' 7' 6' 2' 0' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid1' 3' 4' 7' 6' 2' 0' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid1' 3' 4' 7' 6' 2' 0' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid1' 3' 4' 7' 6' 2' 0' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid1' 3' 4' 7' 6' 2' 0' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: packet.ParseBitStream(guid1' 3' 4' 7' 6' 2' 0' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasSrcLocation)              {                  packet.ReadSingle("Position Y");                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 7);                  packet.ReadXORByte(guid4' 6);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 4);                  packet.ReadSingle("Position Z");                    packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasSrcLocation)              {                  packet.ReadSingle("Position Y");                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 7);                  packet.ReadXORByte(guid4' 6);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 4);                  packet.ReadSingle("Position Z");                    packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasSrcLocation)              {                  packet.ReadSingle("Position Y");                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 7);                  packet.ReadXORByte(guid4' 6);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 4);                  packet.ReadSingle("Position Z");                    packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasSrcLocation)              {                  packet.ReadSingle("Position Y");                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 7);                  packet.ReadXORByte(guid4' 6);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 4);                  packet.ReadSingle("Position Z");                    packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasSrcLocation)              {                  packet.ReadSingle("Position Y");                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 7);                  packet.ReadXORByte(guid4' 6);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 4);                  packet.ReadSingle("Position Z");                    packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastSpell,The following statement contains a magic number: if (hasSrcLocation)              {                  packet.ReadSingle("Position Y");                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 7);                  packet.ReadXORByte(guid4' 6);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(guid4' 3);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 4);                  packet.ReadSingle("Position Z");                    packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var casterGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var casterUnitGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var itemTargetGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid4 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid5 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var unkGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var targetGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: var guid8 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: uint bits44 = packet.ReadBits("bits44"' 24);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: casterGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < bits44; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 1' 0' 7' 2' 4' 3' 6' 5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < bits44; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 1' 0' 7' 2' 4' 3' 6' 5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < bits44; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 1' 0' 7' 2' 4' 3' 6' 5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < bits44; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 1' 0' 7' 2' 4' 3' 6' 5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < bits44; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 1' 0' 7' 2' 4' 3' 6' 5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < bits44; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 1' 0' 7' 2' 4' 3' 6' 5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < bits44; ++i)              {                  guid9[i] = new byte[8];                  packet.StartBitStream(guid9[i]' 1' 0' 7' 2' 4' 3' 6' 5);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: casterUnitGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: casterGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: int runeCooldownPassedCount = (int)packet.ReadBits(3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: casterUnitGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: casterUnitGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: int missTypeCount = (int)packet.ReadBits(25);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: int bits11 = (int)packet.ReadBits(13);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: casterGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: int hitcountPos = (int)packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: casterUnitGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < hitcountPos; ++i)              {                  guid11[i] = new byte[8];                  packet.StartBitStream(guid11[i]' 5' 0' 3' 4' 7' 2' 6' 1);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < hitcountPos; ++i)              {                  guid11[i] = new byte[8];                  packet.StartBitStream(guid11[i]' 5' 0' 3' 4' 7' 2' 6' 1);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < hitcountPos; ++i)              {                  guid11[i] = new byte[8];                  packet.StartBitStream(guid11[i]' 5' 0' 3' 4' 7' 2' 6' 1);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < hitcountPos; ++i)              {                  guid11[i] = new byte[8];                  packet.StartBitStream(guid11[i]' 5' 0' 3' 4' 7' 2' 6' 1);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < hitcountPos; ++i)              {                  guid11[i] = new byte[8];                  packet.StartBitStream(guid11[i]' 5' 0' 3' 4' 7' 2' 6' 1);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < hitcountPos; ++i)              {                  guid11[i] = new byte[8];                  packet.StartBitStream(guid11[i]' 5' 0' 3' 4' 7' 2' 6' 1);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < hitcountPos; ++i)              {                  guid11[i] = new byte[8];                  packet.StartBitStream(guid11[i]' 5' 0' 3' 4' 7' 2' 6' 1);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: int predictedPowerCount = (int)packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(itemTargetGUID' 3' 0' 1' 7' 2' 6' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(itemTargetGUID' 3' 0' 1' 7' 2' 6' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(itemTargetGUID' 3' 0' 1' 7' 2' 6' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(itemTargetGUID' 3' 0' 1' 7' 2' 6' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(itemTargetGUID' 3' 0' 1' 7' 2' 6' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(itemTargetGUID' 3' 0' 1' 7' 2' 6' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: casterGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(guid4' 1' 6' 2' 7' 0' 3' 5' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(guid4' 1' 6' 2' 7' 0' 3' 5' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(guid4' 1' 6' 2' 7' 0' 3' 5' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(guid4' 1' 6' 2' 7' 0' 3' 5' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(guid4' 1' 6' 2' 7' 0' 3' 5' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(guid4' 1' 6' 2' 7' 0' 3' 5' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceLocation)                  packet.StartBitStream(guid5' 4' 3' 5' 1' 7' 0' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceLocation)                  packet.StartBitStream(guid5' 4' 3' 5' 1' 7' 0' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceLocation)                  packet.StartBitStream(guid5' 4' 3' 5' 1' 7' 0' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceLocation)                  packet.StartBitStream(guid5' 4' 3' 5' 1' 7' 0' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceLocation)                  packet.StartBitStream(guid5' 4' 3' 5' 1' 7' 0' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceLocation)                  packet.StartBitStream(guid5' 4' 3' 5' 1' 7' 0' 6' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: casterGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(unkGUID' 2' 1' 7' 6' 0' 5' 3' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(unkGUID' 2' 1' 7' 6' 0' 5' 3' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(unkGUID' 2' 1' 7' 6' 0' 5' 3' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(unkGUID' 2' 1' 7' 6' 0' 5' 3' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(unkGUID' 2' 1' 7' 6' 0' 5' 3' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(unkGUID' 2' 1' 7' 6' 0' 5' 3' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasTargetFlags)                  packet.ReadBitsE<TargetFlag>("Target Flags"' 20);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: casterUnitGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: int extraTargetCount = (int)packet.ReadBits("extraTargetCount"' 20);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < extraTargetCount; ++i) //388              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 1' 6' 2' 3' 5' 7' 0' 4); //98+              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < extraTargetCount; ++i) //388              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 1' 6' 2' 3' 5' 7' 0' 4); //98+              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < extraTargetCount; ++i) //388              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 1' 6' 2' 3' 5' 7' 0' 4); //98+              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < extraTargetCount; ++i) //388              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 1' 6' 2' 3' 5' 7' 0' 4); //98+              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < extraTargetCount; ++i) //388              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 1' 6' 2' 3' 5' 7' 0' 4); //98+              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < extraTargetCount; ++i) //388              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 1' 6' 2' 3' 5' 7' 0' 4); //98+              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < extraTargetCount; ++i) //388              {                  guid10[i] = new byte[8];                  packet.StartBitStream(guid10[i]' 1' 6' 2' 3' 5' 7' 0' 4); //98+              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(targetGUID' 1' 4' 6' 7' 5' 3' 0' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(targetGUID' 1' 4' 6' 7' 5' 3' 0' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(targetGUID' 1' 4' 6' 7' 5' 3' 0' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(targetGUID' 1' 4' 6' 7' 5' 3' 0' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(targetGUID' 1' 4' 6' 7' 5' 3' 0' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.StartBitStream(targetGUID' 1' 4' 6' 7' 5' 3' 0' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: casterUnitGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasTargetString)                  bitsC0 = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < missTypeCount; ++i)              {                  if (packet.ReadBits("bits22[0]"' 4' i) == 11)                      packet.ReadBits("bits22[1]"' 4' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < missTypeCount; ++i)              {                  if (packet.ReadBits("bits22[0]"' 4' i) == 11)                      packet.ReadBits("bits22[1]"' 4' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < missTypeCount; ++i)              {                  if (packet.ReadBits("bits22[0]"' 4' i) == 11)                      packet.ReadBits("bits22[1]"' 4' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: casterGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(itemTargetGUID' 1' 7' 6' 0' 4' 2' 3' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(itemTargetGUID' 1' 7' 6' 0' 4' 2' 3' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(itemTargetGUID' 1' 7' 6' 0' 4' 2' 3' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(itemTargetGUID' 1' 7' 6' 0' 4' 2' 3' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(itemTargetGUID' 1' 7' 6' 0' 4' 2' 3' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(itemTargetGUID' 1' 7' 6' 0' 4' 2' 3' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < hitcountPos; ++i)              {                  packet.ParseBitStream(guid11[i]' 4' 5' 3' 0' 6' 2' 1' 7);//14+                  packet.WriteGuid("Guid11"' guid11[i]);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < hitcountPos; ++i)              {                  packet.ParseBitStream(guid11[i]' 4' 5' 3' 0' 6' 2' 1' 7);//14+                  packet.WriteGuid("Guid11"' guid11[i]);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < hitcountPos; ++i)              {                  packet.ParseBitStream(guid11[i]' 4' 5' 3' 0' 6' 2' 1' 7);//14+                  packet.WriteGuid("Guid11"' guid11[i]);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < hitcountPos; ++i)              {                  packet.ParseBitStream(guid11[i]' 4' 5' 3' 0' 6' 2' 1' 7);//14+                  packet.WriteGuid("Guid11"' guid11[i]);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < hitcountPos; ++i)              {                  packet.ParseBitStream(guid11[i]' 4' 5' 3' 0' 6' 2' 1' 7);//14+                  packet.WriteGuid("Guid11"' guid11[i]);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < hitcountPos; ++i)              {                  packet.ParseBitStream(guid11[i]' 4' 5' 3' 0' 6' 2' 1' 7);//14+                  packet.WriteGuid("Guid11"' guid11[i]);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 4' 5' 1' 7' 6' 3' 2' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 4' 5' 1' 7' 6' 3' 2' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 4' 5' 1' 7' 6' 3' 2' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 4' 5' 1' 7' 6' 3' 2' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 4' 5' 1' 7' 6' 3' 2' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 4' 5' 1' 7' 6' 3' 2' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(unkGUID' 4' 5' 3' 2' 1' 6' 7' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(unkGUID' 4' 5' 3' 2' 1' 6' 7' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(unkGUID' 4' 5' 3' 2' 1' 6' 7' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(unkGUID' 4' 5' 3' 2' 1' 6' 7' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(unkGUID' 4' 5' 3' 2' 1' 6' 7' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ParseBitStream(unkGUID' 4' 5' 3' 2' 1' 6' 7' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasDestLocation)              {                  packet.ReadXORByte(guid4' 4); //160-167                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 7);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 3);                  packet.ReadSingle("Position Y");                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(guid4' 6);                  packet.ReadSingle("Position X");                  packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasDestLocation)              {                  packet.ReadXORByte(guid4' 4); //160-167                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 7);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 3);                  packet.ReadSingle("Position Y");                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(guid4' 6);                  packet.ReadSingle("Position X");                  packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasDestLocation)              {                  packet.ReadXORByte(guid4' 4); //160-167                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 7);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 3);                  packet.ReadSingle("Position Y");                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(guid4' 6);                  packet.ReadSingle("Position X");                  packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasDestLocation)              {                  packet.ReadXORByte(guid4' 4); //160-167                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 7);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 3);                  packet.ReadSingle("Position Y");                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(guid4' 6);                  packet.ReadSingle("Position X");                  packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasDestLocation)              {                  packet.ReadXORByte(guid4' 4); //160-167                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 7);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 3);                  packet.ReadSingle("Position Y");                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(guid4' 6);                  packet.ReadSingle("Position X");                  packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasDestLocation)              {                  packet.ReadXORByte(guid4' 4); //160-167                  packet.ReadXORByte(guid4' 0);                  packet.ReadXORByte(guid4' 5);                  packet.ReadXORByte(guid4' 7);                  packet.ReadXORByte(guid4' 1);                  packet.ReadXORByte(guid4' 2);                  packet.ReadXORByte(guid4' 3);                  packet.ReadSingle("Position Y");                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(guid4' 6);                  packet.ReadSingle("Position X");                  packet.WriteGuid("Guid4"' guid4);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < extraTargetCount; ++i)              {                  packet.ReadXORByte(guid10[i]' 0); //98+                  packet.ReadSingle("Float186");                  packet.ReadXORByte(guid10[i]' 1);                  packet.ReadXORByte(guid10[i]' 5);                  packet.ReadXORByte(guid10[i]' 4);                  packet.ReadXORByte(guid10[i]' 7);                  packet.ReadSingle("Float187");                  packet.ReadXORByte(guid10[i]' 3);                  packet.ReadSingle("Float188");                  packet.ReadXORByte(guid10[i]' 6);                  packet.ReadXORByte(guid10[i]' 2);                    packet.WriteGuid("Guid10"' guid10[i]);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < extraTargetCount; ++i)              {                  packet.ReadXORByte(guid10[i]' 0); //98+                  packet.ReadSingle("Float186");                  packet.ReadXORByte(guid10[i]' 1);                  packet.ReadXORByte(guid10[i]' 5);                  packet.ReadXORByte(guid10[i]' 4);                  packet.ReadXORByte(guid10[i]' 7);                  packet.ReadSingle("Float187");                  packet.ReadXORByte(guid10[i]' 3);                  packet.ReadSingle("Float188");                  packet.ReadXORByte(guid10[i]' 6);                  packet.ReadXORByte(guid10[i]' 2);                    packet.WriteGuid("Guid10"' guid10[i]);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < extraTargetCount; ++i)              {                  packet.ReadXORByte(guid10[i]' 0); //98+                  packet.ReadSingle("Float186");                  packet.ReadXORByte(guid10[i]' 1);                  packet.ReadXORByte(guid10[i]' 5);                  packet.ReadXORByte(guid10[i]' 4);                  packet.ReadXORByte(guid10[i]' 7);                  packet.ReadSingle("Float187");                  packet.ReadXORByte(guid10[i]' 3);                  packet.ReadSingle("Float188");                  packet.ReadXORByte(guid10[i]' 6);                  packet.ReadXORByte(guid10[i]' 2);                    packet.WriteGuid("Guid10"' guid10[i]);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < extraTargetCount; ++i)              {                  packet.ReadXORByte(guid10[i]' 0); //98+                  packet.ReadSingle("Float186");                  packet.ReadXORByte(guid10[i]' 1);                  packet.ReadXORByte(guid10[i]' 5);                  packet.ReadXORByte(guid10[i]' 4);                  packet.ReadXORByte(guid10[i]' 7);                  packet.ReadSingle("Float187");                  packet.ReadXORByte(guid10[i]' 3);                  packet.ReadSingle("Float188");                  packet.ReadXORByte(guid10[i]' 6);                  packet.ReadXORByte(guid10[i]' 2);                    packet.WriteGuid("Guid10"' guid10[i]);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < extraTargetCount; ++i)              {                  packet.ReadXORByte(guid10[i]' 0); //98+                  packet.ReadSingle("Float186");                  packet.ReadXORByte(guid10[i]' 1);                  packet.ReadXORByte(guid10[i]' 5);                  packet.ReadXORByte(guid10[i]' 4);                  packet.ReadXORByte(guid10[i]' 7);                  packet.ReadSingle("Float187");                  packet.ReadXORByte(guid10[i]' 3);                  packet.ReadSingle("Float188");                  packet.ReadXORByte(guid10[i]' 6);                  packet.ReadXORByte(guid10[i]' 2);                    packet.WriteGuid("Guid10"' guid10[i]);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < extraTargetCount; ++i)              {                  packet.ReadXORByte(guid10[i]' 0); //98+                  packet.ReadSingle("Float186");                  packet.ReadXORByte(guid10[i]' 1);                  packet.ReadXORByte(guid10[i]' 5);                  packet.ReadXORByte(guid10[i]' 4);                  packet.ReadXORByte(guid10[i]' 7);                  packet.ReadSingle("Float187");                  packet.ReadXORByte(guid10[i]' 3);                  packet.ReadSingle("Float188");                  packet.ReadXORByte(guid10[i]' 6);                  packet.ReadXORByte(guid10[i]' 2);                    packet.WriteGuid("Guid10"' guid10[i]);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceLocation)              {                  packet.ReadXORByte(unkGUID' 0); //128-135                  packet.ReadXORByte(unkGUID' 5);                  packet.ReadXORByte(unkGUID' 4);                  packet.ReadXORByte(unkGUID' 7);                  packet.ReadXORByte(unkGUID' 3);                  packet.ReadXORByte(unkGUID' 6);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(unkGUID' 2);                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(unkGUID' 1);                  packet.ReadSingle("Position Y");                  packet.WriteGuid("Guid6"' unkGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceLocation)              {                  packet.ReadXORByte(unkGUID' 0); //128-135                  packet.ReadXORByte(unkGUID' 5);                  packet.ReadXORByte(unkGUID' 4);                  packet.ReadXORByte(unkGUID' 7);                  packet.ReadXORByte(unkGUID' 3);                  packet.ReadXORByte(unkGUID' 6);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(unkGUID' 2);                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(unkGUID' 1);                  packet.ReadSingle("Position Y");                  packet.WriteGuid("Guid6"' unkGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceLocation)              {                  packet.ReadXORByte(unkGUID' 0); //128-135                  packet.ReadXORByte(unkGUID' 5);                  packet.ReadXORByte(unkGUID' 4);                  packet.ReadXORByte(unkGUID' 7);                  packet.ReadXORByte(unkGUID' 3);                  packet.ReadXORByte(unkGUID' 6);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(unkGUID' 2);                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(unkGUID' 1);                  packet.ReadSingle("Position Y");                  packet.WriteGuid("Guid6"' unkGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceLocation)              {                  packet.ReadXORByte(unkGUID' 0); //128-135                  packet.ReadXORByte(unkGUID' 5);                  packet.ReadXORByte(unkGUID' 4);                  packet.ReadXORByte(unkGUID' 7);                  packet.ReadXORByte(unkGUID' 3);                  packet.ReadXORByte(unkGUID' 6);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(unkGUID' 2);                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(unkGUID' 1);                  packet.ReadSingle("Position Y");                  packet.WriteGuid("Guid6"' unkGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceLocation)              {                  packet.ReadXORByte(unkGUID' 0); //128-135                  packet.ReadXORByte(unkGUID' 5);                  packet.ReadXORByte(unkGUID' 4);                  packet.ReadXORByte(unkGUID' 7);                  packet.ReadXORByte(unkGUID' 3);                  packet.ReadXORByte(unkGUID' 6);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(unkGUID' 2);                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(unkGUID' 1);                  packet.ReadSingle("Position Y");                  packet.WriteGuid("Guid6"' unkGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: if (hasSourceLocation)              {                  packet.ReadXORByte(unkGUID' 0); //128-135                  packet.ReadXORByte(unkGUID' 5);                  packet.ReadXORByte(unkGUID' 4);                  packet.ReadXORByte(unkGUID' 7);                  packet.ReadXORByte(unkGUID' 3);                  packet.ReadXORByte(unkGUID' 6);                  packet.ReadSingle("Position X");                  packet.ReadXORByte(unkGUID' 2);                  packet.ReadSingle("Position Z");                  packet.ReadXORByte(unkGUID' 1);                  packet.ReadSingle("Position Y");                  packet.WriteGuid("Guid6"' unkGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid9[i]' 4' 2' 0' 6' 1' 7' 3' 5); //18+                  packet.WriteGuid("Guid9"' guid9[i]);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid9[i]' 4' 2' 0' 6' 1' 7' 3' 5); //18+                  packet.WriteGuid("Guid9"' guid9[i]);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid9[i]' 4' 2' 0' 6' 1' 7' 3' 5); //18+                  packet.WriteGuid("Guid9"' guid9[i]);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid9[i]' 4' 2' 0' 6' 1' 7' 3' 5); //18+                  packet.WriteGuid("Guid9"' guid9[i]);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid9[i]' 4' 2' 0' 6' 1' 7' 3' 5); //18+                  packet.WriteGuid("Guid9"' guid9[i]);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: for (int i = 0; i < bits44; ++i)              {                  packet.ParseBitStream(guid9[i]' 4' 2' 0' 6' 1' 7' 3' 5); //18+                  packet.WriteGuid("Guid9"' guid9[i]);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(casterUnitGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(casterUnitGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(casterUnitGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(casterUnitGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(casterUnitGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(casterUnitGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellStart,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var casterUnitGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var casterGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var targetGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var itemTargetGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var sourceLocationTargetGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var unkGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var destLocationTargetGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: casterGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: casterUnitGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceLocation)                  packet.StartBitStream(sourceLocationTargetGUID' 3' 7' 4' 2' 0' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceLocation)                  packet.StartBitStream(sourceLocationTargetGUID' 3' 7' 4' 2' 0' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceLocation)                  packet.StartBitStream(sourceLocationTargetGUID' 3' 7' 4' 2' 0' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceLocation)                  packet.StartBitStream(sourceLocationTargetGUID' 3' 7' 4' 2' 0' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceLocation)                  packet.StartBitStream(sourceLocationTargetGUID' 3' 7' 4' 2' 0' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceLocation)                  packet.StartBitStream(sourceLocationTargetGUID' 3' 7' 4' 2' 0' 6' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: casterUnitGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: casterGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var bits1A4 = (int)packet.ReadBits(20);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var missTypeCount = packet.ReadBits(25);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var bits64 = (int)packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var bits4C = (int)packet.ReadBits(13);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  guid6[i] = new byte[8];                  packet.StartBitStream(guid6[i]' 1' 3' 6' 4' 5' 2' 0' 7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  guid6[i] = new byte[8];                  packet.StartBitStream(guid6[i]' 1' 3' 6' 4' 5' 2' 0' 7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  guid6[i] = new byte[8];                  packet.StartBitStream(guid6[i]' 1' 3' 6' 4' 5' 2' 0' 7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  guid6[i] = new byte[8];                  packet.StartBitStream(guid6[i]' 1' 3' 6' 4' 5' 2' 0' 7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  guid6[i] = new byte[8];                  packet.StartBitStream(guid6[i]' 1' 3' 6' 4' 5' 2' 0' 7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  guid6[i] = new byte[8];                  packet.StartBitStream(guid6[i]' 1' 3' 6' 4' 5' 2' 0' 7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  guid6[i] = new byte[8];                  packet.StartBitStream(guid6[i]' 1' 3' 6' 4' 5' 2' 0' 7);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 2' 5' 6' 1' 4' 0' 7' 3);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 2' 5' 6' 1' 4' 0' 7' 3);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 2' 5' 6' 1' 4' 0' 7' 3);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 2' 5' 6' 1' 4' 0' 7' 3);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 2' 5' 6' 1' 4' 0' 7' 3);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 2' 5' 6' 1' 4' 0' 7' 3);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  guid7[i] = new byte[8];                  packet.StartBitStream(guid7[i]' 2' 5' 6' 1' 4' 0' 7' 3);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: casterGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(itemTargetGUID' 7' 2' 1' 3' 6' 0' 5' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(itemTargetGUID' 7' 2' 1' 3' 6' 0' 5' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(itemTargetGUID' 7' 2' 1' 3' 6' 0' 5' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(itemTargetGUID' 7' 2' 1' 3' 6' 0' 5' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(itemTargetGUID' 7' 2' 1' 3' 6' 0' 5' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(itemTargetGUID' 7' 2' 1' 3' 6' 0' 5' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: casterUnitGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(targetGUID' 0' 6' 5' 7' 4' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(targetGUID' 0' 6' 5' 7' 4' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(targetGUID' 0' 6' 5' 7' 4' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(targetGUID' 0' 6' 5' 7' 4' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(targetGUID' 0' 6' 5' 7' 4' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(targetGUID' 0' 6' 5' 7' 4' 2' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var predictedPowerCount = packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: casterGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasTargetString)                  targetString = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: casterGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(unkGUID' 7' 6' 1' 2' 0' 5' 3' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(unkGUID' 7' 6' 1' 2' 0' 5' 3' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(unkGUID' 7' 6' 1' 2' 0' 5' 3' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(unkGUID' 7' 6' 1' 2' 0' 5' 3' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(unkGUID' 7' 6' 1' 2' 0' 5' 3' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.StartBitStream(unkGUID' 7' 6' 1' 2' 0' 5' 3' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var runeCooldownPassedCount = packet.ReadBits(3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < missTypeCount; ++i)              {                  if (packet.ReadBits("bits22[0]"' 4' i) == 11)                      packet.ReadBits("bits22[1]"' 4' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < missTypeCount; ++i)              {                  if (packet.ReadBits("bits22[0]"' 4' i) == 11)                      packet.ReadBits("bits22[1]"' 4' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < missTypeCount; ++i)              {                  if (packet.ReadBits("bits22[0]"' 4' i) == 11)                      packet.ReadBits("bits22[1]"' 4' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasTargetMask)                  packet.ReadBitsE<TargetFlag>("Target Flags"' 20);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasPowerData)                  predictedPowerCount = packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: casterUnitGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: casterUnitGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: var bits54 = (int)packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(destLocationTargetGUID' 0' 3' 2' 1' 4' 5' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(destLocationTargetGUID' 0' 3' 2' 1' 4' 5' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(destLocationTargetGUID' 0' 3' 2' 1' 4' 5' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(destLocationTargetGUID' 0' 3' 2' 1' 4' 5' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(destLocationTargetGUID' 0' 3' 2' 1' 4' 5' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)                  packet.StartBitStream(destLocationTargetGUID' 0' 3' 2' 1' 4' 5' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: casterGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  guid8[i] = new byte[8];                  packet.StartBitStream(guid8[i]' 2' 7' 1' 6' 4' 5' 0' 3);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  guid8[i] = new byte[8];                  packet.StartBitStream(guid8[i]' 2' 7' 1' 6' 4' 5' 0' 3);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  guid8[i] = new byte[8];                  packet.StartBitStream(guid8[i]' 2' 7' 1' 6' 4' 5' 0' 3);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  guid8[i] = new byte[8];                  packet.StartBitStream(guid8[i]' 2' 7' 1' 6' 4' 5' 0' 3);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  guid8[i] = new byte[8];                  packet.StartBitStream(guid8[i]' 2' 7' 1' 6' 4' 5' 0' 3);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  guid8[i] = new byte[8];                  packet.StartBitStream(guid8[i]' 2' 7' 1' 6' 4' 5' 0' 3);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  guid8[i] = new byte[8];                  packet.StartBitStream(guid8[i]' 2' 7' 1' 6' 4' 5' 0' 3);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: casterUnitGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 5' 2' 1' 6' 0' 3' 4' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 5' 2' 1' 6' 0' 3' 4' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 5' 2' 1' 6' 0' 3' 4' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 5' 2' 1' 6' 0' 3' 4' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 5' 2' 1' 6' 0' 3' 4' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(targetGUID' 5' 2' 1' 6' 0' 3' 4' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(itemTargetGUID' 5' 2' 0' 6' 7' 3' 1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(itemTargetGUID' 5' 2' 0' 6' 7' 3' 1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(itemTargetGUID' 5' 2' 0' 6' 7' 3' 1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(itemTargetGUID' 5' 2' 0' 6' 7' 3' 1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(itemTargetGUID' 5' 2' 0' 6' 7' 3' 1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(itemTargetGUID' 5' 2' 0' 6' 7' 3' 1' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(casterUnitGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  packet.ReadXORByte(guid7[i]' 3);                  packet.ReadXORByte(guid7[i]' 1);                  packet.ReadXORByte(guid7[i]' 0);                  packet.ReadXORByte(guid7[i]' 4);                  packet.ReadXORByte(guid7[i]' 7);                  packet.ReadSingle("FloatED"' i);                  packet.ReadXORByte(guid7[i]' 5);                  packet.ReadSingle("FloatED"' i);                  packet.ReadXORByte(guid7[i]' 6);                  packet.ReadSingle("FloatED"' i);                  packet.ReadXORByte(guid7[i]' 2);                    packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  packet.ReadXORByte(guid7[i]' 3);                  packet.ReadXORByte(guid7[i]' 1);                  packet.ReadXORByte(guid7[i]' 0);                  packet.ReadXORByte(guid7[i]' 4);                  packet.ReadXORByte(guid7[i]' 7);                  packet.ReadSingle("FloatED"' i);                  packet.ReadXORByte(guid7[i]' 5);                  packet.ReadSingle("FloatED"' i);                  packet.ReadXORByte(guid7[i]' 6);                  packet.ReadSingle("FloatED"' i);                  packet.ReadXORByte(guid7[i]' 2);                    packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  packet.ReadXORByte(guid7[i]' 3);                  packet.ReadXORByte(guid7[i]' 1);                  packet.ReadXORByte(guid7[i]' 0);                  packet.ReadXORByte(guid7[i]' 4);                  packet.ReadXORByte(guid7[i]' 7);                  packet.ReadSingle("FloatED"' i);                  packet.ReadXORByte(guid7[i]' 5);                  packet.ReadSingle("FloatED"' i);                  packet.ReadXORByte(guid7[i]' 6);                  packet.ReadSingle("FloatED"' i);                  packet.ReadXORByte(guid7[i]' 2);                    packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  packet.ReadXORByte(guid7[i]' 3);                  packet.ReadXORByte(guid7[i]' 1);                  packet.ReadXORByte(guid7[i]' 0);                  packet.ReadXORByte(guid7[i]' 4);                  packet.ReadXORByte(guid7[i]' 7);                  packet.ReadSingle("FloatED"' i);                  packet.ReadXORByte(guid7[i]' 5);                  packet.ReadSingle("FloatED"' i);                  packet.ReadXORByte(guid7[i]' 6);                  packet.ReadSingle("FloatED"' i);                  packet.ReadXORByte(guid7[i]' 2);                    packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  packet.ReadXORByte(guid7[i]' 3);                  packet.ReadXORByte(guid7[i]' 1);                  packet.ReadXORByte(guid7[i]' 0);                  packet.ReadXORByte(guid7[i]' 4);                  packet.ReadXORByte(guid7[i]' 7);                  packet.ReadSingle("FloatED"' i);                  packet.ReadXORByte(guid7[i]' 5);                  packet.ReadSingle("FloatED"' i);                  packet.ReadXORByte(guid7[i]' 6);                  packet.ReadSingle("FloatED"' i);                  packet.ReadXORByte(guid7[i]' 2);                    packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits1A4; ++i)              {                  packet.ReadXORByte(guid7[i]' 3);                  packet.ReadXORByte(guid7[i]' 1);                  packet.ReadXORByte(guid7[i]' 0);                  packet.ReadXORByte(guid7[i]' 4);                  packet.ReadXORByte(guid7[i]' 7);                  packet.ReadSingle("FloatED"' i);                  packet.ReadXORByte(guid7[i]' 5);                  packet.ReadSingle("FloatED"' i);                  packet.ReadXORByte(guid7[i]' 6);                  packet.ReadSingle("FloatED"' i);                  packet.ReadXORByte(guid7[i]' 2);                    packet.WriteGuid("Guid7"' guid7[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  packet.ParseBitStream(guid8[i]' 0' 6' 2' 7' 5' 4' 3' 1);                  packet.WriteGuid("Guid8"' guid8[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  packet.ParseBitStream(guid8[i]' 0' 6' 2' 7' 5' 4' 3' 1);                  packet.WriteGuid("Guid8"' guid8[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  packet.ParseBitStream(guid8[i]' 0' 6' 2' 7' 5' 4' 3' 1);                  packet.WriteGuid("Guid8"' guid8[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  packet.ParseBitStream(guid8[i]' 0' 6' 2' 7' 5' 4' 3' 1);                  packet.WriteGuid("Guid8"' guid8[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  packet.ParseBitStream(guid8[i]' 0' 6' 2' 7' 5' 4' 3' 1);                  packet.WriteGuid("Guid8"' guid8[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits54; ++i)              {                  packet.ParseBitStream(guid8[i]' 0' 6' 2' 7' 5' 4' 3' 1);                  packet.WriteGuid("Guid8"' guid8[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(unkGUID' 6' 2' 7' 1' 4' 3' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(unkGUID' 6' 2' 7' 1' 4' 3' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(unkGUID' 6' 2' 7' 1' 4' 3' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(unkGUID' 6' 2' 7' 1' 4' 3' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(unkGUID' 6' 2' 7' 1' 4' 3' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ParseBitStream(unkGUID' 6' 2' 7' 1' 4' 3' 5' 0);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  packet.ParseBitStream(guid6[i]' 4' 2' 0' 6' 7' 5' 1' 3);                  packet.WriteGuid("Guid6"' guid6[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  packet.ParseBitStream(guid6[i]' 4' 2' 0' 6' 7' 5' 1' 3);                  packet.WriteGuid("Guid6"' guid6[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  packet.ParseBitStream(guid6[i]' 4' 2' 0' 6' 7' 5' 1' 3);                  packet.WriteGuid("Guid6"' guid6[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  packet.ParseBitStream(guid6[i]' 4' 2' 0' 6' 7' 5' 1' 3);                  packet.WriteGuid("Guid6"' guid6[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  packet.ParseBitStream(guid6[i]' 4' 2' 0' 6' 7' 5' 1' 3);                  packet.WriteGuid("Guid6"' guid6[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: for (var i = 0; i < bits64; ++i)              {                  packet.ParseBitStream(guid6[i]' 4' 2' 0' 6' 7' 5' 1' 3);                  packet.WriteGuid("Guid6"' guid6[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)              {                  var pos = new Vector3();                    pos.Z = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(destLocationTargetGUID' 4);                  packet.ReadXORByte(destLocationTargetGUID' 5);                  packet.ReadXORByte(destLocationTargetGUID' 7);                  packet.ReadXORByte(destLocationTargetGUID' 6);                  packet.ReadXORByte(destLocationTargetGUID' 1);                  packet.ReadXORByte(destLocationTargetGUID' 2);                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(destLocationTargetGUID' 0);                  packet.ReadXORByte(destLocationTargetGUID' 3);                  packet.AddValue("Position"' pos);                  packet.WriteGuid("DestLocationTargetGUID"' destLocationTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)              {                  var pos = new Vector3();                    pos.Z = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(destLocationTargetGUID' 4);                  packet.ReadXORByte(destLocationTargetGUID' 5);                  packet.ReadXORByte(destLocationTargetGUID' 7);                  packet.ReadXORByte(destLocationTargetGUID' 6);                  packet.ReadXORByte(destLocationTargetGUID' 1);                  packet.ReadXORByte(destLocationTargetGUID' 2);                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(destLocationTargetGUID' 0);                  packet.ReadXORByte(destLocationTargetGUID' 3);                  packet.AddValue("Position"' pos);                  packet.WriteGuid("DestLocationTargetGUID"' destLocationTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)              {                  var pos = new Vector3();                    pos.Z = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(destLocationTargetGUID' 4);                  packet.ReadXORByte(destLocationTargetGUID' 5);                  packet.ReadXORByte(destLocationTargetGUID' 7);                  packet.ReadXORByte(destLocationTargetGUID' 6);                  packet.ReadXORByte(destLocationTargetGUID' 1);                  packet.ReadXORByte(destLocationTargetGUID' 2);                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(destLocationTargetGUID' 0);                  packet.ReadXORByte(destLocationTargetGUID' 3);                  packet.AddValue("Position"' pos);                  packet.WriteGuid("DestLocationTargetGUID"' destLocationTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)              {                  var pos = new Vector3();                    pos.Z = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(destLocationTargetGUID' 4);                  packet.ReadXORByte(destLocationTargetGUID' 5);                  packet.ReadXORByte(destLocationTargetGUID' 7);                  packet.ReadXORByte(destLocationTargetGUID' 6);                  packet.ReadXORByte(destLocationTargetGUID' 1);                  packet.ReadXORByte(destLocationTargetGUID' 2);                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(destLocationTargetGUID' 0);                  packet.ReadXORByte(destLocationTargetGUID' 3);                  packet.AddValue("Position"' pos);                  packet.WriteGuid("DestLocationTargetGUID"' destLocationTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)              {                  var pos = new Vector3();                    pos.Z = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(destLocationTargetGUID' 4);                  packet.ReadXORByte(destLocationTargetGUID' 5);                  packet.ReadXORByte(destLocationTargetGUID' 7);                  packet.ReadXORByte(destLocationTargetGUID' 6);                  packet.ReadXORByte(destLocationTargetGUID' 1);                  packet.ReadXORByte(destLocationTargetGUID' 2);                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(destLocationTargetGUID' 0);                  packet.ReadXORByte(destLocationTargetGUID' 3);                  packet.AddValue("Position"' pos);                  packet.WriteGuid("DestLocationTargetGUID"' destLocationTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasDestLocation)              {                  var pos = new Vector3();                    pos.Z = packet.ReadSingle();                  pos.Y = packet.ReadSingle();                  packet.ReadXORByte(destLocationTargetGUID' 4);                  packet.ReadXORByte(destLocationTargetGUID' 5);                  packet.ReadXORByte(destLocationTargetGUID' 7);                  packet.ReadXORByte(destLocationTargetGUID' 6);                  packet.ReadXORByte(destLocationTargetGUID' 1);                  packet.ReadXORByte(destLocationTargetGUID' 2);                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(destLocationTargetGUID' 0);                  packet.ReadXORByte(destLocationTargetGUID' 3);                  packet.AddValue("Position"' pos);                  packet.WriteGuid("DestLocationTargetGUID"' destLocationTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(casterUnitGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceLocation)              {                  var pos = new Vector3();                    packet.ReadXORByte(sourceLocationTargetGUID' 2);                  pos.Y = packet.ReadSingle();                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(sourceLocationTargetGUID' 6);                  packet.ReadXORByte(sourceLocationTargetGUID' 5);                  packet.ReadXORByte(sourceLocationTargetGUID' 1);                  packet.ReadXORByte(sourceLocationTargetGUID' 7);                  pos.Z = packet.ReadSingle();                  packet.ReadXORByte(sourceLocationTargetGUID' 3);                  packet.ReadXORByte(sourceLocationTargetGUID' 0);                  packet.ReadXORByte(sourceLocationTargetGUID' 4);                  packet.AddValue("Position"' pos);                  packet.WriteGuid("SourceLocationTargetGUID"' sourceLocationTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceLocation)              {                  var pos = new Vector3();                    packet.ReadXORByte(sourceLocationTargetGUID' 2);                  pos.Y = packet.ReadSingle();                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(sourceLocationTargetGUID' 6);                  packet.ReadXORByte(sourceLocationTargetGUID' 5);                  packet.ReadXORByte(sourceLocationTargetGUID' 1);                  packet.ReadXORByte(sourceLocationTargetGUID' 7);                  pos.Z = packet.ReadSingle();                  packet.ReadXORByte(sourceLocationTargetGUID' 3);                  packet.ReadXORByte(sourceLocationTargetGUID' 0);                  packet.ReadXORByte(sourceLocationTargetGUID' 4);                  packet.AddValue("Position"' pos);                  packet.WriteGuid("SourceLocationTargetGUID"' sourceLocationTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceLocation)              {                  var pos = new Vector3();                    packet.ReadXORByte(sourceLocationTargetGUID' 2);                  pos.Y = packet.ReadSingle();                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(sourceLocationTargetGUID' 6);                  packet.ReadXORByte(sourceLocationTargetGUID' 5);                  packet.ReadXORByte(sourceLocationTargetGUID' 1);                  packet.ReadXORByte(sourceLocationTargetGUID' 7);                  pos.Z = packet.ReadSingle();                  packet.ReadXORByte(sourceLocationTargetGUID' 3);                  packet.ReadXORByte(sourceLocationTargetGUID' 0);                  packet.ReadXORByte(sourceLocationTargetGUID' 4);                  packet.AddValue("Position"' pos);                  packet.WriteGuid("SourceLocationTargetGUID"' sourceLocationTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceLocation)              {                  var pos = new Vector3();                    packet.ReadXORByte(sourceLocationTargetGUID' 2);                  pos.Y = packet.ReadSingle();                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(sourceLocationTargetGUID' 6);                  packet.ReadXORByte(sourceLocationTargetGUID' 5);                  packet.ReadXORByte(sourceLocationTargetGUID' 1);                  packet.ReadXORByte(sourceLocationTargetGUID' 7);                  pos.Z = packet.ReadSingle();                  packet.ReadXORByte(sourceLocationTargetGUID' 3);                  packet.ReadXORByte(sourceLocationTargetGUID' 0);                  packet.ReadXORByte(sourceLocationTargetGUID' 4);                  packet.AddValue("Position"' pos);                  packet.WriteGuid("SourceLocationTargetGUID"' sourceLocationTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceLocation)              {                  var pos = new Vector3();                    packet.ReadXORByte(sourceLocationTargetGUID' 2);                  pos.Y = packet.ReadSingle();                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(sourceLocationTargetGUID' 6);                  packet.ReadXORByte(sourceLocationTargetGUID' 5);                  packet.ReadXORByte(sourceLocationTargetGUID' 1);                  packet.ReadXORByte(sourceLocationTargetGUID' 7);                  pos.Z = packet.ReadSingle();                  packet.ReadXORByte(sourceLocationTargetGUID' 3);                  packet.ReadXORByte(sourceLocationTargetGUID' 0);                  packet.ReadXORByte(sourceLocationTargetGUID' 4);                  packet.AddValue("Position"' pos);                  packet.WriteGuid("SourceLocationTargetGUID"' sourceLocationTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: if (hasSourceLocation)              {                  var pos = new Vector3();                    packet.ReadXORByte(sourceLocationTargetGUID' 2);                  pos.Y = packet.ReadSingle();                  pos.X = packet.ReadSingle();                  packet.ReadXORByte(sourceLocationTargetGUID' 6);                  packet.ReadXORByte(sourceLocationTargetGUID' 5);                  packet.ReadXORByte(sourceLocationTargetGUID' 1);                  packet.ReadXORByte(sourceLocationTargetGUID' 7);                  pos.Z = packet.ReadSingle();                  packet.ReadXORByte(sourceLocationTargetGUID' 3);                  packet.ReadXORByte(sourceLocationTargetGUID' 0);                  packet.ReadXORByte(sourceLocationTargetGUID' 4);                  packet.AddValue("Position"' pos);                  packet.WriteGuid("SourceLocationTargetGUID"' sourceLocationTargetGUID);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(casterUnitGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(casterUnitGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(casterUnitGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellGo,The following statement contains a magic number: packet.ReadXORByte(casterUnitGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: bits0 = (int)packet.ReadBits(24);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  hasAura[i] = packet.ReadBit(); // +88                  if (hasAura[i])                  {                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 3' 4' 6' 1' 5' 2' 0' 7);                      }                        bits48[i] = packet.ReadBits(22); //+72                      hasMaxDuration[i] = packet.ReadBit(); //+52                      hasDuration[i] = packet.ReadBit(); //+44                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  hasAura[i] = packet.ReadBit(); // +88                  if (hasAura[i])                  {                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 3' 4' 6' 1' 5' 2' 0' 7);                      }                        bits48[i] = packet.ReadBits(22); //+72                      hasMaxDuration[i] = packet.ReadBit(); //+52                      hasDuration[i] = packet.ReadBit(); //+44                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  hasAura[i] = packet.ReadBit(); // +88                  if (hasAura[i])                  {                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 3' 4' 6' 1' 5' 2' 0' 7);                      }                        bits48[i] = packet.ReadBits(22); //+72                      hasMaxDuration[i] = packet.ReadBit(); //+52                      hasDuration[i] = packet.ReadBit(); //+44                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  hasAura[i] = packet.ReadBit(); // +88                  if (hasAura[i])                  {                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 3' 4' 6' 1' 5' 2' 0' 7);                      }                        bits48[i] = packet.ReadBits(22); //+72                      hasMaxDuration[i] = packet.ReadBit(); //+52                      hasDuration[i] = packet.ReadBit(); //+44                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  hasAura[i] = packet.ReadBit(); // +88                  if (hasAura[i])                  {                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 3' 4' 6' 1' 5' 2' 0' 7);                      }                        bits48[i] = packet.ReadBits(22); //+72                      hasMaxDuration[i] = packet.ReadBit(); //+52                      hasDuration[i] = packet.ReadBit(); //+44                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  hasAura[i] = packet.ReadBit(); // +88                  if (hasAura[i])                  {                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 3' 4' 6' 1' 5' 2' 0' 7);                      }                        bits48[i] = packet.ReadBits(22); //+72                      hasMaxDuration[i] = packet.ReadBit(); //+52                      hasDuration[i] = packet.ReadBit(); //+44                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  hasAura[i] = packet.ReadBit(); // +88                  if (hasAura[i])                  {                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 3' 4' 6' 1' 5' 2' 0' 7);                      }                        bits48[i] = packet.ReadBits(22); //+72                      hasMaxDuration[i] = packet.ReadBit(); //+52                      hasDuration[i] = packet.ReadBit(); //+44                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  hasAura[i] = packet.ReadBit(); // +88                  if (hasAura[i])                  {                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 3' 4' 6' 1' 5' 2' 0' 7);                      }                        bits48[i] = packet.ReadBits(22); //+72                      hasMaxDuration[i] = packet.ReadBit(); //+52                      hasDuration[i] = packet.ReadBit(); //+44                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  hasAura[i] = packet.ReadBit(); // +88                  if (hasAura[i])                  {                      effectCount[i] = packet.ReadBits(22);                      hasCasterGUID[i] = packet.ReadBit();                      if (hasCasterGUID[i])                      {                          casterGUID[i] = new byte[8];                          packet.StartBitStream(casterGUID[i]' 3' 4' 6' 1' 5' 2' 0' 7);                      }                        bits48[i] = packet.ReadBits(22); //+72                      hasMaxDuration[i] = packet.ReadBit(); //+52                      hasDuration[i] = packet.ReadBit(); //+44                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                      if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 3' 2' 1' 6' 4' 0' 5' 7);                          packet.WriteGuid("CasterGUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                        aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                      aura.Level = packet.ReadUInt16("Caster Level"' i);                      var id = packet.ReadInt32<SpellId>("Spell ID"' i);                      aura.SpellId = (uint)id;                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        for (var j = 0; j < bits48[i]; ++j)                          packet.ReadSingle("FloatEM"' i' j);                        aura.Charges = packet.ReadByte("Charges"' i);                      packet.ReadInt32("Effect Mask"' i);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                        auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                    packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                      if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 3' 2' 1' 6' 4' 0' 5' 7);                          packet.WriteGuid("CasterGUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                        aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                      aura.Level = packet.ReadUInt16("Caster Level"' i);                      var id = packet.ReadInt32<SpellId>("Spell ID"' i);                      aura.SpellId = (uint)id;                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        for (var j = 0; j < bits48[i]; ++j)                          packet.ReadSingle("FloatEM"' i' j);                        aura.Charges = packet.ReadByte("Charges"' i);                      packet.ReadInt32("Effect Mask"' i);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                        auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                    packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                      if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 3' 2' 1' 6' 4' 0' 5' 7);                          packet.WriteGuid("CasterGUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                        aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                      aura.Level = packet.ReadUInt16("Caster Level"' i);                      var id = packet.ReadInt32<SpellId>("Spell ID"' i);                      aura.SpellId = (uint)id;                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        for (var j = 0; j < bits48[i]; ++j)                          packet.ReadSingle("FloatEM"' i' j);                        aura.Charges = packet.ReadByte("Charges"' i);                      packet.ReadInt32("Effect Mask"' i);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                        auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                    packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                      if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 3' 2' 1' 6' 4' 0' 5' 7);                          packet.WriteGuid("CasterGUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                        aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                      aura.Level = packet.ReadUInt16("Caster Level"' i);                      var id = packet.ReadInt32<SpellId>("Spell ID"' i);                      aura.SpellId = (uint)id;                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        for (var j = 0; j < bits48[i]; ++j)                          packet.ReadSingle("FloatEM"' i' j);                        aura.Charges = packet.ReadByte("Charges"' i);                      packet.ReadInt32("Effect Mask"' i);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                        auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                    packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                      if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 3' 2' 1' 6' 4' 0' 5' 7);                          packet.WriteGuid("CasterGUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                        aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                      aura.Level = packet.ReadUInt16("Caster Level"' i);                      var id = packet.ReadInt32<SpellId>("Spell ID"' i);                      aura.SpellId = (uint)id;                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        for (var j = 0; j < bits48[i]; ++j)                          packet.ReadSingle("FloatEM"' i' j);                        aura.Charges = packet.ReadByte("Charges"' i);                      packet.ReadInt32("Effect Mask"' i);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                        auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                    packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: for (var i = 0; i < bits0; ++i)              {                  if (hasAura[i])                  {                      var aura = new Aura();                      if (hasCasterGUID[i])                      {                          packet.ParseBitStream(casterGUID[i]' 3' 2' 1' 6' 4' 0' 5' 7);                          packet.WriteGuid("CasterGUID"' casterGUID[i]' i);                          aura.CasterGuid = new WowGuid64(BitConverter.ToUInt64(casterGUID[i]' 0));                      }                        aura.AuraFlags = packet.ReadByteE<AuraFlagMoP>("Flags"' i);                      aura.Level = packet.ReadUInt16("Caster Level"' i);                      var id = packet.ReadInt32<SpellId>("Spell ID"' i);                      aura.SpellId = (uint)id;                        aura.MaxDuration = hasMaxDuration[i] ? packet.ReadInt32("Max Duration"' i) : 0;                        aura.Duration = hasDuration[i] ? packet.ReadInt32("Duration"' i) : 0;                        for (var j = 0; j < bits48[i]; ++j)                          packet.ReadSingle("FloatEM"' i' j);                        aura.Charges = packet.ReadByte("Charges"' i);                      packet.ReadInt32("Effect Mask"' i);                        for (var j = 0; j < effectCount[i]; ++j)                          packet.ReadSingle("Effect Value"' i' j);                        auras.Add(aura);                      packet.AddSniffData(StoreNameType.Spell' (int)aura.SpellId' "AURA_UPDATE");                  }                    packet.ReadByte("Slot"' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 6' 7' 1' 3' 4' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 6' 7' 1' 3' 4' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 6' 7' 1' 3' 4' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 6' 7' 1' 3' 4' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 6' 7' 1' 3' 4' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleAuraUpdate,The following statement contains a magic number: packet.ParseBitStream(guid' 2' 6' 7' 1' 3' 4' 0' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleInitialSpells,The following statement contains a magic number: var count = packet.ReadBits("Spell Count"' 22);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleLearnedSpells,The following statement contains a magic number: var count = packet.ReadBits("Spell Count"' 22);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleRemovedSpell,The following statement contains a magic number: var count = packet.ReadBits("Spell Count"' 22);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSendUnlearnSpells,The following statement contains a magic number: var count = packet.ReadBits("Count"' 21);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSetSpellModifierFlat,The following statement contains a magic number: var modCount = packet.ReadBits("Modifier type count"' 22);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSetSpellModifierFlat,The following statement contains a magic number: for (var j = 0; j < modCount; ++j)                  modTypeCount[j] = packet.ReadBits("Count"' 21' j);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSetSpellModifierPct,The following statement contains a magic number: var modCount = packet.ReadBits("Modifier type count"' 22);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSetSpellModifierPct,The following statement contains a magic number: for (var j = 0; j < modCount; ++j)                  modTypeCount[j] = packet.ReadBits("Count"' 21' j);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailed,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailed,The following statement contains a magic number: packet.StartBitStream(guid' 7' 3' 6' 2' 1' 5' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailed,The following statement contains a magic number: packet.StartBitStream(guid' 7' 3' 6' 2' 1' 5' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailed,The following statement contains a magic number: packet.StartBitStream(guid' 7' 3' 6' 2' 1' 5' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailed,The following statement contains a magic number: packet.StartBitStream(guid' 7' 3' 6' 2' 1' 5' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailed,The following statement contains a magic number: packet.StartBitStream(guid' 7' 3' 6' 2' 1' 5' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailed,The following statement contains a magic number: packet.StartBitStream(guid' 7' 3' 6' 2' 1' 5' 0' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailed,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailed,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailed,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailed,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailed,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailed,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailedOther,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailedOther,The following statement contains a magic number: packet.StartBitStream(guid' 7' 0' 5' 6' 1' 4' 3' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailedOther,The following statement contains a magic number: packet.StartBitStream(guid' 7' 0' 5' 6' 1' 4' 3' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailedOther,The following statement contains a magic number: packet.StartBitStream(guid' 7' 0' 5' 6' 1' 4' 3' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailedOther,The following statement contains a magic number: packet.StartBitStream(guid' 7' 0' 5' 6' 1' 4' 3' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailedOther,The following statement contains a magic number: packet.StartBitStream(guid' 7' 0' 5' 6' 1' 4' 3' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailedOther,The following statement contains a magic number: packet.StartBitStream(guid' 7' 0' 5' 6' 1' 4' 3' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailedOther,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailedOther,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailedOther,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailedOther,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailedOther,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellFailedOther,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,ReadTalentInfo,The following statement contains a magic number: var specCount = packet.ReadBits("Spec Group count"' 19);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,ReadTalentInfo,The following statement contains a magic number: for (var i = 0; i < specCount; ++i)                  spentTalents[i] = packet.ReadBits("Spec Talent Count"' 23' i);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,ReadTalentInfo,The following statement contains a magic number: for (var i = 0; i < specCount; ++i)              {                  for (var j = 0; j < spentTalents[i]; ++j)                      packet.ReadUInt16("Talent Id"' i' j);                    for (var j = 0; j < 6; ++j)                      packet.ReadUInt16("Glyph"' i' j);                    packet.ReadUInt32("Spec Id"' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: var targetGUD = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: var guid2 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: var casterGUID = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: casterGUID[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: casterGUID[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: casterGUID[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  targetGUD[2] = packet.ReadBit();                  targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    hasType = !packet.ReadBit();                    targetGUD[3] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();                  targetGUD[2] = packet.ReadBit();                    hasHealAmount = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 4' 5' 1' 7' 0' 2' 3' 6);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  targetGUD[2] = packet.ReadBit();                  targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    hasType = !packet.ReadBit();                    targetGUD[3] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();                  targetGUD[2] = packet.ReadBit();                    hasHealAmount = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 4' 5' 1' 7' 0' 2' 3' 6);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  targetGUD[2] = packet.ReadBit();                  targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    hasType = !packet.ReadBit();                    targetGUD[3] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();                  targetGUD[2] = packet.ReadBit();                    hasHealAmount = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 4' 5' 1' 7' 0' 2' 3' 6);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  targetGUD[2] = packet.ReadBit();                  targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    hasType = !packet.ReadBit();                    targetGUD[3] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();                  targetGUD[2] = packet.ReadBit();                    hasHealAmount = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 4' 5' 1' 7' 0' 2' 3' 6);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  targetGUD[2] = packet.ReadBit();                  targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    hasType = !packet.ReadBit();                    targetGUD[3] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();                  targetGUD[2] = packet.ReadBit();                    hasHealAmount = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 4' 5' 1' 7' 0' 2' 3' 6);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  targetGUD[2] = packet.ReadBit();                  targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    hasType = !packet.ReadBit();                    targetGUD[3] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();                  targetGUD[2] = packet.ReadBit();                    hasHealAmount = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 4' 5' 1' 7' 0' 2' 3' 6);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  targetGUD[2] = packet.ReadBit();                  targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    hasType = !packet.ReadBit();                    targetGUD[3] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();                  targetGUD[2] = packet.ReadBit();                    hasHealAmount = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 4' 5' 1' 7' 0' 2' 3' 6);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  targetGUD[2] = packet.ReadBit();                  targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    hasType = !packet.ReadBit();                    targetGUD[3] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();                  targetGUD[2] = packet.ReadBit();                    hasHealAmount = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 4' 5' 1' 7' 0' 2' 3' 6);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  targetGUD[2] = packet.ReadBit();                  targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    hasType = !packet.ReadBit();                    targetGUD[3] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();                  targetGUD[2] = packet.ReadBit();                    hasHealAmount = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 4' 5' 1' 7' 0' 2' 3' 6);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  targetGUD[2] = packet.ReadBit();                  targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    hasType = !packet.ReadBit();                    targetGUD[3] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();                  targetGUD[2] = packet.ReadBit();                    hasHealAmount = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 4' 5' 1' 7' 0' 2' 3' 6);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  targetGUD[2] = packet.ReadBit();                  targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    hasType = !packet.ReadBit();                    targetGUD[3] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();                  targetGUD[2] = packet.ReadBit();                    hasHealAmount = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 4' 5' 1' 7' 0' 2' 3' 6);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  targetGUD[2] = packet.ReadBit();                  targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    hasType = !packet.ReadBit();                    targetGUD[3] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();                  targetGUD[2] = packet.ReadBit();                    hasHealAmount = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 4' 5' 1' 7' 0' 2' 3' 6);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  targetGUD[2] = packet.ReadBit();                  targetGUD[6] = packet.ReadBit();                  targetGUD[4] = packet.ReadBit();                    hasType = !packet.ReadBit();                    targetGUD[3] = packet.ReadBit();                  targetGUD[7] = packet.ReadBit();                  targetGUD[5] = packet.ReadBit();                  targetGUD[1] = packet.ReadBit();                  targetGUD[2] = packet.ReadBit();                    hasHealAmount = !packet.ReadBit();                  packet.ReadBit(); // fake bit                    packet.StartBitStream(guid2' 4' 5' 1' 7' 0' 2' 3' 6);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: casterGUID[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: casterGUID[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: casterGUID[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  packet.ParseBitStream(guid2' 4' 6' 1' 0' 7' 3' 2' 5);                    if (hasType)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 1);                  packet.ReadXORByte(targetGUD' 3);                    if (hasHealAmount)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 6);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 0);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  packet.ParseBitStream(guid2' 4' 6' 1' 0' 7' 3' 2' 5);                    if (hasType)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 1);                  packet.ReadXORByte(targetGUD' 3);                    if (hasHealAmount)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 6);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 0);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  packet.ParseBitStream(guid2' 4' 6' 1' 0' 7' 3' 2' 5);                    if (hasType)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 1);                  packet.ReadXORByte(targetGUD' 3);                    if (hasHealAmount)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 6);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 0);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  packet.ParseBitStream(guid2' 4' 6' 1' 0' 7' 3' 2' 5);                    if (hasType)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 1);                  packet.ReadXORByte(targetGUD' 3);                    if (hasHealAmount)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 6);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 0);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  packet.ParseBitStream(guid2' 4' 6' 1' 0' 7' 3' 2' 5);                    if (hasType)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 1);                  packet.ReadXORByte(targetGUD' 3);                    if (hasHealAmount)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 6);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 0);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  packet.ParseBitStream(guid2' 4' 6' 1' 0' 7' 3' 2' 5);                    if (hasType)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 1);                  packet.ReadXORByte(targetGUD' 3);                    if (hasHealAmount)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 6);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 0);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  packet.ParseBitStream(guid2' 4' 6' 1' 0' 7' 3' 2' 5);                    if (hasType)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 1);                  packet.ReadXORByte(targetGUD' 3);                    if (hasHealAmount)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 6);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 0);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  packet.ParseBitStream(guid2' 4' 6' 1' 0' 7' 3' 2' 5);                    if (hasType)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 1);                  packet.ReadXORByte(targetGUD' 3);                    if (hasHealAmount)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 6);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 0);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  packet.ParseBitStream(guid2' 4' 6' 1' 0' 7' 3' 2' 5);                    if (hasType)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 1);                  packet.ReadXORByte(targetGUD' 3);                    if (hasHealAmount)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 6);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 0);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  packet.ParseBitStream(guid2' 4' 6' 1' 0' 7' 3' 2' 5);                    if (hasType)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 1);                  packet.ReadXORByte(targetGUD' 3);                    if (hasHealAmount)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 6);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 0);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  packet.ParseBitStream(guid2' 4' 6' 1' 0' 7' 3' 2' 5);                    if (hasType)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 1);                  packet.ReadXORByte(targetGUD' 3);                    if (hasHealAmount)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 6);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 0);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: if (healPrediction)              {                  packet.ParseBitStream(guid2' 4' 6' 1' 0' 7' 3' 2' 5);                    if (hasType)                      packet.ReadByte("Type");                    packet.ReadXORByte(targetGUD' 4);                  packet.ReadXORByte(targetGUD' 5);                  packet.ReadXORByte(targetGUD' 1);                  packet.ReadXORByte(targetGUD' 3);                    if (hasHealAmount)                      packet.ReadInt32("Heal Amount");                    packet.ReadXORByte(targetGUD' 6);                  packet.ReadXORByte(targetGUD' 7);                  packet.ReadXORByte(targetGUD' 2);                  packet.ReadXORByte(targetGUD' 0);                    packet.WriteGuid("TargetGUD"' targetGUD);                  packet.WriteGuid("Guid2"' guid2);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelStart,The following statement contains a magic number: packet.ReadXORByte(casterGUID' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 0' 3' 4' 1' 5' 2' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 0' 3' 4' 1' 5' 2' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 0' 3' 4' 1' 5' 2' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 0' 3' 4' 1' 5' 2' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 0' 3' 4' 1' 5' 2' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.StartBitStream(guid' 0' 3' 4' 1' 5' 2' 6' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellChannelUpdate,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCanelAura,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCanelAura,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 1' 0' 4' 3' 2' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCanelAura,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 1' 0' 4' 3' 2' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCanelAura,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 1' 0' 4' 3' 2' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCanelAura,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 1' 0' 4' 3' 2' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCanelAura,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 1' 0' 4' 3' 2' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCanelAura,The following statement contains a magic number: packet.StartBitStream(guid' 6' 5' 1' 0' 4' 3' 2' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCanelAura,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 1' 0' 4' 7' 5' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCanelAura,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 1' 0' 4' 7' 5' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCanelAura,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 1' 0' 4' 7' 5' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCanelAura,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 1' 0' 4' 7' 5' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCanelAura,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 1' 0' 4' 7' 5' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCanelAura,The following statement contains a magic number: packet.ParseBitStream(guid' 3' 2' 1' 0' 4' 7' 5' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: var bits10 = packet.ReadBits(19);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  bits14[i] = packet.ReadBits(21);                  guid3[i] = new byte[bits14[i]][];                  for (var j = 0; j < bits14[i]; ++j)                  {                      guid3[i][j] = new byte[8];                      packet.StartBitStream(guid3[i][j]' 5' 4' 2' 3' 1' 0' 6' 7);                  }                    bits4[i] = packet.ReadBits(20);                  guid6[i] = new byte[bits4[i]][];                  for (var j = 0; j < bits4[i]; ++j)                  {                      guid6[i][j] = new byte[8];                      packet.StartBitStream(guid6[i][j]' 0' 3' 1' 5' 6' 4' 7' 2);                  }                    bits24[i] = packet.ReadBits(21);                  bits54[i] = packet.ReadBits(22);                  bits44[i] = packet.ReadBits(22);                    guid4[i] = new byte[bits24[i]][];                  for (var j = 0; j < bits24[i]; ++j)                  {                      guid4[i][j] = new byte[8];                      packet.StartBitStream(guid4[i][j]' 7' 2' 0' 5' 6' 3' 4' 1);                  }                    bits34[i] = packet.ReadBits(24);                  guid5[i] = new byte[bits34[i]][];                  for (var j = 0; j < bits34[i]; ++j)                  {                      guid5[i][j] = new byte[8];                      packet.StartBitStream(guid5[i][j]' 6' 5' 1' 0' 3' 4' 7' 2);                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: if (bit48)                  bits38 = packet.ReadBits(21);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: for (var i = 0; i < bits10; ++i)              {                  for (var j = 0; j < bits34[i]; ++j)                  {                      packet.ParseBitStream(guid5[i][j]' 7' 5' 1' 2' 6' 4' 0' 3);                      packet.WriteGuid("Summoned GUID"' guid5[i][j]' i' j);                  }                    for (var j = 0; j < bits24[i]; ++j)                  {                      packet.ReadXORByte(guid4[i][j]' 4);                      packet.ReadXORByte(guid4[i][j]' 3);                      packet.ReadInt32("Int24+0"' i' j);                      packet.ReadXORByte(guid4[i][j]' 6);                      packet.ReadXORByte(guid4[i][j]' 5);                      packet.ReadXORByte(guid4[i][j]' 0);                      packet.ReadXORByte(guid4[i][j]' 7);                      packet.ReadInt32("Int24+4"' i' j);                      packet.ReadXORByte(guid4[i][j]' 2);                      packet.ReadXORByte(guid4[i][j]' 1);                        packet.WriteGuid("Guid4"' guid4[i][j]' i' j);                  }                    for (var j = 0; j < bits4[i]; ++j)                  {                      packet.ReadXORByte(guid6[i][j]' 3);                      packet.ReadXORByte(guid6[i][j]' 7);                      packet.ReadXORByte(guid6[i][j]' 5);                      packet.ReadXORByte(guid6[i][j]' 2);                      packet.ReadXORByte(guid6[i][j]' 0);                      packet.ReadInt32("Int4+0"' i' j);                      packet.ReadInt32("Int4+8"' i' j);                      packet.ReadXORByte(guid6[i][j]' 4);                      packet.ReadXORByte(guid6[i][j]' 1);                      packet.ReadSingle("FloatEB"' i' j);                      packet.ReadXORByte(guid6[i][j]' 6);                        packet.WriteGuid("Guid6"' guid6[i][j]' i' j);                  }                    for (var j = 0; j < bits14[i]; ++j)                  {                      packet.ReadXORByte(guid3[i][j]' 0);                      packet.ReadXORByte(guid3[i][j]' 6);                      packet.ReadXORByte(guid3[i][j]' 4);                      packet.ReadXORByte(guid3[i][j]' 7);                      packet.ReadXORByte(guid3[i][j]' 2);                      packet.ReadXORByte(guid3[i][j]' 5);                      packet.ReadXORByte(guid3[i][j]' 3);                      packet.ReadInt32("Int14");                      packet.ReadXORByte(guid3[i][j]' 1);                        packet.WriteGuid("Guid3"' guid3[i][j]' i' j);                  }                    for (var j = 0; j < bits54[i]; ++j)                      packet.ReadInt32("Int54"' i' j);                    var type = packet.ReadInt32E<SpellEffect>("Spell Effect"' i);                    for (var j = 0; j < bits44[i]; ++j)                      packet.ReadInt32<ItemId>("Created Item"' i' j);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 7' 1' 6' 2' 0' 4' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 7' 1' 6' 2' 0' 4' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 7' 1' 6' 2' 0' 4' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 7' 1' 6' 2' 0' 4' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 7' 1' 6' 2' 0' 4' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellLogExecute,The following statement contains a magic number: packet.ParseBitStream(guid' 5' 7' 1' 6' 2' 0' 4' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleSpellCategoryCooldown,The following statement contains a magic number: var count = packet.ReadBits("Count"' 21);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 6' 5' 1' 3' 0' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 6' 5' 1' 3' 0' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 6' 5' 1' 3' 0' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 6' 5' 1' 3' 0' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 6' 5' 1' 3' 0' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.StartBitStream(guid' 4' 2' 6' 5' 1' 3' 0' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.ReadXORByte(guid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.ReadXORByte(guid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.ReadXORByte(guid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.ReadXORByte(guid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.ReadXORByte(guid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,SpellHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\SpellHandler.cs,HandleCastVisualKit,The following statement contains a magic number: packet.ReadXORByte(guid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: var guid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: guid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: guid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: guid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: guid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: guid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: guid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 4' 7' 2' 6' 3' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 4' 7' 2' 6' 3' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 4' 7' 2' 6' 3' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 4' 7' 2' 6' 3' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 4' 7' 2' 6' 3' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleDestroyObject,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 4' 7' 2' 6' 3' 1' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var guid1 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var transportGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var goTransportGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var attackingTargetGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var guid5 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var guid6 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var guid7 = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: var transportFrames = packet.ReadBits("Transport Frames Count"' 22' index);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[2] = packet.ReadBit();                  var bit140 = packet.ReadBit();                  hasPitch = !packet.ReadBit("Has Pitch"' index); //104                  hasTransportData = packet.ReadBit("Has Transport Data"' index); //96                  packet.ReadBit(); // 164 fake bit                    if (hasTransportData)                  {                      transportGuid[4] = packet.ReadBit();                      transportGuid[2] = packet.ReadBit();                      hasTransportTime3 = packet.ReadBit();                      transportGuid[0] = packet.ReadBit();                      transportGuid[1] = packet.ReadBit();                      transportGuid[3] = packet.ReadBit();                      transportGuid[6] = packet.ReadBit();                      transportGuid[7] = packet.ReadBit();                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                  hasTimestamp = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  hasOrientation = !packet.ReadBit(); //40                  bit160 = !packet.ReadBit();                  guid1[5] = packet.ReadBit();                  bits98 = packet.ReadBits("bits98"' 22' index); //144                  hasMovementFlags = !packet.ReadBit();                  bits168 = packet.ReadBits(19); //352                    /*var bits356 = new uint[bits168];                  for (var i = 0; i < bits168; ++i)                  {                      bits356[i] = packet.ReadBits(2);                  }*/                    hasFallData = packet.ReadBit(); //132                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasSplineElevation = !packet.ReadBit("Has SplineElevation"' index);//136                  moveInfo.HasSplineData = packet.ReadBit("Has SplineData"' index);                  var bit141 = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineVerticalAcceleration = packet.ReadBit(); //260                          hasSplineStartTime = packet.ReadBit(); //252                          var bit304 = packet.ReadBit();                            splineCount = packet.ReadBits(20);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                            if (bit304)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits(2);                          }                      }                  }                    hasMoveFlagsExtra = !packet.ReadBit(); //20                    if (hasFallData)                      hasFallDirection = packet.ReadBit(); //128                    if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[2] = packet.ReadBit();                  var bit140 = packet.ReadBit();                  hasPitch = !packet.ReadBit("Has Pitch"' index); //104                  hasTransportData = packet.ReadBit("Has Transport Data"' index); //96                  packet.ReadBit(); // 164 fake bit                    if (hasTransportData)                  {                      transportGuid[4] = packet.ReadBit();                      transportGuid[2] = packet.ReadBit();                      hasTransportTime3 = packet.ReadBit();                      transportGuid[0] = packet.ReadBit();                      transportGuid[1] = packet.ReadBit();                      transportGuid[3] = packet.ReadBit();                      transportGuid[6] = packet.ReadBit();                      transportGuid[7] = packet.ReadBit();                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                  hasTimestamp = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  hasOrientation = !packet.ReadBit(); //40                  bit160 = !packet.ReadBit();                  guid1[5] = packet.ReadBit();                  bits98 = packet.ReadBits("bits98"' 22' index); //144                  hasMovementFlags = !packet.ReadBit();                  bits168 = packet.ReadBits(19); //352                    /*var bits356 = new uint[bits168];                  for (var i = 0; i < bits168; ++i)                  {                      bits356[i] = packet.ReadBits(2);                  }*/                    hasFallData = packet.ReadBit(); //132                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasSplineElevation = !packet.ReadBit("Has SplineElevation"' index);//136                  moveInfo.HasSplineData = packet.ReadBit("Has SplineData"' index);                  var bit141 = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineVerticalAcceleration = packet.ReadBit(); //260                          hasSplineStartTime = packet.ReadBit(); //252                          var bit304 = packet.ReadBit();                            splineCount = packet.ReadBits(20);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                            if (bit304)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits(2);                          }                      }                  }                    hasMoveFlagsExtra = !packet.ReadBit(); //20                    if (hasFallData)                      hasFallDirection = packet.ReadBit(); //128                    if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[2] = packet.ReadBit();                  var bit140 = packet.ReadBit();                  hasPitch = !packet.ReadBit("Has Pitch"' index); //104                  hasTransportData = packet.ReadBit("Has Transport Data"' index); //96                  packet.ReadBit(); // 164 fake bit                    if (hasTransportData)                  {                      transportGuid[4] = packet.ReadBit();                      transportGuid[2] = packet.ReadBit();                      hasTransportTime3 = packet.ReadBit();                      transportGuid[0] = packet.ReadBit();                      transportGuid[1] = packet.ReadBit();                      transportGuid[3] = packet.ReadBit();                      transportGuid[6] = packet.ReadBit();                      transportGuid[7] = packet.ReadBit();                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                  hasTimestamp = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  hasOrientation = !packet.ReadBit(); //40                  bit160 = !packet.ReadBit();                  guid1[5] = packet.ReadBit();                  bits98 = packet.ReadBits("bits98"' 22' index); //144                  hasMovementFlags = !packet.ReadBit();                  bits168 = packet.ReadBits(19); //352                    /*var bits356 = new uint[bits168];                  for (var i = 0; i < bits168; ++i)                  {                      bits356[i] = packet.ReadBits(2);                  }*/                    hasFallData = packet.ReadBit(); //132                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasSplineElevation = !packet.ReadBit("Has SplineElevation"' index);//136                  moveInfo.HasSplineData = packet.ReadBit("Has SplineData"' index);                  var bit141 = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineVerticalAcceleration = packet.ReadBit(); //260                          hasSplineStartTime = packet.ReadBit(); //252                          var bit304 = packet.ReadBit();                            splineCount = packet.ReadBits(20);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                            if (bit304)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits(2);                          }                      }                  }                    hasMoveFlagsExtra = !packet.ReadBit(); //20                    if (hasFallData)                      hasFallDirection = packet.ReadBit(); //128                    if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[2] = packet.ReadBit();                  var bit140 = packet.ReadBit();                  hasPitch = !packet.ReadBit("Has Pitch"' index); //104                  hasTransportData = packet.ReadBit("Has Transport Data"' index); //96                  packet.ReadBit(); // 164 fake bit                    if (hasTransportData)                  {                      transportGuid[4] = packet.ReadBit();                      transportGuid[2] = packet.ReadBit();                      hasTransportTime3 = packet.ReadBit();                      transportGuid[0] = packet.ReadBit();                      transportGuid[1] = packet.ReadBit();                      transportGuid[3] = packet.ReadBit();                      transportGuid[6] = packet.ReadBit();                      transportGuid[7] = packet.ReadBit();                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                  hasTimestamp = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  hasOrientation = !packet.ReadBit(); //40                  bit160 = !packet.ReadBit();                  guid1[5] = packet.ReadBit();                  bits98 = packet.ReadBits("bits98"' 22' index); //144                  hasMovementFlags = !packet.ReadBit();                  bits168 = packet.ReadBits(19); //352                    /*var bits356 = new uint[bits168];                  for (var i = 0; i < bits168; ++i)                  {                      bits356[i] = packet.ReadBits(2);                  }*/                    hasFallData = packet.ReadBit(); //132                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasSplineElevation = !packet.ReadBit("Has SplineElevation"' index);//136                  moveInfo.HasSplineData = packet.ReadBit("Has SplineData"' index);                  var bit141 = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineVerticalAcceleration = packet.ReadBit(); //260                          hasSplineStartTime = packet.ReadBit(); //252                          var bit304 = packet.ReadBit();                            splineCount = packet.ReadBits(20);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                            if (bit304)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits(2);                          }                      }                  }                    hasMoveFlagsExtra = !packet.ReadBit(); //20                    if (hasFallData)                      hasFallDirection = packet.ReadBit(); //128                    if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[2] = packet.ReadBit();                  var bit140 = packet.ReadBit();                  hasPitch = !packet.ReadBit("Has Pitch"' index); //104                  hasTransportData = packet.ReadBit("Has Transport Data"' index); //96                  packet.ReadBit(); // 164 fake bit                    if (hasTransportData)                  {                      transportGuid[4] = packet.ReadBit();                      transportGuid[2] = packet.ReadBit();                      hasTransportTime3 = packet.ReadBit();                      transportGuid[0] = packet.ReadBit();                      transportGuid[1] = packet.ReadBit();                      transportGuid[3] = packet.ReadBit();                      transportGuid[6] = packet.ReadBit();                      transportGuid[7] = packet.ReadBit();                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                  hasTimestamp = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  hasOrientation = !packet.ReadBit(); //40                  bit160 = !packet.ReadBit();                  guid1[5] = packet.ReadBit();                  bits98 = packet.ReadBits("bits98"' 22' index); //144                  hasMovementFlags = !packet.ReadBit();                  bits168 = packet.ReadBits(19); //352                    /*var bits356 = new uint[bits168];                  for (var i = 0; i < bits168; ++i)                  {                      bits356[i] = packet.ReadBits(2);                  }*/                    hasFallData = packet.ReadBit(); //132                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasSplineElevation = !packet.ReadBit("Has SplineElevation"' index);//136                  moveInfo.HasSplineData = packet.ReadBit("Has SplineData"' index);                  var bit141 = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineVerticalAcceleration = packet.ReadBit(); //260                          hasSplineStartTime = packet.ReadBit(); //252                          var bit304 = packet.ReadBit();                            splineCount = packet.ReadBits(20);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                            if (bit304)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits(2);                          }                      }                  }                    hasMoveFlagsExtra = !packet.ReadBit(); //20                    if (hasFallData)                      hasFallDirection = packet.ReadBit(); //128                    if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[2] = packet.ReadBit();                  var bit140 = packet.ReadBit();                  hasPitch = !packet.ReadBit("Has Pitch"' index); //104                  hasTransportData = packet.ReadBit("Has Transport Data"' index); //96                  packet.ReadBit(); // 164 fake bit                    if (hasTransportData)                  {                      transportGuid[4] = packet.ReadBit();                      transportGuid[2] = packet.ReadBit();                      hasTransportTime3 = packet.ReadBit();                      transportGuid[0] = packet.ReadBit();                      transportGuid[1] = packet.ReadBit();                      transportGuid[3] = packet.ReadBit();                      transportGuid[6] = packet.ReadBit();                      transportGuid[7] = packet.ReadBit();                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                  hasTimestamp = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  hasOrientation = !packet.ReadBit(); //40                  bit160 = !packet.ReadBit();                  guid1[5] = packet.ReadBit();                  bits98 = packet.ReadBits("bits98"' 22' index); //144                  hasMovementFlags = !packet.ReadBit();                  bits168 = packet.ReadBits(19); //352                    /*var bits356 = new uint[bits168];                  for (var i = 0; i < bits168; ++i)                  {                      bits356[i] = packet.ReadBits(2);                  }*/                    hasFallData = packet.ReadBit(); //132                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasSplineElevation = !packet.ReadBit("Has SplineElevation"' index);//136                  moveInfo.HasSplineData = packet.ReadBit("Has SplineData"' index);                  var bit141 = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineVerticalAcceleration = packet.ReadBit(); //260                          hasSplineStartTime = packet.ReadBit(); //252                          var bit304 = packet.ReadBit();                            splineCount = packet.ReadBits(20);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                            if (bit304)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits(2);                          }                      }                  }                    hasMoveFlagsExtra = !packet.ReadBit(); //20                    if (hasFallData)                      hasFallDirection = packet.ReadBit(); //128                    if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[2] = packet.ReadBit();                  var bit140 = packet.ReadBit();                  hasPitch = !packet.ReadBit("Has Pitch"' index); //104                  hasTransportData = packet.ReadBit("Has Transport Data"' index); //96                  packet.ReadBit(); // 164 fake bit                    if (hasTransportData)                  {                      transportGuid[4] = packet.ReadBit();                      transportGuid[2] = packet.ReadBit();                      hasTransportTime3 = packet.ReadBit();                      transportGuid[0] = packet.ReadBit();                      transportGuid[1] = packet.ReadBit();                      transportGuid[3] = packet.ReadBit();                      transportGuid[6] = packet.ReadBit();                      transportGuid[7] = packet.ReadBit();                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                  hasTimestamp = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  hasOrientation = !packet.ReadBit(); //40                  bit160 = !packet.ReadBit();                  guid1[5] = packet.ReadBit();                  bits98 = packet.ReadBits("bits98"' 22' index); //144                  hasMovementFlags = !packet.ReadBit();                  bits168 = packet.ReadBits(19); //352                    /*var bits356 = new uint[bits168];                  for (var i = 0; i < bits168; ++i)                  {                      bits356[i] = packet.ReadBits(2);                  }*/                    hasFallData = packet.ReadBit(); //132                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasSplineElevation = !packet.ReadBit("Has SplineElevation"' index);//136                  moveInfo.HasSplineData = packet.ReadBit("Has SplineData"' index);                  var bit141 = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineVerticalAcceleration = packet.ReadBit(); //260                          hasSplineStartTime = packet.ReadBit(); //252                          var bit304 = packet.ReadBit();                            splineCount = packet.ReadBits(20);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                            if (bit304)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits(2);                          }                      }                  }                    hasMoveFlagsExtra = !packet.ReadBit(); //20                    if (hasFallData)                      hasFallDirection = packet.ReadBit(); //128                    if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[2] = packet.ReadBit();                  var bit140 = packet.ReadBit();                  hasPitch = !packet.ReadBit("Has Pitch"' index); //104                  hasTransportData = packet.ReadBit("Has Transport Data"' index); //96                  packet.ReadBit(); // 164 fake bit                    if (hasTransportData)                  {                      transportGuid[4] = packet.ReadBit();                      transportGuid[2] = packet.ReadBit();                      hasTransportTime3 = packet.ReadBit();                      transportGuid[0] = packet.ReadBit();                      transportGuid[1] = packet.ReadBit();                      transportGuid[3] = packet.ReadBit();                      transportGuid[6] = packet.ReadBit();                      transportGuid[7] = packet.ReadBit();                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                  hasTimestamp = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  hasOrientation = !packet.ReadBit(); //40                  bit160 = !packet.ReadBit();                  guid1[5] = packet.ReadBit();                  bits98 = packet.ReadBits("bits98"' 22' index); //144                  hasMovementFlags = !packet.ReadBit();                  bits168 = packet.ReadBits(19); //352                    /*var bits356 = new uint[bits168];                  for (var i = 0; i < bits168; ++i)                  {                      bits356[i] = packet.ReadBits(2);                  }*/                    hasFallData = packet.ReadBit(); //132                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasSplineElevation = !packet.ReadBit("Has SplineElevation"' index);//136                  moveInfo.HasSplineData = packet.ReadBit("Has SplineData"' index);                  var bit141 = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineVerticalAcceleration = packet.ReadBit(); //260                          hasSplineStartTime = packet.ReadBit(); //252                          var bit304 = packet.ReadBit();                            splineCount = packet.ReadBits(20);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                            if (bit304)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits(2);                          }                      }                  }                    hasMoveFlagsExtra = !packet.ReadBit(); //20                    if (hasFallData)                      hasFallDirection = packet.ReadBit(); //128                    if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[2] = packet.ReadBit();                  var bit140 = packet.ReadBit();                  hasPitch = !packet.ReadBit("Has Pitch"' index); //104                  hasTransportData = packet.ReadBit("Has Transport Data"' index); //96                  packet.ReadBit(); // 164 fake bit                    if (hasTransportData)                  {                      transportGuid[4] = packet.ReadBit();                      transportGuid[2] = packet.ReadBit();                      hasTransportTime3 = packet.ReadBit();                      transportGuid[0] = packet.ReadBit();                      transportGuid[1] = packet.ReadBit();                      transportGuid[3] = packet.ReadBit();                      transportGuid[6] = packet.ReadBit();                      transportGuid[7] = packet.ReadBit();                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                  hasTimestamp = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  hasOrientation = !packet.ReadBit(); //40                  bit160 = !packet.ReadBit();                  guid1[5] = packet.ReadBit();                  bits98 = packet.ReadBits("bits98"' 22' index); //144                  hasMovementFlags = !packet.ReadBit();                  bits168 = packet.ReadBits(19); //352                    /*var bits356 = new uint[bits168];                  for (var i = 0; i < bits168; ++i)                  {                      bits356[i] = packet.ReadBits(2);                  }*/                    hasFallData = packet.ReadBit(); //132                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasSplineElevation = !packet.ReadBit("Has SplineElevation"' index);//136                  moveInfo.HasSplineData = packet.ReadBit("Has SplineData"' index);                  var bit141 = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineVerticalAcceleration = packet.ReadBit(); //260                          hasSplineStartTime = packet.ReadBit(); //252                          var bit304 = packet.ReadBit();                            splineCount = packet.ReadBits(20);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                            if (bit304)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits(2);                          }                      }                  }                    hasMoveFlagsExtra = !packet.ReadBit(); //20                    if (hasFallData)                      hasFallDirection = packet.ReadBit(); //128                    if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[2] = packet.ReadBit();                  var bit140 = packet.ReadBit();                  hasPitch = !packet.ReadBit("Has Pitch"' index); //104                  hasTransportData = packet.ReadBit("Has Transport Data"' index); //96                  packet.ReadBit(); // 164 fake bit                    if (hasTransportData)                  {                      transportGuid[4] = packet.ReadBit();                      transportGuid[2] = packet.ReadBit();                      hasTransportTime3 = packet.ReadBit();                      transportGuid[0] = packet.ReadBit();                      transportGuid[1] = packet.ReadBit();                      transportGuid[3] = packet.ReadBit();                      transportGuid[6] = packet.ReadBit();                      transportGuid[7] = packet.ReadBit();                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                  hasTimestamp = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  hasOrientation = !packet.ReadBit(); //40                  bit160 = !packet.ReadBit();                  guid1[5] = packet.ReadBit();                  bits98 = packet.ReadBits("bits98"' 22' index); //144                  hasMovementFlags = !packet.ReadBit();                  bits168 = packet.ReadBits(19); //352                    /*var bits356 = new uint[bits168];                  for (var i = 0; i < bits168; ++i)                  {                      bits356[i] = packet.ReadBits(2);                  }*/                    hasFallData = packet.ReadBit(); //132                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasSplineElevation = !packet.ReadBit("Has SplineElevation"' index);//136                  moveInfo.HasSplineData = packet.ReadBit("Has SplineData"' index);                  var bit141 = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineVerticalAcceleration = packet.ReadBit(); //260                          hasSplineStartTime = packet.ReadBit(); //252                          var bit304 = packet.ReadBit();                            splineCount = packet.ReadBits(20);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                            if (bit304)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits(2);                          }                      }                  }                    hasMoveFlagsExtra = !packet.ReadBit(); //20                    if (hasFallData)                      hasFallDirection = packet.ReadBit(); //128                    if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[2] = packet.ReadBit();                  var bit140 = packet.ReadBit();                  hasPitch = !packet.ReadBit("Has Pitch"' index); //104                  hasTransportData = packet.ReadBit("Has Transport Data"' index); //96                  packet.ReadBit(); // 164 fake bit                    if (hasTransportData)                  {                      transportGuid[4] = packet.ReadBit();                      transportGuid[2] = packet.ReadBit();                      hasTransportTime3 = packet.ReadBit();                      transportGuid[0] = packet.ReadBit();                      transportGuid[1] = packet.ReadBit();                      transportGuid[3] = packet.ReadBit();                      transportGuid[6] = packet.ReadBit();                      transportGuid[7] = packet.ReadBit();                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                  hasTimestamp = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  hasOrientation = !packet.ReadBit(); //40                  bit160 = !packet.ReadBit();                  guid1[5] = packet.ReadBit();                  bits98 = packet.ReadBits("bits98"' 22' index); //144                  hasMovementFlags = !packet.ReadBit();                  bits168 = packet.ReadBits(19); //352                    /*var bits356 = new uint[bits168];                  for (var i = 0; i < bits168; ++i)                  {                      bits356[i] = packet.ReadBits(2);                  }*/                    hasFallData = packet.ReadBit(); //132                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasSplineElevation = !packet.ReadBit("Has SplineElevation"' index);//136                  moveInfo.HasSplineData = packet.ReadBit("Has SplineData"' index);                  var bit141 = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineVerticalAcceleration = packet.ReadBit(); //260                          hasSplineStartTime = packet.ReadBit(); //252                          var bit304 = packet.ReadBit();                            splineCount = packet.ReadBits(20);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                            if (bit304)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits(2);                          }                      }                  }                    hasMoveFlagsExtra = !packet.ReadBit(); //20                    if (hasFallData)                      hasFallDirection = packet.ReadBit(); //128                    if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[2] = packet.ReadBit();                  var bit140 = packet.ReadBit();                  hasPitch = !packet.ReadBit("Has Pitch"' index); //104                  hasTransportData = packet.ReadBit("Has Transport Data"' index); //96                  packet.ReadBit(); // 164 fake bit                    if (hasTransportData)                  {                      transportGuid[4] = packet.ReadBit();                      transportGuid[2] = packet.ReadBit();                      hasTransportTime3 = packet.ReadBit();                      transportGuid[0] = packet.ReadBit();                      transportGuid[1] = packet.ReadBit();                      transportGuid[3] = packet.ReadBit();                      transportGuid[6] = packet.ReadBit();                      transportGuid[7] = packet.ReadBit();                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                  hasTimestamp = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  hasOrientation = !packet.ReadBit(); //40                  bit160 = !packet.ReadBit();                  guid1[5] = packet.ReadBit();                  bits98 = packet.ReadBits("bits98"' 22' index); //144                  hasMovementFlags = !packet.ReadBit();                  bits168 = packet.ReadBits(19); //352                    /*var bits356 = new uint[bits168];                  for (var i = 0; i < bits168; ++i)                  {                      bits356[i] = packet.ReadBits(2);                  }*/                    hasFallData = packet.ReadBit(); //132                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasSplineElevation = !packet.ReadBit("Has SplineElevation"' index);//136                  moveInfo.HasSplineData = packet.ReadBit("Has SplineData"' index);                  var bit141 = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineVerticalAcceleration = packet.ReadBit(); //260                          hasSplineStartTime = packet.ReadBit(); //252                          var bit304 = packet.ReadBit();                            splineCount = packet.ReadBits(20);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                            if (bit304)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits(2);                          }                      }                  }                    hasMoveFlagsExtra = !packet.ReadBit(); //20                    if (hasFallData)                      hasFallDirection = packet.ReadBit(); //128                    if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[2] = packet.ReadBit();                  var bit140 = packet.ReadBit();                  hasPitch = !packet.ReadBit("Has Pitch"' index); //104                  hasTransportData = packet.ReadBit("Has Transport Data"' index); //96                  packet.ReadBit(); // 164 fake bit                    if (hasTransportData)                  {                      transportGuid[4] = packet.ReadBit();                      transportGuid[2] = packet.ReadBit();                      hasTransportTime3 = packet.ReadBit();                      transportGuid[0] = packet.ReadBit();                      transportGuid[1] = packet.ReadBit();                      transportGuid[3] = packet.ReadBit();                      transportGuid[6] = packet.ReadBit();                      transportGuid[7] = packet.ReadBit();                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                  hasTimestamp = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  hasOrientation = !packet.ReadBit(); //40                  bit160 = !packet.ReadBit();                  guid1[5] = packet.ReadBit();                  bits98 = packet.ReadBits("bits98"' 22' index); //144                  hasMovementFlags = !packet.ReadBit();                  bits168 = packet.ReadBits(19); //352                    /*var bits356 = new uint[bits168];                  for (var i = 0; i < bits168; ++i)                  {                      bits356[i] = packet.ReadBits(2);                  }*/                    hasFallData = packet.ReadBit(); //132                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasSplineElevation = !packet.ReadBit("Has SplineElevation"' index);//136                  moveInfo.HasSplineData = packet.ReadBit("Has SplineData"' index);                  var bit141 = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineVerticalAcceleration = packet.ReadBit(); //260                          hasSplineStartTime = packet.ReadBit(); //252                          var bit304 = packet.ReadBit();                            splineCount = packet.ReadBits(20);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                            if (bit304)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits(2);                          }                      }                  }                    hasMoveFlagsExtra = !packet.ReadBit(); //20                    if (hasFallData)                      hasFallDirection = packet.ReadBit(); //128                    if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[2] = packet.ReadBit();                  var bit140 = packet.ReadBit();                  hasPitch = !packet.ReadBit("Has Pitch"' index); //104                  hasTransportData = packet.ReadBit("Has Transport Data"' index); //96                  packet.ReadBit(); // 164 fake bit                    if (hasTransportData)                  {                      transportGuid[4] = packet.ReadBit();                      transportGuid[2] = packet.ReadBit();                      hasTransportTime3 = packet.ReadBit();                      transportGuid[0] = packet.ReadBit();                      transportGuid[1] = packet.ReadBit();                      transportGuid[3] = packet.ReadBit();                      transportGuid[6] = packet.ReadBit();                      transportGuid[7] = packet.ReadBit();                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                  hasTimestamp = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  hasOrientation = !packet.ReadBit(); //40                  bit160 = !packet.ReadBit();                  guid1[5] = packet.ReadBit();                  bits98 = packet.ReadBits("bits98"' 22' index); //144                  hasMovementFlags = !packet.ReadBit();                  bits168 = packet.ReadBits(19); //352                    /*var bits356 = new uint[bits168];                  for (var i = 0; i < bits168; ++i)                  {                      bits356[i] = packet.ReadBits(2);                  }*/                    hasFallData = packet.ReadBit(); //132                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasSplineElevation = !packet.ReadBit("Has SplineElevation"' index);//136                  moveInfo.HasSplineData = packet.ReadBit("Has SplineData"' index);                  var bit141 = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineVerticalAcceleration = packet.ReadBit(); //260                          hasSplineStartTime = packet.ReadBit(); //252                          var bit304 = packet.ReadBit();                            splineCount = packet.ReadBits(20);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                            if (bit304)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits(2);                          }                      }                  }                    hasMoveFlagsExtra = !packet.ReadBit(); //20                    if (hasFallData)                      hasFallDirection = packet.ReadBit(); //128                    if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[2] = packet.ReadBit();                  var bit140 = packet.ReadBit();                  hasPitch = !packet.ReadBit("Has Pitch"' index); //104                  hasTransportData = packet.ReadBit("Has Transport Data"' index); //96                  packet.ReadBit(); // 164 fake bit                    if (hasTransportData)                  {                      transportGuid[4] = packet.ReadBit();                      transportGuid[2] = packet.ReadBit();                      hasTransportTime3 = packet.ReadBit();                      transportGuid[0] = packet.ReadBit();                      transportGuid[1] = packet.ReadBit();                      transportGuid[3] = packet.ReadBit();                      transportGuid[6] = packet.ReadBit();                      transportGuid[7] = packet.ReadBit();                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                  hasTimestamp = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  hasOrientation = !packet.ReadBit(); //40                  bit160 = !packet.ReadBit();                  guid1[5] = packet.ReadBit();                  bits98 = packet.ReadBits("bits98"' 22' index); //144                  hasMovementFlags = !packet.ReadBit();                  bits168 = packet.ReadBits(19); //352                    /*var bits356 = new uint[bits168];                  for (var i = 0; i < bits168; ++i)                  {                      bits356[i] = packet.ReadBits(2);                  }*/                    hasFallData = packet.ReadBit(); //132                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasSplineElevation = !packet.ReadBit("Has SplineElevation"' index);//136                  moveInfo.HasSplineData = packet.ReadBit("Has SplineData"' index);                  var bit141 = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineVerticalAcceleration = packet.ReadBit(); //260                          hasSplineStartTime = packet.ReadBit(); //252                          var bit304 = packet.ReadBit();                            splineCount = packet.ReadBits(20);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                            if (bit304)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits(2);                          }                      }                  }                    hasMoveFlagsExtra = !packet.ReadBit(); //20                    if (hasFallData)                      hasFallDirection = packet.ReadBit(); //128                    if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[2] = packet.ReadBit();                  var bit140 = packet.ReadBit();                  hasPitch = !packet.ReadBit("Has Pitch"' index); //104                  hasTransportData = packet.ReadBit("Has Transport Data"' index); //96                  packet.ReadBit(); // 164 fake bit                    if (hasTransportData)                  {                      transportGuid[4] = packet.ReadBit();                      transportGuid[2] = packet.ReadBit();                      hasTransportTime3 = packet.ReadBit();                      transportGuid[0] = packet.ReadBit();                      transportGuid[1] = packet.ReadBit();                      transportGuid[3] = packet.ReadBit();                      transportGuid[6] = packet.ReadBit();                      transportGuid[7] = packet.ReadBit();                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                  hasTimestamp = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  hasOrientation = !packet.ReadBit(); //40                  bit160 = !packet.ReadBit();                  guid1[5] = packet.ReadBit();                  bits98 = packet.ReadBits("bits98"' 22' index); //144                  hasMovementFlags = !packet.ReadBit();                  bits168 = packet.ReadBits(19); //352                    /*var bits356 = new uint[bits168];                  for (var i = 0; i < bits168; ++i)                  {                      bits356[i] = packet.ReadBits(2);                  }*/                    hasFallData = packet.ReadBit(); //132                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasSplineElevation = !packet.ReadBit("Has SplineElevation"' index);//136                  moveInfo.HasSplineData = packet.ReadBit("Has SplineData"' index);                  var bit141 = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineVerticalAcceleration = packet.ReadBit(); //260                          hasSplineStartTime = packet.ReadBit(); //252                          var bit304 = packet.ReadBit();                            splineCount = packet.ReadBits(20);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                            if (bit304)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits(2);                          }                      }                  }                    hasMoveFlagsExtra = !packet.ReadBit(); //20                    if (hasFallData)                      hasFallDirection = packet.ReadBit(); //128                    if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[2] = packet.ReadBit();                  var bit140 = packet.ReadBit();                  hasPitch = !packet.ReadBit("Has Pitch"' index); //104                  hasTransportData = packet.ReadBit("Has Transport Data"' index); //96                  packet.ReadBit(); // 164 fake bit                    if (hasTransportData)                  {                      transportGuid[4] = packet.ReadBit();                      transportGuid[2] = packet.ReadBit();                      hasTransportTime3 = packet.ReadBit();                      transportGuid[0] = packet.ReadBit();                      transportGuid[1] = packet.ReadBit();                      transportGuid[3] = packet.ReadBit();                      transportGuid[6] = packet.ReadBit();                      transportGuid[7] = packet.ReadBit();                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                  hasTimestamp = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  hasOrientation = !packet.ReadBit(); //40                  bit160 = !packet.ReadBit();                  guid1[5] = packet.ReadBit();                  bits98 = packet.ReadBits("bits98"' 22' index); //144                  hasMovementFlags = !packet.ReadBit();                  bits168 = packet.ReadBits(19); //352                    /*var bits356 = new uint[bits168];                  for (var i = 0; i < bits168; ++i)                  {                      bits356[i] = packet.ReadBits(2);                  }*/                    hasFallData = packet.ReadBit(); //132                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasSplineElevation = !packet.ReadBit("Has SplineElevation"' index);//136                  moveInfo.HasSplineData = packet.ReadBit("Has SplineData"' index);                  var bit141 = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineVerticalAcceleration = packet.ReadBit(); //260                          hasSplineStartTime = packet.ReadBit(); //252                          var bit304 = packet.ReadBit();                            splineCount = packet.ReadBits(20);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                            if (bit304)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits(2);                          }                      }                  }                    hasMoveFlagsExtra = !packet.ReadBit(); //20                    if (hasFallData)                      hasFallDirection = packet.ReadBit(); //128                    if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[2] = packet.ReadBit();                  var bit140 = packet.ReadBit();                  hasPitch = !packet.ReadBit("Has Pitch"' index); //104                  hasTransportData = packet.ReadBit("Has Transport Data"' index); //96                  packet.ReadBit(); // 164 fake bit                    if (hasTransportData)                  {                      transportGuid[4] = packet.ReadBit();                      transportGuid[2] = packet.ReadBit();                      hasTransportTime3 = packet.ReadBit();                      transportGuid[0] = packet.ReadBit();                      transportGuid[1] = packet.ReadBit();                      transportGuid[3] = packet.ReadBit();                      transportGuid[6] = packet.ReadBit();                      transportGuid[7] = packet.ReadBit();                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                  hasTimestamp = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  hasOrientation = !packet.ReadBit(); //40                  bit160 = !packet.ReadBit();                  guid1[5] = packet.ReadBit();                  bits98 = packet.ReadBits("bits98"' 22' index); //144                  hasMovementFlags = !packet.ReadBit();                  bits168 = packet.ReadBits(19); //352                    /*var bits356 = new uint[bits168];                  for (var i = 0; i < bits168; ++i)                  {                      bits356[i] = packet.ReadBits(2);                  }*/                    hasFallData = packet.ReadBit(); //132                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasSplineElevation = !packet.ReadBit("Has SplineElevation"' index);//136                  moveInfo.HasSplineData = packet.ReadBit("Has SplineData"' index);                  var bit141 = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineVerticalAcceleration = packet.ReadBit(); //260                          hasSplineStartTime = packet.ReadBit(); //252                          var bit304 = packet.ReadBit();                            splineCount = packet.ReadBits(20);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                            if (bit304)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits(2);                          }                      }                  }                    hasMoveFlagsExtra = !packet.ReadBit(); //20                    if (hasFallData)                      hasFallDirection = packet.ReadBit(); //128                    if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[2] = packet.ReadBit();                  var bit140 = packet.ReadBit();                  hasPitch = !packet.ReadBit("Has Pitch"' index); //104                  hasTransportData = packet.ReadBit("Has Transport Data"' index); //96                  packet.ReadBit(); // 164 fake bit                    if (hasTransportData)                  {                      transportGuid[4] = packet.ReadBit();                      transportGuid[2] = packet.ReadBit();                      hasTransportTime3 = packet.ReadBit();                      transportGuid[0] = packet.ReadBit();                      transportGuid[1] = packet.ReadBit();                      transportGuid[3] = packet.ReadBit();                      transportGuid[6] = packet.ReadBit();                      transportGuid[7] = packet.ReadBit();                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                  hasTimestamp = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  hasOrientation = !packet.ReadBit(); //40                  bit160 = !packet.ReadBit();                  guid1[5] = packet.ReadBit();                  bits98 = packet.ReadBits("bits98"' 22' index); //144                  hasMovementFlags = !packet.ReadBit();                  bits168 = packet.ReadBits(19); //352                    /*var bits356 = new uint[bits168];                  for (var i = 0; i < bits168; ++i)                  {                      bits356[i] = packet.ReadBits(2);                  }*/                    hasFallData = packet.ReadBit(); //132                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasSplineElevation = !packet.ReadBit("Has SplineElevation"' index);//136                  moveInfo.HasSplineData = packet.ReadBit("Has SplineData"' index);                  var bit141 = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineVerticalAcceleration = packet.ReadBit(); //260                          hasSplineStartTime = packet.ReadBit(); //252                          var bit304 = packet.ReadBit();                            splineCount = packet.ReadBits(20);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                            if (bit304)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits(2);                          }                      }                  }                    hasMoveFlagsExtra = !packet.ReadBit(); //20                    if (hasFallData)                      hasFallDirection = packet.ReadBit(); //128                    if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[2] = packet.ReadBit();                  var bit140 = packet.ReadBit();                  hasPitch = !packet.ReadBit("Has Pitch"' index); //104                  hasTransportData = packet.ReadBit("Has Transport Data"' index); //96                  packet.ReadBit(); // 164 fake bit                    if (hasTransportData)                  {                      transportGuid[4] = packet.ReadBit();                      transportGuid[2] = packet.ReadBit();                      hasTransportTime3 = packet.ReadBit();                      transportGuid[0] = packet.ReadBit();                      transportGuid[1] = packet.ReadBit();                      transportGuid[3] = packet.ReadBit();                      transportGuid[6] = packet.ReadBit();                      transportGuid[7] = packet.ReadBit();                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                  hasTimestamp = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  hasOrientation = !packet.ReadBit(); //40                  bit160 = !packet.ReadBit();                  guid1[5] = packet.ReadBit();                  bits98 = packet.ReadBits("bits98"' 22' index); //144                  hasMovementFlags = !packet.ReadBit();                  bits168 = packet.ReadBits(19); //352                    /*var bits356 = new uint[bits168];                  for (var i = 0; i < bits168; ++i)                  {                      bits356[i] = packet.ReadBits(2);                  }*/                    hasFallData = packet.ReadBit(); //132                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasSplineElevation = !packet.ReadBit("Has SplineElevation"' index);//136                  moveInfo.HasSplineData = packet.ReadBit("Has SplineData"' index);                  var bit141 = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineVerticalAcceleration = packet.ReadBit(); //260                          hasSplineStartTime = packet.ReadBit(); //252                          var bit304 = packet.ReadBit();                            splineCount = packet.ReadBits(20);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                            if (bit304)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits(2);                          }                      }                  }                    hasMoveFlagsExtra = !packet.ReadBit(); //20                    if (hasFallData)                      hasFallDirection = packet.ReadBit(); //128                    if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  guid1[2] = packet.ReadBit();                  var bit140 = packet.ReadBit();                  hasPitch = !packet.ReadBit("Has Pitch"' index); //104                  hasTransportData = packet.ReadBit("Has Transport Data"' index); //96                  packet.ReadBit(); // 164 fake bit                    if (hasTransportData)                  {                      transportGuid[4] = packet.ReadBit();                      transportGuid[2] = packet.ReadBit();                      hasTransportTime3 = packet.ReadBit();                      transportGuid[0] = packet.ReadBit();                      transportGuid[1] = packet.ReadBit();                      transportGuid[3] = packet.ReadBit();                      transportGuid[6] = packet.ReadBit();                      transportGuid[7] = packet.ReadBit();                      hasTransportTime2 = packet.ReadBit();                      transportGuid[5] = packet.ReadBit();                  }                  hasTimestamp = !packet.ReadBit();                  guid1[6] = packet.ReadBit();                  guid1[4] = packet.ReadBit();                  guid1[3] = packet.ReadBit();                  hasOrientation = !packet.ReadBit(); //40                  bit160 = !packet.ReadBit();                  guid1[5] = packet.ReadBit();                  bits98 = packet.ReadBits("bits98"' 22' index); //144                  hasMovementFlags = !packet.ReadBit();                  bits168 = packet.ReadBits(19); //352                    /*var bits356 = new uint[bits168];                  for (var i = 0; i < bits168; ++i)                  {                      bits356[i] = packet.ReadBits(2);                  }*/                    hasFallData = packet.ReadBit(); //132                    if (hasMovementFlags)                      moveInfo.Flags = packet.ReadBitsE<MovementFlag>("Movement Flags"' 30' index);                    hasSplineElevation = !packet.ReadBit("Has SplineElevation"' index);//136                  moveInfo.HasSplineData = packet.ReadBit("Has SplineData"' index);                  var bit141 = packet.ReadBit();                  guid1[0] = packet.ReadBit();                  guid1[7] = packet.ReadBit();                  guid1[1] = packet.ReadBit();                    if (moveInfo.HasSplineData)                  {                      hasFullSpline = packet.ReadBit();                      if (hasFullSpline)                      {                          hasSplineVerticalAcceleration = packet.ReadBit(); //260                          hasSplineStartTime = packet.ReadBit(); //252                          var bit304 = packet.ReadBit();                            splineCount = packet.ReadBits(20);                          packet.ReadBitsE<SplineMode>("Spline Mode"' 2' index);                          packet.ReadBitsE<SplineFlag434>("Spline flags"' 25' index);                            if (bit304)                          {                              bits138 = packet.ReadBits(21);                              packet.ReadBits(2);                          }                      }                  }                    hasMoveFlagsExtra = !packet.ReadBit(); //20                    if (hasFallData)                      hasFallDirection = packet.ReadBit(); //128                    if (hasMoveFlagsExtra)                      moveInfo.FlagsExtra = packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13' index);                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasTransportPosition) //424              {                  packet.StartBitStream(goTransportGuid' 4' 1' 0);                  hasGOTransportTime2 = packet.ReadBit(); // 420                  packet.StartBitStream(goTransportGuid' 6' 5' 3' 2' 7);                  hasGOTransportTime3 = packet.ReadBit(); // 412                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasTransportPosition) //424              {                  packet.StartBitStream(goTransportGuid' 4' 1' 0);                  hasGOTransportTime2 = packet.ReadBit(); // 420                  packet.StartBitStream(goTransportGuid' 6' 5' 3' 2' 7);                  hasGOTransportTime3 = packet.ReadBit(); // 412                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasTransportPosition) //424              {                  packet.StartBitStream(goTransportGuid' 4' 1' 0);                  hasGOTransportTime2 = packet.ReadBit(); // 420                  packet.StartBitStream(goTransportGuid' 6' 5' 3' 2' 7);                  hasGOTransportTime3 = packet.ReadBit(); // 412                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasTransportPosition) //424              {                  packet.StartBitStream(goTransportGuid' 4' 1' 0);                  hasGOTransportTime2 = packet.ReadBit(); // 420                  packet.StartBitStream(goTransportGuid' 6' 5' 3' 2' 7);                  hasGOTransportTime3 = packet.ReadBit(); // 412                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasTransportPosition) //424              {                  packet.StartBitStream(goTransportGuid' 4' 1' 0);                  hasGOTransportTime2 = packet.ReadBit(); // 420                  packet.StartBitStream(goTransportGuid' 6' 5' 3' 2' 7);                  hasGOTransportTime3 = packet.ReadBit(); // 412                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasTransportPosition) //424              {                  packet.StartBitStream(goTransportGuid' 4' 1' 0);                  hasGOTransportTime2 = packet.ReadBit(); // 420                  packet.StartBitStream(goTransportGuid' 6' 5' 3' 2' 7);                  hasGOTransportTime3 = packet.ReadBit(); // 412                }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit668)              {                  bit528 = packet.ReadBit();                  bit600 = packet.ReadBit();                  bit544 = packet.ReadBit();                  bit526 = packet.ReadBit();                  bit552 = packet.ReadBit();                  bit524 = packet.ReadBit();                  bit572 = packet.ReadBit();                  bit525 = packet.ReadBit();                  bit664 = packet.ReadBit();                  bit527 = packet.ReadBit();                    if (bit664)                      bits288 = packet.ReadBits(20);                    bit536 = packet.ReadBit();                  bit644 = packet.ReadBit();                  bit560 = packet.ReadBit();                    if (bit664)                  {                      bits25C = packet.ReadBits(21); //604                      bits26C = packet.ReadBits(21); //624                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit668)              {                  bit528 = packet.ReadBit();                  bit600 = packet.ReadBit();                  bit544 = packet.ReadBit();                  bit526 = packet.ReadBit();                  bit552 = packet.ReadBit();                  bit524 = packet.ReadBit();                  bit572 = packet.ReadBit();                  bit525 = packet.ReadBit();                  bit664 = packet.ReadBit();                  bit527 = packet.ReadBit();                    if (bit664)                      bits288 = packet.ReadBits(20);                    bit536 = packet.ReadBit();                  bit644 = packet.ReadBit();                  bit560 = packet.ReadBit();                    if (bit664)                  {                      bits25C = packet.ReadBits(21); //604                      bits26C = packet.ReadBits(21); //624                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit668)              {                  bit528 = packet.ReadBit();                  bit600 = packet.ReadBit();                  bit544 = packet.ReadBit();                  bit526 = packet.ReadBit();                  bit552 = packet.ReadBit();                  bit524 = packet.ReadBit();                  bit572 = packet.ReadBit();                  bit525 = packet.ReadBit();                  bit664 = packet.ReadBit();                  bit527 = packet.ReadBit();                    if (bit664)                      bits288 = packet.ReadBits(20);                    bit536 = packet.ReadBit();                  bit644 = packet.ReadBit();                  bit560 = packet.ReadBit();                    if (bit664)                  {                      bits25C = packet.ReadBits(21); //604                      bits26C = packet.ReadBits(21); //624                  }              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  attackingTargetGuid = packet.StartBitStream(4' 6' 5' 2' 0' 1' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  attackingTargetGuid = packet.StartBitStream(4' 6' 5' 2' 0' 1' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  attackingTargetGuid = packet.StartBitStream(4' 6' 5' 2' 0' 1' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  attackingTargetGuid = packet.StartBitStream(4' 6' 5' 2' 0' 1' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  attackingTargetGuid = packet.StartBitStream(4' 6' 5' 2' 0' 1' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)                  attackingTargetGuid = packet.StartBitStream(4' 6' 5' 2' 0' 1' 3' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit1064)                  bits418 = packet.ReadBits(22);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (bit810)                  bits2AA = packet.ReadBits(7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData) //96                  {                      packet.ReadXORByte(transportGuid' 7);                      moveInfo.TransportOffset.X = packet.ReadSingle();                        if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 4);                      packet.ReadXORByte(transportGuid' 1);                      packet.ReadXORByte(transportGuid' 3);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 5);                        if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 0);                      var seat = packet.ReadSByte("Transport Seat"' index); //72                      packet.ReadXORByte(transportGuid' 6);                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index); //76                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                            Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 4);                    /*for (var i = 0; i < 10; ++i)                      packet.ReadSingle("unk float");                  if (bits98 > 0)                      packet.ReadBits((int)bits98);*/                  //for (var i = 0; i < bits98; ++i)                  //    packet.ReadInt32("Int9C"' index' i);                    if (moveInfo.HasSplineData) //344                  {                      if (hasFullSpline) //336                      {                          packet.ReadUInt32("Spline Time"' index); //232                          packet.ReadSingle("Duration Mod Next"' index); //244                            //    NYI block here                          packet.ReadSingle("Duration Mod"' index); //240                            for (uint i = 0; i < splineCount; i++)                          {                              Vector3 v = new Vector3();                              v.X = packet.ReadSingle(); //0                              v.Z = packet.ReadSingle(); //8                              v.Y = packet.ReadSingle(); //4                                packet.AddValue("Spline"' v' index);                          }                            if (hasSplineStartTime)                              packet.ReadUInt32("Spline Start time"' index); //256                            var type = packet.ReadByte(); // 228                            switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle) // == 4                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot) // == 2                              packet.ReadVector3("Facing spot"' index);                            if (hasSplineVerticalAcceleration) //252                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadUInt32("Spline FULL Time"' index); //236                        }                        moveInfo.Position.X = packet.ReadSingle(); //212                      moveInfo.Position.Z = packet.ReadSingle(); //220                      packet.ReadUInt32("Spline ID"' index); //208                      moveInfo.Position.Y = packet.ReadSingle(); //216                  }                  packet.ReadSingle("Fly Speed"' index); //188                    if (bit160)                      packet.ReadUInt32("unk160");                    packet.ReadXORByte(guid1' 2);                    if (hasFallData) //132                  {                      if (hasFallDirection)//128                      {                          packet.ReadSingle("Jump Sin Angle"' index); //124                          packet.ReadSingle("Jump XY Speed"' index); //116                          packet.ReadSingle("Jump Cos Angle"' index); //120                        }                      packet.ReadUInt32("Jump Fall Time"' index); //108                      packet.ReadSingle("Jump Z Speed"' index); //112                  }                  packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time?"' index);                    packet.ReadSingle("Swim Speed"' index); //176                    if (hasSplineElevation) //136                      packet.ReadSingle("Spline Elevation"' index);//196                    packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Pitch Speed"' index); //200                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("UNK counter"' index' i);                    moveInfo.Position.X = packet.ReadSingle(); //28                    if (hasPitch)                      packet.ReadSingle("Pitch"' index); //104                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle("Orientation"' index); //40                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f; // 168                  moveInfo.Position.Y = packet.ReadSingle(); //32                  packet.ReadSingle("Fly Back Speed"' index); //192                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Run Back Speed"' index);//184                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f; //172                  packet.ReadSingle("Swim Back Speed"' index);//180                  moveInfo.Position.Z = packet.ReadSingle(); //36              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData) //96                  {                      packet.ReadXORByte(transportGuid' 7);                      moveInfo.TransportOffset.X = packet.ReadSingle();                        if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 4);                      packet.ReadXORByte(transportGuid' 1);                      packet.ReadXORByte(transportGuid' 3);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 5);                        if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 0);                      var seat = packet.ReadSByte("Transport Seat"' index); //72                      packet.ReadXORByte(transportGuid' 6);                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index); //76                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                            Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 4);                    /*for (var i = 0; i < 10; ++i)                      packet.ReadSingle("unk float");                  if (bits98 > 0)                      packet.ReadBits((int)bits98);*/                  //for (var i = 0; i < bits98; ++i)                  //    packet.ReadInt32("Int9C"' index' i);                    if (moveInfo.HasSplineData) //344                  {                      if (hasFullSpline) //336                      {                          packet.ReadUInt32("Spline Time"' index); //232                          packet.ReadSingle("Duration Mod Next"' index); //244                            //    NYI block here                          packet.ReadSingle("Duration Mod"' index); //240                            for (uint i = 0; i < splineCount; i++)                          {                              Vector3 v = new Vector3();                              v.X = packet.ReadSingle(); //0                              v.Z = packet.ReadSingle(); //8                              v.Y = packet.ReadSingle(); //4                                packet.AddValue("Spline"' v' index);                          }                            if (hasSplineStartTime)                              packet.ReadUInt32("Spline Start time"' index); //256                            var type = packet.ReadByte(); // 228                            switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle) // == 4                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot) // == 2                              packet.ReadVector3("Facing spot"' index);                            if (hasSplineVerticalAcceleration) //252                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadUInt32("Spline FULL Time"' index); //236                        }                        moveInfo.Position.X = packet.ReadSingle(); //212                      moveInfo.Position.Z = packet.ReadSingle(); //220                      packet.ReadUInt32("Spline ID"' index); //208                      moveInfo.Position.Y = packet.ReadSingle(); //216                  }                  packet.ReadSingle("Fly Speed"' index); //188                    if (bit160)                      packet.ReadUInt32("unk160");                    packet.ReadXORByte(guid1' 2);                    if (hasFallData) //132                  {                      if (hasFallDirection)//128                      {                          packet.ReadSingle("Jump Sin Angle"' index); //124                          packet.ReadSingle("Jump XY Speed"' index); //116                          packet.ReadSingle("Jump Cos Angle"' index); //120                        }                      packet.ReadUInt32("Jump Fall Time"' index); //108                      packet.ReadSingle("Jump Z Speed"' index); //112                  }                  packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time?"' index);                    packet.ReadSingle("Swim Speed"' index); //176                    if (hasSplineElevation) //136                      packet.ReadSingle("Spline Elevation"' index);//196                    packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Pitch Speed"' index); //200                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("UNK counter"' index' i);                    moveInfo.Position.X = packet.ReadSingle(); //28                    if (hasPitch)                      packet.ReadSingle("Pitch"' index); //104                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle("Orientation"' index); //40                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f; // 168                  moveInfo.Position.Y = packet.ReadSingle(); //32                  packet.ReadSingle("Fly Back Speed"' index); //192                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Run Back Speed"' index);//184                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f; //172                  packet.ReadSingle("Swim Back Speed"' index);//180                  moveInfo.Position.Z = packet.ReadSingle(); //36              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData) //96                  {                      packet.ReadXORByte(transportGuid' 7);                      moveInfo.TransportOffset.X = packet.ReadSingle();                        if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 4);                      packet.ReadXORByte(transportGuid' 1);                      packet.ReadXORByte(transportGuid' 3);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 5);                        if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 0);                      var seat = packet.ReadSByte("Transport Seat"' index); //72                      packet.ReadXORByte(transportGuid' 6);                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index); //76                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                            Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 4);                    /*for (var i = 0; i < 10; ++i)                      packet.ReadSingle("unk float");                  if (bits98 > 0)                      packet.ReadBits((int)bits98);*/                  //for (var i = 0; i < bits98; ++i)                  //    packet.ReadInt32("Int9C"' index' i);                    if (moveInfo.HasSplineData) //344                  {                      if (hasFullSpline) //336                      {                          packet.ReadUInt32("Spline Time"' index); //232                          packet.ReadSingle("Duration Mod Next"' index); //244                            //    NYI block here                          packet.ReadSingle("Duration Mod"' index); //240                            for (uint i = 0; i < splineCount; i++)                          {                              Vector3 v = new Vector3();                              v.X = packet.ReadSingle(); //0                              v.Z = packet.ReadSingle(); //8                              v.Y = packet.ReadSingle(); //4                                packet.AddValue("Spline"' v' index);                          }                            if (hasSplineStartTime)                              packet.ReadUInt32("Spline Start time"' index); //256                            var type = packet.ReadByte(); // 228                            switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle) // == 4                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot) // == 2                              packet.ReadVector3("Facing spot"' index);                            if (hasSplineVerticalAcceleration) //252                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadUInt32("Spline FULL Time"' index); //236                        }                        moveInfo.Position.X = packet.ReadSingle(); //212                      moveInfo.Position.Z = packet.ReadSingle(); //220                      packet.ReadUInt32("Spline ID"' index); //208                      moveInfo.Position.Y = packet.ReadSingle(); //216                  }                  packet.ReadSingle("Fly Speed"' index); //188                    if (bit160)                      packet.ReadUInt32("unk160");                    packet.ReadXORByte(guid1' 2);                    if (hasFallData) //132                  {                      if (hasFallDirection)//128                      {                          packet.ReadSingle("Jump Sin Angle"' index); //124                          packet.ReadSingle("Jump XY Speed"' index); //116                          packet.ReadSingle("Jump Cos Angle"' index); //120                        }                      packet.ReadUInt32("Jump Fall Time"' index); //108                      packet.ReadSingle("Jump Z Speed"' index); //112                  }                  packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time?"' index);                    packet.ReadSingle("Swim Speed"' index); //176                    if (hasSplineElevation) //136                      packet.ReadSingle("Spline Elevation"' index);//196                    packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Pitch Speed"' index); //200                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("UNK counter"' index' i);                    moveInfo.Position.X = packet.ReadSingle(); //28                    if (hasPitch)                      packet.ReadSingle("Pitch"' index); //104                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle("Orientation"' index); //40                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f; // 168                  moveInfo.Position.Y = packet.ReadSingle(); //32                  packet.ReadSingle("Fly Back Speed"' index); //192                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Run Back Speed"' index);//184                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f; //172                  packet.ReadSingle("Swim Back Speed"' index);//180                  moveInfo.Position.Z = packet.ReadSingle(); //36              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData) //96                  {                      packet.ReadXORByte(transportGuid' 7);                      moveInfo.TransportOffset.X = packet.ReadSingle();                        if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 4);                      packet.ReadXORByte(transportGuid' 1);                      packet.ReadXORByte(transportGuid' 3);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 5);                        if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 0);                      var seat = packet.ReadSByte("Transport Seat"' index); //72                      packet.ReadXORByte(transportGuid' 6);                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index); //76                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                            Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 4);                    /*for (var i = 0; i < 10; ++i)                      packet.ReadSingle("unk float");                  if (bits98 > 0)                      packet.ReadBits((int)bits98);*/                  //for (var i = 0; i < bits98; ++i)                  //    packet.ReadInt32("Int9C"' index' i);                    if (moveInfo.HasSplineData) //344                  {                      if (hasFullSpline) //336                      {                          packet.ReadUInt32("Spline Time"' index); //232                          packet.ReadSingle("Duration Mod Next"' index); //244                            //    NYI block here                          packet.ReadSingle("Duration Mod"' index); //240                            for (uint i = 0; i < splineCount; i++)                          {                              Vector3 v = new Vector3();                              v.X = packet.ReadSingle(); //0                              v.Z = packet.ReadSingle(); //8                              v.Y = packet.ReadSingle(); //4                                packet.AddValue("Spline"' v' index);                          }                            if (hasSplineStartTime)                              packet.ReadUInt32("Spline Start time"' index); //256                            var type = packet.ReadByte(); // 228                            switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle) // == 4                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot) // == 2                              packet.ReadVector3("Facing spot"' index);                            if (hasSplineVerticalAcceleration) //252                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadUInt32("Spline FULL Time"' index); //236                        }                        moveInfo.Position.X = packet.ReadSingle(); //212                      moveInfo.Position.Z = packet.ReadSingle(); //220                      packet.ReadUInt32("Spline ID"' index); //208                      moveInfo.Position.Y = packet.ReadSingle(); //216                  }                  packet.ReadSingle("Fly Speed"' index); //188                    if (bit160)                      packet.ReadUInt32("unk160");                    packet.ReadXORByte(guid1' 2);                    if (hasFallData) //132                  {                      if (hasFallDirection)//128                      {                          packet.ReadSingle("Jump Sin Angle"' index); //124                          packet.ReadSingle("Jump XY Speed"' index); //116                          packet.ReadSingle("Jump Cos Angle"' index); //120                        }                      packet.ReadUInt32("Jump Fall Time"' index); //108                      packet.ReadSingle("Jump Z Speed"' index); //112                  }                  packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time?"' index);                    packet.ReadSingle("Swim Speed"' index); //176                    if (hasSplineElevation) //136                      packet.ReadSingle("Spline Elevation"' index);//196                    packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Pitch Speed"' index); //200                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("UNK counter"' index' i);                    moveInfo.Position.X = packet.ReadSingle(); //28                    if (hasPitch)                      packet.ReadSingle("Pitch"' index); //104                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle("Orientation"' index); //40                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f; // 168                  moveInfo.Position.Y = packet.ReadSingle(); //32                  packet.ReadSingle("Fly Back Speed"' index); //192                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Run Back Speed"' index);//184                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f; //172                  packet.ReadSingle("Swim Back Speed"' index);//180                  moveInfo.Position.Z = packet.ReadSingle(); //36              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData) //96                  {                      packet.ReadXORByte(transportGuid' 7);                      moveInfo.TransportOffset.X = packet.ReadSingle();                        if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 4);                      packet.ReadXORByte(transportGuid' 1);                      packet.ReadXORByte(transportGuid' 3);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 5);                        if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 0);                      var seat = packet.ReadSByte("Transport Seat"' index); //72                      packet.ReadXORByte(transportGuid' 6);                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index); //76                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                            Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 4);                    /*for (var i = 0; i < 10; ++i)                      packet.ReadSingle("unk float");                  if (bits98 > 0)                      packet.ReadBits((int)bits98);*/                  //for (var i = 0; i < bits98; ++i)                  //    packet.ReadInt32("Int9C"' index' i);                    if (moveInfo.HasSplineData) //344                  {                      if (hasFullSpline) //336                      {                          packet.ReadUInt32("Spline Time"' index); //232                          packet.ReadSingle("Duration Mod Next"' index); //244                            //    NYI block here                          packet.ReadSingle("Duration Mod"' index); //240                            for (uint i = 0; i < splineCount; i++)                          {                              Vector3 v = new Vector3();                              v.X = packet.ReadSingle(); //0                              v.Z = packet.ReadSingle(); //8                              v.Y = packet.ReadSingle(); //4                                packet.AddValue("Spline"' v' index);                          }                            if (hasSplineStartTime)                              packet.ReadUInt32("Spline Start time"' index); //256                            var type = packet.ReadByte(); // 228                            switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle) // == 4                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot) // == 2                              packet.ReadVector3("Facing spot"' index);                            if (hasSplineVerticalAcceleration) //252                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadUInt32("Spline FULL Time"' index); //236                        }                        moveInfo.Position.X = packet.ReadSingle(); //212                      moveInfo.Position.Z = packet.ReadSingle(); //220                      packet.ReadUInt32("Spline ID"' index); //208                      moveInfo.Position.Y = packet.ReadSingle(); //216                  }                  packet.ReadSingle("Fly Speed"' index); //188                    if (bit160)                      packet.ReadUInt32("unk160");                    packet.ReadXORByte(guid1' 2);                    if (hasFallData) //132                  {                      if (hasFallDirection)//128                      {                          packet.ReadSingle("Jump Sin Angle"' index); //124                          packet.ReadSingle("Jump XY Speed"' index); //116                          packet.ReadSingle("Jump Cos Angle"' index); //120                        }                      packet.ReadUInt32("Jump Fall Time"' index); //108                      packet.ReadSingle("Jump Z Speed"' index); //112                  }                  packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time?"' index);                    packet.ReadSingle("Swim Speed"' index); //176                    if (hasSplineElevation) //136                      packet.ReadSingle("Spline Elevation"' index);//196                    packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Pitch Speed"' index); //200                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("UNK counter"' index' i);                    moveInfo.Position.X = packet.ReadSingle(); //28                    if (hasPitch)                      packet.ReadSingle("Pitch"' index); //104                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle("Orientation"' index); //40                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f; // 168                  moveInfo.Position.Y = packet.ReadSingle(); //32                  packet.ReadSingle("Fly Back Speed"' index); //192                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Run Back Speed"' index);//184                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f; //172                  packet.ReadSingle("Swim Back Speed"' index);//180                  moveInfo.Position.Z = packet.ReadSingle(); //36              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData) //96                  {                      packet.ReadXORByte(transportGuid' 7);                      moveInfo.TransportOffset.X = packet.ReadSingle();                        if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 4);                      packet.ReadXORByte(transportGuid' 1);                      packet.ReadXORByte(transportGuid' 3);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 5);                        if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 0);                      var seat = packet.ReadSByte("Transport Seat"' index); //72                      packet.ReadXORByte(transportGuid' 6);                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index); //76                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                            Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 4);                    /*for (var i = 0; i < 10; ++i)                      packet.ReadSingle("unk float");                  if (bits98 > 0)                      packet.ReadBits((int)bits98);*/                  //for (var i = 0; i < bits98; ++i)                  //    packet.ReadInt32("Int9C"' index' i);                    if (moveInfo.HasSplineData) //344                  {                      if (hasFullSpline) //336                      {                          packet.ReadUInt32("Spline Time"' index); //232                          packet.ReadSingle("Duration Mod Next"' index); //244                            //    NYI block here                          packet.ReadSingle("Duration Mod"' index); //240                            for (uint i = 0; i < splineCount; i++)                          {                              Vector3 v = new Vector3();                              v.X = packet.ReadSingle(); //0                              v.Z = packet.ReadSingle(); //8                              v.Y = packet.ReadSingle(); //4                                packet.AddValue("Spline"' v' index);                          }                            if (hasSplineStartTime)                              packet.ReadUInt32("Spline Start time"' index); //256                            var type = packet.ReadByte(); // 228                            switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle) // == 4                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot) // == 2                              packet.ReadVector3("Facing spot"' index);                            if (hasSplineVerticalAcceleration) //252                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadUInt32("Spline FULL Time"' index); //236                        }                        moveInfo.Position.X = packet.ReadSingle(); //212                      moveInfo.Position.Z = packet.ReadSingle(); //220                      packet.ReadUInt32("Spline ID"' index); //208                      moveInfo.Position.Y = packet.ReadSingle(); //216                  }                  packet.ReadSingle("Fly Speed"' index); //188                    if (bit160)                      packet.ReadUInt32("unk160");                    packet.ReadXORByte(guid1' 2);                    if (hasFallData) //132                  {                      if (hasFallDirection)//128                      {                          packet.ReadSingle("Jump Sin Angle"' index); //124                          packet.ReadSingle("Jump XY Speed"' index); //116                          packet.ReadSingle("Jump Cos Angle"' index); //120                        }                      packet.ReadUInt32("Jump Fall Time"' index); //108                      packet.ReadSingle("Jump Z Speed"' index); //112                  }                  packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time?"' index);                    packet.ReadSingle("Swim Speed"' index); //176                    if (hasSplineElevation) //136                      packet.ReadSingle("Spline Elevation"' index);//196                    packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Pitch Speed"' index); //200                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("UNK counter"' index' i);                    moveInfo.Position.X = packet.ReadSingle(); //28                    if (hasPitch)                      packet.ReadSingle("Pitch"' index); //104                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle("Orientation"' index); //40                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f; // 168                  moveInfo.Position.Y = packet.ReadSingle(); //32                  packet.ReadSingle("Fly Back Speed"' index); //192                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Run Back Speed"' index);//184                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f; //172                  packet.ReadSingle("Swim Back Speed"' index);//180                  moveInfo.Position.Z = packet.ReadSingle(); //36              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData) //96                  {                      packet.ReadXORByte(transportGuid' 7);                      moveInfo.TransportOffset.X = packet.ReadSingle();                        if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 4);                      packet.ReadXORByte(transportGuid' 1);                      packet.ReadXORByte(transportGuid' 3);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 5);                        if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 0);                      var seat = packet.ReadSByte("Transport Seat"' index); //72                      packet.ReadXORByte(transportGuid' 6);                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index); //76                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                            Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 4);                    /*for (var i = 0; i < 10; ++i)                      packet.ReadSingle("unk float");                  if (bits98 > 0)                      packet.ReadBits((int)bits98);*/                  //for (var i = 0; i < bits98; ++i)                  //    packet.ReadInt32("Int9C"' index' i);                    if (moveInfo.HasSplineData) //344                  {                      if (hasFullSpline) //336                      {                          packet.ReadUInt32("Spline Time"' index); //232                          packet.ReadSingle("Duration Mod Next"' index); //244                            //    NYI block here                          packet.ReadSingle("Duration Mod"' index); //240                            for (uint i = 0; i < splineCount; i++)                          {                              Vector3 v = new Vector3();                              v.X = packet.ReadSingle(); //0                              v.Z = packet.ReadSingle(); //8                              v.Y = packet.ReadSingle(); //4                                packet.AddValue("Spline"' v' index);                          }                            if (hasSplineStartTime)                              packet.ReadUInt32("Spline Start time"' index); //256                            var type = packet.ReadByte(); // 228                            switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle) // == 4                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot) // == 2                              packet.ReadVector3("Facing spot"' index);                            if (hasSplineVerticalAcceleration) //252                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadUInt32("Spline FULL Time"' index); //236                        }                        moveInfo.Position.X = packet.ReadSingle(); //212                      moveInfo.Position.Z = packet.ReadSingle(); //220                      packet.ReadUInt32("Spline ID"' index); //208                      moveInfo.Position.Y = packet.ReadSingle(); //216                  }                  packet.ReadSingle("Fly Speed"' index); //188                    if (bit160)                      packet.ReadUInt32("unk160");                    packet.ReadXORByte(guid1' 2);                    if (hasFallData) //132                  {                      if (hasFallDirection)//128                      {                          packet.ReadSingle("Jump Sin Angle"' index); //124                          packet.ReadSingle("Jump XY Speed"' index); //116                          packet.ReadSingle("Jump Cos Angle"' index); //120                        }                      packet.ReadUInt32("Jump Fall Time"' index); //108                      packet.ReadSingle("Jump Z Speed"' index); //112                  }                  packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time?"' index);                    packet.ReadSingle("Swim Speed"' index); //176                    if (hasSplineElevation) //136                      packet.ReadSingle("Spline Elevation"' index);//196                    packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Pitch Speed"' index); //200                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("UNK counter"' index' i);                    moveInfo.Position.X = packet.ReadSingle(); //28                    if (hasPitch)                      packet.ReadSingle("Pitch"' index); //104                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle("Orientation"' index); //40                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f; // 168                  moveInfo.Position.Y = packet.ReadSingle(); //32                  packet.ReadSingle("Fly Back Speed"' index); //192                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Run Back Speed"' index);//184                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f; //172                  packet.ReadSingle("Swim Back Speed"' index);//180                  moveInfo.Position.Z = packet.ReadSingle(); //36              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData) //96                  {                      packet.ReadXORByte(transportGuid' 7);                      moveInfo.TransportOffset.X = packet.ReadSingle();                        if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 4);                      packet.ReadXORByte(transportGuid' 1);                      packet.ReadXORByte(transportGuid' 3);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 5);                        if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 0);                      var seat = packet.ReadSByte("Transport Seat"' index); //72                      packet.ReadXORByte(transportGuid' 6);                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index); //76                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                            Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 4);                    /*for (var i = 0; i < 10; ++i)                      packet.ReadSingle("unk float");                  if (bits98 > 0)                      packet.ReadBits((int)bits98);*/                  //for (var i = 0; i < bits98; ++i)                  //    packet.ReadInt32("Int9C"' index' i);                    if (moveInfo.HasSplineData) //344                  {                      if (hasFullSpline) //336                      {                          packet.ReadUInt32("Spline Time"' index); //232                          packet.ReadSingle("Duration Mod Next"' index); //244                            //    NYI block here                          packet.ReadSingle("Duration Mod"' index); //240                            for (uint i = 0; i < splineCount; i++)                          {                              Vector3 v = new Vector3();                              v.X = packet.ReadSingle(); //0                              v.Z = packet.ReadSingle(); //8                              v.Y = packet.ReadSingle(); //4                                packet.AddValue("Spline"' v' index);                          }                            if (hasSplineStartTime)                              packet.ReadUInt32("Spline Start time"' index); //256                            var type = packet.ReadByte(); // 228                            switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle) // == 4                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot) // == 2                              packet.ReadVector3("Facing spot"' index);                            if (hasSplineVerticalAcceleration) //252                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadUInt32("Spline FULL Time"' index); //236                        }                        moveInfo.Position.X = packet.ReadSingle(); //212                      moveInfo.Position.Z = packet.ReadSingle(); //220                      packet.ReadUInt32("Spline ID"' index); //208                      moveInfo.Position.Y = packet.ReadSingle(); //216                  }                  packet.ReadSingle("Fly Speed"' index); //188                    if (bit160)                      packet.ReadUInt32("unk160");                    packet.ReadXORByte(guid1' 2);                    if (hasFallData) //132                  {                      if (hasFallDirection)//128                      {                          packet.ReadSingle("Jump Sin Angle"' index); //124                          packet.ReadSingle("Jump XY Speed"' index); //116                          packet.ReadSingle("Jump Cos Angle"' index); //120                        }                      packet.ReadUInt32("Jump Fall Time"' index); //108                      packet.ReadSingle("Jump Z Speed"' index); //112                  }                  packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time?"' index);                    packet.ReadSingle("Swim Speed"' index); //176                    if (hasSplineElevation) //136                      packet.ReadSingle("Spline Elevation"' index);//196                    packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Pitch Speed"' index); //200                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("UNK counter"' index' i);                    moveInfo.Position.X = packet.ReadSingle(); //28                    if (hasPitch)                      packet.ReadSingle("Pitch"' index); //104                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle("Orientation"' index); //40                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f; // 168                  moveInfo.Position.Y = packet.ReadSingle(); //32                  packet.ReadSingle("Fly Back Speed"' index); //192                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Run Back Speed"' index);//184                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f; //172                  packet.ReadSingle("Swim Back Speed"' index);//180                  moveInfo.Position.Z = packet.ReadSingle(); //36              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData) //96                  {                      packet.ReadXORByte(transportGuid' 7);                      moveInfo.TransportOffset.X = packet.ReadSingle();                        if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 4);                      packet.ReadXORByte(transportGuid' 1);                      packet.ReadXORByte(transportGuid' 3);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 5);                        if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 0);                      var seat = packet.ReadSByte("Transport Seat"' index); //72                      packet.ReadXORByte(transportGuid' 6);                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index); //76                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                            Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 4);                    /*for (var i = 0; i < 10; ++i)                      packet.ReadSingle("unk float");                  if (bits98 > 0)                      packet.ReadBits((int)bits98);*/                  //for (var i = 0; i < bits98; ++i)                  //    packet.ReadInt32("Int9C"' index' i);                    if (moveInfo.HasSplineData) //344                  {                      if (hasFullSpline) //336                      {                          packet.ReadUInt32("Spline Time"' index); //232                          packet.ReadSingle("Duration Mod Next"' index); //244                            //    NYI block here                          packet.ReadSingle("Duration Mod"' index); //240                            for (uint i = 0; i < splineCount; i++)                          {                              Vector3 v = new Vector3();                              v.X = packet.ReadSingle(); //0                              v.Z = packet.ReadSingle(); //8                              v.Y = packet.ReadSingle(); //4                                packet.AddValue("Spline"' v' index);                          }                            if (hasSplineStartTime)                              packet.ReadUInt32("Spline Start time"' index); //256                            var type = packet.ReadByte(); // 228                            switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle) // == 4                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot) // == 2                              packet.ReadVector3("Facing spot"' index);                            if (hasSplineVerticalAcceleration) //252                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadUInt32("Spline FULL Time"' index); //236                        }                        moveInfo.Position.X = packet.ReadSingle(); //212                      moveInfo.Position.Z = packet.ReadSingle(); //220                      packet.ReadUInt32("Spline ID"' index); //208                      moveInfo.Position.Y = packet.ReadSingle(); //216                  }                  packet.ReadSingle("Fly Speed"' index); //188                    if (bit160)                      packet.ReadUInt32("unk160");                    packet.ReadXORByte(guid1' 2);                    if (hasFallData) //132                  {                      if (hasFallDirection)//128                      {                          packet.ReadSingle("Jump Sin Angle"' index); //124                          packet.ReadSingle("Jump XY Speed"' index); //116                          packet.ReadSingle("Jump Cos Angle"' index); //120                        }                      packet.ReadUInt32("Jump Fall Time"' index); //108                      packet.ReadSingle("Jump Z Speed"' index); //112                  }                  packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time?"' index);                    packet.ReadSingle("Swim Speed"' index); //176                    if (hasSplineElevation) //136                      packet.ReadSingle("Spline Elevation"' index);//196                    packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Pitch Speed"' index); //200                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("UNK counter"' index' i);                    moveInfo.Position.X = packet.ReadSingle(); //28                    if (hasPitch)                      packet.ReadSingle("Pitch"' index); //104                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle("Orientation"' index); //40                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f; // 168                  moveInfo.Position.Y = packet.ReadSingle(); //32                  packet.ReadSingle("Fly Back Speed"' index); //192                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Run Back Speed"' index);//184                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f; //172                  packet.ReadSingle("Swim Back Speed"' index);//180                  moveInfo.Position.Z = packet.ReadSingle(); //36              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData) //96                  {                      packet.ReadXORByte(transportGuid' 7);                      moveInfo.TransportOffset.X = packet.ReadSingle();                        if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 4);                      packet.ReadXORByte(transportGuid' 1);                      packet.ReadXORByte(transportGuid' 3);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 5);                        if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 0);                      var seat = packet.ReadSByte("Transport Seat"' index); //72                      packet.ReadXORByte(transportGuid' 6);                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index); //76                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                            Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 4);                    /*for (var i = 0; i < 10; ++i)                      packet.ReadSingle("unk float");                  if (bits98 > 0)                      packet.ReadBits((int)bits98);*/                  //for (var i = 0; i < bits98; ++i)                  //    packet.ReadInt32("Int9C"' index' i);                    if (moveInfo.HasSplineData) //344                  {                      if (hasFullSpline) //336                      {                          packet.ReadUInt32("Spline Time"' index); //232                          packet.ReadSingle("Duration Mod Next"' index); //244                            //    NYI block here                          packet.ReadSingle("Duration Mod"' index); //240                            for (uint i = 0; i < splineCount; i++)                          {                              Vector3 v = new Vector3();                              v.X = packet.ReadSingle(); //0                              v.Z = packet.ReadSingle(); //8                              v.Y = packet.ReadSingle(); //4                                packet.AddValue("Spline"' v' index);                          }                            if (hasSplineStartTime)                              packet.ReadUInt32("Spline Start time"' index); //256                            var type = packet.ReadByte(); // 228                            switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle) // == 4                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot) // == 2                              packet.ReadVector3("Facing spot"' index);                            if (hasSplineVerticalAcceleration) //252                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadUInt32("Spline FULL Time"' index); //236                        }                        moveInfo.Position.X = packet.ReadSingle(); //212                      moveInfo.Position.Z = packet.ReadSingle(); //220                      packet.ReadUInt32("Spline ID"' index); //208                      moveInfo.Position.Y = packet.ReadSingle(); //216                  }                  packet.ReadSingle("Fly Speed"' index); //188                    if (bit160)                      packet.ReadUInt32("unk160");                    packet.ReadXORByte(guid1' 2);                    if (hasFallData) //132                  {                      if (hasFallDirection)//128                      {                          packet.ReadSingle("Jump Sin Angle"' index); //124                          packet.ReadSingle("Jump XY Speed"' index); //116                          packet.ReadSingle("Jump Cos Angle"' index); //120                        }                      packet.ReadUInt32("Jump Fall Time"' index); //108                      packet.ReadSingle("Jump Z Speed"' index); //112                  }                  packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time?"' index);                    packet.ReadSingle("Swim Speed"' index); //176                    if (hasSplineElevation) //136                      packet.ReadSingle("Spline Elevation"' index);//196                    packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Pitch Speed"' index); //200                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("UNK counter"' index' i);                    moveInfo.Position.X = packet.ReadSingle(); //28                    if (hasPitch)                      packet.ReadSingle("Pitch"' index); //104                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle("Orientation"' index); //40                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f; // 168                  moveInfo.Position.Y = packet.ReadSingle(); //32                  packet.ReadSingle("Fly Back Speed"' index); //192                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Run Back Speed"' index);//184                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f; //172                  packet.ReadSingle("Swim Back Speed"' index);//180                  moveInfo.Position.Z = packet.ReadSingle(); //36              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData) //96                  {                      packet.ReadXORByte(transportGuid' 7);                      moveInfo.TransportOffset.X = packet.ReadSingle();                        if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 4);                      packet.ReadXORByte(transportGuid' 1);                      packet.ReadXORByte(transportGuid' 3);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 5);                        if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 0);                      var seat = packet.ReadSByte("Transport Seat"' index); //72                      packet.ReadXORByte(transportGuid' 6);                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index); //76                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                            Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 4);                    /*for (var i = 0; i < 10; ++i)                      packet.ReadSingle("unk float");                  if (bits98 > 0)                      packet.ReadBits((int)bits98);*/                  //for (var i = 0; i < bits98; ++i)                  //    packet.ReadInt32("Int9C"' index' i);                    if (moveInfo.HasSplineData) //344                  {                      if (hasFullSpline) //336                      {                          packet.ReadUInt32("Spline Time"' index); //232                          packet.ReadSingle("Duration Mod Next"' index); //244                            //    NYI block here                          packet.ReadSingle("Duration Mod"' index); //240                            for (uint i = 0; i < splineCount; i++)                          {                              Vector3 v = new Vector3();                              v.X = packet.ReadSingle(); //0                              v.Z = packet.ReadSingle(); //8                              v.Y = packet.ReadSingle(); //4                                packet.AddValue("Spline"' v' index);                          }                            if (hasSplineStartTime)                              packet.ReadUInt32("Spline Start time"' index); //256                            var type = packet.ReadByte(); // 228                            switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle) // == 4                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot) // == 2                              packet.ReadVector3("Facing spot"' index);                            if (hasSplineVerticalAcceleration) //252                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadUInt32("Spline FULL Time"' index); //236                        }                        moveInfo.Position.X = packet.ReadSingle(); //212                      moveInfo.Position.Z = packet.ReadSingle(); //220                      packet.ReadUInt32("Spline ID"' index); //208                      moveInfo.Position.Y = packet.ReadSingle(); //216                  }                  packet.ReadSingle("Fly Speed"' index); //188                    if (bit160)                      packet.ReadUInt32("unk160");                    packet.ReadXORByte(guid1' 2);                    if (hasFallData) //132                  {                      if (hasFallDirection)//128                      {                          packet.ReadSingle("Jump Sin Angle"' index); //124                          packet.ReadSingle("Jump XY Speed"' index); //116                          packet.ReadSingle("Jump Cos Angle"' index); //120                        }                      packet.ReadUInt32("Jump Fall Time"' index); //108                      packet.ReadSingle("Jump Z Speed"' index); //112                  }                  packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time?"' index);                    packet.ReadSingle("Swim Speed"' index); //176                    if (hasSplineElevation) //136                      packet.ReadSingle("Spline Elevation"' index);//196                    packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Pitch Speed"' index); //200                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("UNK counter"' index' i);                    moveInfo.Position.X = packet.ReadSingle(); //28                    if (hasPitch)                      packet.ReadSingle("Pitch"' index); //104                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle("Orientation"' index); //40                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f; // 168                  moveInfo.Position.Y = packet.ReadSingle(); //32                  packet.ReadSingle("Fly Back Speed"' index); //192                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Run Back Speed"' index);//184                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f; //172                  packet.ReadSingle("Swim Back Speed"' index);//180                  moveInfo.Position.Z = packet.ReadSingle(); //36              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData) //96                  {                      packet.ReadXORByte(transportGuid' 7);                      moveInfo.TransportOffset.X = packet.ReadSingle();                        if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 4);                      packet.ReadXORByte(transportGuid' 1);                      packet.ReadXORByte(transportGuid' 3);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 5);                        if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 0);                      var seat = packet.ReadSByte("Transport Seat"' index); //72                      packet.ReadXORByte(transportGuid' 6);                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index); //76                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                            Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 4);                    /*for (var i = 0; i < 10; ++i)                      packet.ReadSingle("unk float");                  if (bits98 > 0)                      packet.ReadBits((int)bits98);*/                  //for (var i = 0; i < bits98; ++i)                  //    packet.ReadInt32("Int9C"' index' i);                    if (moveInfo.HasSplineData) //344                  {                      if (hasFullSpline) //336                      {                          packet.ReadUInt32("Spline Time"' index); //232                          packet.ReadSingle("Duration Mod Next"' index); //244                            //    NYI block here                          packet.ReadSingle("Duration Mod"' index); //240                            for (uint i = 0; i < splineCount; i++)                          {                              Vector3 v = new Vector3();                              v.X = packet.ReadSingle(); //0                              v.Z = packet.ReadSingle(); //8                              v.Y = packet.ReadSingle(); //4                                packet.AddValue("Spline"' v' index);                          }                            if (hasSplineStartTime)                              packet.ReadUInt32("Spline Start time"' index); //256                            var type = packet.ReadByte(); // 228                            switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle) // == 4                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot) // == 2                              packet.ReadVector3("Facing spot"' index);                            if (hasSplineVerticalAcceleration) //252                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadUInt32("Spline FULL Time"' index); //236                        }                        moveInfo.Position.X = packet.ReadSingle(); //212                      moveInfo.Position.Z = packet.ReadSingle(); //220                      packet.ReadUInt32("Spline ID"' index); //208                      moveInfo.Position.Y = packet.ReadSingle(); //216                  }                  packet.ReadSingle("Fly Speed"' index); //188                    if (bit160)                      packet.ReadUInt32("unk160");                    packet.ReadXORByte(guid1' 2);                    if (hasFallData) //132                  {                      if (hasFallDirection)//128                      {                          packet.ReadSingle("Jump Sin Angle"' index); //124                          packet.ReadSingle("Jump XY Speed"' index); //116                          packet.ReadSingle("Jump Cos Angle"' index); //120                        }                      packet.ReadUInt32("Jump Fall Time"' index); //108                      packet.ReadSingle("Jump Z Speed"' index); //112                  }                  packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time?"' index);                    packet.ReadSingle("Swim Speed"' index); //176                    if (hasSplineElevation) //136                      packet.ReadSingle("Spline Elevation"' index);//196                    packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Pitch Speed"' index); //200                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("UNK counter"' index' i);                    moveInfo.Position.X = packet.ReadSingle(); //28                    if (hasPitch)                      packet.ReadSingle("Pitch"' index); //104                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle("Orientation"' index); //40                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f; // 168                  moveInfo.Position.Y = packet.ReadSingle(); //32                  packet.ReadSingle("Fly Back Speed"' index); //192                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Run Back Speed"' index);//184                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f; //172                  packet.ReadSingle("Swim Back Speed"' index);//180                  moveInfo.Position.Z = packet.ReadSingle(); //36              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData) //96                  {                      packet.ReadXORByte(transportGuid' 7);                      moveInfo.TransportOffset.X = packet.ReadSingle();                        if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 4);                      packet.ReadXORByte(transportGuid' 1);                      packet.ReadXORByte(transportGuid' 3);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 5);                        if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 0);                      var seat = packet.ReadSByte("Transport Seat"' index); //72                      packet.ReadXORByte(transportGuid' 6);                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index); //76                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                            Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 4);                    /*for (var i = 0; i < 10; ++i)                      packet.ReadSingle("unk float");                  if (bits98 > 0)                      packet.ReadBits((int)bits98);*/                  //for (var i = 0; i < bits98; ++i)                  //    packet.ReadInt32("Int9C"' index' i);                    if (moveInfo.HasSplineData) //344                  {                      if (hasFullSpline) //336                      {                          packet.ReadUInt32("Spline Time"' index); //232                          packet.ReadSingle("Duration Mod Next"' index); //244                            //    NYI block here                          packet.ReadSingle("Duration Mod"' index); //240                            for (uint i = 0; i < splineCount; i++)                          {                              Vector3 v = new Vector3();                              v.X = packet.ReadSingle(); //0                              v.Z = packet.ReadSingle(); //8                              v.Y = packet.ReadSingle(); //4                                packet.AddValue("Spline"' v' index);                          }                            if (hasSplineStartTime)                              packet.ReadUInt32("Spline Start time"' index); //256                            var type = packet.ReadByte(); // 228                            switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle) // == 4                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot) // == 2                              packet.ReadVector3("Facing spot"' index);                            if (hasSplineVerticalAcceleration) //252                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadUInt32("Spline FULL Time"' index); //236                        }                        moveInfo.Position.X = packet.ReadSingle(); //212                      moveInfo.Position.Z = packet.ReadSingle(); //220                      packet.ReadUInt32("Spline ID"' index); //208                      moveInfo.Position.Y = packet.ReadSingle(); //216                  }                  packet.ReadSingle("Fly Speed"' index); //188                    if (bit160)                      packet.ReadUInt32("unk160");                    packet.ReadXORByte(guid1' 2);                    if (hasFallData) //132                  {                      if (hasFallDirection)//128                      {                          packet.ReadSingle("Jump Sin Angle"' index); //124                          packet.ReadSingle("Jump XY Speed"' index); //116                          packet.ReadSingle("Jump Cos Angle"' index); //120                        }                      packet.ReadUInt32("Jump Fall Time"' index); //108                      packet.ReadSingle("Jump Z Speed"' index); //112                  }                  packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time?"' index);                    packet.ReadSingle("Swim Speed"' index); //176                    if (hasSplineElevation) //136                      packet.ReadSingle("Spline Elevation"' index);//196                    packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Pitch Speed"' index); //200                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("UNK counter"' index' i);                    moveInfo.Position.X = packet.ReadSingle(); //28                    if (hasPitch)                      packet.ReadSingle("Pitch"' index); //104                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle("Orientation"' index); //40                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f; // 168                  moveInfo.Position.Y = packet.ReadSingle(); //32                  packet.ReadSingle("Fly Back Speed"' index); //192                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Run Back Speed"' index);//184                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f; //172                  packet.ReadSingle("Swim Back Speed"' index);//180                  moveInfo.Position.Z = packet.ReadSingle(); //36              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData) //96                  {                      packet.ReadXORByte(transportGuid' 7);                      moveInfo.TransportOffset.X = packet.ReadSingle();                        if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 4);                      packet.ReadXORByte(transportGuid' 1);                      packet.ReadXORByte(transportGuid' 3);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 5);                        if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 0);                      var seat = packet.ReadSByte("Transport Seat"' index); //72                      packet.ReadXORByte(transportGuid' 6);                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index); //76                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                            Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 4);                    /*for (var i = 0; i < 10; ++i)                      packet.ReadSingle("unk float");                  if (bits98 > 0)                      packet.ReadBits((int)bits98);*/                  //for (var i = 0; i < bits98; ++i)                  //    packet.ReadInt32("Int9C"' index' i);                    if (moveInfo.HasSplineData) //344                  {                      if (hasFullSpline) //336                      {                          packet.ReadUInt32("Spline Time"' index); //232                          packet.ReadSingle("Duration Mod Next"' index); //244                            //    NYI block here                          packet.ReadSingle("Duration Mod"' index); //240                            for (uint i = 0; i < splineCount; i++)                          {                              Vector3 v = new Vector3();                              v.X = packet.ReadSingle(); //0                              v.Z = packet.ReadSingle(); //8                              v.Y = packet.ReadSingle(); //4                                packet.AddValue("Spline"' v' index);                          }                            if (hasSplineStartTime)                              packet.ReadUInt32("Spline Start time"' index); //256                            var type = packet.ReadByte(); // 228                            switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle) // == 4                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot) // == 2                              packet.ReadVector3("Facing spot"' index);                            if (hasSplineVerticalAcceleration) //252                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadUInt32("Spline FULL Time"' index); //236                        }                        moveInfo.Position.X = packet.ReadSingle(); //212                      moveInfo.Position.Z = packet.ReadSingle(); //220                      packet.ReadUInt32("Spline ID"' index); //208                      moveInfo.Position.Y = packet.ReadSingle(); //216                  }                  packet.ReadSingle("Fly Speed"' index); //188                    if (bit160)                      packet.ReadUInt32("unk160");                    packet.ReadXORByte(guid1' 2);                    if (hasFallData) //132                  {                      if (hasFallDirection)//128                      {                          packet.ReadSingle("Jump Sin Angle"' index); //124                          packet.ReadSingle("Jump XY Speed"' index); //116                          packet.ReadSingle("Jump Cos Angle"' index); //120                        }                      packet.ReadUInt32("Jump Fall Time"' index); //108                      packet.ReadSingle("Jump Z Speed"' index); //112                  }                  packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time?"' index);                    packet.ReadSingle("Swim Speed"' index); //176                    if (hasSplineElevation) //136                      packet.ReadSingle("Spline Elevation"' index);//196                    packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Pitch Speed"' index); //200                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("UNK counter"' index' i);                    moveInfo.Position.X = packet.ReadSingle(); //28                    if (hasPitch)                      packet.ReadSingle("Pitch"' index); //104                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle("Orientation"' index); //40                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f; // 168                  moveInfo.Position.Y = packet.ReadSingle(); //32                  packet.ReadSingle("Fly Back Speed"' index); //192                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Run Back Speed"' index);//184                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f; //172                  packet.ReadSingle("Swim Back Speed"' index);//180                  moveInfo.Position.Z = packet.ReadSingle(); //36              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving)              {                  if (hasTransportData) //96                  {                      packet.ReadXORByte(transportGuid' 7);                      moveInfo.TransportOffset.X = packet.ReadSingle();                        if (hasTransportTime3)                          packet.ReadUInt32("Transport Time 3"' index);                        moveInfo.TransportOffset.O = packet.ReadSingle();                      moveInfo.TransportOffset.Y = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 4);                      packet.ReadXORByte(transportGuid' 1);                      packet.ReadXORByte(transportGuid' 3);                      moveInfo.TransportOffset.Z = packet.ReadSingle();                      packet.ReadXORByte(transportGuid' 5);                        if (hasTransportTime2)                          packet.ReadUInt32("Transport Time 2"' index);                        packet.ReadXORByte(transportGuid' 0);                      var seat = packet.ReadSByte("Transport Seat"' index); //72                      packet.ReadXORByte(transportGuid' 6);                      packet.ReadXORByte(transportGuid' 2);                      packet.ReadUInt32("Transport Time"' index); //76                        moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(transportGuid' 0));                      packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                      packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);                        if (moveInfo.TransportGuid.HasEntry() && moveInfo.TransportGuid.GetHighType() == HighGuidType.Vehicle &&                          guid.HasEntry() && guid.GetHighType() == HighGuidType.Creature)                      {                          VehicleTemplateAccessory vehicleAccessory = new VehicleTemplateAccessory                          {                              Entry = moveInfo.TransportGuid.GetEntry()'                              AccessoryEntry = guid.GetEntry()'                              SeatId = seat                          };                            Storage.VehicleTemplateAccessories.Add(vehicleAccessory' packet.TimeSpan);                      }                  }                    packet.ReadXORByte(guid1' 4);                    /*for (var i = 0; i < 10; ++i)                      packet.ReadSingle("unk float");                  if (bits98 > 0)                      packet.ReadBits((int)bits98);*/                  //for (var i = 0; i < bits98; ++i)                  //    packet.ReadInt32("Int9C"' index' i);                    if (moveInfo.HasSplineData) //344                  {                      if (hasFullSpline) //336                      {                          packet.ReadUInt32("Spline Time"' index); //232                          packet.ReadSingle("Duration Mod Next"' index); //244                            //    NYI block here                          packet.ReadSingle("Duration Mod"' index); //240                            for (uint i = 0; i < splineCount; i++)                          {                              Vector3 v = new Vector3();                              v.X = packet.ReadSingle(); //0                              v.Z = packet.ReadSingle(); //8                              v.Y = packet.ReadSingle(); //4                                packet.AddValue("Spline"' v' index);                          }                            if (hasSplineStartTime)                              packet.ReadUInt32("Spline Start time"' index); //256                            var type = packet.ReadByte(); // 228                            switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }                            if (splineType == SplineType.FacingAngle) // == 4                              packet.ReadSingle("Facing Angle"' index);                            if (splineType == SplineType.FacingSpot) // == 2                              packet.ReadVector3("Facing spot"' index);                            if (hasSplineVerticalAcceleration) //252                              packet.ReadSingle("Spline Vertical Acceleration"' index);                            packet.ReadUInt32("Spline FULL Time"' index); //236                        }                        moveInfo.Position.X = packet.ReadSingle(); //212                      moveInfo.Position.Z = packet.ReadSingle(); //220                      packet.ReadUInt32("Spline ID"' index); //208                      moveInfo.Position.Y = packet.ReadSingle(); //216                  }                  packet.ReadSingle("Fly Speed"' index); //188                    if (bit160)                      packet.ReadUInt32("unk160");                    packet.ReadXORByte(guid1' 2);                    if (hasFallData) //132                  {                      if (hasFallDirection)//128                      {                          packet.ReadSingle("Jump Sin Angle"' index); //124                          packet.ReadSingle("Jump XY Speed"' index); //116                          packet.ReadSingle("Jump Cos Angle"' index); //120                        }                      packet.ReadUInt32("Jump Fall Time"' index); //108                      packet.ReadSingle("Jump Z Speed"' index); //112                  }                  packet.ReadXORByte(guid1' 1);                  packet.ReadSingle("Turn Speed"' index);                    if (hasTimestamp)                      packet.ReadUInt32("Time?"' index);                    packet.ReadSingle("Swim Speed"' index); //176                    if (hasSplineElevation) //136                      packet.ReadSingle("Spline Elevation"' index);//196                    packet.ReadXORByte(guid1' 7);                  packet.ReadSingle("Pitch Speed"' index); //200                    for (var i = 0; i < bits98; ++i)                      packet.ReadInt32("UNK counter"' index' i);                    moveInfo.Position.X = packet.ReadSingle(); //28                    if (hasPitch)                      packet.ReadSingle("Pitch"' index); //104                    if (hasOrientation)                      moveInfo.Orientation = packet.ReadSingle("Orientation"' index); //40                    moveInfo.WalkSpeed = packet.ReadSingle("Walk Speed"' index) / 2.5f; // 168                  moveInfo.Position.Y = packet.ReadSingle(); //32                  packet.ReadSingle("Fly Back Speed"' index); //192                  packet.ReadXORByte(guid1' 3);                  packet.ReadXORByte(guid1' 5);                  packet.ReadXORByte(guid1' 6);                  packet.ReadXORByte(guid1' 0);                  packet.ReadSingle("Run Back Speed"' index);//184                  moveInfo.RunSpeed = packet.ReadSingle("Run Speed"' index) / 7.0f; //172                  packet.ReadSingle("Swim Back Speed"' index);//180                  moveInfo.Position.Z = packet.ReadSingle(); //36              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasTransportPosition)              {                  if (hasGOTransportTime2)                      packet.ReadUInt32("Transport Time 2"' index);                    moveInfo.TransportOffset.Y = packet.ReadSingle(); //388                  packet.ReadSByte("Transport Seat"' index); //400                  moveInfo.TransportOffset.X = packet.ReadSingle();//384                    packet.ReadXORBytes(goTransportGuid' 2' 4' 1);                    if (hasGOTransportTime3)                      packet.ReadUInt32("Transport Time 3"' index); //412                    packet.ReadUInt32("Transport Time"' index); //404                  moveInfo.TransportOffset.O = packet.ReadSingle(); //396                  moveInfo.TransportOffset.Z = packet.ReadSingle(); //392                    packet.ReadXORBytes(goTransportGuid' 6' 0' 5' 3' 7);                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasTransportPosition)              {                  if (hasGOTransportTime2)                      packet.ReadUInt32("Transport Time 2"' index);                    moveInfo.TransportOffset.Y = packet.ReadSingle(); //388                  packet.ReadSByte("Transport Seat"' index); //400                  moveInfo.TransportOffset.X = packet.ReadSingle();//384                    packet.ReadXORBytes(goTransportGuid' 2' 4' 1);                    if (hasGOTransportTime3)                      packet.ReadUInt32("Transport Time 3"' index); //412                    packet.ReadUInt32("Transport Time"' index); //404                  moveInfo.TransportOffset.O = packet.ReadSingle(); //396                  moveInfo.TransportOffset.Z = packet.ReadSingle(); //392                    packet.ReadXORBytes(goTransportGuid' 6' 0' 5' 3' 7);                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasTransportPosition)              {                  if (hasGOTransportTime2)                      packet.ReadUInt32("Transport Time 2"' index);                    moveInfo.TransportOffset.Y = packet.ReadSingle(); //388                  packet.ReadSByte("Transport Seat"' index); //400                  moveInfo.TransportOffset.X = packet.ReadSingle();//384                    packet.ReadXORBytes(goTransportGuid' 2' 4' 1);                    if (hasGOTransportTime3)                      packet.ReadUInt32("Transport Time 3"' index); //412                    packet.ReadUInt32("Transport Time"' index); //404                  moveInfo.TransportOffset.O = packet.ReadSingle(); //396                  moveInfo.TransportOffset.Z = packet.ReadSingle(); //392                    packet.ReadXORBytes(goTransportGuid' 6' 0' 5' 3' 7);                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasTransportPosition)              {                  if (hasGOTransportTime2)                      packet.ReadUInt32("Transport Time 2"' index);                    moveInfo.TransportOffset.Y = packet.ReadSingle(); //388                  packet.ReadSByte("Transport Seat"' index); //400                  moveInfo.TransportOffset.X = packet.ReadSingle();//384                    packet.ReadXORBytes(goTransportGuid' 2' 4' 1);                    if (hasGOTransportTime3)                      packet.ReadUInt32("Transport Time 3"' index); //412                    packet.ReadUInt32("Transport Time"' index); //404                  moveInfo.TransportOffset.O = packet.ReadSingle(); //396                  moveInfo.TransportOffset.Z = packet.ReadSingle(); //392                    packet.ReadXORBytes(goTransportGuid' 6' 0' 5' 3' 7);                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasTransportPosition)              {                  if (hasGOTransportTime2)                      packet.ReadUInt32("Transport Time 2"' index);                    moveInfo.TransportOffset.Y = packet.ReadSingle(); //388                  packet.ReadSByte("Transport Seat"' index); //400                  moveInfo.TransportOffset.X = packet.ReadSingle();//384                    packet.ReadXORBytes(goTransportGuid' 2' 4' 1);                    if (hasGOTransportTime3)                      packet.ReadUInt32("Transport Time 3"' index); //412                    packet.ReadUInt32("Transport Time"' index); //404                  moveInfo.TransportOffset.O = packet.ReadSingle(); //396                  moveInfo.TransportOffset.Z = packet.ReadSingle(); //392                    packet.ReadXORBytes(goTransportGuid' 6' 0' 5' 3' 7);                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasTransportPosition)              {                  if (hasGOTransportTime2)                      packet.ReadUInt32("Transport Time 2"' index);                    moveInfo.TransportOffset.Y = packet.ReadSingle(); //388                  packet.ReadSByte("Transport Seat"' index); //400                  moveInfo.TransportOffset.X = packet.ReadSingle();//384                    packet.ReadXORBytes(goTransportGuid' 2' 4' 1);                    if (hasGOTransportTime3)                      packet.ReadUInt32("Transport Time 3"' index); //412                    packet.ReadUInt32("Transport Time"' index); //404                  moveInfo.TransportOffset.O = packet.ReadSingle(); //396                  moveInfo.TransportOffset.Z = packet.ReadSingle(); //392                    packet.ReadXORBytes(goTransportGuid' 6' 0' 5' 3' 7);                    moveInfo.TransportGuid = new WowGuid64(BitConverter.ToUInt64(goTransportGuid' 0));                  packet.AddValue("Transport GUID"' moveInfo.TransportGuid' index);                  packet.AddValue("Transport Position"' moveInfo.TransportOffset' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 7' 1' 5' 2' 6' 3' 0' 4);                  packet.WriteGuid("Attacking Target GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 7' 1' 5' 2' 6' 3' 0' 4);                  packet.WriteGuid("Attacking Target GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 7' 1' 5' 2' 6' 3' 0' 4);                  packet.WriteGuid("Attacking Target GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 7' 1' 5' 2' 6' 3' 0' 4);                  packet.WriteGuid("Attacking Target GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 7' 1' 5' 2' 6' 3' 0' 4);                  packet.WriteGuid("Attacking Target GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (hasAttackingTarget)              {                  packet.ParseBitStream(attackingTargetGuid' 7' 1' 5' 2' 6' 3' 0' 4);                  packet.WriteGuid("Attacking Target GUID"' attackingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                    var facingTargetGuid = new byte[8];                  packet.StartBitStream(facingTargetGuid' 4' 7' 0' 5' 1' 2' 3' 6);                  packet.ParseBitStream(facingTargetGuid' 4' 2' 0' 5' 6' 3' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                    var facingTargetGuid = new byte[8];                  packet.StartBitStream(facingTargetGuid' 4' 7' 0' 5' 1' 2' 3' 6);                  packet.ParseBitStream(facingTargetGuid' 4' 2' 0' 5' 6' 3' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                    var facingTargetGuid = new byte[8];                  packet.StartBitStream(facingTargetGuid' 4' 7' 0' 5' 1' 2' 3' 6);                  packet.ParseBitStream(facingTargetGuid' 4' 2' 0' 5' 6' 3' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                    var facingTargetGuid = new byte[8];                  packet.StartBitStream(facingTargetGuid' 4' 7' 0' 5' 1' 2' 3' 6);                  packet.ParseBitStream(facingTargetGuid' 4' 2' 0' 5' 6' 3' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                    var facingTargetGuid = new byte[8];                  packet.StartBitStream(facingTargetGuid' 4' 7' 0' 5' 1' 2' 3' 6);                  packet.ParseBitStream(facingTargetGuid' 4' 2' 0' 5' 6' 3' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                    var facingTargetGuid = new byte[8];                  packet.StartBitStream(facingTargetGuid' 4' 7' 0' 5' 1' 2' 3' 6);                  packet.ParseBitStream(facingTargetGuid' 4' 2' 0' 5' 6' 3' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                    var facingTargetGuid = new byte[8];                  packet.StartBitStream(facingTargetGuid' 4' 7' 0' 5' 1' 2' 3' 6);                  packet.ParseBitStream(facingTargetGuid' 4' 2' 0' 5' 6' 3' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                    var facingTargetGuid = new byte[8];                  packet.StartBitStream(facingTargetGuid' 4' 7' 0' 5' 1' 2' 3' 6);                  packet.ParseBitStream(facingTargetGuid' 4' 2' 0' 5' 6' 3' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                    var facingTargetGuid = new byte[8];                  packet.StartBitStream(facingTargetGuid' 4' 7' 0' 5' 1' 2' 3' 6);                  packet.ParseBitStream(facingTargetGuid' 4' 2' 0' 5' 6' 3' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                    var facingTargetGuid = new byte[8];                  packet.StartBitStream(facingTargetGuid' 4' 7' 0' 5' 1' 2' 3' 6);                  packet.ParseBitStream(facingTargetGuid' 4' 2' 0' 5' 6' 3' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                    var facingTargetGuid = new byte[8];                  packet.StartBitStream(facingTargetGuid' 4' 7' 0' 5' 1' 2' 3' 6);                  packet.ParseBitStream(facingTargetGuid' 4' 2' 0' 5' 6' 3' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                    var facingTargetGuid = new byte[8];                  packet.StartBitStream(facingTargetGuid' 4' 7' 0' 5' 1' 2' 3' 6);                  packet.ParseBitStream(facingTargetGuid' 4' 2' 0' 5' 6' 3' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (isLiving && moveInfo.HasSplineData && hasFullSpline && splineType == SplineType.FacingTarget)              {                    var facingTargetGuid = new byte[8];                  packet.StartBitStream(facingTargetGuid' 4' 7' 0' 5' 1' 2' 3' 6);                  packet.ParseBitStream(facingTargetGuid' 4' 2' 0' 5' 6' 3' 1' 7);                  packet.WriteGuid("Facing Target GUID"' facingTargetGuid' index);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: var guid = packet.StartBitStream(3' 5' 6' 0' 1' 2' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: var guid = packet.StartBitStream(3' 5' 6' 0' 1' 2' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: var guid = packet.StartBitStream(3' 5' 6' 0' 1' 2' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: var guid = packet.StartBitStream(3' 5' 6' 0' 1' 2' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: var guid = packet.StartBitStream(3' 5' 6' 0' 1' 2' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: var guid = packet.StartBitStream(3' 5' 6' 0' 1' 2' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 6' 5' 7' 2' 1' 3' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 6' 5' 7' 2' 1' 3' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 6' 5' 7' 2' 1' 3' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 6' 5' 7' 2' 1' 3' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 6' 5' 7' 2' 1' 3' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleObjectUpdateFailed,The following statement contains a magic number: packet.ParseBitStream(guid' 0' 6' 5' 7' 2' 1' 3' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: byte[] itemId2 = packet.StartBitStream(4' 1' 6' 0' 3' 7' 2' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: byte[] itemId2 = packet.StartBitStream(4' 1' 6' 0' 3' 7' 2' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: byte[] itemId2 = packet.StartBitStream(4' 1' 6' 0' 3' 7' 2' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: byte[] itemId2 = packet.StartBitStream(4' 1' 6' 0' 3' 7' 2' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: byte[] itemId2 = packet.StartBitStream(4' 1' 6' 0' 3' 7' 2' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: byte[] itemId2 = packet.StartBitStream(4' 1' 6' 0' 3' 7' 2' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: byte[] itemId1 = itemId1 = packet.StartBitStream(6' 0' 3' 2' 1' 5' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: byte[] itemId1 = itemId1 = packet.StartBitStream(6' 0' 3' 2' 1' 5' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: byte[] itemId1 = itemId1 = packet.StartBitStream(6' 0' 3' 2' 1' 5' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: byte[] itemId1 = itemId1 = packet.StartBitStream(6' 0' 3' 2' 1' 5' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: byte[] itemId1 = itemId1 = packet.StartBitStream(6' 0' 3' 2' 1' 5' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: byte[] itemId1 = itemId1 = packet.StartBitStream(6' 0' 3' 2' 1' 5' 7' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: packet.ParseBitStream(itemId1' 3' 7' 2' 5' 0' 1' 4' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: packet.ParseBitStream(itemId1' 3' 7' 2' 5' 0' 1' 4' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: packet.ParseBitStream(itemId1' 3' 7' 2' 5' 0' 1' 4' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: packet.ParseBitStream(itemId1' 3' 7' 2' 5' 0' 1' 4' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: packet.ParseBitStream(itemId1' 3' 7' 2' 5' 0' 1' 4' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: packet.ParseBitStream(itemId1' 3' 7' 2' 5' 0' 1' 4' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: packet.ParseBitStream(itemId2' 0' 2' 7' 5' 6' 4' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: packet.ParseBitStream(itemId2' 0' 2' 7' 5' 6' 4' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: packet.ParseBitStream(itemId2' 0' 2' 7' 5' 6' 4' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: packet.ParseBitStream(itemId2' 0' 2' 7' 5' 6' 4' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: packet.ParseBitStream(itemId2' 0' 2' 7' 5' 6' 4' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidItemSwapResponse,The following statement contains a magic number: packet.ParseBitStream(itemId2' 0' 2' 7' 5' 6' 4' 3' 1);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: var withdrawCount = packet.ReadBits("Withdraw Count"' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < withdrawCount; ++i)                  id2[i] = packet.StartBitStream(1' 6' 7' 3' 2' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < withdrawCount; ++i)                  id2[i] = packet.StartBitStream(1' 6' 7' 3' 2' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < withdrawCount; ++i)                  id2[i] = packet.StartBitStream(1' 6' 7' 3' 2' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < withdrawCount; ++i)                  id2[i] = packet.StartBitStream(1' 6' 7' 3' 2' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < withdrawCount; ++i)                  id2[i] = packet.StartBitStream(1' 6' 7' 3' 2' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < withdrawCount; ++i)                  id2[i] = packet.StartBitStream(1' 6' 7' 3' 2' 0' 4' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: var depositCount = packet.ReadBits("Deposit Count"' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  id1[i] = new byte[8];                  guid[i] = new byte[8];                    id1[i][0] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][4] = packet.ReadBit();                  id1[i][3] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  id1[i][5] = packet.ReadBit();                  id1[i][7] = packet.ReadBit();                  guid[i][0] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  id1[i][6] = packet.ReadBit();                  id1[i][4] = packet.ReadBit();                  guid[i][1] = packet.ReadBit();                  id1[i][1] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  id1[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  id1[i] = new byte[8];                  guid[i] = new byte[8];                    id1[i][0] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][4] = packet.ReadBit();                  id1[i][3] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  id1[i][5] = packet.ReadBit();                  id1[i][7] = packet.ReadBit();                  guid[i][0] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  id1[i][6] = packet.ReadBit();                  id1[i][4] = packet.ReadBit();                  guid[i][1] = packet.ReadBit();                  id1[i][1] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  id1[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  id1[i] = new byte[8];                  guid[i] = new byte[8];                    id1[i][0] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][4] = packet.ReadBit();                  id1[i][3] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  id1[i][5] = packet.ReadBit();                  id1[i][7] = packet.ReadBit();                  guid[i][0] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  id1[i][6] = packet.ReadBit();                  id1[i][4] = packet.ReadBit();                  guid[i][1] = packet.ReadBit();                  id1[i][1] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  id1[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  id1[i] = new byte[8];                  guid[i] = new byte[8];                    id1[i][0] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][4] = packet.ReadBit();                  id1[i][3] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  id1[i][5] = packet.ReadBit();                  id1[i][7] = packet.ReadBit();                  guid[i][0] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  id1[i][6] = packet.ReadBit();                  id1[i][4] = packet.ReadBit();                  guid[i][1] = packet.ReadBit();                  id1[i][1] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  id1[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  id1[i] = new byte[8];                  guid[i] = new byte[8];                    id1[i][0] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][4] = packet.ReadBit();                  id1[i][3] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  id1[i][5] = packet.ReadBit();                  id1[i][7] = packet.ReadBit();                  guid[i][0] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  id1[i][6] = packet.ReadBit();                  id1[i][4] = packet.ReadBit();                  guid[i][1] = packet.ReadBit();                  id1[i][1] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  id1[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  id1[i] = new byte[8];                  guid[i] = new byte[8];                    id1[i][0] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][4] = packet.ReadBit();                  id1[i][3] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  id1[i][5] = packet.ReadBit();                  id1[i][7] = packet.ReadBit();                  guid[i][0] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  id1[i][6] = packet.ReadBit();                  id1[i][4] = packet.ReadBit();                  guid[i][1] = packet.ReadBit();                  id1[i][1] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  id1[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  id1[i] = new byte[8];                  guid[i] = new byte[8];                    id1[i][0] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][4] = packet.ReadBit();                  id1[i][3] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  id1[i][5] = packet.ReadBit();                  id1[i][7] = packet.ReadBit();                  guid[i][0] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  id1[i][6] = packet.ReadBit();                  id1[i][4] = packet.ReadBit();                  guid[i][1] = packet.ReadBit();                  id1[i][1] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  id1[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  id1[i] = new byte[8];                  guid[i] = new byte[8];                    id1[i][0] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][4] = packet.ReadBit();                  id1[i][3] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  id1[i][5] = packet.ReadBit();                  id1[i][7] = packet.ReadBit();                  guid[i][0] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  id1[i][6] = packet.ReadBit();                  id1[i][4] = packet.ReadBit();                  guid[i][1] = packet.ReadBit();                  id1[i][1] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  id1[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  id1[i] = new byte[8];                  guid[i] = new byte[8];                    id1[i][0] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][4] = packet.ReadBit();                  id1[i][3] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  id1[i][5] = packet.ReadBit();                  id1[i][7] = packet.ReadBit();                  guid[i][0] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  id1[i][6] = packet.ReadBit();                  id1[i][4] = packet.ReadBit();                  guid[i][1] = packet.ReadBit();                  id1[i][1] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  id1[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  id1[i] = new byte[8];                  guid[i] = new byte[8];                    id1[i][0] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][4] = packet.ReadBit();                  id1[i][3] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  id1[i][5] = packet.ReadBit();                  id1[i][7] = packet.ReadBit();                  guid[i][0] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  id1[i][6] = packet.ReadBit();                  id1[i][4] = packet.ReadBit();                  guid[i][1] = packet.ReadBit();                  id1[i][1] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  id1[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  id1[i] = new byte[8];                  guid[i] = new byte[8];                    id1[i][0] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][4] = packet.ReadBit();                  id1[i][3] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  id1[i][5] = packet.ReadBit();                  id1[i][7] = packet.ReadBit();                  guid[i][0] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  id1[i][6] = packet.ReadBit();                  id1[i][4] = packet.ReadBit();                  guid[i][1] = packet.ReadBit();                  id1[i][1] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  id1[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  id1[i] = new byte[8];                  guid[i] = new byte[8];                    id1[i][0] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][4] = packet.ReadBit();                  id1[i][3] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  id1[i][5] = packet.ReadBit();                  id1[i][7] = packet.ReadBit();                  guid[i][0] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  id1[i][6] = packet.ReadBit();                  id1[i][4] = packet.ReadBit();                  guid[i][1] = packet.ReadBit();                  id1[i][1] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  id1[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  id1[i] = new byte[8];                  guid[i] = new byte[8];                    id1[i][0] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][4] = packet.ReadBit();                  id1[i][3] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  id1[i][5] = packet.ReadBit();                  id1[i][7] = packet.ReadBit();                  guid[i][0] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  id1[i][6] = packet.ReadBit();                  id1[i][4] = packet.ReadBit();                  guid[i][1] = packet.ReadBit();                  id1[i][1] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  id1[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  id1[i] = new byte[8];                  guid[i] = new byte[8];                    id1[i][0] = packet.ReadBit();                  guid[i][6] = packet.ReadBit();                  guid[i][4] = packet.ReadBit();                  id1[i][3] = packet.ReadBit();                  guid[i][3] = packet.ReadBit();                  id1[i][5] = packet.ReadBit();                  id1[i][7] = packet.ReadBit();                  guid[i][0] = packet.ReadBit();                  guid[i][5] = packet.ReadBit();                  guid[i][7] = packet.ReadBit();                  id1[i][6] = packet.ReadBit();                  id1[i][4] = packet.ReadBit();                  guid[i][1] = packet.ReadBit();                  id1[i][1] = packet.ReadBit();                  guid[i][2] = packet.ReadBit();                  id1[i][2] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  packet.ReadInt32("Item Slot"' i); //28                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadUInt32<ItemId>("Item Entry"' i); //16                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Item Suffix Factor"' i); //20                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(id1[i]' 5);                  packet.ReadInt32("Item Random Property ID"' i); //24                  packet.ReadXORByte(id1[i]' 3);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(id1[i]' 0);                  packet.ReadXORByte(id1[i]' 4);                  packet.ReadXORByte(id1[i]' 6);                  packet.ReadInt32("New Unk"' i); //32                  packet.ReadXORByte(id1[i]' 1);                  packet.ReadXORByte(id1[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(id1[i]' 7);                    packet.WriteGuid("Item Id 1"' id1[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  packet.ReadInt32("Item Slot"' i); //28                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadUInt32<ItemId>("Item Entry"' i); //16                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Item Suffix Factor"' i); //20                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(id1[i]' 5);                  packet.ReadInt32("Item Random Property ID"' i); //24                  packet.ReadXORByte(id1[i]' 3);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(id1[i]' 0);                  packet.ReadXORByte(id1[i]' 4);                  packet.ReadXORByte(id1[i]' 6);                  packet.ReadInt32("New Unk"' i); //32                  packet.ReadXORByte(id1[i]' 1);                  packet.ReadXORByte(id1[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(id1[i]' 7);                    packet.WriteGuid("Item Id 1"' id1[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  packet.ReadInt32("Item Slot"' i); //28                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadUInt32<ItemId>("Item Entry"' i); //16                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Item Suffix Factor"' i); //20                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(id1[i]' 5);                  packet.ReadInt32("Item Random Property ID"' i); //24                  packet.ReadXORByte(id1[i]' 3);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(id1[i]' 0);                  packet.ReadXORByte(id1[i]' 4);                  packet.ReadXORByte(id1[i]' 6);                  packet.ReadInt32("New Unk"' i); //32                  packet.ReadXORByte(id1[i]' 1);                  packet.ReadXORByte(id1[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(id1[i]' 7);                    packet.WriteGuid("Item Id 1"' id1[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  packet.ReadInt32("Item Slot"' i); //28                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadUInt32<ItemId>("Item Entry"' i); //16                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Item Suffix Factor"' i); //20                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(id1[i]' 5);                  packet.ReadInt32("Item Random Property ID"' i); //24                  packet.ReadXORByte(id1[i]' 3);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(id1[i]' 0);                  packet.ReadXORByte(id1[i]' 4);                  packet.ReadXORByte(id1[i]' 6);                  packet.ReadInt32("New Unk"' i); //32                  packet.ReadXORByte(id1[i]' 1);                  packet.ReadXORByte(id1[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(id1[i]' 7);                    packet.WriteGuid("Item Id 1"' id1[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  packet.ReadInt32("Item Slot"' i); //28                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadUInt32<ItemId>("Item Entry"' i); //16                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Item Suffix Factor"' i); //20                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(id1[i]' 5);                  packet.ReadInt32("Item Random Property ID"' i); //24                  packet.ReadXORByte(id1[i]' 3);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(id1[i]' 0);                  packet.ReadXORByte(id1[i]' 4);                  packet.ReadXORByte(id1[i]' 6);                  packet.ReadInt32("New Unk"' i); //32                  packet.ReadXORByte(id1[i]' 1);                  packet.ReadXORByte(id1[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(id1[i]' 7);                    packet.WriteGuid("Item Id 1"' id1[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  packet.ReadInt32("Item Slot"' i); //28                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadUInt32<ItemId>("Item Entry"' i); //16                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Item Suffix Factor"' i); //20                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(id1[i]' 5);                  packet.ReadInt32("Item Random Property ID"' i); //24                  packet.ReadXORByte(id1[i]' 3);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(id1[i]' 0);                  packet.ReadXORByte(id1[i]' 4);                  packet.ReadXORByte(id1[i]' 6);                  packet.ReadInt32("New Unk"' i); //32                  packet.ReadXORByte(id1[i]' 1);                  packet.ReadXORByte(id1[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(id1[i]' 7);                    packet.WriteGuid("Item Id 1"' id1[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  packet.ReadInt32("Item Slot"' i); //28                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadUInt32<ItemId>("Item Entry"' i); //16                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Item Suffix Factor"' i); //20                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(id1[i]' 5);                  packet.ReadInt32("Item Random Property ID"' i); //24                  packet.ReadXORByte(id1[i]' 3);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(id1[i]' 0);                  packet.ReadXORByte(id1[i]' 4);                  packet.ReadXORByte(id1[i]' 6);                  packet.ReadInt32("New Unk"' i); //32                  packet.ReadXORByte(id1[i]' 1);                  packet.ReadXORByte(id1[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(id1[i]' 7);                    packet.WriteGuid("Item Id 1"' id1[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  packet.ReadInt32("Item Slot"' i); //28                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadUInt32<ItemId>("Item Entry"' i); //16                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Item Suffix Factor"' i); //20                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(id1[i]' 5);                  packet.ReadInt32("Item Random Property ID"' i); //24                  packet.ReadXORByte(id1[i]' 3);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(id1[i]' 0);                  packet.ReadXORByte(id1[i]' 4);                  packet.ReadXORByte(id1[i]' 6);                  packet.ReadInt32("New Unk"' i); //32                  packet.ReadXORByte(id1[i]' 1);                  packet.ReadXORByte(id1[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(id1[i]' 7);                    packet.WriteGuid("Item Id 1"' id1[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  packet.ReadInt32("Item Slot"' i); //28                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadUInt32<ItemId>("Item Entry"' i); //16                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Item Suffix Factor"' i); //20                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(id1[i]' 5);                  packet.ReadInt32("Item Random Property ID"' i); //24                  packet.ReadXORByte(id1[i]' 3);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(id1[i]' 0);                  packet.ReadXORByte(id1[i]' 4);                  packet.ReadXORByte(id1[i]' 6);                  packet.ReadInt32("New Unk"' i); //32                  packet.ReadXORByte(id1[i]' 1);                  packet.ReadXORByte(id1[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(id1[i]' 7);                    packet.WriteGuid("Item Id 1"' id1[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  packet.ReadInt32("Item Slot"' i); //28                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadUInt32<ItemId>("Item Entry"' i); //16                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Item Suffix Factor"' i); //20                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(id1[i]' 5);                  packet.ReadInt32("Item Random Property ID"' i); //24                  packet.ReadXORByte(id1[i]' 3);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(id1[i]' 0);                  packet.ReadXORByte(id1[i]' 4);                  packet.ReadXORByte(id1[i]' 6);                  packet.ReadInt32("New Unk"' i); //32                  packet.ReadXORByte(id1[i]' 1);                  packet.ReadXORByte(id1[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(id1[i]' 7);                    packet.WriteGuid("Item Id 1"' id1[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  packet.ReadInt32("Item Slot"' i); //28                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadUInt32<ItemId>("Item Entry"' i); //16                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Item Suffix Factor"' i); //20                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(id1[i]' 5);                  packet.ReadInt32("Item Random Property ID"' i); //24                  packet.ReadXORByte(id1[i]' 3);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(id1[i]' 0);                  packet.ReadXORByte(id1[i]' 4);                  packet.ReadXORByte(id1[i]' 6);                  packet.ReadInt32("New Unk"' i); //32                  packet.ReadXORByte(id1[i]' 1);                  packet.ReadXORByte(id1[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(id1[i]' 7);                    packet.WriteGuid("Item Id 1"' id1[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < depositCount; ++i)              {                  packet.ReadInt32("Item Slot"' i); //28                  packet.ReadXORByte(guid[i]' 5);                  packet.ReadUInt32<ItemId>("Item Entry"' i); //16                  packet.ReadXORByte(guid[i]' 6);                  packet.ReadXORByte(guid[i]' 3);                  packet.ReadInt32("Item Suffix Factor"' i); //20                  packet.ReadXORByte(guid[i]' 2);                  packet.ReadXORByte(id1[i]' 5);                  packet.ReadInt32("Item Random Property ID"' i); //24                  packet.ReadXORByte(id1[i]' 3);                  packet.ReadXORByte(guid[i]' 7);                  packet.ReadXORByte(guid[i]' 4);                  packet.ReadXORByte(guid[i]' 1);                  packet.ReadXORByte(id1[i]' 0);                  packet.ReadXORByte(id1[i]' 4);                  packet.ReadXORByte(id1[i]' 6);                  packet.ReadInt32("New Unk"' i); //32                  packet.ReadXORByte(id1[i]' 1);                  packet.ReadXORByte(id1[i]' 2);                  packet.ReadXORByte(guid[i]' 0);                  packet.ReadXORByte(id1[i]' 7);                    packet.WriteGuid("Item Id 1"' id1[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' guid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < withdrawCount; ++i)              {                  packet.ParseBitStream(id2[i]' 7' 3' 1' 5' 4' 0' 6' 2);                  packet.WriteGuid("Item Id 2: {0}"' id2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < withdrawCount; ++i)              {                  packet.ParseBitStream(id2[i]' 7' 3' 1' 5' 4' 0' 6' 2);                  packet.WriteGuid("Item Id 2: {0}"' id2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < withdrawCount; ++i)              {                  packet.ParseBitStream(id2[i]' 7' 3' 1' 5' 4' 0' 6' 2);                  packet.WriteGuid("Item Id 2: {0}"' id2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < withdrawCount; ++i)              {                  packet.ParseBitStream(id2[i]' 7' 3' 1' 5' 4' 0' 6' 2);                  packet.WriteGuid("Item Id 2: {0}"' id2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < withdrawCount; ++i)              {                  packet.ParseBitStream(id2[i]' 7' 3' 1' 5' 4' 0' 6' 2);                  packet.WriteGuid("Item Id 2: {0}"' id2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransferChanges,The following statement contains a magic number: for (int i = 0; i < withdrawCount; ++i)              {                  packet.ParseBitStream(id2[i]' 7' 3' 1' 5' 4' 0' 6' 2);                  packet.WriteGuid("Item Id 2: {0}"' id2[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: var itemId = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: var npcGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: npcGuid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: itemId[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: itemId[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: itemId[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: itemId[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: npcGuid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: npcGuid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: npcGuid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: itemId[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: npcGuid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: npcGuid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: itemId[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: packet.ReadXORByte(npcGuid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: packet.ReadXORByte(npcGuid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: packet.ReadXORByte(itemId' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: packet.ReadXORByte(npcGuid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: packet.ReadXORByte(itemId' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: packet.ReadXORByte(itemId' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: packet.ReadXORByte(itemId' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: packet.ReadXORByte(npcGuid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: packet.ReadXORByte(npcGuid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: packet.ReadXORByte(itemId' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: packet.ReadXORByte(npcGuid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidSwapItem,The following statement contains a magic number: packet.ReadXORByte(itemId' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: var npcGuid = new byte[8];
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: npcGuid[7] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: npcGuid[4] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: var count1 = packet.ReadBits("Deposit Count"' 24);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count1; ++i)                  itemsGuid[i] = packet.StartBitStream(0' 3' 6' 5' 4' 2' 1' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count1; ++i)                  itemsGuid[i] = packet.StartBitStream(0' 3' 6' 5' 4' 2' 1' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count1; ++i)                  itemsGuid[i] = packet.StartBitStream(0' 3' 6' 5' 4' 2' 1' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count1; ++i)                  itemsGuid[i] = packet.StartBitStream(0' 3' 6' 5' 4' 2' 1' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count1; ++i)                  itemsGuid[i] = packet.StartBitStream(0' 3' 6' 5' 4' 2' 1' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count1; ++i)                  itemsGuid[i] = packet.StartBitStream(0' 3' 6' 5' 4' 2' 1' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: var count2 = packet.ReadBits("Withdraw Count"' 24);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count2; ++i)                  itemsId[i] = packet.StartBitStream(4' 0' 5' 7' 6' 1' 2' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count2; ++i)                  itemsId[i] = packet.StartBitStream(4' 0' 5' 7' 6' 1' 2' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count2; ++i)                  itemsId[i] = packet.StartBitStream(4' 0' 5' 7' 6' 1' 2' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count2; ++i)                  itemsId[i] = packet.StartBitStream(4' 0' 5' 7' 6' 1' 2' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count2; ++i)                  itemsId[i] = packet.StartBitStream(4' 0' 5' 7' 6' 1' 2' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count2; ++i)                  itemsId[i] = packet.StartBitStream(4' 0' 5' 7' 6' 1' 2' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: npcGuid[6] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: npcGuid[3] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: npcGuid[2] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: npcGuid[5] = packet.ReadBit();
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count1; ++i)              {                  packet.ParseBitStream(itemsGuid[i]' 5' 6' 3' 4' 1' 7' 2' 0);                  packet.WriteGuid("Item Guid"' itemsGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count1; ++i)              {                  packet.ParseBitStream(itemsGuid[i]' 5' 6' 3' 4' 1' 7' 2' 0);                  packet.WriteGuid("Item Guid"' itemsGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count1; ++i)              {                  packet.ParseBitStream(itemsGuid[i]' 5' 6' 3' 4' 1' 7' 2' 0);                  packet.WriteGuid("Item Guid"' itemsGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count1; ++i)              {                  packet.ParseBitStream(itemsGuid[i]' 5' 6' 3' 4' 1' 7' 2' 0);                  packet.WriteGuid("Item Guid"' itemsGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count1; ++i)              {                  packet.ParseBitStream(itemsGuid[i]' 5' 6' 3' 4' 1' 7' 2' 0);                  packet.WriteGuid("Item Guid"' itemsGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count1; ++i)              {                  packet.ParseBitStream(itemsGuid[i]' 5' 6' 3' 4' 1' 7' 2' 0);                  packet.WriteGuid("Item Guid"' itemsGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: packet.ReadXORByte(npcGuid' 5);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count2; ++i)              {                  packet.ParseBitStream(itemsId[i]' 0' 4' 1' 2' 6' 3' 7' 5);                  packet.WriteGuid("Item Id"' itemsId[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count2; ++i)              {                  packet.ParseBitStream(itemsId[i]' 0' 4' 1' 2' 6' 3' 7' 5);                  packet.WriteGuid("Item Id"' itemsId[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count2; ++i)              {                  packet.ParseBitStream(itemsId[i]' 0' 4' 1' 2' 6' 3' 7' 5);                  packet.WriteGuid("Item Id"' itemsId[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count2; ++i)              {                  packet.ParseBitStream(itemsId[i]' 0' 4' 1' 2' 6' 3' 7' 5);                  packet.WriteGuid("Item Id"' itemsId[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count2; ++i)              {                  packet.ParseBitStream(itemsId[i]' 0' 4' 1' 2' 6' 3' 7' 5);                  packet.WriteGuid("Item Id"' itemsId[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: for (int i = 0; i < count2; ++i)              {                  packet.ParseBitStream(itemsId[i]' 0' 4' 1' 2' 6' 3' 7' 5);                  packet.WriteGuid("Item Id"' itemsId[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: packet.ReadXORByte(npcGuid' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: packet.ReadXORByte(npcGuid' 4);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: packet.ReadXORByte(npcGuid' 3);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: packet.ReadXORByte(npcGuid' 2);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageTransfer,The following statement contains a magic number: packet.ReadXORByte(npcGuid' 6);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: var count = packet.ReadBits("Count"' 7);
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  itemId[i] = new byte[8];                  creatorGuid[i] = new byte[8];                    creatorGuid[i][1] = packet.ReadBit();                  creatorGuid[i][3] = packet.ReadBit();                  itemId[i][1] = packet.ReadBit();                  creatorGuid[i][2] = packet.ReadBit();                  itemId[i][2] = packet.ReadBit();                  creatorGuid[i][5] = packet.ReadBit();                  creatorGuid[i][0] = packet.ReadBit();                  itemId[i][6] = packet.ReadBit();                  itemId[i][5] = packet.ReadBit();                  creatorGuid[i][4] = packet.ReadBit();                  itemId[i][7] = packet.ReadBit();                  itemId[i][3] = packet.ReadBit();                  itemId[i][4] = packet.ReadBit();                  itemId[i][0] = packet.ReadBit();                  creatorGuid[i][6] = packet.ReadBit();                  creatorGuid[i][7] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  itemId[i] = new byte[8];                  creatorGuid[i] = new byte[8];                    creatorGuid[i][1] = packet.ReadBit();                  creatorGuid[i][3] = packet.ReadBit();                  itemId[i][1] = packet.ReadBit();                  creatorGuid[i][2] = packet.ReadBit();                  itemId[i][2] = packet.ReadBit();                  creatorGuid[i][5] = packet.ReadBit();                  creatorGuid[i][0] = packet.ReadBit();                  itemId[i][6] = packet.ReadBit();                  itemId[i][5] = packet.ReadBit();                  creatorGuid[i][4] = packet.ReadBit();                  itemId[i][7] = packet.ReadBit();                  itemId[i][3] = packet.ReadBit();                  itemId[i][4] = packet.ReadBit();                  itemId[i][0] = packet.ReadBit();                  creatorGuid[i][6] = packet.ReadBit();                  creatorGuid[i][7] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  itemId[i] = new byte[8];                  creatorGuid[i] = new byte[8];                    creatorGuid[i][1] = packet.ReadBit();                  creatorGuid[i][3] = packet.ReadBit();                  itemId[i][1] = packet.ReadBit();                  creatorGuid[i][2] = packet.ReadBit();                  itemId[i][2] = packet.ReadBit();                  creatorGuid[i][5] = packet.ReadBit();                  creatorGuid[i][0] = packet.ReadBit();                  itemId[i][6] = packet.ReadBit();                  itemId[i][5] = packet.ReadBit();                  creatorGuid[i][4] = packet.ReadBit();                  itemId[i][7] = packet.ReadBit();                  itemId[i][3] = packet.ReadBit();                  itemId[i][4] = packet.ReadBit();                  itemId[i][0] = packet.ReadBit();                  creatorGuid[i][6] = packet.ReadBit();                  creatorGuid[i][7] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  itemId[i] = new byte[8];                  creatorGuid[i] = new byte[8];                    creatorGuid[i][1] = packet.ReadBit();                  creatorGuid[i][3] = packet.ReadBit();                  itemId[i][1] = packet.ReadBit();                  creatorGuid[i][2] = packet.ReadBit();                  itemId[i][2] = packet.ReadBit();                  creatorGuid[i][5] = packet.ReadBit();                  creatorGuid[i][0] = packet.ReadBit();                  itemId[i][6] = packet.ReadBit();                  itemId[i][5] = packet.ReadBit();                  creatorGuid[i][4] = packet.ReadBit();                  itemId[i][7] = packet.ReadBit();                  itemId[i][3] = packet.ReadBit();                  itemId[i][4] = packet.ReadBit();                  itemId[i][0] = packet.ReadBit();                  creatorGuid[i][6] = packet.ReadBit();                  creatorGuid[i][7] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  itemId[i] = new byte[8];                  creatorGuid[i] = new byte[8];                    creatorGuid[i][1] = packet.ReadBit();                  creatorGuid[i][3] = packet.ReadBit();                  itemId[i][1] = packet.ReadBit();                  creatorGuid[i][2] = packet.ReadBit();                  itemId[i][2] = packet.ReadBit();                  creatorGuid[i][5] = packet.ReadBit();                  creatorGuid[i][0] = packet.ReadBit();                  itemId[i][6] = packet.ReadBit();                  itemId[i][5] = packet.ReadBit();                  creatorGuid[i][4] = packet.ReadBit();                  itemId[i][7] = packet.ReadBit();                  itemId[i][3] = packet.ReadBit();                  itemId[i][4] = packet.ReadBit();                  itemId[i][0] = packet.ReadBit();                  creatorGuid[i][6] = packet.ReadBit();                  creatorGuid[i][7] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  itemId[i] = new byte[8];                  creatorGuid[i] = new byte[8];                    creatorGuid[i][1] = packet.ReadBit();                  creatorGuid[i][3] = packet.ReadBit();                  itemId[i][1] = packet.ReadBit();                  creatorGuid[i][2] = packet.ReadBit();                  itemId[i][2] = packet.ReadBit();                  creatorGuid[i][5] = packet.ReadBit();                  creatorGuid[i][0] = packet.ReadBit();                  itemId[i][6] = packet.ReadBit();                  itemId[i][5] = packet.ReadBit();                  creatorGuid[i][4] = packet.ReadBit();                  itemId[i][7] = packet.ReadBit();                  itemId[i][3] = packet.ReadBit();                  itemId[i][4] = packet.ReadBit();                  itemId[i][0] = packet.ReadBit();                  creatorGuid[i][6] = packet.ReadBit();                  creatorGuid[i][7] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  itemId[i] = new byte[8];                  creatorGuid[i] = new byte[8];                    creatorGuid[i][1] = packet.ReadBit();                  creatorGuid[i][3] = packet.ReadBit();                  itemId[i][1] = packet.ReadBit();                  creatorGuid[i][2] = packet.ReadBit();                  itemId[i][2] = packet.ReadBit();                  creatorGuid[i][5] = packet.ReadBit();                  creatorGuid[i][0] = packet.ReadBit();                  itemId[i][6] = packet.ReadBit();                  itemId[i][5] = packet.ReadBit();                  creatorGuid[i][4] = packet.ReadBit();                  itemId[i][7] = packet.ReadBit();                  itemId[i][3] = packet.ReadBit();                  itemId[i][4] = packet.ReadBit();                  itemId[i][0] = packet.ReadBit();                  creatorGuid[i][6] = packet.ReadBit();                  creatorGuid[i][7] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  itemId[i] = new byte[8];                  creatorGuid[i] = new byte[8];                    creatorGuid[i][1] = packet.ReadBit();                  creatorGuid[i][3] = packet.ReadBit();                  itemId[i][1] = packet.ReadBit();                  creatorGuid[i][2] = packet.ReadBit();                  itemId[i][2] = packet.ReadBit();                  creatorGuid[i][5] = packet.ReadBit();                  creatorGuid[i][0] = packet.ReadBit();                  itemId[i][6] = packet.ReadBit();                  itemId[i][5] = packet.ReadBit();                  creatorGuid[i][4] = packet.ReadBit();                  itemId[i][7] = packet.ReadBit();                  itemId[i][3] = packet.ReadBit();                  itemId[i][4] = packet.ReadBit();                  itemId[i][0] = packet.ReadBit();                  creatorGuid[i][6] = packet.ReadBit();                  creatorGuid[i][7] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  itemId[i] = new byte[8];                  creatorGuid[i] = new byte[8];                    creatorGuid[i][1] = packet.ReadBit();                  creatorGuid[i][3] = packet.ReadBit();                  itemId[i][1] = packet.ReadBit();                  creatorGuid[i][2] = packet.ReadBit();                  itemId[i][2] = packet.ReadBit();                  creatorGuid[i][5] = packet.ReadBit();                  creatorGuid[i][0] = packet.ReadBit();                  itemId[i][6] = packet.ReadBit();                  itemId[i][5] = packet.ReadBit();                  creatorGuid[i][4] = packet.ReadBit();                  itemId[i][7] = packet.ReadBit();                  itemId[i][3] = packet.ReadBit();                  itemId[i][4] = packet.ReadBit();                  itemId[i][0] = packet.ReadBit();                  creatorGuid[i][6] = packet.ReadBit();                  creatorGuid[i][7] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  itemId[i] = new byte[8];                  creatorGuid[i] = new byte[8];                    creatorGuid[i][1] = packet.ReadBit();                  creatorGuid[i][3] = packet.ReadBit();                  itemId[i][1] = packet.ReadBit();                  creatorGuid[i][2] = packet.ReadBit();                  itemId[i][2] = packet.ReadBit();                  creatorGuid[i][5] = packet.ReadBit();                  creatorGuid[i][0] = packet.ReadBit();                  itemId[i][6] = packet.ReadBit();                  itemId[i][5] = packet.ReadBit();                  creatorGuid[i][4] = packet.ReadBit();                  itemId[i][7] = packet.ReadBit();                  itemId[i][3] = packet.ReadBit();                  itemId[i][4] = packet.ReadBit();                  itemId[i][0] = packet.ReadBit();                  creatorGuid[i][6] = packet.ReadBit();                  creatorGuid[i][7] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  itemId[i] = new byte[8];                  creatorGuid[i] = new byte[8];                    creatorGuid[i][1] = packet.ReadBit();                  creatorGuid[i][3] = packet.ReadBit();                  itemId[i][1] = packet.ReadBit();                  creatorGuid[i][2] = packet.ReadBit();                  itemId[i][2] = packet.ReadBit();                  creatorGuid[i][5] = packet.ReadBit();                  creatorGuid[i][0] = packet.ReadBit();                  itemId[i][6] = packet.ReadBit();                  itemId[i][5] = packet.ReadBit();                  creatorGuid[i][4] = packet.ReadBit();                  itemId[i][7] = packet.ReadBit();                  itemId[i][3] = packet.ReadBit();                  itemId[i][4] = packet.ReadBit();                  itemId[i][0] = packet.ReadBit();                  creatorGuid[i][6] = packet.ReadBit();                  creatorGuid[i][7] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  itemId[i] = new byte[8];                  creatorGuid[i] = new byte[8];                    creatorGuid[i][1] = packet.ReadBit();                  creatorGuid[i][3] = packet.ReadBit();                  itemId[i][1] = packet.ReadBit();                  creatorGuid[i][2] = packet.ReadBit();                  itemId[i][2] = packet.ReadBit();                  creatorGuid[i][5] = packet.ReadBit();                  creatorGuid[i][0] = packet.ReadBit();                  itemId[i][6] = packet.ReadBit();                  itemId[i][5] = packet.ReadBit();                  creatorGuid[i][4] = packet.ReadBit();                  itemId[i][7] = packet.ReadBit();                  itemId[i][3] = packet.ReadBit();                  itemId[i][4] = packet.ReadBit();                  itemId[i][0] = packet.ReadBit();                  creatorGuid[i][6] = packet.ReadBit();                  creatorGuid[i][7] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  itemId[i] = new byte[8];                  creatorGuid[i] = new byte[8];                    creatorGuid[i][1] = packet.ReadBit();                  creatorGuid[i][3] = packet.ReadBit();                  itemId[i][1] = packet.ReadBit();                  creatorGuid[i][2] = packet.ReadBit();                  itemId[i][2] = packet.ReadBit();                  creatorGuid[i][5] = packet.ReadBit();                  creatorGuid[i][0] = packet.ReadBit();                  itemId[i][6] = packet.ReadBit();                  itemId[i][5] = packet.ReadBit();                  creatorGuid[i][4] = packet.ReadBit();                  itemId[i][7] = packet.ReadBit();                  itemId[i][3] = packet.ReadBit();                  itemId[i][4] = packet.ReadBit();                  itemId[i][0] = packet.ReadBit();                  creatorGuid[i][6] = packet.ReadBit();                  creatorGuid[i][7] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  itemId[i] = new byte[8];                  creatorGuid[i] = new byte[8];                    creatorGuid[i][1] = packet.ReadBit();                  creatorGuid[i][3] = packet.ReadBit();                  itemId[i][1] = packet.ReadBit();                  creatorGuid[i][2] = packet.ReadBit();                  itemId[i][2] = packet.ReadBit();                  creatorGuid[i][5] = packet.ReadBit();                  creatorGuid[i][0] = packet.ReadBit();                  itemId[i][6] = packet.ReadBit();                  itemId[i][5] = packet.ReadBit();                  creatorGuid[i][4] = packet.ReadBit();                  itemId[i][7] = packet.ReadBit();                  itemId[i][3] = packet.ReadBit();                  itemId[i][4] = packet.ReadBit();                  itemId[i][0] = packet.ReadBit();                  creatorGuid[i][6] = packet.ReadBit();                  creatorGuid[i][7] = packet.ReadBit();              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadXORByte(creatorGuid[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 7);                  packet.ReadXORByte(itemId[i]' 6);                  packet.ReadXORByte(creatorGuid[i]' 6);                  packet.ReadXORByte(itemId[i]' 2);                  packet.ReadInt32("Item Suffix Factor"' i);                  packet.ReadXORByte(itemId[i]' 7);                  packet.ReadXORByte(itemId[i]' 3);                  packet.ReadXORByte(creatorGuid[i]' 0);                  packet.ReadInt32("Unk UInt32"' i);                  packet.ReadXORByte(itemId[i]' 0);                  packet.ReadInt32("Item Random Property ID"' i);                  packet.ReadXORByte(creatorGuid[i]' 2);                  packet.ReadXORByte(creatorGuid[i]' 5);                  packet.ReadXORByte(creatorGuid[i]' 3);                  packet.ReadUInt32<ItemId>("Item Entry"' i);                  packet.ReadXORByte(itemId[i]' 5);                  packet.ReadXORByte(itemId[i]' 1);                  packet.ReadInt32("Item Slot"' i);                  packet.ReadXORByte(itemId[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 1);                    packet.WriteGuid("Item Id"' itemId[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' creatorGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadXORByte(creatorGuid[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 7);                  packet.ReadXORByte(itemId[i]' 6);                  packet.ReadXORByte(creatorGuid[i]' 6);                  packet.ReadXORByte(itemId[i]' 2);                  packet.ReadInt32("Item Suffix Factor"' i);                  packet.ReadXORByte(itemId[i]' 7);                  packet.ReadXORByte(itemId[i]' 3);                  packet.ReadXORByte(creatorGuid[i]' 0);                  packet.ReadInt32("Unk UInt32"' i);                  packet.ReadXORByte(itemId[i]' 0);                  packet.ReadInt32("Item Random Property ID"' i);                  packet.ReadXORByte(creatorGuid[i]' 2);                  packet.ReadXORByte(creatorGuid[i]' 5);                  packet.ReadXORByte(creatorGuid[i]' 3);                  packet.ReadUInt32<ItemId>("Item Entry"' i);                  packet.ReadXORByte(itemId[i]' 5);                  packet.ReadXORByte(itemId[i]' 1);                  packet.ReadInt32("Item Slot"' i);                  packet.ReadXORByte(itemId[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 1);                    packet.WriteGuid("Item Id"' itemId[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' creatorGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadXORByte(creatorGuid[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 7);                  packet.ReadXORByte(itemId[i]' 6);                  packet.ReadXORByte(creatorGuid[i]' 6);                  packet.ReadXORByte(itemId[i]' 2);                  packet.ReadInt32("Item Suffix Factor"' i);                  packet.ReadXORByte(itemId[i]' 7);                  packet.ReadXORByte(itemId[i]' 3);                  packet.ReadXORByte(creatorGuid[i]' 0);                  packet.ReadInt32("Unk UInt32"' i);                  packet.ReadXORByte(itemId[i]' 0);                  packet.ReadInt32("Item Random Property ID"' i);                  packet.ReadXORByte(creatorGuid[i]' 2);                  packet.ReadXORByte(creatorGuid[i]' 5);                  packet.ReadXORByte(creatorGuid[i]' 3);                  packet.ReadUInt32<ItemId>("Item Entry"' i);                  packet.ReadXORByte(itemId[i]' 5);                  packet.ReadXORByte(itemId[i]' 1);                  packet.ReadInt32("Item Slot"' i);                  packet.ReadXORByte(itemId[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 1);                    packet.WriteGuid("Item Id"' itemId[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' creatorGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadXORByte(creatorGuid[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 7);                  packet.ReadXORByte(itemId[i]' 6);                  packet.ReadXORByte(creatorGuid[i]' 6);                  packet.ReadXORByte(itemId[i]' 2);                  packet.ReadInt32("Item Suffix Factor"' i);                  packet.ReadXORByte(itemId[i]' 7);                  packet.ReadXORByte(itemId[i]' 3);                  packet.ReadXORByte(creatorGuid[i]' 0);                  packet.ReadInt32("Unk UInt32"' i);                  packet.ReadXORByte(itemId[i]' 0);                  packet.ReadInt32("Item Random Property ID"' i);                  packet.ReadXORByte(creatorGuid[i]' 2);                  packet.ReadXORByte(creatorGuid[i]' 5);                  packet.ReadXORByte(creatorGuid[i]' 3);                  packet.ReadUInt32<ItemId>("Item Entry"' i);                  packet.ReadXORByte(itemId[i]' 5);                  packet.ReadXORByte(itemId[i]' 1);                  packet.ReadInt32("Item Slot"' i);                  packet.ReadXORByte(itemId[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 1);                    packet.WriteGuid("Item Id"' itemId[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' creatorGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadXORByte(creatorGuid[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 7);                  packet.ReadXORByte(itemId[i]' 6);                  packet.ReadXORByte(creatorGuid[i]' 6);                  packet.ReadXORByte(itemId[i]' 2);                  packet.ReadInt32("Item Suffix Factor"' i);                  packet.ReadXORByte(itemId[i]' 7);                  packet.ReadXORByte(itemId[i]' 3);                  packet.ReadXORByte(creatorGuid[i]' 0);                  packet.ReadInt32("Unk UInt32"' i);                  packet.ReadXORByte(itemId[i]' 0);                  packet.ReadInt32("Item Random Property ID"' i);                  packet.ReadXORByte(creatorGuid[i]' 2);                  packet.ReadXORByte(creatorGuid[i]' 5);                  packet.ReadXORByte(creatorGuid[i]' 3);                  packet.ReadUInt32<ItemId>("Item Entry"' i);                  packet.ReadXORByte(itemId[i]' 5);                  packet.ReadXORByte(itemId[i]' 1);                  packet.ReadInt32("Item Slot"' i);                  packet.ReadXORByte(itemId[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 1);                    packet.WriteGuid("Item Id"' itemId[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' creatorGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadXORByte(creatorGuid[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 7);                  packet.ReadXORByte(itemId[i]' 6);                  packet.ReadXORByte(creatorGuid[i]' 6);                  packet.ReadXORByte(itemId[i]' 2);                  packet.ReadInt32("Item Suffix Factor"' i);                  packet.ReadXORByte(itemId[i]' 7);                  packet.ReadXORByte(itemId[i]' 3);                  packet.ReadXORByte(creatorGuid[i]' 0);                  packet.ReadInt32("Unk UInt32"' i);                  packet.ReadXORByte(itemId[i]' 0);                  packet.ReadInt32("Item Random Property ID"' i);                  packet.ReadXORByte(creatorGuid[i]' 2);                  packet.ReadXORByte(creatorGuid[i]' 5);                  packet.ReadXORByte(creatorGuid[i]' 3);                  packet.ReadUInt32<ItemId>("Item Entry"' i);                  packet.ReadXORByte(itemId[i]' 5);                  packet.ReadXORByte(itemId[i]' 1);                  packet.ReadInt32("Item Slot"' i);                  packet.ReadXORByte(itemId[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 1);                    packet.WriteGuid("Item Id"' itemId[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' creatorGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadXORByte(creatorGuid[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 7);                  packet.ReadXORByte(itemId[i]' 6);                  packet.ReadXORByte(creatorGuid[i]' 6);                  packet.ReadXORByte(itemId[i]' 2);                  packet.ReadInt32("Item Suffix Factor"' i);                  packet.ReadXORByte(itemId[i]' 7);                  packet.ReadXORByte(itemId[i]' 3);                  packet.ReadXORByte(creatorGuid[i]' 0);                  packet.ReadInt32("Unk UInt32"' i);                  packet.ReadXORByte(itemId[i]' 0);                  packet.ReadInt32("Item Random Property ID"' i);                  packet.ReadXORByte(creatorGuid[i]' 2);                  packet.ReadXORByte(creatorGuid[i]' 5);                  packet.ReadXORByte(creatorGuid[i]' 3);                  packet.ReadUInt32<ItemId>("Item Entry"' i);                  packet.ReadXORByte(itemId[i]' 5);                  packet.ReadXORByte(itemId[i]' 1);                  packet.ReadInt32("Item Slot"' i);                  packet.ReadXORByte(itemId[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 1);                    packet.WriteGuid("Item Id"' itemId[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' creatorGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadXORByte(creatorGuid[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 7);                  packet.ReadXORByte(itemId[i]' 6);                  packet.ReadXORByte(creatorGuid[i]' 6);                  packet.ReadXORByte(itemId[i]' 2);                  packet.ReadInt32("Item Suffix Factor"' i);                  packet.ReadXORByte(itemId[i]' 7);                  packet.ReadXORByte(itemId[i]' 3);                  packet.ReadXORByte(creatorGuid[i]' 0);                  packet.ReadInt32("Unk UInt32"' i);                  packet.ReadXORByte(itemId[i]' 0);                  packet.ReadInt32("Item Random Property ID"' i);                  packet.ReadXORByte(creatorGuid[i]' 2);                  packet.ReadXORByte(creatorGuid[i]' 5);                  packet.ReadXORByte(creatorGuid[i]' 3);                  packet.ReadUInt32<ItemId>("Item Entry"' i);                  packet.ReadXORByte(itemId[i]' 5);                  packet.ReadXORByte(itemId[i]' 1);                  packet.ReadInt32("Item Slot"' i);                  packet.ReadXORByte(itemId[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 1);                    packet.WriteGuid("Item Id"' itemId[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' creatorGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadXORByte(creatorGuid[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 7);                  packet.ReadXORByte(itemId[i]' 6);                  packet.ReadXORByte(creatorGuid[i]' 6);                  packet.ReadXORByte(itemId[i]' 2);                  packet.ReadInt32("Item Suffix Factor"' i);                  packet.ReadXORByte(itemId[i]' 7);                  packet.ReadXORByte(itemId[i]' 3);                  packet.ReadXORByte(creatorGuid[i]' 0);                  packet.ReadInt32("Unk UInt32"' i);                  packet.ReadXORByte(itemId[i]' 0);                  packet.ReadInt32("Item Random Property ID"' i);                  packet.ReadXORByte(creatorGuid[i]' 2);                  packet.ReadXORByte(creatorGuid[i]' 5);                  packet.ReadXORByte(creatorGuid[i]' 3);                  packet.ReadUInt32<ItemId>("Item Entry"' i);                  packet.ReadXORByte(itemId[i]' 5);                  packet.ReadXORByte(itemId[i]' 1);                  packet.ReadInt32("Item Slot"' i);                  packet.ReadXORByte(itemId[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 1);                    packet.WriteGuid("Item Id"' itemId[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' creatorGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadXORByte(creatorGuid[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 7);                  packet.ReadXORByte(itemId[i]' 6);                  packet.ReadXORByte(creatorGuid[i]' 6);                  packet.ReadXORByte(itemId[i]' 2);                  packet.ReadInt32("Item Suffix Factor"' i);                  packet.ReadXORByte(itemId[i]' 7);                  packet.ReadXORByte(itemId[i]' 3);                  packet.ReadXORByte(creatorGuid[i]' 0);                  packet.ReadInt32("Unk UInt32"' i);                  packet.ReadXORByte(itemId[i]' 0);                  packet.ReadInt32("Item Random Property ID"' i);                  packet.ReadXORByte(creatorGuid[i]' 2);                  packet.ReadXORByte(creatorGuid[i]' 5);                  packet.ReadXORByte(creatorGuid[i]' 3);                  packet.ReadUInt32<ItemId>("Item Entry"' i);                  packet.ReadXORByte(itemId[i]' 5);                  packet.ReadXORByte(itemId[i]' 1);                  packet.ReadInt32("Item Slot"' i);                  packet.ReadXORByte(itemId[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 1);                    packet.WriteGuid("Item Id"' itemId[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' creatorGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadXORByte(creatorGuid[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 7);                  packet.ReadXORByte(itemId[i]' 6);                  packet.ReadXORByte(creatorGuid[i]' 6);                  packet.ReadXORByte(itemId[i]' 2);                  packet.ReadInt32("Item Suffix Factor"' i);                  packet.ReadXORByte(itemId[i]' 7);                  packet.ReadXORByte(itemId[i]' 3);                  packet.ReadXORByte(creatorGuid[i]' 0);                  packet.ReadInt32("Unk UInt32"' i);                  packet.ReadXORByte(itemId[i]' 0);                  packet.ReadInt32("Item Random Property ID"' i);                  packet.ReadXORByte(creatorGuid[i]' 2);                  packet.ReadXORByte(creatorGuid[i]' 5);                  packet.ReadXORByte(creatorGuid[i]' 3);                  packet.ReadUInt32<ItemId>("Item Entry"' i);                  packet.ReadXORByte(itemId[i]' 5);                  packet.ReadXORByte(itemId[i]' 1);                  packet.ReadInt32("Item Slot"' i);                  packet.ReadXORByte(itemId[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 1);                    packet.WriteGuid("Item Id"' itemId[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' creatorGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,VoidStorageHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\VoidStorageHandler.cs,HandleVoidStorageContents,The following statement contains a magic number: for (int i = 0; i < count; ++i)              {                  packet.ReadXORByte(creatorGuid[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 7);                  packet.ReadXORByte(itemId[i]' 6);                  packet.ReadXORByte(creatorGuid[i]' 6);                  packet.ReadXORByte(itemId[i]' 2);                  packet.ReadInt32("Item Suffix Factor"' i);                  packet.ReadXORByte(itemId[i]' 7);                  packet.ReadXORByte(itemId[i]' 3);                  packet.ReadXORByte(creatorGuid[i]' 0);                  packet.ReadInt32("Unk UInt32"' i);                  packet.ReadXORByte(itemId[i]' 0);                  packet.ReadInt32("Item Random Property ID"' i);                  packet.ReadXORByte(creatorGuid[i]' 2);                  packet.ReadXORByte(creatorGuid[i]' 5);                  packet.ReadXORByte(creatorGuid[i]' 3);                  packet.ReadUInt32<ItemId>("Item Entry"' i);                  packet.ReadXORByte(itemId[i]' 5);                  packet.ReadXORByte(itemId[i]' 1);                  packet.ReadInt32("Item Slot"' i);                  packet.ReadXORByte(itemId[i]' 4);                  packet.ReadXORByte(creatorGuid[i]' 1);                    packet.WriteGuid("Item Id"' itemId[i]' i);                  packet.WriteGuid("Item Player Creator Guid"' creatorGuid[i]' i);              }
Magic Number,WowPacketParserModule.V5_4_8_18291.Parsers,WorldStateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\WorldStateHandler.cs,HandleInitWorldStates,The following statement contains a magic number: var numFields = packet.ReadBits("Field Count"' 21);
Missing Default,WowPacketParserModule.V5_4_8_18291.Parsers,MovementHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\MovementHandler.cs,ReadPlayerMovementInfo,The following switch statement is missing a default case: switch (movementInfo)                  {                      case MovementStatusElements.MSEHasGuidByte0:                          guid[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte1:                          guid[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte2:                          guid[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte3:                          guid[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte4:                          guid[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte5:                          guid[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte6:                          guid[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasGuidByte7:                          guid[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte0:                          if (hasTransportData)                              transportGUID[0] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte1:                          if (hasTransportData)                              transportGUID[1] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte2:                          if (hasTransportData)                              transportGUID[2] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte3:                          if (hasTransportData)                              transportGUID[3] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte4:                          if (hasTransportData)                              transportGUID[4] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte5:                          if (hasTransportData)                              transportGUID[5] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte6:                          if (hasTransportData)                              transportGUID[6] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportGuidByte7:                          if (hasTransportData)                              transportGUID[7] = packet.ReadBit();                          break;                      case MovementStatusElements.MSEGuidByte0:                          packet.ReadXORByte(guid' 0);                          break;                      case MovementStatusElements.MSEGuidByte1:                          packet.ReadXORByte(guid' 1);                          break;                      case MovementStatusElements.MSEGuidByte2:                          packet.ReadXORByte(guid' 2);                          break;                      case MovementStatusElements.MSEGuidByte3:                          packet.ReadXORByte(guid' 3);                          break;                      case MovementStatusElements.MSEGuidByte4:                          packet.ReadXORByte(guid' 4);                          break;                      case MovementStatusElements.MSEGuidByte5:                          packet.ReadXORByte(guid' 5);                          break;                      case MovementStatusElements.MSEGuidByte6:                          packet.ReadXORByte(guid' 6);                          break;                      case MovementStatusElements.MSEGuidByte7:                          packet.ReadXORByte(guid' 7);                          break;                      case MovementStatusElements.MSETransportGuidByte0:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 0);                          break;                      case MovementStatusElements.MSETransportGuidByte1:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 1);                          break;                      case MovementStatusElements.MSETransportGuidByte2:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 2);                          break;                      case MovementStatusElements.MSETransportGuidByte3:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 3);                          break;                      case MovementStatusElements.MSETransportGuidByte4:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 4);                          break;                      case MovementStatusElements.MSETransportGuidByte5:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 5);                          break;                      case MovementStatusElements.MSETransportGuidByte6:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 6);                          break;                      case MovementStatusElements.MSETransportGuidByte7:                          if (hasTransportData)                              packet.ReadXORByte(transportGUID' 7);                          break;                      case MovementStatusElements.MSEHasMovementFlags:                          hasMovementFlags = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasMovementFlags2:                          hasMovementFlags2 = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTimestamp:                          hasTimestamp = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasOrientation:                          hasOrientation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportData:                          hasTransportData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime2:                          if (hasTransportData)                              hasTransportTime2 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasTransportTime3:                          if (hasTransportData)                              hasTransportTime3 = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasPitch:                          hasPitch = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallData:                          hasFallData = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasFallDirection:                          if (hasFallData)                              hasFallDirection = packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSplineElevation:                          hasSplineElevation = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasSpline:                          packet.ReadBit("hasSpline");                          break;                      case MovementStatusElements.MSECounterCount:                          count = packet.ReadBits(22);                          break;                      case MovementStatusElements.MSECount:                          packet.ReadInt32("Counter");                          break;                      case MovementStatusElements.MSECounter:                          for (var i = 0; i < count; i++)                              packet.ReadInt32("Unk Int"' i);                          break;                      case MovementStatusElements.MSEMovementFlags:                          if (hasMovementFlags)                              packet.ReadBitsE<MovementFlag>("Movement Flags"' 30);                          break;                      case MovementStatusElements.MSEMovementFlags2:                          if (hasMovementFlags2)                              packet.ReadBitsE<MovementFlagExtra>("Extra Movement Flags"' 13);                          break;                      case MovementStatusElements.MSETimestamp:                          if (hasTimestamp)                              packet.ReadInt32("Timestamp");                          break;                      case MovementStatusElements.MSEPositionX:                          pos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionY:                          pos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEPositionZ:                          pos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSEOrientation:                          if (packet.Opcode == CoreOpcode.GetOpcode(Opcode.SMSG_MOVE_TELEPORT' Direction.ServerToClient))                              pos.O = packet.ReadSingle();                          else                          {                              if (hasOrientation)                                  pos.O = packet.ReadSingle();                          }                          break;                      case MovementStatusElements.MSETransportPositionX:                          if (hasTransportData)                              transportPos.X = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionY:                          if (hasTransportData)                              transportPos.Y = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportPositionZ:                          if (hasTransportData)                              transportPos.Z = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportOrientation:                          if (hasTransportData)                              transportPos.O = packet.ReadSingle();                          break;                      case MovementStatusElements.MSETransportSeat:                          if (hasTransportData)                              packet.ReadByte("Seat");                          break;                      case MovementStatusElements.MSETransportTime:                          if (hasTransportData)                              packet.ReadInt32("Transport Time");                          break;                      case MovementStatusElements.MSETransportTime2:                          if (hasTransportData && hasTransportTime2)                              packet.ReadInt32("Transport Time 2");                          break;                      case MovementStatusElements.MSETransportTime3:                          if (hasTransportData && hasTransportTime3)                              packet.ReadInt32("Transport Time 3");                          break;                      case MovementStatusElements.MSEPitch:                          if (hasPitch)                              packet.ReadSingle("Pitch");                          break;                      case MovementStatusElements.MSEFallTime:                          if (hasFallData)                              packet.ReadInt32("Fall time");                          break;                      case MovementStatusElements.MSEFallVerticalSpeed:                          if (hasFallData)                              packet.ReadSingle("Vertical Speed");                          break;                      case MovementStatusElements.MSEFallCosAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Angle");                          break;                      case MovementStatusElements.MSEFallSinAngle:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Fall Sin");                          break;                      case MovementStatusElements.MSEFallHorizontalSpeed:                          if (hasFallData && hasFallDirection)                              packet.ReadSingle("Horizontal Speed");                          break;                      case MovementStatusElements.MSESplineElevation:                          if (hasSplineElevation)                              packet.ReadSingle("Spline elevation");                          break;                      case MovementStatusElements.MSEHasUnkTime:                          hasUnkTime = !packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkTime:                          if (hasUnkTime)                              packet.ReadInt32("Unk Time");                          break;                      case MovementStatusElements.MSEZeroBit:                      case MovementStatusElements.MSEOneBit:                          packet.ReadBit();                          break;                      case MovementStatusElements.MSEHasUnkBitA:                          hasUnkBitA = packet.ReadBit();                          break;                      case MovementStatusElements.MSEUnkBitABit:                          if (hasUnkBitA)                              packet.ReadBit("UnkBitABit");                          break;                      case MovementStatusElements.MSEUnkBitAByte:                          if (hasUnkBitA)                              packet.ReadByte("MSEUnkBitAByte");                          break;                  }
Missing Default,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,HandleUpdateObject,The following switch statement is missing a default case: switch (typeString)                  {                      case "Values":                          {                              var guid = packet.ReadPackedGuid("GUID"' i);                                WoWObject obj;                              var updates = CoreParsers.UpdateHandler.ReadValuesUpdateBlock(packet' guid.GetObjectType()' i' false);                                if (Storage.Objects.TryGetValue(guid' out obj))                              {                                  if (obj.ChangedUpdateFieldsList == null)                                      obj.ChangedUpdateFieldsList = new List<Dictionary<int' UpdateField>>();                                  obj.ChangedUpdateFieldsList.Add(updates);                              }                                break;                          }                      case "CreateObject1":                      case "CreateObject2": // Might != CreateObject1 on Cata                          {                              var guid = packet.ReadPackedGuid("GUID"' i);                              ReadCreateObjectBlock(packet' guid' map' i);                              break;                          }                      case "DestroyObjects":                          {                              CoreParsers.UpdateHandler.ReadObjectsBlock(packet' i);                              break;                          }                  }
Missing Default,WowPacketParserModule.V5_4_8_18291.Parsers,UpdateHandler,C:\repos\TrinityCore_WowPacketParser\WowPacketParserModule.V5_4_8_18291\Parsers\UpdateHandler.cs,ReadMovementUpdateBlock,The following switch statement is missing a default case: switch (type)                          {                              case 1:                                  splineType = SplineType.Normal;                                  break;                              case 2:                                  splineType = SplineType.FacingSpot;                                  break;                              case 3:                                  splineType = SplineType.FacingTarget;                                  break;                              case 4:                                  splineType = SplineType.FacingAngle;                                  break;                          }
